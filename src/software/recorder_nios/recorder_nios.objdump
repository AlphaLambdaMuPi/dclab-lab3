
recorder_nios.elf:     file format elf32-littlenios2
recorder_nios.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000244

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x00019e84 memsz 0x00019e84 flags r-x
    LOAD off    0x0001aea4 vaddr 0x08019ea4 paddr 0x0802459c align 2**12
         filesz 0x0000a6f8 memsz 0x0000a6f8 flags rw-
    LOAD off    0x00025c94 vaddr 0x0802ec94 paddr 0x0802ec94 align 2**12
         filesz 0x00000000 memsz 0x00007bfc flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000196bc  08000244  08000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005a4  08019900  08019900  0001a900  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       0000a6f8  08019ea4  0802459c  0001aea4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00007bfc  0802ec94  0802ec94  00025c94  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller 00000000  08036890  08036890  0002559c  2**0
                  CONTENTS
  7 .onchip_memory2 00000000  10220000  10220000  0002559c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0002559c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001228  00000000  00000000  000255c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0003631a  00000000  00000000  000267e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000c877  00000000  00000000  0005cb02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f9e0  00000000  00000000  00069379  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00003b14  00000000  00000000  00078d5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00006996  00000000  00000000  0007c870  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001815f  00000000  00000000  00083206  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0009b368  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001aa0  00000000  00000000  0009b398  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  000a2c6e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000009  00000000  00000000  000a2c74  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a2c7d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a2c7e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a2c7f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a2c83  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a2c87  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   00000009  00000000  00000000  000a2c8b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    00000009  00000000  00000000  000a2c94  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   00000009  00000000  00000000  000a2c9d  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000004  00000000  00000000  000a2ca6  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000024  00000000  00000000  000a2caa  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00081302  00000000  00000000  000a2cce  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000244 l    d  .text	00000000 .text
08019900 l    d  .rodata	00000000 .rodata
08019ea4 l    d  .rwdata	00000000 .rwdata
0802ec94 l    d  .bss	00000000 .bss
08036890 l    d  .sdram_controller	00000000 .sdram_controller
10220000 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../recorder_nios_bsp//obj/HAL/src/crt0.o
0800028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 arial18.c
00000000 l    df *ABS*	00000000 arial22.c
00000000 l    df *ABS*	00000000 arial40.c
00000000 l    df *ABS*	00000000 Color.cpp
00000000 l    df *ABS*	00000000 lcd_core.cpp
00000000 l    df *ABS*	00000000 audio_core.cpp
080244c8 l     O .rwdata	00000001 _ZStL19piecewise_construct
0800050c l     F .text	00000024 _ZL20__gthread_key_deletei
080005cc l     F .text	000000b8 _ZN5AudioL16alt_read_wrapperEPji
080244cc l     O .rwdata	00000004 _ZN5AudioL11BUFFER_SIZEE
00000000 l    df *ABS*	00000000 main.cpp
080244d0 l     O .rwdata	00000001 _ZStL19piecewise_construct
0800080c l     F .text	00000024 _ZL20__gthread_key_deletei
080244d4 l     O .rwdata	00000004 _ZN5AudioL11BUFFER_SIZEE
00000000 l    df *ABS*	00000000 class_type_info.cc
00000000 l    df *ABS*	00000000 del_op.cc
00000000 l    df *ABS*	00000000 si_class_type_info.cc
00000000 l    df *ABS*	00000000 tinfo.cc
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08019a8a l     O .rodata	00000010 zeroes.4255
0800396c l     F .text	000000bc __sbprintf
08019a9a l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08003b7c l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08005738 l     F .text	00000008 __fp_lock
08005740 l     F .text	00000008 __fp_unlock
08005754 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08022d54 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
08023198 l     O .rwdata	00000020 lc_ctype_charset
08023178 l     O .rwdata	00000020 lc_message_charset
080231b8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08019acc l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
08008324 l     F .text	000000fc __sprint_r.part.0
08019c00 l     O .rodata	00000010 blanks.4199
08019bf0 l     O .rodata	00000010 zeroes.4200
0800972c l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800ac30 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800d35c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800d47c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800d4a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800d5a8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800d69c l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800d780 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0800d978 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08024510 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800dbd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
08024514 l     O .rwdata	00000004 lockid
0802ecd4 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
08024518 l     O .rwdata	00000004 lockid
0802ecdc l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0800f608 l     F .text	00000044 OS_InitMisc
0800f64c l     F .text	00000068 OS_InitRdyList
0800f7ac l     F .text	000000e0 OS_InitTCBList
0800f52c l     F .text	000000dc OS_InitEventList
0800f6b4 l     F .text	0000007c OS_InitTaskIdle
0800f730 l     F .text	0000007c OS_InitTaskStat
0800fa0c l     F .text	00000070 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
08011800 l     F .text	00000110 OS_FlagTaskRdy
08011558 l     F .text	000001c4 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
08015c9c l     F .text	00000038 alt_dev_reg
08023398 l     O .rwdata	0000106c jtag_uart
08024404 l     O .rwdata	00000030 audio_and_video_config
08024434 l     O .rwdata	00000030 audio
08024464 l     O .rwdata	00000054 video_pixel_buffer_dma
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08016204 l     F .text	000002a8 altera_avalon_jtag_uart_irq
080164ac l     F .text	00000110 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08016c84 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08018564 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
080187d0 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08018ab8 l     F .text	00000050 alt_get_errno
08018b08 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0802ed40 g     O .bss	00000004 alt_instruction_exception_handler
08000f1c g     F .text	00000008 _ZNKSt9type_info15__is_function_pEv
08007a94 g     F .text	00000074 _mprec_log10
08024566 g     O .rwdata	00000002 OSTaskNameSize
08007b80 g     F .text	0000008c __any_on
08009c98 g     F .text	00000054 _isatty_r
08019ad8 g     O .rodata	00000028 __mprec_tinytens
0800d8a4 g     F .text	000000d4 alt_main
08017df8 g     F .text	00000258 alt_up_pixel_buffer_dma_draw_vline
080017ac g     F .text	000000a8 _puts_r
08036790 g     O .bss	00000100 alt_irq
08009cec g     F .text	0000005c _lseek_r
08012064 g     F .text	000000d0 OS_MemInit
0802459c g       *ABS*	00000000 __flash_rwdata_start
08015c38 g     F .text	00000064 OSTimeSet
0800bec4 g     F .text	00000084 .hidden __eqdf2
08000340 g     F .text	00000038 _ZN3LCD4initEv
0800e284 g     F .text	00000610 OSEventPendMulti
08017014 g     F .text	00000060 alt_up_audio_read_fifo_avail
08036890 g       *ABS*	00000000 __alt_heap_start
08019114 g     F .text	00000020 OSTaskCreateHook
0802f544 g     O .bss	00002000 task1_stk
08001770 g     F .text	0000003c printf
0802453e g     O .rwdata	00000002 OSMboxEn
08017074 g     F .text	00000068 alt_up_audio_record_r
0800e8e8 g     F .text	0000007c OSIntEnter
08009ef8 g     F .text	0000009c _wcrtomb_r
080082c0 g     F .text	0000005c __sseek
08005a88 g     F .text	00000010 __sinit
08009da4 g     F .text	00000138 __swbuf_r
0802454e g     O .rwdata	00000002 OSQEn
08000c4c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD2Ev
08006534 g     F .text	0000007c _setlocale_r
080199b4  w    O .rodata	00000025 _ZTSN10__cxxabiv120__si_class_type_infoE
080058f0 g     F .text	00000068 __sfmoreglue
0800df58 g     F .text	000000d0 __malloc_unlock
08019170 g     F .text	0000001c OSTaskStatHook
0802ece4 g     O .bss	00000001 OSLockNesting
0802458c g     O .rwdata	00000002 OSDataSize
0802ece5 g     O .bss	00000001 OSRunning
08016f84 g     F .text	00000090 alt_up_audio_reset_audio_core
0802235c g     O .rwdata	000005f0 arial40pos
080069ec g     F .text	0000015c memmove
080191a8 g     F .text	0000001c OSInitHookBegin
08024584 g     O .rwdata	00000002 OSTmrSize
08005a70 g     F .text	00000018 _cleanup
08006c6c g     F .text	000000a8 _Balloc
0802ece8 g     O .bss	00000004 OSIdleCtr
08017550 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
0800bf48 g     F .text	000000e0 .hidden __gtdf2
08018ec8 g     F .text	00000020 altera_nios2_gen2_irq_init
08018f94 g       .text	00000000 OSStartTsk
00000000  w      *UND*	00000000 __errno
0800fd34 g     F .text	000002d4 OS_TCBInit
08017510 g     F .text	00000040 alt_up_pixel_buffer_dma_open_dev
08000000 g     F .entry	0000001c __reset
080244c0  w    O .rwdata	00000007 _ZTS5Color
0802458a g     O .rwdata	00000002 OSTmrWheelTblSize
080004e4 g     F .text	00000028 _ZN3LCD7rendersEPKcii
08000020 g       *ABS*	00000000 __flash_exceptions_start
0802452a g     O .rwdata	00000002 OSEventSize
0802ecec g     O .bss	00000001 OSPrioHighRdy
08009c40 g     F .text	00000058 _fstat_r
0802f144 g     O .bss	00000400 _ZN5Audio8_tmp_bufE
08019134 g     F .text	00000020 OSTaskDelHook
0802ecb4 g     O .bss	00000004 errno
0800823c g     F .text	00000008 __seofread
08018f74 g       .text	00000000 OSStartHighRdy
08014548 g     F .text	000001ec OSTaskCreateExt
08000000 g       *ABS*	00000000 __alt_mem_sdram_controller
080110a4 g     F .text	00000068 OSFlagPendGetFlagsRdy
0802456a g     O .rwdata	00000002 OSTaskStatStkSize
08016f44 g     F .text	00000040 alt_up_audio_write_interrupt_pending
08010194 g     F .text	00000308 OSFlagAccept
08012738 g     F .text	000000b8 OSQFlush
08012134 g     F .text	00000140 OSQAccept
0802eccc g     O .bss	00000004 alt_argv
0802c4b8 g       *ABS*	00000000 _gp
08000290 g     F .text	00000030 _ZN5ColorC1Ev
0801438c g     F .text	000001bc OSTaskCreate
080176e4 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
08013e4c g     F .text	00000540 OSTaskChangePrio
0802ece0 g     O .bss	00000004 alt_heapsem
08010008 g     F .text	0000018c OSDebugInit
08014734 g     F .text	000003e0 OSTaskDel
08023218 g     O .rwdata	00000180 alt_fd_list
0803356c g     O .bss	00000370 OSFlagTbl
0800f318 g     F .text	000000b4 OS_EventTaskRemove
08018710 g     F .text	00000090 alt_find_dev
080068b4 g     F .text	00000138 memcpy
08024554 g     O .rwdata	00000002 OSRdyTblSize
08019900  w    O .rodata	00000010 _ZTV5Color
08005748 g     F .text	0000000c _cleanup_r
080009f8 g     F .text	00000018 _ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_
0800d184 g     F .text	000000d0 .hidden __floatsidf
08018890 g     F .text	00000078 alt_io_redirect
0800c028 g     F .text	000000e0 .hidden __ltdf2
08019900 g       *ABS*	00000000 __DTOR_END__
08000a10 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD1Ev
08001854 g     F .text	00000014 puts
080194b8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0800e028 g     F .text	00000120 OSEventNameGet
08024538 g     O .rwdata	00000002 OSFlagMax
08008174 g     F .text	00000074 __fpclassifyd
0801fe04 g     O .rwdata	00000180 arial22cnt
080079f0 g     F .text	000000a4 __ratio
0800e964 g     F .text	000000f4 OSIntExit
08009708 g     F .text	00000024 __vfiprintf_internal
08024572 g     O .rwdata	00000002 OSTCBSize
0801745c g     F .text	00000050 alt_up_audio_read_fifo_head
080177a0 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0802eced g     O .bss	00000001 OSPrioCur
08016710 g     F .text	000002b4 altera_avalon_jtag_uart_read
08000f74 g     F .text	00000014 malloc
08001744 g     F .text	0000002c _printf_r
08000684 g     F .text	000000e0 _ZN5Audio4readEv
0800ad4c g     F .text	00000008 .hidden __udivsi3
0800d5f8 g     F .text	000000a4 isatty
08024558 g     O .rwdata	00000002 OSStkWidth
08019b28 g     O .rodata	000000c8 __mprec_tens
0802454c g     O .rwdata	00000002 OSPtrSize
08017be4 g     F .text	00000214 alt_up_pixel_buffer_dma_draw_hline
080065b0 g     F .text	0000000c __locale_charset
0802452c g     O .rwdata	00000002 OSEventTblSize
08018ee8 g       .text	00000000 OSCtxSw
0801942c g     F .text	0000008c alt_icache_flush
0802ecb0 g     O .bss	00000004 __malloc_top_pad
0802ecf0 g     O .bss	00000004 OSTCBList
0802ecc4 g     O .bss	00000004 alt_fd_list_lock
080244f0 g     O .rwdata	00000004 __mb_cur_max
080065e0 g     F .text	0000000c _localeconv_r
08007078 g     F .text	0000003c __i2b
08005eec g     F .text	000004c0 __sfvwrite_r
08000ac0 g     F .text	000000b8 _ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj
080338dc g     O .bss	00000c30 OSMemTbl
0802ecf4 g     O .bss	00000001 OSTickStepState
08001868 g     F .text	00000054 _sbrk_r
08018114 g     F .text	00000080 helper_plot_pixel
0801ff84 g     O .rwdata	0000076c arial22pos
08000378 g     F .text	00000034 _ZN3LCD5clearEv
08019a24  w    O .rodata	00000020 _ZTVSt9type_info
08024550 g     O .rwdata	00000002 OSQMax
0803450c g     O .bss	00000800 OSTaskStatStk
08011c94 g     F .text	000000f8 OSMemNameGet
08000764  w    F .text	00000064 _ZN5Audio8buf_pushEj
08024530 g     O .rwdata	00000002 OSFlagEn
08009d48 g     F .text	0000005c _read_r
08024576 g     O .rwdata	00000002 OSTimeTickHookEn
08012c58 g     F .text	00000168 OSQPost
08011910 g     F .text	000000a0 OS_FlagUnlink
08024508 g     O .rwdata	00000004 alt_max_fd
0800f8dc g     F .text	00000064 OS_MemCopy
080174ac g     F .text	00000064 alt_up_audio_write_fifo_head
0800f940 g     F .text	000000cc OS_Sched
0800995c g     F .text	000000f0 _fclose_r
08011ba4 g     F .text	000000f0 OSMemGet
08014e14 g     F .text	000001c0 OSTaskNameSet
08005708 g     F .text	00000030 fflush
0802ecac g     O .bss	00000004 __malloc_max_sbrked_mem
0802ecf8 g     O .bss	00000004 OSCtxSwCtr
0801918c g     F .text	0000001c OSTimeTickHook
08018908 g     F .text	000001b0 alt_irq_register
080003ac g     F .text	0000005c _ZN3LCD9rgb2colorEhhh
0802453a g     O .rwdata	00000002 OSFlagNameSize
0800f3cc g     F .text	000000fc OS_EventTaskRemoveMulti
0800ad5c g     F .text	0000089c .hidden __adddf3
080199e8  w    O .rodata	0000002c _ZTVN10__cxxabiv120__si_class_type_infoE
0800f1cc g     F .text	0000014c OS_EventTaskWaitMulti
08007798 g     F .text	0000011c __b2d
08024552 g     O .rwdata	00000002 OSQSize
080177d4 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
0800a6a0 g     F .text	00000590 .hidden __umoddi3
0800d7d0 g     F .text	000000d4 lseek
0801375c g     F .text	00000268 OSSemPend
08000a54 g     F .text	0000006c _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE
08000c48 g     F .text	00000004 _ZdlPv
080244e8 g     O .rwdata	00000004 _global_impure_ptr
08007c0c g     F .text	00000568 _realloc_r
0802453c g     O .rwdata	00000002 OSLowestPrio
08036890 g       *ABS*	00000000 __bss_end
080191fc g     F .text	00000020 OSTCBInitHook
080178fc g     F .text	000002e8 alt_up_pixel_buffer_dma_draw_box
08024582 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
08018dc4 g     F .text	00000104 alt_tick
0800a0e0 g     F .text	000005c0 .hidden __udivdi3
08000408 g     F .text	000000dc _ZN3LCD6renderEcii
08009a60 g     F .text	00000184 _fputwc_r
08024524 g     O .rwdata	00000002 OSEventEn
08019b00 g     O .rodata	00000028 __mprec_bigtens
08006e5c g     F .text	00000104 __s2b
0802eca0 g     O .bss	00000004 _ZN5Audio8buf_tailE
0802457e g     O .rwdata	00000002 OSTmrCfgNameSize
0800d254 g     F .text	000000a4 .hidden __floatunsidf
08007540 g     F .text	00000060 __mcmp
08016d7c g     F .text	00000040 alt_up_audio_open_dev
0802ec9c g     O .bss	00000004 _ZN5Audio8buf_headE
08005aa8 g     F .text	00000018 __fp_lock_all
0801c124 g     O .rwdata	00000180 arial18cnt
0801171c g     F .text	000000e4 OS_FlagInit
080171a4 g     F .text	00000068 alt_up_audio_play_r
08018d2c g     F .text	00000098 alt_alarm_stop
08024560 g     O .rwdata	00000002 OSTaskIdleStkSize
0802ed34 g     O .bss	00000004 alt_irq_active
08013344 g     F .text	000000b0 OSSemAccept
08011ea4 g     F .text	000000d8 OSMemPut
080119b0 g     F .text	000001f4 OSMemCreate
0802ecfc g     O .bss	00000004 OSIdleCtrMax
080000fc g     F .exceptions	000000d4 alt_irq_handler
080231f0 g     O .rwdata	00000028 alt_dev_null
08000598 g     F .text	00000034 _ZN5Audio6wspaceEv
08024574 g     O .rwdata	00000002 OSTicksPerSec
08018ee8 g       .text	00000000 OSIntCtxSw
08019958  w    O .rodata	00000022 _ZTSN10__cxxabiv117__class_type_infoE
08018520 g     F .text	00000044 alt_dcache_flush_all
08006f60 g     F .text	00000068 __hi0bits
08018050 g     F .text	000000c4 alt_up_pixel_buffer_dma_draw_rectangle
0800d0fc g     F .text	00000088 .hidden __fixdfsi
0802ed00 g     O .bss	00000004 OSTCBFreeList
0802459c g       *ABS*	00000000 __ram_rwdata_end
080139c4 g     F .text	0000016c OSSemPendAbort
08000f10 g     F .text	00000004 _ZNSt9type_infoD1Ev
08024500 g     O .rwdata	00000008 alt_dev_list
0800dc24 g     F .text	000000f8 write
08024578 g     O .rwdata	00000002 OSVersionNbr
08000f2c g     F .text	00000004 _ZNSt9type_infoD0Ev
08018194 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_line
08019ea4 g       *ABS*	00000000 __ram_rodata_end
0800d4f8 g     F .text	000000b0 fstat
0800c028 g     F .text	000000e0 .hidden __ledf2
08024520 g     O .rwdata	00000004 OSEndiannessTest
08000860 g     F .text	00000050 _Z5task2Pv
080072b0 g     F .text	00000140 __pow5mult
08008438 g     F .text	000012d0 ___vfiprintf_internal_r
0802ecc0 g     O .bss	00000004 __nlocale_changed
0800ad54 g     F .text	00000008 .hidden __umodsi3
08000f24 g     F .text	00000008 _ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv
08024532 g     O .rwdata	00000002 OSFlagGrpSize
08036890 g       *ABS*	00000000 end
080221dc g     O .rwdata	00000180 arial40cnt
080160c4 g     F .text	00000140 altera_avalon_jtag_uart_init
0800fba0 g     F .text	000000cc OS_TaskStat
080001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
08000b78 g     F .text	000000d0 _ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE
08000530 g     F .text	00000034 _ZN5Audio4initEv
08019900 g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
08000564 g     F .text	00000034 _ZN5Audio6rspaceEv
08016cfc g     F .text	00000080 alt_avalon_timer_sc_init
0800d2f8 g     F .text	00000064 .hidden __clzsi2
08000980 g     F .text	00000078 _ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv
080169c4 g     F .text	000002c0 altera_avalon_jtag_uart_write
08005a98 g     F .text	00000004 __sfp_lock_acquire
080067cc g     F .text	000000e8 memchr
0800f88c g     F .text	00000050 OS_MemClr
080019f8 g     F .text	00001f50 ___vfprintf_internal_r
08018fb8 g     F .text	0000015c OSTaskStkInit
08005bfc g     F .text	000002f0 _free_r
080065bc g     F .text	00000010 __locale_mb_cur_max
0800ef28 g     F .text	00000198 OS_EventTaskRdy
08019730 g     F .text	00000194 __call_exitprocs
0802ed04 g     O .bss	00000001 OSCPUUsage
0802ecbc g     O .bss	00000004 __mlocale_changed
080244e0 g     O .rwdata	00000004 __malloc_sbrk_base
08000244 g     F .text	0000004c _start
0802ed38 g     O .bss	00000004 _alt_tick_rate
080127f0 g     F .text	000002fc OSQPend
08019a14  w    O .rodata	0000000d _ZTSSt9type_info
08015740 g     F .text	00000148 OSTimeDly
08017354 g     F .text	00000108 alt_up_audio_write_fifo
080073f0 g     F .text	00000150 __lshift
0802ed3c g     O .bss	00000004 _alt_nticks
0800d9c8 g     F .text	000000fc read
08015d08 g     F .text	00000258 alt_sys_init
08017274 g     F .text	000000e0 alt_up_audio_read_fifo
0801961c g     F .text	00000114 __register_exitproc
0802ed05 g     O .bss	00000001 OSTaskCtr
08016eb0 g     F .text	00000054 alt_up_audio_disable_write_interrupt
08000c90 g     F .text	00000160 _ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE
08015888 g     F .text	0000015c OSTimeDlyHMSM
080070b4 g     F .text	000001fc __multiply
080165bc g     F .text	00000068 altera_avalon_jtag_uart_close
08019ea4 g       *ABS*	00000000 __ram_rwdata_start
08019900 g       *ABS*	00000000 __ram_rodata_start
08033544 g     O .bss	00000028 __malloc_current_mallinfo
08024526 g     O .rwdata	00000002 OSEventMax
080078b4 g     F .text	0000013c __d2b
08013b30 g     F .text	00000110 OSSemPost
08000f10 g     F .text	00000004 _ZNSt9type_infoD2Ev
0800eae0 g     F .text	000000d8 OSSchedUnlock
08000e8c g     F .text	00000084 _ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE
08015f60 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08019330 g     F .text	000000fc alt_get_fd
0802ed08 g     O .bss	00000004 OSMemFreeList
0800ec24 g     F .text	000000ac OSStatInit
08011494 g     F .text	000000c4 OSFlagQuery
0802455c g     O .rwdata	00000002 OSTaskCreateExtEn
08009844 g     F .text	00000054 _close_r
0801c2a4 g     O .rwdata	000005f0 arial18pos
080002c0 g     F .text	00000048 _ZN5ColorD1Ev
08016e60 g     F .text	00000050 alt_up_audio_enable_write_interrupt
0802ec94 g     O .bss	00000004 _ZN3LCD3devE
080244b8  w    O .rwdata	00000008 _ZTI5Color
080195a0 g     F .text	0000007c memcmp
0800ef0c g     F .text	0000001c OS_Dummy
08016020 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08036890 g       *ABS*	00000000 __alt_stack_base
08016070 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08000c4c g     F .text	00000010 _ZN10__cxxabiv120__si_class_type_infoD1Ev
08003a28 g     F .text	00000154 __swsetup_r
08034d0c g     O .bss	000001e0 OSQTbl
0800b5f8 g     F .text	000008cc .hidden __divdf3
08016e0c g     F .text	00000054 alt_up_audio_disable_read_interrupt
08005958 g     F .text	00000118 __sfp
08007b08 g     F .text	00000078 __copybits
08000f14 g     F .text	00000008 _ZNKSt9type_info14__is_pointer_pEv
0802294c g     O .rwdata	00000408 __malloc_av_
08005aa4 g     F .text	00000004 __sinit_lock_release
0802ed0c g     O .bss	00000004 OSTCBHighRdy
0800c108 g     F .text	00000724 .hidden __muldf3
080081e8 g     F .text	00000054 __sread
08000308 g     F .text	00000038 _ZN5ColorD0Ev
0802ed10 g     O .bss	00000004 OSQFreeList
0802eca4 g     O .bss	00000004 _ZN5Audio7max_latE
0801921c g     F .text	00000114 alt_find_file
080185b4 g     F .text	000000a4 alt_dev_llist_insert
0800de38 g     F .text	00000120 __malloc_lock
0800db24 g     F .text	000000b0 sbrk
08019988  w    O .rodata	0000002c _ZTVN10__cxxabiv117__class_type_infoE
0800e148 g     F .text	0000013c OSEventNameSet
080056ac g     F .text	0000005c _fflush_r
08009898 g     F .text	000000c4 _calloc_r
0802ed14 g     O .bss	00000001 OSRdyGrp
0802ec94 g       *ABS*	00000000 __bss_start
08006b48 g     F .text	00000124 memset
080007c8  w    F .text	00000044 _ZSt3maxIiERKT_S2_S2_
080008b0 g     F .text	000000d0 main
08017144 g     F .text	00000060 alt_up_audio_write_fifo_space
0802ecd0 g     O .bss	00000004 alt_envp
0802eca8 g     O .bss	00000004 __malloc_max_total_mem
08017740 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
08015fc0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08009edc g     F .text	0000001c __swbuf
08019d2c g     O .rodata	00000100 OSUnMapTbl
08024556 g     O .rwdata	00000002 OSSemEn
0801110c g     F .text	00000388 OSFlagPost
0800831c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08009a4c g     F .text	00000014 fclose
0800f0c0 g     F .text	0000010c OS_EventTaskWait
08031544 g     O .bss	00002000 task2_stk
0800fc6c g     F .text	000000c8 OS_TaskStatStkChk
08014b14 g     F .text	00000158 OSTaskDelReq
08003d7c g     F .text	00001728 _dtoa_r
08000f9c g     F .text	000007a8 _malloc_r
0800a054 g     F .text	00000030 __ascii_wctomb
0802450c g     O .rwdata	00000004 alt_errno
0800ebb8 g     F .text	0000006c OSStart
0800dddc g     F .text	0000005c __env_unlock
0801997c  w    O .rodata	0000000c _ZTIN10__cxxabiv117__class_type_infoE
080063ac g     F .text	000000c4 _fwalk
08014fd4 g     F .text	000001f8 OSTaskResume
08011f7c g     F .text	000000e8 OSMemQuery
08024568 g     O .rwdata	00000002 OSTaskStatEn
08024542 g     O .rwdata	00000002 OSMemMax
08012dc0 g     F .text	00000170 OSQPostFront
0800ac9c g     F .text	00000054 .hidden __divsi3
0802ed15 g     O .bss	00000003 OSRdyTbl
0802451c g     O .rwdata	00000002 OSDebugEn
08005ad8 g     F .text	00000124 _malloc_trim_r
08019900 g       *ABS*	00000000 __CTOR_END__
08024534 g     O .rwdata	00000002 OSFlagNodeSize
0802457c g     O .rwdata	00000002 OSTmrCfgMax
080018bc g     F .text	000000a4 strcmp
08012274 g     F .text	000001fc OSQCreate
08014c6c g     F .text	000001a8 OSTaskNameGet
08019900 g       *ABS*	00000000 __flash_rodata_start
08012f30 g     F .text	0000020c OSQPostOpt
0800ecd0 g     F .text	0000021c OSTimeTick
08024564 g     O .rwdata	00000002 OSTaskMax
08019900 g       *ABS*	00000000 __DTOR_LIST__
080133f4 g     F .text	00000100 OSSemCreate
08024588 g     O .rwdata	00000002 OSTmrWheelSize
0800bec4 g     F .text	00000084 .hidden __nedf2
0802455e g     O .rwdata	00000002 OSTaskDelEn
08013c40 g     F .text	00000110 OSSemQuery
08012470 g     F .text	000002c8 OSQDel
08012aec g     F .text	0000016c OSQPendAbort
08015cd4 g     F .text	00000034 alt_irq_init
0800dac4 g     F .text	00000060 alt_release_fd
08000c5c g     F .text	00000034 _ZN10__cxxabiv120__si_class_type_infoD0Ev
08019c10 g     O .rodata	00000100 .hidden __clz_tab
0802ecb8 g     O .bss	00000004 _PathLocale
08019554 g     F .text	00000014 atexit
080097e8 g     F .text	0000005c _write_r
0800ea58 g     F .text	00000088 OSSchedLock
080065ec g     F .text	0000001c setlocale
0801049c g     F .text	00000128 OSFlagCreate
080244ec g     O .rwdata	00000004 _impure_ptr
0802ecc8 g     O .bss	00000004 alt_argc
080054a4 g     F .text	00000208 __sflush_r
080186b4 g     F .text	0000005c _do_dtors
080065d8 g     F .text	00000008 __locale_cjk_lang
0802452e g     O .rwdata	00000002 OSEventMultiEn
080105c4 g     F .text	00000270 OSFlagDel
0802ed18 g     O .bss	00000004 OSEventFreeList
08000020 g       .exceptions	00000000 alt_irq_entry
08007738 g     F .text	00000060 __ulp
08010ab4 g     F .text	000005f0 OSFlagPend
0802457a g     O .rwdata	00000002 OSTmrEn
08005ac0 g     F .text	00000018 __fp_unlock_all
080244f8 g     O .rwdata	00000008 alt_fs_list
0800fa7c g     F .text	00000074 OS_StrCopy
080170dc g     F .text	00000068 alt_up_audio_record_l
08024544 g     O .rwdata	00000002 OSMemNameSize
08000a10 g     F .text	00000010 _ZN10__cxxabiv117__class_type_infoD2Ev
080191c4 g     F .text	0000001c OSInitHookEnd
08000020 g       *ABS*	00000000 __ram_exceptions_start
08024570 g     O .rwdata	00000002 OSTCBPrioTblMax
08006608 g     F .text	0000000c localeconv
10220000 g       *ABS*	00000000 __alt_mem_onchip_memory2
0802456c g     O .rwdata	00000002 OSTaskStatStkChkEn
08024540 g     O .rwdata	00000002 OSMemEn
0802454a g     O .rwdata	00000002 OSMutexEn
080199dc  w    O .rodata	0000000c _ZTIN10__cxxabiv120__si_class_type_infoE
0802459c g       *ABS*	00000000 _edata
0801c894 g     O .rwdata	0000356e arial22bm
08036890 g       *ABS*	00000000 _end
0802ed1c g     O .bss	00000001 OSIntNesting
08000244 g       *ABS*	00000000 __ram_exceptions_end
08016624 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080159e4 g     F .text	000001f0 OSTimeDlyResume
08010964 g     F .text	00000150 OSFlagNameSet
0801720c g     F .text	00000068 alt_up_audio_play_l
080151cc g     F .text	000001c8 OSTaskStkChk
08024546 g     O .rwdata	00000002 OSMemSize
080002c0 g     F .text	00000048 _ZN5ColorD2Ev
08008244 g     F .text	0000007c __swrite
080244e4 g     O .rwdata	00000004 __malloc_trim_threshold
080065cc g     F .text	0000000c __locale_msgcharset
0802ed20 g     O .bss	00000004 OSTCBCur
08019568 g     F .text	00000038 exit
08024548 g     O .rwdata	00000002 OSMemTblSize
08006470 g     F .text	000000c4 _fwalk_reent
08000df0 g     F .text	0000009c _ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_
080075a0 g     F .text	00000198 __mdiff
0800acf0 g     F .text	0000005c .hidden __modsi3
08019ea4 g     O .rwdata	0000227d arial18bm
0802ed44 g     O .bss	00000400 _ZN5Audio6bufferE
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08005a9c g     F .text	00000004 __sfp_lock_release
0800e894 g     F .text	00000054 OSInit
080155a8 g     F .text	0000012c OSTaskQuery
08013298 g     F .text	000000ac OS_QInit
0800faf0 g     F .text	00000054 OS_StrLen
08011d8c g     F .text	00000118 OSMemNameSet
08024562 g     O .rwdata	00000002 OSTaskProfileEn
0802ed24 g     O .bss	00000004 OSTime
08034eec g     O .bss	00000800 OSTaskIdleStk
080198c4 g     F .text	0000003c _exit
080183e0 g     F .text	00000140 alt_alarm_start
08010834 g     F .text	00000130 OSFlagNameGet
08015bd4 g     F .text	00000064 OSTimeGet
08006614 g     F .text	000001b8 __smakebuf_r
08001960 g     F .text	00000098 strlen
080244d8  w    O .rwdata	00000008 _ZTISt9type_info
08019154 g     F .text	0000001c OSTaskSwHook
08018bd4 g     F .text	00000158 open
080356ec g     O .bss	00000b40 OSEventTbl
0800bf48 g     F .text	000000e0 .hidden __gedf2
0803622c g     O .bss	00000510 OSTCBTbl
08013d50 g     F .text	000000fc OSSemSet
080244f4 g     O .rwdata	00000004 __wctomb
08008420 g     F .text	00000018 __sprint_r
080187a0 g     F .text	00000030 alt_icache_flush_all
08024590 g     O .rwdata	00000004 alt_priority_mask
080206f0 g     O .rwdata	00001ae9 arial40bm
080134f4 g     F .text	00000268 OSSemDel
0802ed28 g     O .bss	00000004 OSFlagFreeList
08024528 g     O .rwdata	00000002 OSEventNameSize
08003948 g     F .text	00000024 __vfprintf_internal
0802ed2c g     O .bss	00000001 OSStatRdy
0803673c g     O .bss	00000054 OSTCBPrioTbl
0800a084 g     F .text	0000005c _wctomb_r
0800dd1c g     F .text	000000c0 __env_lock
0802456e g     O .rwdata	00000002 OSTaskSwHookEn
08000290 g     F .text	00000030 _ZN5ColorC2Ev
0800c82c g     F .text	000008d0 .hidden __subdf3
08006fc8 g     F .text	000000b0 __lo0bits
08024594 g     O .rwdata	00000008 alt_alarm_list
08024536 g     O .rwdata	00000002 OSFlagWidth
08018658 g     F .text	0000005c _do_ctors
08009f94 g     F .text	000000c0 wcrtomb
0800d3ac g     F .text	000000d0 close
0802ecd8 g     O .bss	00000004 alt_envsem
0802ed30 g     O .bss	00000004 OSIdleCtrRun
0800eeec g     F .text	00000020 OSVersion
08024580 g     O .rwdata	00000002 OSTmrCfgWheelSize
0800d700 g     F .text	00000080 alt_load
08016dbc g     F .text	00000050 alt_up_audio_enable_read_interrupt
080156d4 g     F .text	0000006c OS_TaskStkClr
08000830 g     F .text	00000030 _Z5task1Pv
0802455a g     O .rwdata	00000002 OSTaskCreateEn
08000f30 g     F .text	00000044 _ZNKSt9type_info10__do_catchEPKS_PPvj
0800f4c8 g     F .text	00000064 OS_EventWaitListInit
08009be4 g     F .text	0000005c fputwc
080191e0 g     F .text	0000001c OSTaskIdleHook
08000f88 g     F .text	00000014 free
08005aa0 g     F .text	00000004 __sinit_lock_acquire
08006d3c g     F .text	00000120 __multadd
08000a20 g     F .text	00000034 _ZN10__cxxabiv117__class_type_infoD0Ev
0802ec98 g     O .bss	00000004 _ZN5Audio3devE
08015394 g     F .text	00000214 OSTaskSuspend
08006d14 g     F .text	00000028 _Bfree
0800fb44 g     F .text	0000005c OS_TaskIdle
08024586 g     O .rwdata	00000002 OSTmrTblSize
08016f04 g     F .text	00000040 alt_up_audio_read_interrupt_pending
0801313c g     F .text	0000015c OSQQuery



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409114 	ori	at,at,580
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001d00 	call	80001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	800e8e80 	call	800e8e8 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001526 	beq	r2,zero,8000190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 800013c:	008200f4 	movhi	r2,2051
 8000140:	1099e404 	addi	r2,r2,26512
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008200f4 	movhi	r2,2051
 8000158:	1099e404 	addi	r2,r2,26512
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	21000104 	addi	r4,r4,4
 8000168:	1105883a 	add	r2,r2,r4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	e17ffd17 	ldw	r5,-12(fp)
 8000178:	183ee83a 	callr	r3
#endif
        break;
 800017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000180:	0005313a 	rdctl	r2,ipending
 8000184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000188:	e0bfff17 	ldw	r2,-4(fp)
 800018c:	00000706 	br	80001ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 8000190:	e0bffc17 	ldw	r2,-16(fp)
 8000194:	1085883a 	add	r2,r2,r2
 8000198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 800019c:	e0bffd17 	ldw	r2,-12(fp)
 80001a0:	10800044 	addi	r2,r2,1
 80001a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a8:	003fe006 	br	800012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
 80001ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001b0:	e0bffb17 	ldw	r2,-20(fp)
 80001b4:	103fda1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b8:	800e9640 	call	800e964 <OSIntExit>
}
 80001bc:	e037883a 	mov	sp,fp
 80001c0:	dfc00117 	ldw	ra,4(sp)
 80001c4:	df000017 	ldw	fp,0(sp)
 80001c8:	dec00204 	addi	sp,sp,8
 80001cc:	f800283a 	ret

080001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001d0:	defffb04 	addi	sp,sp,-20
 80001d4:	dfc00415 	stw	ra,16(sp)
 80001d8:	df000315 	stw	fp,12(sp)
 80001dc:	df000304 	addi	fp,sp,12
 80001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e4:	000531fa 	rdctl	r2,exception
 80001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001ec:	e0bffd17 	ldw	r2,-12(fp)
 80001f0:	10801f0c 	andi	r2,r2,124
 80001f4:	1004d0ba 	srli	r2,r2,2
 80001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001fc:	0005333a 	rdctl	r2,badaddr
 8000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000204:	d08a2217 	ldw	r2,10376(gp)
 8000208:	10000726 	beq	r2,zero,8000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800020c:	d08a2217 	ldw	r2,10376(gp)
 8000210:	e0fffd17 	ldw	r3,-12(fp)
 8000214:	1809883a 	mov	r4,r3
 8000218:	e17fff17 	ldw	r5,-4(fp)
 800021c:	e1bffe17 	ldw	r6,-8(fp)
 8000220:	103ee83a 	callr	r2
 8000224:	00000206 	br	8000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800022c:	0005883a 	mov	r2,zero
}
 8000230:	e037883a 	mov	sp,fp
 8000234:	dfc00117 	ldw	ra,4(sp)
 8000238:	df000017 	ldw	fp,0(sp)
 800023c:	dec00204 	addi	sp,sp,8
 8000240:	f800283a 	ret

Disassembly of section .text:

08000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8000250:	00bffd16 	blt	zero,r2,8000248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000254:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800025c:	068200b4 	movhi	gp,2050
    ori gp, gp, %lo(_gp)
 8000260:	d6b12e14 	ori	gp,gp,50360
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000264:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 8000268:	10bb2514 	ori	r2,r2,60564

    movhi r3, %hi(__bss_end)
 800026c:	00c200f4 	movhi	r3,2051
    ori r3, r3, %lo(__bss_end)
 8000270:	18da2414 	ori	r3,r3,26768

    beq r2, r3, 1f
 8000274:	10c00326 	beq	r2,r3,8000284 <_start+0x40>

0:
    stw zero, (r2)
 8000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000280:	10fffd36 	bltu	r2,r3,8000278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000284:	800d7000 	call	800d700 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000288:	800d8a40 	call	800d8a4 <alt_main>

0800028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800028c:	003fff06 	br	800028c <alt_after_alt_main>

08000290 <_ZN5ColorC1Ev>:
 *      Author: alpha
 */

#include "Color.h"

Color::Color() {
 8000290:	defffe04 	addi	sp,sp,-8
 8000294:	df000115 	stw	fp,4(sp)
 8000298:	df000104 	addi	fp,sp,4
 800029c:	e13fff15 	stw	r4,-4(fp)
 80002a0:	e0ffff17 	ldw	r3,-4(fp)
 80002a4:	008200b4 	movhi	r2,2050
 80002a8:	10a64204 	addi	r2,r2,-26360
 80002ac:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated constructor stub

}
 80002b0:	e037883a 	mov	sp,fp
 80002b4:	df000017 	ldw	fp,0(sp)
 80002b8:	dec00104 	addi	sp,sp,4
 80002bc:	f800283a 	ret

080002c0 <_ZN5ColorD1Ev>:

Color::~Color() {
 80002c0:	defffd04 	addi	sp,sp,-12
 80002c4:	dfc00215 	stw	ra,8(sp)
 80002c8:	df000115 	stw	fp,4(sp)
 80002cc:	df000104 	addi	fp,sp,4
 80002d0:	e13fff15 	stw	r4,-4(fp)
 80002d4:	e0ffff17 	ldw	r3,-4(fp)
 80002d8:	008200b4 	movhi	r2,2050
 80002dc:	10a64204 	addi	r2,r2,-26360
 80002e0:	18800015 	stw	r2,0(r3)
	// TODO Auto-generated destructor stub
}
 80002e4:	0005883a 	mov	r2,zero
 80002e8:	10000226 	beq	r2,zero,80002f4 <_ZN5ColorD1Ev+0x34>
 80002ec:	e13fff17 	ldw	r4,-4(fp)
 80002f0:	8000c480 	call	8000c48 <_ZdlPv>
 80002f4:	e037883a 	mov	sp,fp
 80002f8:	dfc00117 	ldw	ra,4(sp)
 80002fc:	df000017 	ldw	fp,0(sp)
 8000300:	dec00204 	addi	sp,sp,8
 8000304:	f800283a 	ret

08000308 <_ZN5ColorD0Ev>:
Color::Color() {
	// TODO Auto-generated constructor stub

}

Color::~Color() {
 8000308:	defffd04 	addi	sp,sp,-12
 800030c:	dfc00215 	stw	ra,8(sp)
 8000310:	df000115 	stw	fp,4(sp)
 8000314:	df000104 	addi	fp,sp,4
 8000318:	e13fff15 	stw	r4,-4(fp)
	// TODO Auto-generated destructor stub
}
 800031c:	e13fff17 	ldw	r4,-4(fp)
 8000320:	80002c00 	call	80002c0 <_ZN5ColorD1Ev>
 8000324:	e13fff17 	ldw	r4,-4(fp)
 8000328:	8000c480 	call	8000c48 <_ZdlPv>
 800032c:	e037883a 	mov	sp,fp
 8000330:	dfc00117 	ldw	ra,4(sp)
 8000334:	df000017 	ldw	fp,0(sp)
 8000338:	dec00204 	addi	sp,sp,8
 800033c:	f800283a 	ret

08000340 <_ZN3LCD4initEv>:

#include "lcd_core.h"

namespace LCD {
  alt_up_pixel_buffer_dma_dev *dev;
  void init() {
 8000340:	defffe04 	addi	sp,sp,-8
 8000344:	dfc00115 	stw	ra,4(sp)
 8000348:	df000015 	stw	fp,0(sp)
 800034c:	d839883a 	mov	fp,sp
    dev = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma");
 8000350:	010200b4 	movhi	r4,2050
 8000354:	21264404 	addi	r4,r4,-26352
 8000358:	80175100 	call	8017510 <alt_up_pixel_buffer_dma_open_dev>
 800035c:	d089f715 	stw	r2,10204(gp)
    clear();
 8000360:	80003780 	call	8000378 <_ZN3LCD5clearEv>
  }
 8000364:	e037883a 	mov	sp,fp
 8000368:	dfc00117 	ldw	ra,4(sp)
 800036c:	df000017 	ldw	fp,0(sp)
 8000370:	dec00204 	addi	sp,sp,8
 8000374:	f800283a 	ret

08000378 <_ZN3LCD5clearEv>:

  void clear() {
 8000378:	defffe04 	addi	sp,sp,-8
 800037c:	dfc00115 	stw	ra,4(sp)
 8000380:	df000015 	stw	fp,0(sp)
 8000384:	d839883a 	mov	fp,sp
    alt_up_pixel_buffer_dma_clear_screen(dev, 0);
 8000388:	d089f717 	ldw	r2,10204(gp)
 800038c:	1009883a 	mov	r4,r2
 8000390:	000b883a 	mov	r5,zero
 8000394:	80177d40 	call	80177d4 <alt_up_pixel_buffer_dma_clear_screen>
  }
 8000398:	e037883a 	mov	sp,fp
 800039c:	dfc00117 	ldw	ra,4(sp)
 80003a0:	df000017 	ldw	fp,0(sp)
 80003a4:	dec00204 	addi	sp,sp,8
 80003a8:	f800283a 	ret

080003ac <_ZN3LCD9rgb2colorEhhh>:

  int rgb2color(uchar r, uchar g, uchar b) {
 80003ac:	defffc04 	addi	sp,sp,-16
 80003b0:	df000315 	stw	fp,12(sp)
 80003b4:	df000304 	addi	fp,sp,12
 80003b8:	2807883a 	mov	r3,r5
 80003bc:	3005883a 	mov	r2,r6
 80003c0:	e13ffd05 	stb	r4,-12(fp)
 80003c4:	e0fffe05 	stb	r3,-8(fp)
 80003c8:	e0bfff05 	stb	r2,-4(fp)
    return ((r >> 3) << 11) +
 80003cc:	e0bffd03 	ldbu	r2,-12(fp)
 80003d0:	1005d0fa 	srai	r2,r2,3
 80003d4:	100692fa 	slli	r3,r2,11
      ((g >> 3) << 5) +
 80003d8:	e0bffe03 	ldbu	r2,-8(fp)
 80003dc:	1005d0fa 	srai	r2,r2,3
 80003e0:	1004917a 	slli	r2,r2,5
  void clear() {
    alt_up_pixel_buffer_dma_clear_screen(dev, 0);
  }

  int rgb2color(uchar r, uchar g, uchar b) {
    return ((r >> 3) << 11) +
 80003e4:	1887883a 	add	r3,r3,r2
      ((g >> 3) << 5) +
      ((b >> 3) << 5);
 80003e8:	e0bfff03 	ldbu	r2,-4(fp)
 80003ec:	1005d0fa 	srai	r2,r2,3
 80003f0:	1004917a 	slli	r2,r2,5
 80003f4:	1885883a 	add	r2,r3,r2
  }
 80003f8:	e037883a 	mov	sp,fp
 80003fc:	df000017 	ldw	fp,0(sp)
 8000400:	dec00104 	addi	sp,sp,4
 8000404:	f800283a 	ret

08000408 <_ZN3LCD6renderEcii>:

#define font_buffer arial22bm
#define font_cnt arial22cnt
#define font_pos arial22pos
  int render(char c, int x, int y) {
 8000408:	defff104 	addi	sp,sp,-60
 800040c:	dfc00e15 	stw	ra,56(sp)
 8000410:	df000d15 	stw	fp,52(sp)
 8000414:	df000d04 	addi	fp,sp,52
 8000418:	2005883a 	mov	r2,r4
 800041c:	e17ffe15 	stw	r5,-8(fp)
 8000420:	e1bfff15 	stw	r6,-4(fp)
 8000424:	e0bffd05 	stb	r2,-12(fp)
    int id = c - 33;
 8000428:	e0bffd07 	ldb	r2,-12(fp)
 800042c:	10bff7c4 	addi	r2,r2,-33
 8000430:	e0bff515 	stw	r2,-44(fp)
    int l = font_cnt[id];
 8000434:	008200b4 	movhi	r2,2050
 8000438:	10bf8104 	addi	r2,r2,-508
 800043c:	e0fff517 	ldw	r3,-44(fp)
 8000440:	18c7883a 	add	r3,r3,r3
 8000444:	18c7883a 	add	r3,r3,r3
 8000448:	10c5883a 	add	r2,r2,r3
 800044c:	10800017 	ldw	r2,0(r2)
 8000450:	e0bff615 	stw	r2,-40(fp)
    int *pos = font_pos[id];
 8000454:	e0bff517 	ldw	r2,-44(fp)
 8000458:	10c00524 	muli	r3,r2,20
 800045c:	008200b4 	movhi	r2,2050
 8000460:	10bfe104 	addi	r2,r2,-124
 8000464:	1885883a 	add	r2,r3,r2
 8000468:	e0bff715 	stw	r2,-36(fp)
    int width = pos[0], height = pos[1], 
 800046c:	e0bff717 	ldw	r2,-36(fp)
 8000470:	10800017 	ldw	r2,0(r2)
 8000474:	e0bff815 	stw	r2,-32(fp)
 8000478:	e0bff717 	ldw	r2,-36(fp)
 800047c:	10800117 	ldw	r2,4(r2)
 8000480:	e0bff915 	stw	r2,-28(fp)
        xshift = pos[2], yshift = pos[3], adv = pos[4];
 8000484:	e0bff717 	ldw	r2,-36(fp)
 8000488:	10800217 	ldw	r2,8(r2)
 800048c:	e0bffa15 	stw	r2,-24(fp)
 8000490:	e0bff717 	ldw	r2,-36(fp)
 8000494:	10800317 	ldw	r2,12(r2)
 8000498:	e0bffb15 	stw	r2,-20(fp)
 800049c:	e0bff717 	ldw	r2,-36(fp)
 80004a0:	10800417 	ldw	r2,16(r2)
 80004a4:	e0bffc15 	stw	r2,-16(fp)
    printf("%d %d %d %d %d\n", width, height, xshift, yshift, adv);
 80004a8:	e0bffb17 	ldw	r2,-20(fp)
 80004ac:	d8800015 	stw	r2,0(sp)
 80004b0:	e0bffc17 	ldw	r2,-16(fp)
 80004b4:	d8800115 	stw	r2,4(sp)
 80004b8:	010200b4 	movhi	r4,2050
 80004bc:	21264b04 	addi	r4,r4,-26324
 80004c0:	e17ff817 	ldw	r5,-32(fp)
 80004c4:	e1bff917 	ldw	r6,-28(fp)
 80004c8:	e1fffa17 	ldw	r7,-24(fp)
 80004cc:	80017700 	call	8001770 <printf>
  }
 80004d0:	e037883a 	mov	sp,fp
 80004d4:	dfc00117 	ldw	ra,4(sp)
 80004d8:	df000017 	ldw	fp,0(sp)
 80004dc:	dec00204 	addi	sp,sp,8
 80004e0:	f800283a 	ret

080004e4 <_ZN3LCD7rendersEPKcii>:

  void renders(const char *s, int x, int y) {
 80004e4:	defffc04 	addi	sp,sp,-16
 80004e8:	df000315 	stw	fp,12(sp)
 80004ec:	df000304 	addi	fp,sp,12
 80004f0:	e13ffd15 	stw	r4,-12(fp)
 80004f4:	e17ffe15 	stw	r5,-8(fp)
 80004f8:	e1bfff15 	stw	r6,-4(fp)
  }
 80004fc:	e037883a 	mov	sp,fp
 8000500:	df000017 	ldw	fp,0(sp)
 8000504:	dec00104 	addi	sp,sp,4
 8000508:	f800283a 	ret

0800050c <_ZL20__gthread_key_deletei>:
  return 0;
}

static int _GLIBCXX_UNUSED
__gthread_key_delete (__gthread_key_t __key _GLIBCXX_UNUSED)
{
 800050c:	defffe04 	addi	sp,sp,-8
 8000510:	df000115 	stw	fp,4(sp)
 8000514:	df000104 	addi	fp,sp,4
 8000518:	e13fff15 	stw	r4,-4(fp)
  return 0;
 800051c:	0005883a 	mov	r2,zero
}
 8000520:	e037883a 	mov	sp,fp
 8000524:	df000017 	ldw	fp,0(sp)
 8000528:	dec00104 	addi	sp,sp,4
 800052c:	f800283a 	ret

08000530 <_ZN5Audio4initEv>:
  uint buffer[BUFFER_SIZE];
  uint buf_head, buf_tail;

  int max_lat = 0;

  void init() {
 8000530:	defffe04 	addi	sp,sp,-8
 8000534:	dfc00115 	stw	ra,4(sp)
 8000538:	df000015 	stw	fp,0(sp)
 800053c:	d839883a 	mov	fp,sp
     dev = alt_up_audio_open_dev("/dev/audio");
 8000540:	010200b4 	movhi	r4,2050
 8000544:	21264f04 	addi	r4,r4,-26308
 8000548:	8016d7c0 	call	8016d7c <alt_up_audio_open_dev>
 800054c:	d089f815 	stw	r2,10208(gp)
  }
 8000550:	e037883a 	mov	sp,fp
 8000554:	dfc00117 	ldw	ra,4(sp)
 8000558:	df000017 	ldw	fp,0(sp)
 800055c:	dec00204 	addi	sp,sp,8
 8000560:	f800283a 	ret

08000564 <_ZN5Audio6rspaceEv>:

  int rspace() {
 8000564:	defffe04 	addi	sp,sp,-8
 8000568:	dfc00115 	stw	ra,4(sp)
 800056c:	df000015 	stw	fp,0(sp)
 8000570:	d839883a 	mov	fp,sp
    return alt_up_audio_read_fifo_avail(dev, 0);
 8000574:	d089f817 	ldw	r2,10208(gp)
 8000578:	1009883a 	mov	r4,r2
 800057c:	000b883a 	mov	r5,zero
 8000580:	80170140 	call	8017014 <alt_up_audio_read_fifo_avail>
  }
 8000584:	e037883a 	mov	sp,fp
 8000588:	dfc00117 	ldw	ra,4(sp)
 800058c:	df000017 	ldw	fp,0(sp)
 8000590:	dec00204 	addi	sp,sp,8
 8000594:	f800283a 	ret

08000598 <_ZN5Audio6wspaceEv>:

  int wspace() {
 8000598:	defffe04 	addi	sp,sp,-8
 800059c:	dfc00115 	stw	ra,4(sp)
 80005a0:	df000015 	stw	fp,0(sp)
 80005a4:	d839883a 	mov	fp,sp
    return alt_up_audio_write_fifo_space(dev, 0);
 80005a8:	d089f817 	ldw	r2,10208(gp)
 80005ac:	1009883a 	mov	r4,r2
 80005b0:	000b883a 	mov	r5,zero
 80005b4:	80171440 	call	8017144 <alt_up_audio_write_fifo_space>
  }
 80005b8:	e037883a 	mov	sp,fp
 80005bc:	dfc00117 	ldw	ra,4(sp)
 80005c0:	df000017 	ldw	fp,0(sp)
 80005c4:	dec00204 	addi	sp,sp,8
 80005c8:	f800283a 	ret

080005cc <_ZN5AudioL16alt_read_wrapperEPji>:
    buf_tail = buf_tail > BUFFER_SIZE ? 0 : buf_tail;
    return res;
  }

  /* Fix the audio ju ma kai men & 8 wave problem */
  static int alt_read_wrapper(uint *buf, int len) {
 80005cc:	defffb04 	addi	sp,sp,-20
 80005d0:	dfc00415 	stw	ra,16(sp)
 80005d4:	df000315 	stw	fp,12(sp)
 80005d8:	df000304 	addi	fp,sp,12
 80005dc:	e13ffe15 	stw	r4,-8(fp)
 80005e0:	e17fff15 	stw	r5,-4(fp)
    alt_up_audio_read_fifo(dev, buf, len, 0);
 80005e4:	d089f817 	ldw	r2,10208(gp)
 80005e8:	1009883a 	mov	r4,r2
 80005ec:	e17ffe17 	ldw	r5,-8(fp)
 80005f0:	e1bfff17 	ldw	r6,-4(fp)
 80005f4:	000f883a 	mov	r7,zero
 80005f8:	80172740 	call	8017274 <alt_up_audio_read_fifo>
    alt_up_audio_read_fifo(dev, buf, len, 1);
 80005fc:	d089f817 	ldw	r2,10208(gp)
 8000600:	1009883a 	mov	r4,r2
 8000604:	e17ffe17 	ldw	r5,-8(fp)
 8000608:	e1bfff17 	ldw	r6,-4(fp)
 800060c:	01c00044 	movi	r7,1
 8000610:	80172740 	call	8017274 <alt_up_audio_read_fifo>
    for (int i=0; i<len; i++) {
 8000614:	e03ffd15 	stw	zero,-12(fp)
 8000618:	00001206 	br	8000664 <_ZN5AudioL16alt_read_wrapperEPji+0x98>
      buf[i] ^= 1<<15;
 800061c:	e0bffd17 	ldw	r2,-12(fp)
 8000620:	1085883a 	add	r2,r2,r2
 8000624:	1085883a 	add	r2,r2,r2
 8000628:	1007883a 	mov	r3,r2
 800062c:	e0bffe17 	ldw	r2,-8(fp)
 8000630:	10c7883a 	add	r3,r2,r3
 8000634:	e0bffd17 	ldw	r2,-12(fp)
 8000638:	1085883a 	add	r2,r2,r2
 800063c:	1085883a 	add	r2,r2,r2
 8000640:	1009883a 	mov	r4,r2
 8000644:	e0bffe17 	ldw	r2,-8(fp)
 8000648:	1105883a 	add	r2,r2,r4
 800064c:	10800017 	ldw	r2,0(r2)
 8000650:	10a0001c 	xori	r2,r2,32768
 8000654:	18800015 	stw	r2,0(r3)

  /* Fix the audio ju ma kai men & 8 wave problem */
  static int alt_read_wrapper(uint *buf, int len) {
    alt_up_audio_read_fifo(dev, buf, len, 0);
    alt_up_audio_read_fifo(dev, buf, len, 1);
    for (int i=0; i<len; i++) {
 8000658:	e0bffd17 	ldw	r2,-12(fp)
 800065c:	10800044 	addi	r2,r2,1
 8000660:	e0bffd15 	stw	r2,-12(fp)
 8000664:	e0fffd17 	ldw	r3,-12(fp)
 8000668:	e0bfff17 	ldw	r2,-4(fp)
 800066c:	18bfeb16 	blt	r3,r2,800061c <_ZN5AudioL16alt_read_wrapperEPji+0x50>
      buf[i] ^= 1<<15;
    }
  }
 8000670:	e037883a 	mov	sp,fp
 8000674:	dfc00117 	ldw	ra,4(sp)
 8000678:	df000017 	ldw	fp,0(sp)
 800067c:	dec00204 	addi	sp,sp,8
 8000680:	f800283a 	ret

08000684 <_ZN5Audio4readEv>:

  uint _tmp_buf[BUFFER_SIZE];
  void read() {
 8000684:	defffb04 	addi	sp,sp,-20
 8000688:	dfc00415 	stw	ra,16(sp)
 800068c:	df000315 	stw	fp,12(sp)
 8000690:	df000304 	addi	fp,sp,12
    int avail = rspace();
 8000694:	80005640 	call	8000564 <_ZN5Audio6rspaceEv>
 8000698:	e0bffe15 	stw	r2,-8(fp)
    max_lat = max(max_lat, wspace());
 800069c:	80005980 	call	8000598 <_ZN5Audio6wspaceEv>
 80006a0:	e0bfff15 	stw	r2,-4(fp)
 80006a4:	e0bfff04 	addi	r2,fp,-4
 80006a8:	d109fb04 	addi	r4,gp,10220
 80006ac:	100b883a 	mov	r5,r2
 80006b0:	80007c80 	call	80007c8 <_ZSt3maxIiERKT_S2_S2_>
 80006b4:	10800017 	ldw	r2,0(r2)
 80006b8:	d089fb15 	stw	r2,10220(gp)
    if (avail) {
 80006bc:	e0bffe17 	ldw	r2,-8(fp)
 80006c0:	10001226 	beq	r2,zero,800070c <_ZN5Audio4readEv+0x88>
      alt_read_wrapper(_tmp_buf, avail);
 80006c4:	010200f4 	movhi	r4,2051
 80006c8:	213c5104 	addi	r4,r4,-3772
 80006cc:	e17ffe17 	ldw	r5,-8(fp)
 80006d0:	80005cc0 	call	80005cc <_ZN5AudioL16alt_read_wrapperEPji>
      alt_up_audio_write_fifo(dev, _tmp_buf, avail, 0);
 80006d4:	d089f817 	ldw	r2,10208(gp)
 80006d8:	1009883a 	mov	r4,r2
 80006dc:	014200f4 	movhi	r5,2051
 80006e0:	297c5104 	addi	r5,r5,-3772
 80006e4:	e1bffe17 	ldw	r6,-8(fp)
 80006e8:	000f883a 	mov	r7,zero
 80006ec:	80173540 	call	8017354 <alt_up_audio_write_fifo>
      alt_up_audio_write_fifo(dev, _tmp_buf, avail, 1);
 80006f0:	d089f817 	ldw	r2,10208(gp)
 80006f4:	1009883a 	mov	r4,r2
 80006f8:	014200f4 	movhi	r5,2051
 80006fc:	297c5104 	addi	r5,r5,-3772
 8000700:	e1bffe17 	ldw	r6,-8(fp)
 8000704:	01c00044 	movi	r7,1
 8000708:	80173540 	call	8017354 <alt_up_audio_write_fifo>
    }
    for (int i=0; i<avail; i++) {
 800070c:	e03ffd15 	stw	zero,-12(fp)
 8000710:	00000c06 	br	8000744 <_ZN5Audio4readEv+0xc0>
      buf_push(_tmp_buf[i]);
 8000714:	008200f4 	movhi	r2,2051
 8000718:	10bc5104 	addi	r2,r2,-3772
 800071c:	e0fffd17 	ldw	r3,-12(fp)
 8000720:	18c7883a 	add	r3,r3,r3
 8000724:	18c7883a 	add	r3,r3,r3
 8000728:	10c5883a 	add	r2,r2,r3
 800072c:	10800017 	ldw	r2,0(r2)
 8000730:	1009883a 	mov	r4,r2
 8000734:	80007640 	call	8000764 <_ZN5Audio8buf_pushEj>
    if (avail) {
      alt_read_wrapper(_tmp_buf, avail);
      alt_up_audio_write_fifo(dev, _tmp_buf, avail, 0);
      alt_up_audio_write_fifo(dev, _tmp_buf, avail, 1);
    }
    for (int i=0; i<avail; i++) {
 8000738:	e0bffd17 	ldw	r2,-12(fp)
 800073c:	10800044 	addi	r2,r2,1
 8000740:	e0bffd15 	stw	r2,-12(fp)
 8000744:	e0fffd17 	ldw	r3,-12(fp)
 8000748:	e0bffe17 	ldw	r2,-8(fp)
 800074c:	18bff116 	blt	r3,r2,8000714 <_ZN5Audio4readEv+0x90>
      buf_push(_tmp_buf[i]);
    }
  }
 8000750:	e037883a 	mov	sp,fp
 8000754:	dfc00117 	ldw	ra,4(sp)
 8000758:	df000017 	ldw	fp,0(sp)
 800075c:	dec00204 	addi	sp,sp,8
 8000760:	f800283a 	ret

08000764 <_ZN5Audio8buf_pushEj>:

  int wspace() {
    return alt_up_audio_write_fifo_space(dev, 0);
  }

  inline void buf_push(uint dt) {
 8000764:	defffe04 	addi	sp,sp,-8
 8000768:	df000115 	stw	fp,4(sp)
 800076c:	df000104 	addi	fp,sp,4
 8000770:	e13fff15 	stw	r4,-4(fp)
    buffer[buf_head++] = dt;
 8000774:	d0c9f917 	ldw	r3,10212(gp)
 8000778:	18800044 	addi	r2,r3,1
 800077c:	d089f915 	stw	r2,10212(gp)
 8000780:	008200f4 	movhi	r2,2051
 8000784:	10bb5104 	addi	r2,r2,-4796
 8000788:	18c7883a 	add	r3,r3,r3
 800078c:	18c7883a 	add	r3,r3,r3
 8000790:	10c5883a 	add	r2,r2,r3
 8000794:	e0ffff17 	ldw	r3,-4(fp)
 8000798:	10c00015 	stw	r3,0(r2)
    buf_head = buf_head > BUFFER_SIZE ? 0 : buf_head;
 800079c:	d089f917 	ldw	r2,10212(gp)
 80007a0:	10804068 	cmpgeui	r2,r2,257
 80007a4:	1000021e 	bne	r2,zero,80007b0 <_ZN5Audio8buf_pushEj+0x4c>
 80007a8:	d089f917 	ldw	r2,10212(gp)
 80007ac:	00000106 	br	80007b4 <_ZN5Audio8buf_pushEj+0x50>
 80007b0:	0005883a 	mov	r2,zero
 80007b4:	d089f915 	stw	r2,10212(gp)
  }
 80007b8:	e037883a 	mov	sp,fp
 80007bc:	df000017 	ldw	fp,0(sp)
 80007c0:	dec00104 	addi	sp,sp,4
 80007c4:	f800283a 	ret

080007c8 <_ZSt3maxIiERKT_S2_S2_>:
   *  temporary expressions, since they are only evaluated once, unlike a
   *  preprocessor macro.
  */
  template<typename _Tp>
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80007c8:	defffd04 	addi	sp,sp,-12
 80007cc:	df000215 	stw	fp,8(sp)
 80007d0:	df000204 	addi	fp,sp,8
 80007d4:	e13ffe15 	stw	r4,-8(fp)
 80007d8:	e17fff15 	stw	r5,-4(fp)
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80007dc:	e0bffe17 	ldw	r2,-8(fp)
 80007e0:	10c00017 	ldw	r3,0(r2)
 80007e4:	e0bfff17 	ldw	r2,-4(fp)
 80007e8:	10800017 	ldw	r2,0(r2)
 80007ec:	1880020e 	bge	r3,r2,80007f8 <_ZSt3maxIiERKT_S2_S2_+0x30>
	return __b;
 80007f0:	e0bfff17 	ldw	r2,-4(fp)
 80007f4:	00000106 	br	80007fc <_ZSt3maxIiERKT_S2_S2_+0x34>
      return __a;
 80007f8:	e0bffe17 	ldw	r2,-8(fp)
    }
 80007fc:	e037883a 	mov	sp,fp
 8000800:	df000017 	ldw	fp,0(sp)
 8000804:	dec00104 	addi	sp,sp,4
 8000808:	f800283a 	ret

0800080c <_ZL20__gthread_key_deletei>:
  return 0;
}

static int _GLIBCXX_UNUSED
__gthread_key_delete (__gthread_key_t __key _GLIBCXX_UNUSED)
{
 800080c:	defffe04 	addi	sp,sp,-8
 8000810:	df000115 	stw	fp,4(sp)
 8000814:	df000104 	addi	fp,sp,4
 8000818:	e13fff15 	stw	r4,-4(fp)
  return 0;
 800081c:	0005883a 	mov	r2,zero
}
 8000820:	e037883a 	mov	sp,fp
 8000824:	df000017 	ldw	fp,0(sp)
 8000828:	dec00104 	addi	sp,sp,4
 800082c:	f800283a 	ret

08000830 <_Z5task1Pv>:
#define TASK1_PRIORITY      2
#define TASK2_PRIORITY      1

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
{
 8000830:	defffd04 	addi	sp,sp,-12
 8000834:	dfc00215 	stw	ra,8(sp)
 8000838:	df000115 	stw	fp,4(sp)
 800083c:	df000104 	addi	fp,sp,4
 8000840:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    Audio::read();
 8000844:	80006840 	call	8000684 <_ZN5Audio4readEv>
    OSTimeDlyHMSM(0, 0, 0, 0);
 8000848:	0009883a 	mov	r4,zero
 800084c:	000b883a 	mov	r5,zero
 8000850:	000d883a 	mov	r6,zero
 8000854:	000f883a 	mov	r7,zero
 8000858:	80158880 	call	8015888 <OSTimeDlyHMSM>

#define TASK1_PRIORITY      2
#define TASK2_PRIORITY      1

/* Prints "Hello World" and sleeps for three seconds */
void task1(void* pdata)
 800085c:	003ff906 	br	8000844 <_Z5task1Pv+0x14>

08000860 <_Z5task2Pv>:
    OSTimeDlyHMSM(0, 0, 0, 0);
  }
}
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
 8000860:	defffc04 	addi	sp,sp,-16
 8000864:	dfc00315 	stw	ra,12(sp)
 8000868:	df000215 	stw	fp,8(sp)
 800086c:	df000204 	addi	fp,sp,8
 8000870:	e13fff15 	stw	r4,-4(fp)
  while (1)
  { 
    for (int i=0; i<3000; i++) {
 8000874:	e03ffe15 	stw	zero,-8(fp)
 8000878:	00000406 	br	800088c <_Z5task2Pv+0x2c>
      asm("nop");
 800087c:	0001883a 	nop
/* Prints "Hello World" and sleeps for three seconds */
void task2(void* pdata)
{
  while (1)
  { 
    for (int i=0; i<3000; i++) {
 8000880:	e0bffe17 	ldw	r2,-8(fp)
 8000884:	10800044 	addi	r2,r2,1
 8000888:	e0bffe15 	stw	r2,-8(fp)
 800088c:	e0bffe17 	ldw	r2,-8(fp)
 8000890:	1082ee10 	cmplti	r2,r2,3000
 8000894:	103ff91e 	bne	r2,zero,800087c <_Z5task2Pv+0x1c>
      asm("nop");
    }
    OSTimeDlyHMSM(0, 0, 0, 100);
 8000898:	0009883a 	mov	r4,zero
 800089c:	000b883a 	mov	r5,zero
 80008a0:	000d883a 	mov	r6,zero
 80008a4:	01c01904 	movi	r7,100
 80008a8:	80158880 	call	8015888 <OSTimeDlyHMSM>
  }
 80008ac:	003ff106 	br	8000874 <_Z5task2Pv+0x14>

080008b0 <main>:
}
/* The main function creates two task and starts multi-tasking */
int main(void)
{
 80008b0:	defff904 	addi	sp,sp,-28
 80008b4:	dfc00615 	stw	ra,24(sp)
 80008b8:	df000515 	stw	fp,20(sp)
 80008bc:	df000504 	addi	fp,sp,20
  printf("%s\n", "Hello Nios!\n");
 80008c0:	010200b4 	movhi	r4,2050
 80008c4:	21265204 	addi	r4,r4,-26296
 80008c8:	80018540 	call	8001854 <puts>
  Audio::init();
 80008cc:	80005300 	call	8000530 <_ZN5Audio4initEv>
  LCD::init();
 80008d0:	80003400 	call	8000340 <_ZN3LCD4initEv>
  LCD::render('a', 100, 100);
 80008d4:	01001844 	movi	r4,97
 80008d8:	01401904 	movi	r5,100
 80008dc:	01801904 	movi	r6,100
 80008e0:	80004080 	call	8000408 <_ZN3LCD6renderEcii>
                  TASK1_PRIORITY,
                  TASK1_PRIORITY,
                  task1_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
 80008e4:	00800084 	movi	r2,2
 80008e8:	d8800015 	stw	r2,0(sp)
 80008ec:	008200f4 	movhi	r2,2051
 80008f0:	10bd5104 	addi	r2,r2,-2748
 80008f4:	d8800115 	stw	r2,4(sp)
 80008f8:	00820004 	movi	r2,2048
 80008fc:	d8800215 	stw	r2,8(sp)
 8000900:	d8000315 	stw	zero,12(sp)
 8000904:	d8000415 	stw	zero,16(sp)
 8000908:	01020034 	movhi	r4,2048
 800090c:	21020c04 	addi	r4,r4,2096
 8000910:	000b883a 	mov	r5,zero
 8000914:	018200f4 	movhi	r6,2051
 8000918:	31855004 	addi	r6,r6,5440
 800091c:	01c00084 	movi	r7,2
 8000920:	80145480 	call	8014548 <OSTaskCreateExt>
                  TASK2_PRIORITY,
                  TASK2_PRIORITY,
                  task2_stk,
                  TASK_STACKSIZE,
                  NULL,
                  0);
 8000924:	00800044 	movi	r2,1
 8000928:	d8800015 	stw	r2,0(sp)
 800092c:	008200f4 	movhi	r2,2051
 8000930:	10855104 	addi	r2,r2,5444
 8000934:	d8800115 	stw	r2,4(sp)
 8000938:	00820004 	movi	r2,2048
 800093c:	d8800215 	stw	r2,8(sp)
 8000940:	d8000315 	stw	zero,12(sp)
 8000944:	d8000415 	stw	zero,16(sp)
 8000948:	01020034 	movhi	r4,2048
 800094c:	21021804 	addi	r4,r4,2144
 8000950:	000b883a 	mov	r5,zero
 8000954:	018200f4 	movhi	r6,2051
 8000958:	318d5004 	addi	r6,r6,13632
 800095c:	01c00044 	movi	r7,1
 8000960:	80145480 	call	8014548 <OSTaskCreateExt>
  OSStart();
 8000964:	800ebb80 	call	800ebb8 <OSStart>
  return 0;
 8000968:	0005883a 	mov	r2,zero
}
 800096c:	e037883a 	mov	sp,fp
 8000970:	dfc00117 	ldw	ra,4(sp)
 8000974:	df000017 	ldw	fp,0(sp)
 8000978:	dec00204 	addi	sp,sp,8
 800097c:	f800283a 	ret

08000980 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
 8000980:	20800017 	ldw	r2,0(r4)
 8000984:	defffa04 	addi	sp,sp,-24
 8000988:	dc000415 	stw	r16,16(sp)
 800098c:	10800617 	ldw	r2,24(r2)
 8000990:	3021883a 	mov	r16,r6
 8000994:	31800017 	ldw	r6,0(r6)
 8000998:	00c00404 	movi	r3,16
 800099c:	d8c00215 	stw	r3,8(sp)
 80009a0:	dfc00515 	stw	ra,20(sp)
 80009a4:	d8000015 	stw	zero,0(sp)
 80009a8:	d8000115 	stw	zero,4(sp)
 80009ac:	d8000315 	stw	zero,12(sp)
 80009b0:	d80f883a 	mov	r7,sp
 80009b4:	103ee83a 	callr	r2
 80009b8:	d8800117 	ldw	r2,4(sp)
 80009bc:	00c00184 	movi	r3,6
 80009c0:	1080018c 	andi	r2,r2,6
 80009c4:	10c00526 	beq	r2,r3,80009dc <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv+0x5c>
 80009c8:	0005883a 	mov	r2,zero
 80009cc:	dfc00517 	ldw	ra,20(sp)
 80009d0:	dc000417 	ldw	r16,16(sp)
 80009d4:	dec00604 	addi	sp,sp,24
 80009d8:	f800283a 	ret
 80009dc:	d8c00017 	ldw	r3,0(sp)
 80009e0:	00800044 	movi	r2,1
 80009e4:	80c00015 	stw	r3,0(r16)
 80009e8:	dfc00517 	ldw	ra,20(sp)
 80009ec:	dc000417 	ldw	r16,16(sp)
 80009f0:	dec00604 	addi	sp,sp,24
 80009f4:	f800283a 	ret

080009f8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
 80009f8:	d8800017 	ldw	r2,0(sp)
 80009fc:	11800226 	beq	r2,r6,8000a08 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_+0x10>
 8000a00:	00800044 	movi	r2,1
 8000a04:	f800283a 	ret
 8000a08:	00800184 	movi	r2,6
 8000a0c:	f800283a 	ret

08000a10 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
 8000a10:	008200b4 	movhi	r2,2050
 8000a14:	10a66404 	addi	r2,r2,-26224
 8000a18:	20800015 	stw	r2,0(r4)
 8000a1c:	8000f101 	jmpi	8000f10 <_ZNSt9type_infoD1Ev>

08000a20 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
 8000a20:	defffe04 	addi	sp,sp,-8
 8000a24:	008200b4 	movhi	r2,2050
 8000a28:	dc000015 	stw	r16,0(sp)
 8000a2c:	dfc00115 	stw	ra,4(sp)
 8000a30:	10a66404 	addi	r2,r2,-26224
 8000a34:	20800015 	stw	r2,0(r4)
 8000a38:	2021883a 	mov	r16,r4
 8000a3c:	8000f100 	call	8000f10 <_ZNSt9type_infoD1Ev>
 8000a40:	8009883a 	mov	r4,r16
 8000a44:	dfc00117 	ldw	ra,4(sp)
 8000a48:	dc000017 	ldw	r16,0(sp)
 8000a4c:	dec00204 	addi	sp,sp,8
 8000a50:	8000c481 	jmpi	8000c48 <_ZdlPv>

08000a54 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
 8000a54:	21000117 	ldw	r4,4(r4)
 8000a58:	29400117 	ldw	r5,4(r5)
 8000a5c:	defffd04 	addi	sp,sp,-12
 8000a60:	dc400115 	stw	r17,4(sp)
 8000a64:	dc000015 	stw	r16,0(sp)
 8000a68:	dfc00215 	stw	ra,8(sp)
 8000a6c:	3023883a 	mov	r17,r6
 8000a70:	3821883a 	mov	r16,r7
 8000a74:	21400b26 	beq	r4,r5,8000aa4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
 8000a78:	20c00007 	ldb	r3,0(r4)
 8000a7c:	00800a84 	movi	r2,42
 8000a80:	18800226 	beq	r3,r2,8000a8c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x38>
 8000a84:	80018bc0 	call	80018bc <strcmp>
 8000a88:	10000626 	beq	r2,zero,8000aa4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x50>
 8000a8c:	0005883a 	mov	r2,zero
 8000a90:	dfc00217 	ldw	ra,8(sp)
 8000a94:	dc400117 	ldw	r17,4(sp)
 8000a98:	dc000017 	ldw	r16,0(sp)
 8000a9c:	dec00304 	addi	sp,sp,12
 8000aa0:	f800283a 	ret
 8000aa4:	00800204 	movi	r2,8
 8000aa8:	80800315 	stw	r2,12(r16)
 8000aac:	00800184 	movi	r2,6
 8000ab0:	80800115 	stw	r2,4(r16)
 8000ab4:	84400015 	stw	r17,0(r16)
 8000ab8:	00800044 	movi	r2,1
 8000abc:	003ff406 	br	8000a90 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x3c>

08000ac0 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
 8000ac0:	20800117 	ldw	r2,4(r4)
 8000ac4:	28c00117 	ldw	r3,4(r5)
 8000ac8:	10c02926 	beq	r2,r3,8000b70 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0xb0>
 8000acc:	defffb04 	addi	sp,sp,-20
 8000ad0:	dcc00315 	stw	r19,12(sp)
 8000ad4:	dc800215 	stw	r18,8(sp)
 8000ad8:	dc400115 	stw	r17,4(sp)
 8000adc:	dc000015 	stw	r16,0(sp)
 8000ae0:	dfc00415 	stw	ra,16(sp)
 8000ae4:	2821883a 	mov	r16,r5
 8000ae8:	11400007 	ldb	r5,0(r2)
 8000aec:	2025883a 	mov	r18,r4
 8000af0:	01000a84 	movi	r4,42
 8000af4:	3823883a 	mov	r17,r7
 8000af8:	3027883a 	mov	r19,r6
 8000afc:	29000426 	beq	r5,r4,8000b10 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x50>
 8000b00:	1009883a 	mov	r4,r2
 8000b04:	180b883a 	mov	r5,r3
 8000b08:	80018bc0 	call	80018bc <strcmp>
 8000b0c:	10000a26 	beq	r2,zero,8000b38 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x78>
 8000b10:	008000c4 	movi	r2,3
 8000b14:	14400a2e 	bgeu	r2,r17,8000b40 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x80>
 8000b18:	0005883a 	mov	r2,zero
 8000b1c:	dfc00417 	ldw	ra,16(sp)
 8000b20:	dcc00317 	ldw	r19,12(sp)
 8000b24:	dc800217 	ldw	r18,8(sp)
 8000b28:	dc400117 	ldw	r17,4(sp)
 8000b2c:	dc000017 	ldw	r16,0(sp)
 8000b30:	dec00504 	addi	sp,sp,20
 8000b34:	f800283a 	ret
 8000b38:	00800044 	movi	r2,1
 8000b3c:	003ff706 	br	8000b1c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x5c>
 8000b40:	80800017 	ldw	r2,0(r16)
 8000b44:	8009883a 	mov	r4,r16
 8000b48:	900b883a 	mov	r5,r18
 8000b4c:	10800517 	ldw	r2,20(r2)
 8000b50:	980d883a 	mov	r6,r19
 8000b54:	dfc00417 	ldw	ra,16(sp)
 8000b58:	dcc00317 	ldw	r19,12(sp)
 8000b5c:	dc800217 	ldw	r18,8(sp)
 8000b60:	dc400117 	ldw	r17,4(sp)
 8000b64:	dc000017 	ldw	r16,0(sp)
 8000b68:	dec00504 	addi	sp,sp,20
 8000b6c:	1000683a 	jmp	r2
 8000b70:	00800044 	movi	r2,1
 8000b74:	f800283a 	ret

08000b78 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
 8000b78:	defffb04 	addi	sp,sp,-20
 8000b7c:	dc400315 	stw	r17,12(sp)
 8000b80:	d8800717 	ldw	r2,28(sp)
 8000b84:	dc400517 	ldw	r17,20(sp)
 8000b88:	dc000215 	stw	r16,8(sp)
 8000b8c:	dfc00415 	stw	ra,16(sp)
 8000b90:	24000117 	ldw	r16,4(r4)
 8000b94:	88801026 	beq	r17,r2,8000bd8 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x60>
 8000b98:	39400117 	ldw	r5,4(r7)
 8000b9c:	81401d26 	beq	r16,r5,8000c14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
 8000ba0:	80c00007 	ldb	r3,0(r16)
 8000ba4:	00800a84 	movi	r2,42
 8000ba8:	18800526 	beq	r3,r2,8000bc0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
 8000bac:	8009883a 	mov	r4,r16
 8000bb0:	d9800115 	stw	r6,4(sp)
 8000bb4:	80018bc0 	call	80018bc <strcmp>
 8000bb8:	d9800117 	ldw	r6,4(sp)
 8000bbc:	10001526 	beq	r2,zero,8000c14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>
 8000bc0:	0005883a 	mov	r2,zero
 8000bc4:	dfc00417 	ldw	ra,16(sp)
 8000bc8:	dc400317 	ldw	r17,12(sp)
 8000bcc:	dc000217 	ldw	r16,8(sp)
 8000bd0:	dec00504 	addi	sp,sp,20
 8000bd4:	f800283a 	ret
 8000bd8:	d8800617 	ldw	r2,24(sp)
 8000bdc:	11400117 	ldw	r5,4(r2)
 8000be0:	81401326 	beq	r16,r5,8000c30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 8000be4:	80c00007 	ldb	r3,0(r16)
 8000be8:	00800a84 	movi	r2,42
 8000bec:	18801326 	beq	r3,r2,8000c3c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xc4>
 8000bf0:	8009883a 	mov	r4,r16
 8000bf4:	d9800115 	stw	r6,4(sp)
 8000bf8:	d9c00015 	stw	r7,0(sp)
 8000bfc:	80018bc0 	call	80018bc <strcmp>
 8000c00:	d9800117 	ldw	r6,4(sp)
 8000c04:	d9c00017 	ldw	r7,0(sp)
 8000c08:	10000926 	beq	r2,zero,8000c30 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0xb8>
 8000c0c:	39400117 	ldw	r5,4(r7)
 8000c10:	817fe61e 	bne	r16,r5,8000bac <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x34>
 8000c14:	d8800817 	ldw	r2,32(sp)
 8000c18:	d8c00817 	ldw	r3,32(sp)
 8000c1c:	14400015 	stw	r17,0(r2)
 8000c20:	11800115 	stw	r6,4(r2)
 8000c24:	00800044 	movi	r2,1
 8000c28:	18800315 	stw	r2,12(r3)
 8000c2c:	003fe406 	br	8000bc0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
 8000c30:	d8800817 	ldw	r2,32(sp)
 8000c34:	11800215 	stw	r6,8(r2)
 8000c38:	003fe106 	br	8000bc0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
 8000c3c:	38800117 	ldw	r2,4(r7)
 8000c40:	80bfdf1e 	bne	r16,r2,8000bc0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x48>
 8000c44:	003ff306 	br	8000c14 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x9c>

08000c48 <_ZdlPv>:
 8000c48:	8000f881 	jmpi	8000f88 <free>

08000c4c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
 8000c4c:	008200b4 	movhi	r2,2050
 8000c50:	10a67c04 	addi	r2,r2,-26128
 8000c54:	20800015 	stw	r2,0(r4)
 8000c58:	8000a101 	jmpi	8000a10 <_ZN10__cxxabiv117__class_type_infoD1Ev>

08000c5c <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
 8000c5c:	defffe04 	addi	sp,sp,-8
 8000c60:	008200b4 	movhi	r2,2050
 8000c64:	dc000015 	stw	r16,0(sp)
 8000c68:	dfc00115 	stw	ra,4(sp)
 8000c6c:	10a67c04 	addi	r2,r2,-26128
 8000c70:	20800015 	stw	r2,0(r4)
 8000c74:	2021883a 	mov	r16,r4
 8000c78:	8000a100 	call	8000a10 <_ZN10__cxxabiv117__class_type_infoD1Ev>
 8000c7c:	8009883a 	mov	r4,r16
 8000c80:	dfc00117 	ldw	ra,4(sp)
 8000c84:	dc000017 	ldw	r16,0(sp)
 8000c88:	dec00204 	addi	sp,sp,8
 8000c8c:	8000c481 	jmpi	8000c48 <_ZdlPv>

08000c90 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
 8000c90:	defff504 	addi	sp,sp,-44
 8000c94:	dc000115 	stw	r16,4(sp)
 8000c98:	38800117 	ldw	r2,4(r7)
 8000c9c:	24000117 	ldw	r16,4(r4)
 8000ca0:	ddc00815 	stw	r23,32(sp)
 8000ca4:	dd800715 	stw	r22,28(sp)
 8000ca8:	dd400615 	stw	r21,24(sp)
 8000cac:	dd000515 	stw	r20,20(sp)
 8000cb0:	dcc00415 	stw	r19,16(sp)
 8000cb4:	dc800315 	stw	r18,12(sp)
 8000cb8:	dc400215 	stw	r17,8(sp)
 8000cbc:	dfc00a15 	stw	ra,40(sp)
 8000cc0:	df000915 	stw	fp,36(sp)
 8000cc4:	202b883a 	mov	r21,r4
 8000cc8:	382d883a 	mov	r22,r7
 8000ccc:	2823883a 	mov	r17,r5
 8000cd0:	dc800b17 	ldw	r18,44(sp)
 8000cd4:	ddc00c17 	ldw	r23,48(sp)
 8000cd8:	dd000d17 	ldw	r20,52(sp)
 8000cdc:	dcc00e17 	ldw	r19,56(sp)
 8000ce0:	80801f26 	beq	r16,r2,8000d60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
 8000ce4:	87000007 	ldb	fp,0(r16)
 8000ce8:	00c00a84 	movi	r3,42
 8000cec:	e0c00626 	beq	fp,r3,8000d08 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x78>
 8000cf0:	8009883a 	mov	r4,r16
 8000cf4:	100b883a 	mov	r5,r2
 8000cf8:	d9800015 	stw	r6,0(sp)
 8000cfc:	80018bc0 	call	80018bc <strcmp>
 8000d00:	d9800017 	ldw	r6,0(sp)
 8000d04:	10001626 	beq	r2,zero,8000d60 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xd0>
 8000d08:	95002c26 	beq	r18,r20,8000dbc <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x12c>
 8000d0c:	a9000217 	ldw	r4,8(r21)
 8000d10:	880b883a 	mov	r5,r17
 8000d14:	b00f883a 	mov	r7,r22
 8000d18:	20800017 	ldw	r2,0(r4)
 8000d1c:	dc800b15 	stw	r18,44(sp)
 8000d20:	ddc00c15 	stw	r23,48(sp)
 8000d24:	dd000d15 	stw	r20,52(sp)
 8000d28:	dcc00e15 	stw	r19,56(sp)
 8000d2c:	10800717 	ldw	r2,28(r2)
 8000d30:	dfc00a17 	ldw	ra,40(sp)
 8000d34:	df000917 	ldw	fp,36(sp)
 8000d38:	ddc00817 	ldw	r23,32(sp)
 8000d3c:	dd800717 	ldw	r22,28(sp)
 8000d40:	dd400617 	ldw	r21,24(sp)
 8000d44:	dd000517 	ldw	r20,20(sp)
 8000d48:	dcc00417 	ldw	r19,16(sp)
 8000d4c:	dc800317 	ldw	r18,12(sp)
 8000d50:	dc400217 	ldw	r17,8(sp)
 8000d54:	dc000117 	ldw	r16,4(sp)
 8000d58:	dec00b04 	addi	sp,sp,44
 8000d5c:	1000683a 	jmp	r2
 8000d60:	9c800015 	stw	r18,0(r19)
 8000d64:	99800115 	stw	r6,4(r19)
 8000d68:	88001116 	blt	r17,zero,8000db0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x120>
 8000d6c:	9463883a 	add	r17,r18,r17
 8000d70:	a4401d26 	beq	r20,r17,8000de8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x158>
 8000d74:	00800044 	movi	r2,1
 8000d78:	98800315 	stw	r2,12(r19)
 8000d7c:	0005883a 	mov	r2,zero
 8000d80:	dfc00a17 	ldw	ra,40(sp)
 8000d84:	df000917 	ldw	fp,36(sp)
 8000d88:	ddc00817 	ldw	r23,32(sp)
 8000d8c:	dd800717 	ldw	r22,28(sp)
 8000d90:	dd400617 	ldw	r21,24(sp)
 8000d94:	dd000517 	ldw	r20,20(sp)
 8000d98:	dcc00417 	ldw	r19,16(sp)
 8000d9c:	dc800317 	ldw	r18,12(sp)
 8000da0:	dc400217 	ldw	r17,8(sp)
 8000da4:	dc000117 	ldw	r16,4(sp)
 8000da8:	dec00b04 	addi	sp,sp,44
 8000dac:	f800283a 	ret
 8000db0:	00bfff84 	movi	r2,-2
 8000db4:	88bff11e 	bne	r17,r2,8000d7c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 8000db8:	003fee06 	br	8000d74 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe4>
 8000dbc:	b9400117 	ldw	r5,4(r23)
 8000dc0:	81400726 	beq	r16,r5,8000de0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x150>
 8000dc4:	00800a84 	movi	r2,42
 8000dc8:	e0bfd026 	beq	fp,r2,8000d0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 8000dcc:	8009883a 	mov	r4,r16
 8000dd0:	d9800015 	stw	r6,0(sp)
 8000dd4:	80018bc0 	call	80018bc <strcmp>
 8000dd8:	d9800017 	ldw	r6,0(sp)
 8000ddc:	103fcb1e 	bne	r2,zero,8000d0c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x7c>
 8000de0:	99800215 	stw	r6,8(r19)
 8000de4:	003fe506 	br	8000d7c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xec>
 8000de8:	00800184 	movi	r2,6
 8000dec:	003fe206 	br	8000d78 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0xe8>

08000df0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
 8000df0:	defffa04 	addi	sp,sp,-24
 8000df4:	dc000215 	stw	r16,8(sp)
 8000df8:	dc000617 	ldw	r16,24(sp)
 8000dfc:	dc800415 	stw	r18,16(sp)
 8000e00:	dc400315 	stw	r17,12(sp)
 8000e04:	dfc00515 	stw	ra,20(sp)
 8000e08:	2023883a 	mov	r17,r4
 8000e0c:	2825883a 	mov	r18,r5
 8000e10:	81800b26 	beq	r16,r6,8000e40 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x50>
 8000e14:	89000217 	ldw	r4,8(r17)
 8000e18:	900b883a 	mov	r5,r18
 8000e1c:	20800017 	ldw	r2,0(r4)
 8000e20:	dc000615 	stw	r16,24(sp)
 8000e24:	10800817 	ldw	r2,32(r2)
 8000e28:	dfc00517 	ldw	ra,20(sp)
 8000e2c:	dc800417 	ldw	r18,16(sp)
 8000e30:	dc400317 	ldw	r17,12(sp)
 8000e34:	dc000217 	ldw	r16,8(sp)
 8000e38:	dec00604 	addi	sp,sp,24
 8000e3c:	1000683a 	jmp	r2
 8000e40:	21000117 	ldw	r4,4(r4)
 8000e44:	39400117 	ldw	r5,4(r7)
 8000e48:	21400926 	beq	r4,r5,8000e70 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x80>
 8000e4c:	20c00007 	ldb	r3,0(r4)
 8000e50:	00800a84 	movi	r2,42
 8000e54:	18bfef26 	beq	r3,r2,8000e14 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8000e58:	d9800015 	stw	r6,0(sp)
 8000e5c:	d9c00115 	stw	r7,4(sp)
 8000e60:	80018bc0 	call	80018bc <strcmp>
 8000e64:	d9800017 	ldw	r6,0(sp)
 8000e68:	d9c00117 	ldw	r7,4(sp)
 8000e6c:	103fe91e 	bne	r2,zero,8000e14 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
 8000e70:	00800184 	movi	r2,6
 8000e74:	dfc00517 	ldw	ra,20(sp)
 8000e78:	dc800417 	ldw	r18,16(sp)
 8000e7c:	dc400317 	ldw	r17,12(sp)
 8000e80:	dc000217 	ldw	r16,8(sp)
 8000e84:	dec00604 	addi	sp,sp,24
 8000e88:	f800283a 	ret

08000e8c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
 8000e8c:	defffb04 	addi	sp,sp,-20
 8000e90:	dcc00315 	stw	r19,12(sp)
 8000e94:	dc800215 	stw	r18,8(sp)
 8000e98:	dc400115 	stw	r17,4(sp)
 8000e9c:	dc000015 	stw	r16,0(sp)
 8000ea0:	dfc00415 	stw	ra,16(sp)
 8000ea4:	2027883a 	mov	r19,r4
 8000ea8:	2825883a 	mov	r18,r5
 8000eac:	3023883a 	mov	r17,r6
 8000eb0:	3821883a 	mov	r16,r7
 8000eb4:	8000a540 	call	8000a54 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
 8000eb8:	10c03fcc 	andi	r3,r2,255
 8000ebc:	18000726 	beq	r3,zero,8000edc <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x50>
 8000ec0:	dfc00417 	ldw	ra,16(sp)
 8000ec4:	dcc00317 	ldw	r19,12(sp)
 8000ec8:	dc800217 	ldw	r18,8(sp)
 8000ecc:	dc400117 	ldw	r17,4(sp)
 8000ed0:	dc000017 	ldw	r16,0(sp)
 8000ed4:	dec00504 	addi	sp,sp,20
 8000ed8:	f800283a 	ret
 8000edc:	99000217 	ldw	r4,8(r19)
 8000ee0:	900b883a 	mov	r5,r18
 8000ee4:	880d883a 	mov	r6,r17
 8000ee8:	20800017 	ldw	r2,0(r4)
 8000eec:	800f883a 	mov	r7,r16
 8000ef0:	10800617 	ldw	r2,24(r2)
 8000ef4:	dfc00417 	ldw	ra,16(sp)
 8000ef8:	dcc00317 	ldw	r19,12(sp)
 8000efc:	dc800217 	ldw	r18,8(sp)
 8000f00:	dc400117 	ldw	r17,4(sp)
 8000f04:	dc000017 	ldw	r16,0(sp)
 8000f08:	dec00504 	addi	sp,sp,20
 8000f0c:	1000683a 	jmp	r2

08000f10 <_ZNSt9type_infoD1Ev>:
 8000f10:	f800283a 	ret

08000f14 <_ZNKSt9type_info14__is_pointer_pEv>:
 8000f14:	0005883a 	mov	r2,zero
 8000f18:	f800283a 	ret

08000f1c <_ZNKSt9type_info15__is_function_pEv>:
 8000f1c:	0005883a 	mov	r2,zero
 8000f20:	f800283a 	ret

08000f24 <_ZNKSt9type_info11__do_upcastEPKN10__cxxabiv117__class_type_infoEPPv>:
 8000f24:	0005883a 	mov	r2,zero
 8000f28:	f800283a 	ret

08000f2c <_ZNSt9type_infoD0Ev>:
 8000f2c:	8000c481 	jmpi	8000c48 <_ZdlPv>

08000f30 <_ZNKSt9type_info10__do_catchEPKS_PPvj>:
 8000f30:	21000117 	ldw	r4,4(r4)
 8000f34:	29400117 	ldw	r5,4(r5)
 8000f38:	21400c26 	beq	r4,r5,8000f6c <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x3c>
 8000f3c:	20c00007 	ldb	r3,0(r4)
 8000f40:	00800a84 	movi	r2,42
 8000f44:	18800726 	beq	r3,r2,8000f64 <_ZNKSt9type_info10__do_catchEPKS_PPvj+0x34>
 8000f48:	deffff04 	addi	sp,sp,-4
 8000f4c:	dfc00015 	stw	ra,0(sp)
 8000f50:	80018bc0 	call	80018bc <strcmp>
 8000f54:	1005003a 	cmpeq	r2,r2,zero
 8000f58:	dfc00017 	ldw	ra,0(sp)
 8000f5c:	dec00104 	addi	sp,sp,4
 8000f60:	f800283a 	ret
 8000f64:	0005883a 	mov	r2,zero
 8000f68:	f800283a 	ret
 8000f6c:	00800044 	movi	r2,1
 8000f70:	f800283a 	ret

08000f74 <malloc>:
 8000f74:	008200b4 	movhi	r2,2050
 8000f78:	10913b04 	addi	r2,r2,17644
 8000f7c:	200b883a 	mov	r5,r4
 8000f80:	11000017 	ldw	r4,0(r2)
 8000f84:	8000f9c1 	jmpi	8000f9c <_malloc_r>

08000f88 <free>:
 8000f88:	008200b4 	movhi	r2,2050
 8000f8c:	10913b04 	addi	r2,r2,17644
 8000f90:	200b883a 	mov	r5,r4
 8000f94:	11000017 	ldw	r4,0(r2)
 8000f98:	8005bfc1 	jmpi	8005bfc <_free_r>

08000f9c <_malloc_r>:
 8000f9c:	defff504 	addi	sp,sp,-44
 8000fa0:	dc800315 	stw	r18,12(sp)
 8000fa4:	dfc00a15 	stw	ra,40(sp)
 8000fa8:	df000915 	stw	fp,36(sp)
 8000fac:	ddc00815 	stw	r23,32(sp)
 8000fb0:	dd800715 	stw	r22,28(sp)
 8000fb4:	dd400615 	stw	r21,24(sp)
 8000fb8:	dd000515 	stw	r20,20(sp)
 8000fbc:	dcc00415 	stw	r19,16(sp)
 8000fc0:	dc400215 	stw	r17,8(sp)
 8000fc4:	dc000115 	stw	r16,4(sp)
 8000fc8:	288002c4 	addi	r2,r5,11
 8000fcc:	00c00584 	movi	r3,22
 8000fd0:	2025883a 	mov	r18,r4
 8000fd4:	18802a2e 	bgeu	r3,r2,8001080 <_malloc_r+0xe4>
 8000fd8:	047ffe04 	movi	r17,-8
 8000fdc:	1462703a 	and	r17,r2,r17
 8000fe0:	88009e16 	blt	r17,zero,800125c <_malloc_r+0x2c0>
 8000fe4:	89409d36 	bltu	r17,r5,800125c <_malloc_r+0x2c0>
 8000fe8:	800de380 	call	800de38 <__malloc_lock>
 8000fec:	00807dc4 	movi	r2,503
 8000ff0:	14402736 	bltu	r2,r17,8001090 <_malloc_r+0xf4>
 8000ff4:	8806d0fa 	srli	r3,r17,3
 8000ff8:	04c200b4 	movhi	r19,2050
 8000ffc:	9cca5304 	addi	r19,r19,10572
 8001000:	18c5883a 	add	r2,r3,r3
 8001004:	1085883a 	add	r2,r2,r2
 8001008:	1085883a 	add	r2,r2,r2
 800100c:	9885883a 	add	r2,r19,r2
 8001010:	14000317 	ldw	r16,12(r2)
 8001014:	80814a26 	beq	r16,r2,8001540 <_malloc_r+0x5a4>
 8001018:	80c00117 	ldw	r3,4(r16)
 800101c:	81000317 	ldw	r4,12(r16)
 8001020:	00bfff04 	movi	r2,-4
 8001024:	1884703a 	and	r2,r3,r2
 8001028:	81400217 	ldw	r5,8(r16)
 800102c:	8085883a 	add	r2,r16,r2
 8001030:	10c00117 	ldw	r3,4(r2)
 8001034:	29000315 	stw	r4,12(r5)
 8001038:	21400215 	stw	r5,8(r4)
 800103c:	18c00054 	ori	r3,r3,1
 8001040:	10c00115 	stw	r3,4(r2)
 8001044:	9009883a 	mov	r4,r18
 8001048:	800df580 	call	800df58 <__malloc_unlock>
 800104c:	80800204 	addi	r2,r16,8
 8001050:	dfc00a17 	ldw	ra,40(sp)
 8001054:	df000917 	ldw	fp,36(sp)
 8001058:	ddc00817 	ldw	r23,32(sp)
 800105c:	dd800717 	ldw	r22,28(sp)
 8001060:	dd400617 	ldw	r21,24(sp)
 8001064:	dd000517 	ldw	r20,20(sp)
 8001068:	dcc00417 	ldw	r19,16(sp)
 800106c:	dc800317 	ldw	r18,12(sp)
 8001070:	dc400217 	ldw	r17,8(sp)
 8001074:	dc000117 	ldw	r16,4(sp)
 8001078:	dec00b04 	addi	sp,sp,44
 800107c:	f800283a 	ret
 8001080:	04400404 	movi	r17,16
 8001084:	89407536 	bltu	r17,r5,800125c <_malloc_r+0x2c0>
 8001088:	800de380 	call	800de38 <__malloc_lock>
 800108c:	003fd906 	br	8000ff4 <_malloc_r+0x58>
 8001090:	8806d27a 	srli	r3,r17,9
 8001094:	18007526 	beq	r3,zero,800126c <_malloc_r+0x2d0>
 8001098:	00800104 	movi	r2,4
 800109c:	10c0ef36 	bltu	r2,r3,800145c <_malloc_r+0x4c0>
 80010a0:	8806d1ba 	srli	r3,r17,6
 80010a4:	19c00e04 	addi	r7,r3,56
 80010a8:	39cb883a 	add	r5,r7,r7
 80010ac:	04c200b4 	movhi	r19,2050
 80010b0:	294b883a 	add	r5,r5,r5
 80010b4:	9cca5304 	addi	r19,r19,10572
 80010b8:	294b883a 	add	r5,r5,r5
 80010bc:	994b883a 	add	r5,r19,r5
 80010c0:	2c000317 	ldw	r16,12(r5)
 80010c4:	2c000e26 	beq	r5,r16,8001100 <_malloc_r+0x164>
 80010c8:	80800117 	ldw	r2,4(r16)
 80010cc:	01bfff04 	movi	r6,-4
 80010d0:	010003c4 	movi	r4,15
 80010d4:	1184703a 	and	r2,r2,r6
 80010d8:	1447c83a 	sub	r3,r2,r17
 80010dc:	20c00716 	blt	r4,r3,80010fc <_malloc_r+0x160>
 80010e0:	1800650e 	bge	r3,zero,8001278 <_malloc_r+0x2dc>
 80010e4:	84000317 	ldw	r16,12(r16)
 80010e8:	2c000526 	beq	r5,r16,8001100 <_malloc_r+0x164>
 80010ec:	80800117 	ldw	r2,4(r16)
 80010f0:	1184703a 	and	r2,r2,r6
 80010f4:	1447c83a 	sub	r3,r2,r17
 80010f8:	20fff90e 	bge	r4,r3,80010e0 <_malloc_r+0x144>
 80010fc:	39ffffc4 	addi	r7,r7,-1
 8001100:	38c00044 	addi	r3,r7,1
 8001104:	018200b4 	movhi	r6,2050
 8001108:	9c000417 	ldw	r16,16(r19)
 800110c:	318a5304 	addi	r6,r6,10572
 8001110:	32400204 	addi	r9,r6,8
 8001114:	82410326 	beq	r16,r9,8001524 <_malloc_r+0x588>
 8001118:	81000117 	ldw	r4,4(r16)
 800111c:	00bfff04 	movi	r2,-4
 8001120:	208e703a 	and	r7,r4,r2
 8001124:	3c45c83a 	sub	r2,r7,r17
 8001128:	010003c4 	movi	r4,15
 800112c:	2080ee16 	blt	r4,r2,80014e8 <_malloc_r+0x54c>
 8001130:	32400515 	stw	r9,20(r6)
 8001134:	32400415 	stw	r9,16(r6)
 8001138:	1000510e 	bge	r2,zero,8001280 <_malloc_r+0x2e4>
 800113c:	00807fc4 	movi	r2,511
 8001140:	11c0ce36 	bltu	r2,r7,800147c <_malloc_r+0x4e0>
 8001144:	3808d0fa 	srli	r4,r7,3
 8001148:	01c00044 	movi	r7,1
 800114c:	30800117 	ldw	r2,4(r6)
 8001150:	210b883a 	add	r5,r4,r4
 8001154:	294b883a 	add	r5,r5,r5
 8001158:	2009d0ba 	srai	r4,r4,2
 800115c:	294b883a 	add	r5,r5,r5
 8001160:	298b883a 	add	r5,r5,r6
 8001164:	2a000217 	ldw	r8,8(r5)
 8001168:	3908983a 	sll	r4,r7,r4
 800116c:	81400315 	stw	r5,12(r16)
 8001170:	82000215 	stw	r8,8(r16)
 8001174:	2088b03a 	or	r4,r4,r2
 8001178:	2c000215 	stw	r16,8(r5)
 800117c:	31000115 	stw	r4,4(r6)
 8001180:	44000315 	stw	r16,12(r8)
 8001184:	1805d0ba 	srai	r2,r3,2
 8001188:	01400044 	movi	r5,1
 800118c:	288a983a 	sll	r5,r5,r2
 8001190:	21404336 	bltu	r4,r5,80012a0 <_malloc_r+0x304>
 8001194:	2144703a 	and	r2,r4,r5
 8001198:	10000a1e 	bne	r2,zero,80011c4 <_malloc_r+0x228>
 800119c:	00bfff04 	movi	r2,-4
 80011a0:	294b883a 	add	r5,r5,r5
 80011a4:	1886703a 	and	r3,r3,r2
 80011a8:	2144703a 	and	r2,r4,r5
 80011ac:	18c00104 	addi	r3,r3,4
 80011b0:	1000041e 	bne	r2,zero,80011c4 <_malloc_r+0x228>
 80011b4:	294b883a 	add	r5,r5,r5
 80011b8:	2144703a 	and	r2,r4,r5
 80011bc:	18c00104 	addi	r3,r3,4
 80011c0:	103ffc26 	beq	r2,zero,80011b4 <_malloc_r+0x218>
 80011c4:	023fff04 	movi	r8,-4
 80011c8:	01c003c4 	movi	r7,15
 80011cc:	18c5883a 	add	r2,r3,r3
 80011d0:	1085883a 	add	r2,r2,r2
 80011d4:	1085883a 	add	r2,r2,r2
 80011d8:	9895883a 	add	r10,r19,r2
 80011dc:	52c00304 	addi	r11,r10,12
 80011e0:	1819883a 	mov	r12,r3
 80011e4:	5c000017 	ldw	r16,0(r11)
 80011e8:	59bffd04 	addi	r6,r11,-12
 80011ec:	8180041e 	bne	r16,r6,8001200 <_malloc_r+0x264>
 80011f0:	0000ce06 	br	800152c <_malloc_r+0x590>
 80011f4:	2000d70e 	bge	r4,zero,8001554 <_malloc_r+0x5b8>
 80011f8:	84000317 	ldw	r16,12(r16)
 80011fc:	8180cb26 	beq	r16,r6,800152c <_malloc_r+0x590>
 8001200:	80800117 	ldw	r2,4(r16)
 8001204:	1204703a 	and	r2,r2,r8
 8001208:	1449c83a 	sub	r4,r2,r17
 800120c:	393ff90e 	bge	r7,r4,80011f4 <_malloc_r+0x258>
 8001210:	80800317 	ldw	r2,12(r16)
 8001214:	80c00217 	ldw	r3,8(r16)
 8001218:	89400054 	ori	r5,r17,1
 800121c:	81400115 	stw	r5,4(r16)
 8001220:	18800315 	stw	r2,12(r3)
 8001224:	10c00215 	stw	r3,8(r2)
 8001228:	8463883a 	add	r17,r16,r17
 800122c:	9c400515 	stw	r17,20(r19)
 8001230:	9c400415 	stw	r17,16(r19)
 8001234:	20800054 	ori	r2,r4,1
 8001238:	88800115 	stw	r2,4(r17)
 800123c:	8a400315 	stw	r9,12(r17)
 8001240:	8a400215 	stw	r9,8(r17)
 8001244:	8923883a 	add	r17,r17,r4
 8001248:	89000015 	stw	r4,0(r17)
 800124c:	9009883a 	mov	r4,r18
 8001250:	800df580 	call	800df58 <__malloc_unlock>
 8001254:	80800204 	addi	r2,r16,8
 8001258:	003f7d06 	br	8001050 <_malloc_r+0xb4>
 800125c:	00800304 	movi	r2,12
 8001260:	90800015 	stw	r2,0(r18)
 8001264:	0005883a 	mov	r2,zero
 8001268:	003f7906 	br	8001050 <_malloc_r+0xb4>
 800126c:	01401f84 	movi	r5,126
 8001270:	01c00fc4 	movi	r7,63
 8001274:	003f8d06 	br	80010ac <_malloc_r+0x110>
 8001278:	81000317 	ldw	r4,12(r16)
 800127c:	003f6a06 	br	8001028 <_malloc_r+0x8c>
 8001280:	81c5883a 	add	r2,r16,r7
 8001284:	10c00117 	ldw	r3,4(r2)
 8001288:	9009883a 	mov	r4,r18
 800128c:	18c00054 	ori	r3,r3,1
 8001290:	10c00115 	stw	r3,4(r2)
 8001294:	800df580 	call	800df58 <__malloc_unlock>
 8001298:	80800204 	addi	r2,r16,8
 800129c:	003f6c06 	br	8001050 <_malloc_r+0xb4>
 80012a0:	9c000217 	ldw	r16,8(r19)
 80012a4:	00bfff04 	movi	r2,-4
 80012a8:	85800117 	ldw	r22,4(r16)
 80012ac:	b0ac703a 	and	r22,r22,r2
 80012b0:	b4400336 	bltu	r22,r17,80012c0 <_malloc_r+0x324>
 80012b4:	b445c83a 	sub	r2,r22,r17
 80012b8:	00c003c4 	movi	r3,15
 80012bc:	18805d16 	blt	r3,r2,8001434 <_malloc_r+0x498>
 80012c0:	05c200b4 	movhi	r23,2050
 80012c4:	008200f4 	movhi	r2,2051
 80012c8:	bdd13804 	addi	r23,r23,17632
 80012cc:	10bb2c04 	addi	r2,r2,-4944
 80012d0:	15400017 	ldw	r21,0(r2)
 80012d4:	b9000017 	ldw	r4,0(r23)
 80012d8:	00ffffc4 	movi	r3,-1
 80012dc:	858d883a 	add	r6,r16,r22
 80012e0:	8d6b883a 	add	r21,r17,r21
 80012e4:	20c0e426 	beq	r4,r3,8001678 <_malloc_r+0x6dc>
 80012e8:	ad4403c4 	addi	r21,r21,4111
 80012ec:	00fc0004 	movi	r3,-4096
 80012f0:	a8ea703a 	and	r21,r21,r3
 80012f4:	9009883a 	mov	r4,r18
 80012f8:	a80b883a 	mov	r5,r21
 80012fc:	d9800015 	stw	r6,0(sp)
 8001300:	80018680 	call	8001868 <_sbrk_r>
 8001304:	00ffffc4 	movi	r3,-1
 8001308:	1029883a 	mov	r20,r2
 800130c:	d9800017 	ldw	r6,0(sp)
 8001310:	10c0a426 	beq	r2,r3,80015a4 <_malloc_r+0x608>
 8001314:	1180a236 	bltu	r2,r6,80015a0 <_malloc_r+0x604>
 8001318:	070200f4 	movhi	fp,2051
 800131c:	e70d5104 	addi	fp,fp,13636
 8001320:	e0c00017 	ldw	r3,0(fp)
 8001324:	a8c7883a 	add	r3,r21,r3
 8001328:	e0c00015 	stw	r3,0(fp)
 800132c:	3500da26 	beq	r6,r20,8001698 <_malloc_r+0x6fc>
 8001330:	b9000017 	ldw	r4,0(r23)
 8001334:	00bfffc4 	movi	r2,-1
 8001338:	2080e426 	beq	r4,r2,80016cc <_malloc_r+0x730>
 800133c:	a185c83a 	sub	r2,r20,r6
 8001340:	1885883a 	add	r2,r3,r2
 8001344:	e0800015 	stw	r2,0(fp)
 8001348:	a0c001cc 	andi	r3,r20,7
 800134c:	1800b526 	beq	r3,zero,8001624 <_malloc_r+0x688>
 8001350:	a0e9c83a 	sub	r20,r20,r3
 8001354:	00840204 	movi	r2,4104
 8001358:	a5000204 	addi	r20,r20,8
 800135c:	10c7c83a 	sub	r3,r2,r3
 8001360:	a545883a 	add	r2,r20,r21
 8001364:	1083ffcc 	andi	r2,r2,4095
 8001368:	18abc83a 	sub	r21,r3,r2
 800136c:	9009883a 	mov	r4,r18
 8001370:	a80b883a 	mov	r5,r21
 8001374:	80018680 	call	8001868 <_sbrk_r>
 8001378:	00ffffc4 	movi	r3,-1
 800137c:	10c0d026 	beq	r2,r3,80016c0 <_malloc_r+0x724>
 8001380:	1507c83a 	sub	r3,r2,r20
 8001384:	a8c7883a 	add	r3,r21,r3
 8001388:	18c00054 	ori	r3,r3,1
 800138c:	e0800017 	ldw	r2,0(fp)
 8001390:	9d000215 	stw	r20,8(r19)
 8001394:	a0c00115 	stw	r3,4(r20)
 8001398:	a887883a 	add	r3,r21,r2
 800139c:	e0c00015 	stw	r3,0(fp)
 80013a0:	84c00e26 	beq	r16,r19,80013dc <_malloc_r+0x440>
 80013a4:	018003c4 	movi	r6,15
 80013a8:	3580a02e 	bgeu	r6,r22,800162c <_malloc_r+0x690>
 80013ac:	81400117 	ldw	r5,4(r16)
 80013b0:	013ffe04 	movi	r4,-8
 80013b4:	b0bffd04 	addi	r2,r22,-12
 80013b8:	1104703a 	and	r2,r2,r4
 80013bc:	2900004c 	andi	r4,r5,1
 80013c0:	1108b03a 	or	r4,r2,r4
 80013c4:	81000115 	stw	r4,4(r16)
 80013c8:	01400144 	movi	r5,5
 80013cc:	8089883a 	add	r4,r16,r2
 80013d0:	21400115 	stw	r5,4(r4)
 80013d4:	21400215 	stw	r5,8(r4)
 80013d8:	3080c036 	bltu	r6,r2,80016dc <_malloc_r+0x740>
 80013dc:	008200f4 	movhi	r2,2051
 80013e0:	10bb2b04 	addi	r2,r2,-4948
 80013e4:	11000017 	ldw	r4,0(r2)
 80013e8:	20c0012e 	bgeu	r4,r3,80013f0 <_malloc_r+0x454>
 80013ec:	10c00015 	stw	r3,0(r2)
 80013f0:	008200f4 	movhi	r2,2051
 80013f4:	10bb2a04 	addi	r2,r2,-4952
 80013f8:	11000017 	ldw	r4,0(r2)
 80013fc:	9c000217 	ldw	r16,8(r19)
 8001400:	20c0012e 	bgeu	r4,r3,8001408 <_malloc_r+0x46c>
 8001404:	10c00015 	stw	r3,0(r2)
 8001408:	80c00117 	ldw	r3,4(r16)
 800140c:	00bfff04 	movi	r2,-4
 8001410:	1886703a 	and	r3,r3,r2
 8001414:	1c45c83a 	sub	r2,r3,r17
 8001418:	1c400236 	bltu	r3,r17,8001424 <_malloc_r+0x488>
 800141c:	00c003c4 	movi	r3,15
 8001420:	18800416 	blt	r3,r2,8001434 <_malloc_r+0x498>
 8001424:	9009883a 	mov	r4,r18
 8001428:	800df580 	call	800df58 <__malloc_unlock>
 800142c:	0005883a 	mov	r2,zero
 8001430:	003f0706 	br	8001050 <_malloc_r+0xb4>
 8001434:	88c00054 	ori	r3,r17,1
 8001438:	80c00115 	stw	r3,4(r16)
 800143c:	8463883a 	add	r17,r16,r17
 8001440:	10800054 	ori	r2,r2,1
 8001444:	9c400215 	stw	r17,8(r19)
 8001448:	88800115 	stw	r2,4(r17)
 800144c:	9009883a 	mov	r4,r18
 8001450:	800df580 	call	800df58 <__malloc_unlock>
 8001454:	80800204 	addi	r2,r16,8
 8001458:	003efd06 	br	8001050 <_malloc_r+0xb4>
 800145c:	00800504 	movi	r2,20
 8001460:	10c0482e 	bgeu	r2,r3,8001584 <_malloc_r+0x5e8>
 8001464:	00801504 	movi	r2,84
 8001468:	10c06836 	bltu	r2,r3,800160c <_malloc_r+0x670>
 800146c:	8806d33a 	srli	r3,r17,12
 8001470:	19c01b84 	addi	r7,r3,110
 8001474:	39cb883a 	add	r5,r7,r7
 8001478:	003f0c06 	br	80010ac <_malloc_r+0x110>
 800147c:	3804d27a 	srli	r2,r7,9
 8001480:	01000104 	movi	r4,4
 8001484:	2080422e 	bgeu	r4,r2,8001590 <_malloc_r+0x5f4>
 8001488:	01000504 	movi	r4,20
 800148c:	20807c36 	bltu	r4,r2,8001680 <_malloc_r+0x6e4>
 8001490:	110016c4 	addi	r4,r2,91
 8001494:	210b883a 	add	r5,r4,r4
 8001498:	294b883a 	add	r5,r5,r5
 800149c:	294b883a 	add	r5,r5,r5
 80014a0:	994b883a 	add	r5,r19,r5
 80014a4:	28800217 	ldw	r2,8(r5)
 80014a8:	020200b4 	movhi	r8,2050
 80014ac:	420a5304 	addi	r8,r8,10572
 80014b0:	11406326 	beq	r2,r5,8001640 <_malloc_r+0x6a4>
 80014b4:	01bfff04 	movi	r6,-4
 80014b8:	11000117 	ldw	r4,4(r2)
 80014bc:	2188703a 	and	r4,r4,r6
 80014c0:	3900022e 	bgeu	r7,r4,80014cc <_malloc_r+0x530>
 80014c4:	10800217 	ldw	r2,8(r2)
 80014c8:	28bffb1e 	bne	r5,r2,80014b8 <_malloc_r+0x51c>
 80014cc:	11800317 	ldw	r6,12(r2)
 80014d0:	99000117 	ldw	r4,4(r19)
 80014d4:	81800315 	stw	r6,12(r16)
 80014d8:	80800215 	stw	r2,8(r16)
 80014dc:	34000215 	stw	r16,8(r6)
 80014e0:	14000315 	stw	r16,12(r2)
 80014e4:	003f2706 	br	8001184 <_malloc_r+0x1e8>
 80014e8:	88c00054 	ori	r3,r17,1
 80014ec:	80c00115 	stw	r3,4(r16)
 80014f0:	8463883a 	add	r17,r16,r17
 80014f4:	34400515 	stw	r17,20(r6)
 80014f8:	34400415 	stw	r17,16(r6)
 80014fc:	10c00054 	ori	r3,r2,1
 8001500:	8a400315 	stw	r9,12(r17)
 8001504:	8a400215 	stw	r9,8(r17)
 8001508:	88c00115 	stw	r3,4(r17)
 800150c:	88a3883a 	add	r17,r17,r2
 8001510:	88800015 	stw	r2,0(r17)
 8001514:	9009883a 	mov	r4,r18
 8001518:	800df580 	call	800df58 <__malloc_unlock>
 800151c:	80800204 	addi	r2,r16,8
 8001520:	003ecb06 	br	8001050 <_malloc_r+0xb4>
 8001524:	31000117 	ldw	r4,4(r6)
 8001528:	003f1606 	br	8001184 <_malloc_r+0x1e8>
 800152c:	63000044 	addi	r12,r12,1
 8001530:	608000cc 	andi	r2,r12,3
 8001534:	5ac00204 	addi	r11,r11,8
 8001538:	103f2a1e 	bne	r2,zero,80011e4 <_malloc_r+0x248>
 800153c:	00002106 	br	80015c4 <_malloc_r+0x628>
 8001540:	80800204 	addi	r2,r16,8
 8001544:	84000517 	ldw	r16,20(r16)
 8001548:	143eb31e 	bne	r2,r16,8001018 <_malloc_r+0x7c>
 800154c:	18c00084 	addi	r3,r3,2
 8001550:	003eec06 	br	8001104 <_malloc_r+0x168>
 8001554:	8085883a 	add	r2,r16,r2
 8001558:	10c00117 	ldw	r3,4(r2)
 800155c:	81000317 	ldw	r4,12(r16)
 8001560:	81400217 	ldw	r5,8(r16)
 8001564:	18c00054 	ori	r3,r3,1
 8001568:	10c00115 	stw	r3,4(r2)
 800156c:	29000315 	stw	r4,12(r5)
 8001570:	21400215 	stw	r5,8(r4)
 8001574:	9009883a 	mov	r4,r18
 8001578:	800df580 	call	800df58 <__malloc_unlock>
 800157c:	80800204 	addi	r2,r16,8
 8001580:	003eb306 	br	8001050 <_malloc_r+0xb4>
 8001584:	19c016c4 	addi	r7,r3,91
 8001588:	39cb883a 	add	r5,r7,r7
 800158c:	003ec706 	br	80010ac <_malloc_r+0x110>
 8001590:	3804d1ba 	srli	r2,r7,6
 8001594:	11000e04 	addi	r4,r2,56
 8001598:	210b883a 	add	r5,r4,r4
 800159c:	003fbe06 	br	8001498 <_malloc_r+0x4fc>
 80015a0:	84ff5d26 	beq	r16,r19,8001318 <_malloc_r+0x37c>
 80015a4:	9c000217 	ldw	r16,8(r19)
 80015a8:	00bfff04 	movi	r2,-4
 80015ac:	80c00117 	ldw	r3,4(r16)
 80015b0:	1886703a 	and	r3,r3,r2
 80015b4:	003f9706 	br	8001414 <_malloc_r+0x478>
 80015b8:	52800017 	ldw	r10,0(r10)
 80015bc:	18ffffc4 	addi	r3,r3,-1
 80015c0:	50805c1e 	bne	r10,r2,8001734 <_malloc_r+0x798>
 80015c4:	190000cc 	andi	r4,r3,3
 80015c8:	50bffe04 	addi	r2,r10,-8
 80015cc:	203ffa1e 	bne	r4,zero,80015b8 <_malloc_r+0x61c>
 80015d0:	98800117 	ldw	r2,4(r19)
 80015d4:	0146303a 	nor	r3,zero,r5
 80015d8:	1884703a 	and	r2,r3,r2
 80015dc:	98800115 	stw	r2,4(r19)
 80015e0:	294b883a 	add	r5,r5,r5
 80015e4:	117f2e36 	bltu	r2,r5,80012a0 <_malloc_r+0x304>
 80015e8:	283f2d26 	beq	r5,zero,80012a0 <_malloc_r+0x304>
 80015ec:	1146703a 	and	r3,r2,r5
 80015f0:	1800521e 	bne	r3,zero,800173c <_malloc_r+0x7a0>
 80015f4:	6007883a 	mov	r3,r12
 80015f8:	294b883a 	add	r5,r5,r5
 80015fc:	1148703a 	and	r4,r2,r5
 8001600:	18c00104 	addi	r3,r3,4
 8001604:	203ffc26 	beq	r4,zero,80015f8 <_malloc_r+0x65c>
 8001608:	003ef006 	br	80011cc <_malloc_r+0x230>
 800160c:	00805504 	movi	r2,340
 8001610:	10c01336 	bltu	r2,r3,8001660 <_malloc_r+0x6c4>
 8001614:	8806d3fa 	srli	r3,r17,15
 8001618:	19c01dc4 	addi	r7,r3,119
 800161c:	39cb883a 	add	r5,r7,r7
 8001620:	003ea206 	br	80010ac <_malloc_r+0x110>
 8001624:	00c40004 	movi	r3,4096
 8001628:	003f4d06 	br	8001360 <_malloc_r+0x3c4>
 800162c:	00800044 	movi	r2,1
 8001630:	a0800115 	stw	r2,4(r20)
 8001634:	a021883a 	mov	r16,r20
 8001638:	0007883a 	mov	r3,zero
 800163c:	003f7506 	br	8001414 <_malloc_r+0x478>
 8001640:	200bd0ba 	srai	r5,r4,2
 8001644:	01800044 	movi	r6,1
 8001648:	41000117 	ldw	r4,4(r8)
 800164c:	314a983a 	sll	r5,r6,r5
 8001650:	100d883a 	mov	r6,r2
 8001654:	2908b03a 	or	r4,r5,r4
 8001658:	41000115 	stw	r4,4(r8)
 800165c:	003f9d06 	br	80014d4 <_malloc_r+0x538>
 8001660:	00815504 	movi	r2,1364
 8001664:	10c01336 	bltu	r2,r3,80016b4 <_malloc_r+0x718>
 8001668:	8806d4ba 	srli	r3,r17,18
 800166c:	19c01f04 	addi	r7,r3,124
 8001670:	39cb883a 	add	r5,r7,r7
 8001674:	003e8d06 	br	80010ac <_malloc_r+0x110>
 8001678:	ad400404 	addi	r21,r21,16
 800167c:	003f1d06 	br	80012f4 <_malloc_r+0x358>
 8001680:	01001504 	movi	r4,84
 8001684:	20801c36 	bltu	r4,r2,80016f8 <_malloc_r+0x75c>
 8001688:	3804d33a 	srli	r2,r7,12
 800168c:	11001b84 	addi	r4,r2,110
 8001690:	210b883a 	add	r5,r4,r4
 8001694:	003f8006 	br	8001498 <_malloc_r+0x4fc>
 8001698:	3083ffcc 	andi	r2,r6,4095
 800169c:	103f241e 	bne	r2,zero,8001330 <_malloc_r+0x394>
 80016a0:	99000217 	ldw	r4,8(r19)
 80016a4:	ad85883a 	add	r2,r21,r22
 80016a8:	10800054 	ori	r2,r2,1
 80016ac:	20800115 	stw	r2,4(r4)
 80016b0:	003f4a06 	br	80013dc <_malloc_r+0x440>
 80016b4:	01403f04 	movi	r5,252
 80016b8:	01c01f84 	movi	r7,126
 80016bc:	003e7b06 	br	80010ac <_malloc_r+0x110>
 80016c0:	00c00044 	movi	r3,1
 80016c4:	002b883a 	mov	r21,zero
 80016c8:	003f3006 	br	800138c <_malloc_r+0x3f0>
 80016cc:	008200b4 	movhi	r2,2050
 80016d0:	10913804 	addi	r2,r2,17632
 80016d4:	15000015 	stw	r20,0(r2)
 80016d8:	003f1b06 	br	8001348 <_malloc_r+0x3ac>
 80016dc:	9009883a 	mov	r4,r18
 80016e0:	81400204 	addi	r5,r16,8
 80016e4:	8005bfc0 	call	8005bfc <_free_r>
 80016e8:	008200f4 	movhi	r2,2051
 80016ec:	108d5104 	addi	r2,r2,13636
 80016f0:	10c00017 	ldw	r3,0(r2)
 80016f4:	003f3906 	br	80013dc <_malloc_r+0x440>
 80016f8:	01005504 	movi	r4,340
 80016fc:	20800436 	bltu	r4,r2,8001710 <_malloc_r+0x774>
 8001700:	3804d3fa 	srli	r2,r7,15
 8001704:	11001dc4 	addi	r4,r2,119
 8001708:	210b883a 	add	r5,r4,r4
 800170c:	003f6206 	br	8001498 <_malloc_r+0x4fc>
 8001710:	01015504 	movi	r4,1364
 8001714:	20800436 	bltu	r4,r2,8001728 <_malloc_r+0x78c>
 8001718:	3804d4ba 	srli	r2,r7,18
 800171c:	11001f04 	addi	r4,r2,124
 8001720:	210b883a 	add	r5,r4,r4
 8001724:	003f5c06 	br	8001498 <_malloc_r+0x4fc>
 8001728:	01403f04 	movi	r5,252
 800172c:	01001f84 	movi	r4,126
 8001730:	003f5906 	br	8001498 <_malloc_r+0x4fc>
 8001734:	98800117 	ldw	r2,4(r19)
 8001738:	003fa906 	br	80015e0 <_malloc_r+0x644>
 800173c:	6007883a 	mov	r3,r12
 8001740:	003ea206 	br	80011cc <_malloc_r+0x230>

08001744 <_printf_r>:
 8001744:	defffd04 	addi	sp,sp,-12
 8001748:	dfc00015 	stw	ra,0(sp)
 800174c:	d9800115 	stw	r6,4(sp)
 8001750:	d9c00215 	stw	r7,8(sp)
 8001754:	280d883a 	mov	r6,r5
 8001758:	21400217 	ldw	r5,8(r4)
 800175c:	d9c00104 	addi	r7,sp,4
 8001760:	80019f80 	call	80019f8 <___vfprintf_internal_r>
 8001764:	dfc00017 	ldw	ra,0(sp)
 8001768:	dec00304 	addi	sp,sp,12
 800176c:	f800283a 	ret

08001770 <printf>:
 8001770:	defffc04 	addi	sp,sp,-16
 8001774:	dfc00015 	stw	ra,0(sp)
 8001778:	d9400115 	stw	r5,4(sp)
 800177c:	d9800215 	stw	r6,8(sp)
 8001780:	d9c00315 	stw	r7,12(sp)
 8001784:	008200b4 	movhi	r2,2050
 8001788:	10913b04 	addi	r2,r2,17644
 800178c:	10800017 	ldw	r2,0(r2)
 8001790:	200b883a 	mov	r5,r4
 8001794:	d9800104 	addi	r6,sp,4
 8001798:	11000217 	ldw	r4,8(r2)
 800179c:	80039480 	call	8003948 <__vfprintf_internal>
 80017a0:	dfc00017 	ldw	ra,0(sp)
 80017a4:	dec00404 	addi	sp,sp,16
 80017a8:	f800283a 	ret

080017ac <_puts_r>:
 80017ac:	defff604 	addi	sp,sp,-40
 80017b0:	dc000715 	stw	r16,28(sp)
 80017b4:	2021883a 	mov	r16,r4
 80017b8:	2809883a 	mov	r4,r5
 80017bc:	dc400815 	stw	r17,32(sp)
 80017c0:	dfc00915 	stw	ra,36(sp)
 80017c4:	2823883a 	mov	r17,r5
 80017c8:	80019600 	call	8001960 <strlen>
 80017cc:	81400217 	ldw	r5,8(r16)
 80017d0:	11000044 	addi	r4,r2,1
 80017d4:	d8800115 	stw	r2,4(sp)
 80017d8:	008200b4 	movhi	r2,2050
 80017dc:	2980030b 	ldhu	r6,12(r5)
 80017e0:	10a69104 	addi	r2,r2,-26044
 80017e4:	d8800215 	stw	r2,8(sp)
 80017e8:	00800044 	movi	r2,1
 80017ec:	d8800315 	stw	r2,12(sp)
 80017f0:	00800084 	movi	r2,2
 80017f4:	d8800515 	stw	r2,20(sp)
 80017f8:	dc400015 	stw	r17,0(sp)
 80017fc:	d9000615 	stw	r4,24(sp)
 8001800:	dec00415 	stw	sp,16(sp)
 8001804:	3088000c 	andi	r2,r6,8192
 8001808:	1000061e 	bne	r2,zero,8001824 <_puts_r+0x78>
 800180c:	29001917 	ldw	r4,100(r5)
 8001810:	00b7ffc4 	movi	r2,-8193
 8001814:	31880014 	ori	r6,r6,8192
 8001818:	2084703a 	and	r2,r4,r2
 800181c:	2980030d 	sth	r6,12(r5)
 8001820:	28801915 	stw	r2,100(r5)
 8001824:	8009883a 	mov	r4,r16
 8001828:	d9800404 	addi	r6,sp,16
 800182c:	8005eec0 	call	8005eec <__sfvwrite_r>
 8001830:	1000061e 	bne	r2,zero,800184c <_puts_r+0xa0>
 8001834:	00800284 	movi	r2,10
 8001838:	dfc00917 	ldw	ra,36(sp)
 800183c:	dc400817 	ldw	r17,32(sp)
 8001840:	dc000717 	ldw	r16,28(sp)
 8001844:	dec00a04 	addi	sp,sp,40
 8001848:	f800283a 	ret
 800184c:	00bfffc4 	movi	r2,-1
 8001850:	003ff906 	br	8001838 <_puts_r+0x8c>

08001854 <puts>:
 8001854:	008200b4 	movhi	r2,2050
 8001858:	10913b04 	addi	r2,r2,17644
 800185c:	200b883a 	mov	r5,r4
 8001860:	11000017 	ldw	r4,0(r2)
 8001864:	80017ac1 	jmpi	80017ac <_puts_r>

08001868 <_sbrk_r>:
 8001868:	defffd04 	addi	sp,sp,-12
 800186c:	dc000015 	stw	r16,0(sp)
 8001870:	040200f4 	movhi	r16,2051
 8001874:	dc400115 	stw	r17,4(sp)
 8001878:	843b2d04 	addi	r16,r16,-4940
 800187c:	2023883a 	mov	r17,r4
 8001880:	2809883a 	mov	r4,r5
 8001884:	dfc00215 	stw	ra,8(sp)
 8001888:	80000015 	stw	zero,0(r16)
 800188c:	800db240 	call	800db24 <sbrk>
 8001890:	00ffffc4 	movi	r3,-1
 8001894:	10c00526 	beq	r2,r3,80018ac <_sbrk_r+0x44>
 8001898:	dfc00217 	ldw	ra,8(sp)
 800189c:	dc400117 	ldw	r17,4(sp)
 80018a0:	dc000017 	ldw	r16,0(sp)
 80018a4:	dec00304 	addi	sp,sp,12
 80018a8:	f800283a 	ret
 80018ac:	80c00017 	ldw	r3,0(r16)
 80018b0:	183ff926 	beq	r3,zero,8001898 <_sbrk_r+0x30>
 80018b4:	88c00015 	stw	r3,0(r17)
 80018b8:	003ff706 	br	8001898 <_sbrk_r+0x30>

080018bc <strcmp>:
 80018bc:	2144b03a 	or	r2,r4,r5
 80018c0:	108000cc 	andi	r2,r2,3
 80018c4:	1000171e 	bne	r2,zero,8001924 <strcmp+0x68>
 80018c8:	20800017 	ldw	r2,0(r4)
 80018cc:	28c00017 	ldw	r3,0(r5)
 80018d0:	10c0141e 	bne	r2,r3,8001924 <strcmp+0x68>
 80018d4:	027fbff4 	movhi	r9,65279
 80018d8:	4a7fbfc4 	addi	r9,r9,-257
 80018dc:	0086303a 	nor	r3,zero,r2
 80018e0:	02202074 	movhi	r8,32897
 80018e4:	1245883a 	add	r2,r2,r9
 80018e8:	42202004 	addi	r8,r8,-32640
 80018ec:	10c4703a 	and	r2,r2,r3
 80018f0:	1204703a 	and	r2,r2,r8
 80018f4:	10000226 	beq	r2,zero,8001900 <strcmp+0x44>
 80018f8:	00001706 	br	8001958 <strcmp+0x9c>
 80018fc:	1000161e 	bne	r2,zero,8001958 <strcmp+0x9c>
 8001900:	21000104 	addi	r4,r4,4
 8001904:	20c00017 	ldw	r3,0(r4)
 8001908:	29400104 	addi	r5,r5,4
 800190c:	29800017 	ldw	r6,0(r5)
 8001910:	1a4f883a 	add	r7,r3,r9
 8001914:	00c4303a 	nor	r2,zero,r3
 8001918:	3884703a 	and	r2,r7,r2
 800191c:	1204703a 	and	r2,r2,r8
 8001920:	19bff626 	beq	r3,r6,80018fc <strcmp+0x40>
 8001924:	20800007 	ldb	r2,0(r4)
 8001928:	1000051e 	bne	r2,zero,8001940 <strcmp+0x84>
 800192c:	00000606 	br	8001948 <strcmp+0x8c>
 8001930:	21000044 	addi	r4,r4,1
 8001934:	20800007 	ldb	r2,0(r4)
 8001938:	29400044 	addi	r5,r5,1
 800193c:	10000226 	beq	r2,zero,8001948 <strcmp+0x8c>
 8001940:	28c00007 	ldb	r3,0(r5)
 8001944:	10fffa26 	beq	r2,r3,8001930 <strcmp+0x74>
 8001948:	20800003 	ldbu	r2,0(r4)
 800194c:	28c00003 	ldbu	r3,0(r5)
 8001950:	10c5c83a 	sub	r2,r2,r3
 8001954:	f800283a 	ret
 8001958:	0005883a 	mov	r2,zero
 800195c:	f800283a 	ret

08001960 <strlen>:
 8001960:	208000cc 	andi	r2,r4,3
 8001964:	10002026 	beq	r2,zero,80019e8 <strlen+0x88>
 8001968:	20800007 	ldb	r2,0(r4)
 800196c:	10002026 	beq	r2,zero,80019f0 <strlen+0x90>
 8001970:	2005883a 	mov	r2,r4
 8001974:	00000206 	br	8001980 <strlen+0x20>
 8001978:	10c00007 	ldb	r3,0(r2)
 800197c:	18001826 	beq	r3,zero,80019e0 <strlen+0x80>
 8001980:	10800044 	addi	r2,r2,1
 8001984:	10c000cc 	andi	r3,r2,3
 8001988:	183ffb1e 	bne	r3,zero,8001978 <strlen+0x18>
 800198c:	10c00017 	ldw	r3,0(r2)
 8001990:	01ffbff4 	movhi	r7,65279
 8001994:	39ffbfc4 	addi	r7,r7,-257
 8001998:	00ca303a 	nor	r5,zero,r3
 800199c:	01a02074 	movhi	r6,32897
 80019a0:	19c7883a 	add	r3,r3,r7
 80019a4:	31a02004 	addi	r6,r6,-32640
 80019a8:	1946703a 	and	r3,r3,r5
 80019ac:	1986703a 	and	r3,r3,r6
 80019b0:	1800091e 	bne	r3,zero,80019d8 <strlen+0x78>
 80019b4:	10800104 	addi	r2,r2,4
 80019b8:	10c00017 	ldw	r3,0(r2)
 80019bc:	19cb883a 	add	r5,r3,r7
 80019c0:	00c6303a 	nor	r3,zero,r3
 80019c4:	28c6703a 	and	r3,r5,r3
 80019c8:	1986703a 	and	r3,r3,r6
 80019cc:	183ff926 	beq	r3,zero,80019b4 <strlen+0x54>
 80019d0:	00000106 	br	80019d8 <strlen+0x78>
 80019d4:	10800044 	addi	r2,r2,1
 80019d8:	10c00007 	ldb	r3,0(r2)
 80019dc:	183ffd1e 	bne	r3,zero,80019d4 <strlen+0x74>
 80019e0:	1105c83a 	sub	r2,r2,r4
 80019e4:	f800283a 	ret
 80019e8:	2005883a 	mov	r2,r4
 80019ec:	003fe706 	br	800198c <strlen+0x2c>
 80019f0:	0005883a 	mov	r2,zero
 80019f4:	f800283a 	ret

080019f8 <___vfprintf_internal_r>:
 80019f8:	deffb604 	addi	sp,sp,-296
 80019fc:	dfc04915 	stw	ra,292(sp)
 8001a00:	ddc04715 	stw	r23,284(sp)
 8001a04:	dd804615 	stw	r22,280(sp)
 8001a08:	282f883a 	mov	r23,r5
 8001a0c:	202d883a 	mov	r22,r4
 8001a10:	d9802a15 	stw	r6,168(sp)
 8001a14:	d9c02d15 	stw	r7,180(sp)
 8001a18:	df004815 	stw	fp,288(sp)
 8001a1c:	dd404515 	stw	r21,276(sp)
 8001a20:	dd004415 	stw	r20,272(sp)
 8001a24:	dcc04315 	stw	r19,268(sp)
 8001a28:	dc804215 	stw	r18,264(sp)
 8001a2c:	dc404115 	stw	r17,260(sp)
 8001a30:	dc004015 	stw	r16,256(sp)
 8001a34:	80065e00 	call	80065e0 <_localeconv_r>
 8001a38:	10800017 	ldw	r2,0(r2)
 8001a3c:	1009883a 	mov	r4,r2
 8001a40:	d8803515 	stw	r2,212(sp)
 8001a44:	80019600 	call	8001960 <strlen>
 8001a48:	d8803815 	stw	r2,224(sp)
 8001a4c:	b0000226 	beq	r22,zero,8001a58 <___vfprintf_internal_r+0x60>
 8001a50:	b0800e17 	ldw	r2,56(r22)
 8001a54:	1000e126 	beq	r2,zero,8001ddc <___vfprintf_internal_r+0x3e4>
 8001a58:	b880030b 	ldhu	r2,12(r23)
 8001a5c:	10c8000c 	andi	r3,r2,8192
 8001a60:	1800061e 	bne	r3,zero,8001a7c <___vfprintf_internal_r+0x84>
 8001a64:	b9001917 	ldw	r4,100(r23)
 8001a68:	00f7ffc4 	movi	r3,-8193
 8001a6c:	10880014 	ori	r2,r2,8192
 8001a70:	20c6703a 	and	r3,r4,r3
 8001a74:	b880030d 	sth	r2,12(r23)
 8001a78:	b8c01915 	stw	r3,100(r23)
 8001a7c:	10c0020c 	andi	r3,r2,8
 8001a80:	1800a726 	beq	r3,zero,8001d20 <___vfprintf_internal_r+0x328>
 8001a84:	b8c00417 	ldw	r3,16(r23)
 8001a88:	1800a526 	beq	r3,zero,8001d20 <___vfprintf_internal_r+0x328>
 8001a8c:	1080068c 	andi	r2,r2,26
 8001a90:	00c00284 	movi	r3,10
 8001a94:	10c0aa26 	beq	r2,r3,8001d40 <___vfprintf_internal_r+0x348>
 8001a98:	dac01e04 	addi	r11,sp,120
 8001a9c:	db001dc4 	addi	r12,sp,119
 8001aa0:	d8800404 	addi	r2,sp,16
 8001aa4:	050200b4 	movhi	r20,2050
 8001aa8:	dac02815 	stw	r11,160(sp)
 8001aac:	5b17c83a 	sub	r11,r11,r12
 8001ab0:	a526a284 	addi	r20,r20,-25974
 8001ab4:	db002915 	stw	r12,164(sp)
 8001ab8:	d8801e15 	stw	r2,120(sp)
 8001abc:	d8002015 	stw	zero,128(sp)
 8001ac0:	d8001f15 	stw	zero,124(sp)
 8001ac4:	d8003315 	stw	zero,204(sp)
 8001ac8:	d8003715 	stw	zero,220(sp)
 8001acc:	d8003915 	stw	zero,228(sp)
 8001ad0:	1011883a 	mov	r8,r2
 8001ad4:	d8003b15 	stw	zero,236(sp)
 8001ad8:	d8003a15 	stw	zero,232(sp)
 8001adc:	d8002f15 	stw	zero,188(sp)
 8001ae0:	dac03c15 	stw	r11,240(sp)
 8001ae4:	db002a17 	ldw	r12,168(sp)
 8001ae8:	60800007 	ldb	r2,0(r12)
 8001aec:	1000be26 	beq	r2,zero,8001de8 <___vfprintf_internal_r+0x3f0>
 8001af0:	00c00944 	movi	r3,37
 8001af4:	10c0bc26 	beq	r2,r3,8001de8 <___vfprintf_internal_r+0x3f0>
 8001af8:	6021883a 	mov	r16,r12
 8001afc:	00000106 	br	8001b04 <___vfprintf_internal_r+0x10c>
 8001b00:	10c08426 	beq	r2,r3,8001d14 <___vfprintf_internal_r+0x31c>
 8001b04:	84000044 	addi	r16,r16,1
 8001b08:	80800007 	ldb	r2,0(r16)
 8001b0c:	103ffc1e 	bne	r2,zero,8001b00 <___vfprintf_internal_r+0x108>
 8001b10:	dac02a17 	ldw	r11,168(sp)
 8001b14:	82e3c83a 	sub	r17,r16,r11
 8001b18:	88000f26 	beq	r17,zero,8001b58 <___vfprintf_internal_r+0x160>
 8001b1c:	d8c02017 	ldw	r3,128(sp)
 8001b20:	d8801f17 	ldw	r2,124(sp)
 8001b24:	dac02a17 	ldw	r11,168(sp)
 8001b28:	1c47883a 	add	r3,r3,r17
 8001b2c:	10800044 	addi	r2,r2,1
 8001b30:	d8c02015 	stw	r3,128(sp)
 8001b34:	42c00015 	stw	r11,0(r8)
 8001b38:	44400115 	stw	r17,4(r8)
 8001b3c:	d8801f15 	stw	r2,124(sp)
 8001b40:	00c001c4 	movi	r3,7
 8001b44:	18809316 	blt	r3,r2,8001d94 <___vfprintf_internal_r+0x39c>
 8001b48:	42000204 	addi	r8,r8,8
 8001b4c:	db002f17 	ldw	r12,188(sp)
 8001b50:	6459883a 	add	r12,r12,r17
 8001b54:	db002f15 	stw	r12,188(sp)
 8001b58:	80800007 	ldb	r2,0(r16)
 8001b5c:	10009426 	beq	r2,zero,8001db0 <___vfprintf_internal_r+0x3b8>
 8001b60:	80800044 	addi	r2,r16,1
 8001b64:	84000047 	ldb	r16,1(r16)
 8001b68:	d8002785 	stb	zero,158(sp)
 8001b6c:	000d883a 	mov	r6,zero
 8001b70:	027fffc4 	movi	r9,-1
 8001b74:	d8002e15 	stw	zero,184(sp)
 8001b78:	0023883a 	mov	r17,zero
 8001b7c:	01001604 	movi	r4,88
 8001b80:	01400244 	movi	r5,9
 8001b84:	02800a84 	movi	r10,42
 8001b88:	01c01b04 	movi	r7,108
 8001b8c:	10c00044 	addi	r3,r2,1
 8001b90:	80bff804 	addi	r2,r16,-32
 8001b94:	2082cd36 	bltu	r4,r2,80026cc <___vfprintf_internal_r+0xcd4>
 8001b98:	100490ba 	slli	r2,r2,2
 8001b9c:	02c20034 	movhi	r11,2048
 8001ba0:	5ac6ec04 	addi	r11,r11,7088
 8001ba4:	12c5883a 	add	r2,r2,r11
 8001ba8:	10800017 	ldw	r2,0(r2)
 8001bac:	1000683a 	jmp	r2
 8001bb0:	080024e4 	muli	zero,at,147
 8001bb4:	080026cc 	andi	zero,at,155
 8001bb8:	080026cc 	andi	zero,at,155
 8001bbc:	08002634 	orhi	zero,at,152
 8001bc0:	080026cc 	andi	zero,at,155
 8001bc4:	080026cc 	andi	zero,at,155
 8001bc8:	080026cc 	andi	zero,at,155
 8001bcc:	080026cc 	andi	zero,at,155
 8001bd0:	080026cc 	andi	zero,at,155
 8001bd4:	080026cc 	andi	zero,at,155
 8001bd8:	08002504 	addi	zero,at,148
 8001bdc:	08002530 	cmpltui	zero,at,148
 8001be0:	080026cc 	andi	zero,at,155
 8001be4:	08001df0 	cmpltui	zero,at,119
 8001be8:	08001e00 	call	8001e0 <OSCtxSw_SWITCH_PC+0x8001a0>
 8001bec:	080026cc 	andi	zero,at,155
 8001bf0:	08001e40 	call	8001e4 <OSCtxSw_SWITCH_PC+0x8001a4>
 8001bf4:	08001e50 	cmplti	zero,at,121
 8001bf8:	08001e50 	cmplti	zero,at,121
 8001bfc:	08001e50 	cmplti	zero,at,121
 8001c00:	08001e50 	cmplti	zero,at,121
 8001c04:	08001e50 	cmplti	zero,at,121
 8001c08:	08001e50 	cmplti	zero,at,121
 8001c0c:	08001e50 	cmplti	zero,at,121
 8001c10:	08001e50 	cmplti	zero,at,121
 8001c14:	08001e50 	cmplti	zero,at,121
 8001c18:	080026cc 	andi	zero,at,155
 8001c1c:	080026cc 	andi	zero,at,155
 8001c20:	080026cc 	andi	zero,at,155
 8001c24:	080026cc 	andi	zero,at,155
 8001c28:	080026cc 	andi	zero,at,155
 8001c2c:	080026cc 	andi	zero,at,155
 8001c30:	080026cc 	andi	zero,at,155
 8001c34:	080026cc 	andi	zero,at,155
 8001c38:	080026cc 	andi	zero,at,155
 8001c3c:	080026cc 	andi	zero,at,155
 8001c40:	08001e84 	addi	zero,at,122
 8001c44:	080022f4 	orhi	zero,at,139
 8001c48:	080026cc 	andi	zero,at,155
 8001c4c:	080022f4 	orhi	zero,at,139
 8001c50:	080026cc 	andi	zero,at,155
 8001c54:	080026cc 	andi	zero,at,155
 8001c58:	080026cc 	andi	zero,at,155
 8001c5c:	080026cc 	andi	zero,at,155
 8001c60:	080023e0 	cmpeqi	zero,at,143
 8001c64:	080026cc 	andi	zero,at,155
 8001c68:	080026cc 	andi	zero,at,155
 8001c6c:	08002288 	cmpgei	zero,at,138
 8001c70:	080026cc 	andi	zero,at,155
 8001c74:	080026cc 	andi	zero,at,155
 8001c78:	080026cc 	andi	zero,at,155
 8001c7c:	080026cc 	andi	zero,at,155
 8001c80:	080026cc 	andi	zero,at,155
 8001c84:	080022c4 	addi	zero,at,139
 8001c88:	080026cc 	andi	zero,at,155
 8001c8c:	080026cc 	andi	zero,at,155
 8001c90:	08002488 	cmpgei	zero,at,146
 8001c94:	080026cc 	andi	zero,at,155
 8001c98:	080026cc 	andi	zero,at,155
 8001c9c:	080026cc 	andi	zero,at,155
 8001ca0:	080026cc 	andi	zero,at,155
 8001ca4:	080026cc 	andi	zero,at,155
 8001ca8:	080026cc 	andi	zero,at,155
 8001cac:	080026cc 	andi	zero,at,155
 8001cb0:	080026cc 	andi	zero,at,155
 8001cb4:	080026cc 	andi	zero,at,155
 8001cb8:	080026cc 	andi	zero,at,155
 8001cbc:	08002540 	call	800254 <OSCtxSw_SWITCH_PC+0x800214>
 8001cc0:	080023f0 	cmpltui	zero,at,143
 8001cc4:	080022f4 	orhi	zero,at,139
 8001cc8:	080022f4 	orhi	zero,at,139
 8001ccc:	080022f4 	orhi	zero,at,139
 8001cd0:	08002430 	cmpltui	zero,at,144
 8001cd4:	080023f0 	cmpltui	zero,at,143
 8001cd8:	080026cc 	andi	zero,at,155
 8001cdc:	080026cc 	andi	zero,at,155
 8001ce0:	08002440 	call	800244 <OSCtxSw_SWITCH_PC+0x800204>
 8001ce4:	080026cc 	andi	zero,at,155
 8001ce8:	08002454 	ori	zero,at,145
 8001cec:	08002690 	cmplti	zero,at,154
 8001cf0:	08002398 	cmpnei	zero,at,142
 8001cf4:	08002644 	addi	zero,at,153
 8001cf8:	080026cc 	andi	zero,at,155
 8001cfc:	08002580 	call	800258 <OSCtxSw_SWITCH_PC+0x800218>
 8001d00:	080026cc 	andi	zero,at,155
 8001d04:	08002654 	ori	zero,at,153
 8001d08:	080026cc 	andi	zero,at,155
 8001d0c:	080026cc 	andi	zero,at,155
 8001d10:	080025f4 	orhi	zero,at,151
 8001d14:	db002a17 	ldw	r12,168(sp)
 8001d18:	8323c83a 	sub	r17,r16,r12
 8001d1c:	003f7e06 	br	8001b18 <___vfprintf_internal_r+0x120>
 8001d20:	b009883a 	mov	r4,r22
 8001d24:	b80b883a 	mov	r5,r23
 8001d28:	8003a280 	call	8003a28 <__swsetup_r>
 8001d2c:	10000c1e 	bne	r2,zero,8001d60 <___vfprintf_internal_r+0x368>
 8001d30:	b880030b 	ldhu	r2,12(r23)
 8001d34:	00c00284 	movi	r3,10
 8001d38:	1080068c 	andi	r2,r2,26
 8001d3c:	10ff561e 	bne	r2,r3,8001a98 <___vfprintf_internal_r+0xa0>
 8001d40:	b880038f 	ldh	r2,14(r23)
 8001d44:	103f5416 	blt	r2,zero,8001a98 <___vfprintf_internal_r+0xa0>
 8001d48:	d9802a17 	ldw	r6,168(sp)
 8001d4c:	d9c02d17 	ldw	r7,180(sp)
 8001d50:	b009883a 	mov	r4,r22
 8001d54:	b80b883a 	mov	r5,r23
 8001d58:	800396c0 	call	800396c <__sbprintf>
 8001d5c:	00000106 	br	8001d64 <___vfprintf_internal_r+0x36c>
 8001d60:	00bfffc4 	movi	r2,-1
 8001d64:	dfc04917 	ldw	ra,292(sp)
 8001d68:	df004817 	ldw	fp,288(sp)
 8001d6c:	ddc04717 	ldw	r23,284(sp)
 8001d70:	dd804617 	ldw	r22,280(sp)
 8001d74:	dd404517 	ldw	r21,276(sp)
 8001d78:	dd004417 	ldw	r20,272(sp)
 8001d7c:	dcc04317 	ldw	r19,268(sp)
 8001d80:	dc804217 	ldw	r18,264(sp)
 8001d84:	dc404117 	ldw	r17,260(sp)
 8001d88:	dc004017 	ldw	r16,256(sp)
 8001d8c:	dec04a04 	addi	sp,sp,296
 8001d90:	f800283a 	ret
 8001d94:	b009883a 	mov	r4,r22
 8001d98:	b80b883a 	mov	r5,r23
 8001d9c:	d9801e04 	addi	r6,sp,120
 8001da0:	80084200 	call	8008420 <__sprint_r>
 8001da4:	1000081e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8001da8:	da000404 	addi	r8,sp,16
 8001dac:	003f6706 	br	8001b4c <___vfprintf_internal_r+0x154>
 8001db0:	d8802017 	ldw	r2,128(sp)
 8001db4:	10000426 	beq	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8001db8:	b009883a 	mov	r4,r22
 8001dbc:	b80b883a 	mov	r5,r23
 8001dc0:	d9801e04 	addi	r6,sp,120
 8001dc4:	80084200 	call	8008420 <__sprint_r>
 8001dc8:	b880030b 	ldhu	r2,12(r23)
 8001dcc:	1080100c 	andi	r2,r2,64
 8001dd0:	103fe31e 	bne	r2,zero,8001d60 <___vfprintf_internal_r+0x368>
 8001dd4:	d8802f17 	ldw	r2,188(sp)
 8001dd8:	003fe206 	br	8001d64 <___vfprintf_internal_r+0x36c>
 8001ddc:	b009883a 	mov	r4,r22
 8001de0:	8005a880 	call	8005a88 <__sinit>
 8001de4:	003f1c06 	br	8001a58 <___vfprintf_internal_r+0x60>
 8001de8:	dc002a17 	ldw	r16,168(sp)
 8001dec:	003f5a06 	br	8001b58 <___vfprintf_internal_r+0x160>
 8001df0:	1805883a 	mov	r2,r3
 8001df4:	8c400114 	ori	r17,r17,4
 8001df8:	1c000007 	ldb	r16,0(r3)
 8001dfc:	003f6306 	br	8001b8c <___vfprintf_internal_r+0x194>
 8001e00:	1c000007 	ldb	r16,0(r3)
 8001e04:	18800044 	addi	r2,r3,1
 8001e08:	8286ad26 	beq	r16,r10,80038c0 <___vfprintf_internal_r+0x1ec8>
 8001e0c:	82fff404 	addi	r11,r16,-48
 8001e10:	1007883a 	mov	r3,r2
 8001e14:	0013883a 	mov	r9,zero
 8001e18:	2aff5d36 	bltu	r5,r11,8001b90 <___vfprintf_internal_r+0x198>
 8001e1c:	1c000007 	ldb	r16,0(r3)
 8001e20:	4a4002a4 	muli	r9,r9,10
 8001e24:	18c00044 	addi	r3,r3,1
 8001e28:	5a53883a 	add	r9,r11,r9
 8001e2c:	82fff404 	addi	r11,r16,-48
 8001e30:	2afffa2e 	bgeu	r5,r11,8001e1c <___vfprintf_internal_r+0x424>
 8001e34:	483f560e 	bge	r9,zero,8001b90 <___vfprintf_internal_r+0x198>
 8001e38:	027fffc4 	movi	r9,-1
 8001e3c:	003f5406 	br	8001b90 <___vfprintf_internal_r+0x198>
 8001e40:	8c402014 	ori	r17,r17,128
 8001e44:	1805883a 	mov	r2,r3
 8001e48:	1c000007 	ldb	r16,0(r3)
 8001e4c:	003f4f06 	br	8001b8c <___vfprintf_internal_r+0x194>
 8001e50:	1805883a 	mov	r2,r3
 8001e54:	d8002e15 	stw	zero,184(sp)
 8001e58:	82fff404 	addi	r11,r16,-48
 8001e5c:	0019883a 	mov	r12,zero
 8001e60:	14000007 	ldb	r16,0(r2)
 8001e64:	630002a4 	muli	r12,r12,10
 8001e68:	18c00044 	addi	r3,r3,1
 8001e6c:	1805883a 	mov	r2,r3
 8001e70:	62d9883a 	add	r12,r12,r11
 8001e74:	82fff404 	addi	r11,r16,-48
 8001e78:	2afff92e 	bgeu	r5,r11,8001e60 <___vfprintf_internal_r+0x468>
 8001e7c:	db002e15 	stw	r12,184(sp)
 8001e80:	003f4306 	br	8001b90 <___vfprintf_internal_r+0x198>
 8001e84:	8c400414 	ori	r17,r17,16
 8001e88:	d8c02a15 	stw	r3,168(sp)
 8001e8c:	d9802785 	stb	r6,158(sp)
 8001e90:	8880080c 	andi	r2,r17,32
 8001e94:	d8c02d17 	ldw	r3,180(sp)
 8001e98:	10015a26 	beq	r2,zero,8002404 <___vfprintf_internal_r+0xa0c>
 8001e9c:	db002d17 	ldw	r12,180(sp)
 8001ea0:	18800117 	ldw	r2,4(r3)
 8001ea4:	1cc00017 	ldw	r19,0(r3)
 8001ea8:	63000204 	addi	r12,r12,8
 8001eac:	db002d15 	stw	r12,180(sp)
 8001eb0:	1039883a 	mov	fp,r2
 8001eb4:	10044516 	blt	r2,zero,8002fcc <___vfprintf_internal_r+0x15d4>
 8001eb8:	dd402783 	ldbu	r21,158(sp)
 8001ebc:	da403215 	stw	r9,200(sp)
 8001ec0:	00800044 	movi	r2,1
 8001ec4:	9f06b03a 	or	r3,r19,fp
 8001ec8:	48000216 	blt	r9,zero,8001ed4 <___vfprintf_internal_r+0x4dc>
 8001ecc:	013fdfc4 	movi	r4,-129
 8001ed0:	8922703a 	and	r17,r17,r4
 8001ed4:	1802071e 	bne	r3,zero,80026f4 <___vfprintf_internal_r+0xcfc>
 8001ed8:	4802fa26 	beq	r9,zero,8002ac4 <___vfprintf_internal_r+0x10cc>
 8001edc:	10803fcc 	andi	r2,r2,255
 8001ee0:	00c00044 	movi	r3,1
 8001ee4:	10c22926 	beq	r2,r3,800278c <___vfprintf_internal_r+0xd94>
 8001ee8:	00c00084 	movi	r3,2
 8001eec:	10c31726 	beq	r2,r3,8002b4c <___vfprintf_internal_r+0x1154>
 8001ef0:	d8c01e04 	addi	r3,sp,120
 8001ef4:	9808d0fa 	srli	r4,r19,3
 8001ef8:	e00a977a 	slli	r5,fp,29
 8001efc:	e038d0fa 	srli	fp,fp,3
 8001f00:	9cc001cc 	andi	r19,r19,7
 8001f04:	98800c04 	addi	r2,r19,48
 8001f08:	18ffffc4 	addi	r3,r3,-1
 8001f0c:	2926b03a 	or	r19,r5,r4
 8001f10:	18800005 	stb	r2,0(r3)
 8001f14:	9f08b03a 	or	r4,r19,fp
 8001f18:	203ff61e 	bne	r4,zero,8001ef4 <___vfprintf_internal_r+0x4fc>
 8001f1c:	8900004c 	andi	r4,r17,1
 8001f20:	d8c03115 	stw	r3,196(sp)
 8001f24:	2003931e 	bne	r4,zero,8002d74 <___vfprintf_internal_r+0x137c>
 8001f28:	dac02817 	ldw	r11,160(sp)
 8001f2c:	58e5c83a 	sub	r18,r11,r3
 8001f30:	9005883a 	mov	r2,r18
 8001f34:	9240010e 	bge	r18,r9,8001f3c <___vfprintf_internal_r+0x544>
 8001f38:	4805883a 	mov	r2,r9
 8001f3c:	d8802b15 	stw	r2,172(sp)
 8001f40:	d8003415 	stw	zero,208(sp)
 8001f44:	a8803fcc 	andi	r2,r21,255
 8001f48:	1080201c 	xori	r2,r2,128
 8001f4c:	10bfe004 	addi	r2,r2,-128
 8001f50:	10000326 	beq	r2,zero,8001f60 <___vfprintf_internal_r+0x568>
 8001f54:	db002b17 	ldw	r12,172(sp)
 8001f58:	63000044 	addi	r12,r12,1
 8001f5c:	db002b15 	stw	r12,172(sp)
 8001f60:	88c0008c 	andi	r3,r17,2
 8001f64:	d8c02c15 	stw	r3,176(sp)
 8001f68:	18000326 	beq	r3,zero,8001f78 <___vfprintf_internal_r+0x580>
 8001f6c:	dac02b17 	ldw	r11,172(sp)
 8001f70:	5ac00084 	addi	r11,r11,2
 8001f74:	dac02b15 	stw	r11,172(sp)
 8001f78:	8b00210c 	andi	r12,r17,132
 8001f7c:	db003015 	stw	r12,192(sp)
 8001f80:	6001da1e 	bne	r12,zero,80026ec <___vfprintf_internal_r+0xcf4>
 8001f84:	dac02e17 	ldw	r11,184(sp)
 8001f88:	db002b17 	ldw	r12,172(sp)
 8001f8c:	5b39c83a 	sub	fp,r11,r12
 8001f90:	0701d60e 	bge	zero,fp,80026ec <___vfprintf_internal_r+0xcf4>
 8001f94:	02400404 	movi	r9,16
 8001f98:	d8c02017 	ldw	r3,128(sp)
 8001f9c:	d8801f17 	ldw	r2,124(sp)
 8001fa0:	4f053c0e 	bge	r9,fp,8003494 <___vfprintf_internal_r+0x1a9c>
 8001fa4:	014200b4 	movhi	r5,2050
 8001fa8:	2966a684 	addi	r5,r5,-25958
 8001fac:	d9403615 	stw	r5,216(sp)
 8001fb0:	482b883a 	mov	r21,r9
 8001fb4:	04c001c4 	movi	r19,7
 8001fb8:	00000306 	br	8001fc8 <___vfprintf_internal_r+0x5d0>
 8001fbc:	e73ffc04 	addi	fp,fp,-16
 8001fc0:	42000204 	addi	r8,r8,8
 8001fc4:	af00130e 	bge	r21,fp,8002014 <___vfprintf_internal_r+0x61c>
 8001fc8:	02c200b4 	movhi	r11,2050
 8001fcc:	18c00404 	addi	r3,r3,16
 8001fd0:	10800044 	addi	r2,r2,1
 8001fd4:	5ae6a684 	addi	r11,r11,-25958
 8001fd8:	42c00015 	stw	r11,0(r8)
 8001fdc:	45400115 	stw	r21,4(r8)
 8001fe0:	d8c02015 	stw	r3,128(sp)
 8001fe4:	d8801f15 	stw	r2,124(sp)
 8001fe8:	98bff40e 	bge	r19,r2,8001fbc <___vfprintf_internal_r+0x5c4>
 8001fec:	b009883a 	mov	r4,r22
 8001ff0:	b80b883a 	mov	r5,r23
 8001ff4:	d9801e04 	addi	r6,sp,120
 8001ff8:	80084200 	call	8008420 <__sprint_r>
 8001ffc:	103f721e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002000:	e73ffc04 	addi	fp,fp,-16
 8002004:	d8c02017 	ldw	r3,128(sp)
 8002008:	d8801f17 	ldw	r2,124(sp)
 800200c:	da000404 	addi	r8,sp,16
 8002010:	af3fed16 	blt	r21,fp,8001fc8 <___vfprintf_internal_r+0x5d0>
 8002014:	db003617 	ldw	r12,216(sp)
 8002018:	e0c7883a 	add	r3,fp,r3
 800201c:	10800044 	addi	r2,r2,1
 8002020:	43000015 	stw	r12,0(r8)
 8002024:	47000115 	stw	fp,4(r8)
 8002028:	d8c02015 	stw	r3,128(sp)
 800202c:	d8801f15 	stw	r2,124(sp)
 8002030:	010001c4 	movi	r4,7
 8002034:	20830e16 	blt	r4,r2,8002c70 <___vfprintf_internal_r+0x1278>
 8002038:	d8802787 	ldb	r2,158(sp)
 800203c:	42000204 	addi	r8,r8,8
 8002040:	10000c26 	beq	r2,zero,8002074 <___vfprintf_internal_r+0x67c>
 8002044:	d8801f17 	ldw	r2,124(sp)
 8002048:	d9002784 	addi	r4,sp,158
 800204c:	18c00044 	addi	r3,r3,1
 8002050:	10800044 	addi	r2,r2,1
 8002054:	41000015 	stw	r4,0(r8)
 8002058:	01000044 	movi	r4,1
 800205c:	41000115 	stw	r4,4(r8)
 8002060:	d8c02015 	stw	r3,128(sp)
 8002064:	d8801f15 	stw	r2,124(sp)
 8002068:	010001c4 	movi	r4,7
 800206c:	2082a716 	blt	r4,r2,8002b0c <___vfprintf_internal_r+0x1114>
 8002070:	42000204 	addi	r8,r8,8
 8002074:	dac02c17 	ldw	r11,176(sp)
 8002078:	58000c26 	beq	r11,zero,80020ac <___vfprintf_internal_r+0x6b4>
 800207c:	d8801f17 	ldw	r2,124(sp)
 8002080:	d9002704 	addi	r4,sp,156
 8002084:	18c00084 	addi	r3,r3,2
 8002088:	10800044 	addi	r2,r2,1
 800208c:	41000015 	stw	r4,0(r8)
 8002090:	01000084 	movi	r4,2
 8002094:	41000115 	stw	r4,4(r8)
 8002098:	d8c02015 	stw	r3,128(sp)
 800209c:	d8801f15 	stw	r2,124(sp)
 80020a0:	010001c4 	movi	r4,7
 80020a4:	2082a116 	blt	r4,r2,8002b2c <___vfprintf_internal_r+0x1134>
 80020a8:	42000204 	addi	r8,r8,8
 80020ac:	db003017 	ldw	r12,192(sp)
 80020b0:	00802004 	movi	r2,128
 80020b4:	60820326 	beq	r12,r2,80028c4 <___vfprintf_internal_r+0xecc>
 80020b8:	db003217 	ldw	r12,200(sp)
 80020bc:	64abc83a 	sub	r21,r12,r18
 80020c0:	0540260e 	bge	zero,r21,800215c <___vfprintf_internal_r+0x764>
 80020c4:	07000404 	movi	fp,16
 80020c8:	d8801f17 	ldw	r2,124(sp)
 80020cc:	e544570e 	bge	fp,r21,800322c <___vfprintf_internal_r+0x1834>
 80020d0:	014200b4 	movhi	r5,2050
 80020d4:	2966a284 	addi	r5,r5,-25974
 80020d8:	d9402c15 	stw	r5,176(sp)
 80020dc:	04c001c4 	movi	r19,7
 80020e0:	00000306 	br	80020f0 <___vfprintf_internal_r+0x6f8>
 80020e4:	ad7ffc04 	addi	r21,r21,-16
 80020e8:	42000204 	addi	r8,r8,8
 80020ec:	e540110e 	bge	fp,r21,8002134 <___vfprintf_internal_r+0x73c>
 80020f0:	18c00404 	addi	r3,r3,16
 80020f4:	10800044 	addi	r2,r2,1
 80020f8:	45000015 	stw	r20,0(r8)
 80020fc:	47000115 	stw	fp,4(r8)
 8002100:	d8c02015 	stw	r3,128(sp)
 8002104:	d8801f15 	stw	r2,124(sp)
 8002108:	98bff60e 	bge	r19,r2,80020e4 <___vfprintf_internal_r+0x6ec>
 800210c:	b009883a 	mov	r4,r22
 8002110:	b80b883a 	mov	r5,r23
 8002114:	d9801e04 	addi	r6,sp,120
 8002118:	80084200 	call	8008420 <__sprint_r>
 800211c:	103f2a1e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002120:	ad7ffc04 	addi	r21,r21,-16
 8002124:	d8c02017 	ldw	r3,128(sp)
 8002128:	d8801f17 	ldw	r2,124(sp)
 800212c:	da000404 	addi	r8,sp,16
 8002130:	e57fef16 	blt	fp,r21,80020f0 <___vfprintf_internal_r+0x6f8>
 8002134:	dac02c17 	ldw	r11,176(sp)
 8002138:	1d47883a 	add	r3,r3,r21
 800213c:	10800044 	addi	r2,r2,1
 8002140:	42c00015 	stw	r11,0(r8)
 8002144:	45400115 	stw	r21,4(r8)
 8002148:	d8c02015 	stw	r3,128(sp)
 800214c:	d8801f15 	stw	r2,124(sp)
 8002150:	010001c4 	movi	r4,7
 8002154:	20826516 	blt	r4,r2,8002aec <___vfprintf_internal_r+0x10f4>
 8002158:	42000204 	addi	r8,r8,8
 800215c:	8880400c 	andi	r2,r17,256
 8002160:	1001901e 	bne	r2,zero,80027a4 <___vfprintf_internal_r+0xdac>
 8002164:	d8801f17 	ldw	r2,124(sp)
 8002168:	db003117 	ldw	r12,196(sp)
 800216c:	1c87883a 	add	r3,r3,r18
 8002170:	10800044 	addi	r2,r2,1
 8002174:	43000015 	stw	r12,0(r8)
 8002178:	44800115 	stw	r18,4(r8)
 800217c:	d8c02015 	stw	r3,128(sp)
 8002180:	d8801f15 	stw	r2,124(sp)
 8002184:	010001c4 	movi	r4,7
 8002188:	20824016 	blt	r4,r2,8002a8c <___vfprintf_internal_r+0x1094>
 800218c:	42000204 	addi	r8,r8,8
 8002190:	8c40010c 	andi	r17,r17,4
 8002194:	88003126 	beq	r17,zero,800225c <___vfprintf_internal_r+0x864>
 8002198:	db002e17 	ldw	r12,184(sp)
 800219c:	dac02b17 	ldw	r11,172(sp)
 80021a0:	62e1c83a 	sub	r16,r12,r11
 80021a4:	04002d0e 	bge	zero,r16,800225c <___vfprintf_internal_r+0x864>
 80021a8:	04400404 	movi	r17,16
 80021ac:	d8801f17 	ldw	r2,124(sp)
 80021b0:	8c05150e 	bge	r17,r16,8003608 <___vfprintf_internal_r+0x1c10>
 80021b4:	010200b4 	movhi	r4,2050
 80021b8:	2126a684 	addi	r4,r4,-25958
 80021bc:	d9003615 	stw	r4,216(sp)
 80021c0:	048001c4 	movi	r18,7
 80021c4:	00000306 	br	80021d4 <___vfprintf_internal_r+0x7dc>
 80021c8:	843ffc04 	addi	r16,r16,-16
 80021cc:	42000204 	addi	r8,r8,8
 80021d0:	8c00130e 	bge	r17,r16,8002220 <___vfprintf_internal_r+0x828>
 80021d4:	014200b4 	movhi	r5,2050
 80021d8:	18c00404 	addi	r3,r3,16
 80021dc:	10800044 	addi	r2,r2,1
 80021e0:	2966a684 	addi	r5,r5,-25958
 80021e4:	41400015 	stw	r5,0(r8)
 80021e8:	44400115 	stw	r17,4(r8)
 80021ec:	d8c02015 	stw	r3,128(sp)
 80021f0:	d8801f15 	stw	r2,124(sp)
 80021f4:	90bff40e 	bge	r18,r2,80021c8 <___vfprintf_internal_r+0x7d0>
 80021f8:	b009883a 	mov	r4,r22
 80021fc:	b80b883a 	mov	r5,r23
 8002200:	d9801e04 	addi	r6,sp,120
 8002204:	80084200 	call	8008420 <__sprint_r>
 8002208:	103eef1e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 800220c:	843ffc04 	addi	r16,r16,-16
 8002210:	d8c02017 	ldw	r3,128(sp)
 8002214:	d8801f17 	ldw	r2,124(sp)
 8002218:	da000404 	addi	r8,sp,16
 800221c:	8c3fed16 	blt	r17,r16,80021d4 <___vfprintf_internal_r+0x7dc>
 8002220:	dac03617 	ldw	r11,216(sp)
 8002224:	1c07883a 	add	r3,r3,r16
 8002228:	10800044 	addi	r2,r2,1
 800222c:	42c00015 	stw	r11,0(r8)
 8002230:	44000115 	stw	r16,4(r8)
 8002234:	d8c02015 	stw	r3,128(sp)
 8002238:	d8801f15 	stw	r2,124(sp)
 800223c:	010001c4 	movi	r4,7
 8002240:	2080060e 	bge	r4,r2,800225c <___vfprintf_internal_r+0x864>
 8002244:	b009883a 	mov	r4,r22
 8002248:	b80b883a 	mov	r5,r23
 800224c:	d9801e04 	addi	r6,sp,120
 8002250:	80084200 	call	8008420 <__sprint_r>
 8002254:	103edc1e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002258:	d8c02017 	ldw	r3,128(sp)
 800225c:	d8802b17 	ldw	r2,172(sp)
 8002260:	db002e17 	ldw	r12,184(sp)
 8002264:	1300010e 	bge	r2,r12,800226c <___vfprintf_internal_r+0x874>
 8002268:	6005883a 	mov	r2,r12
 800226c:	dac02f17 	ldw	r11,188(sp)
 8002270:	5897883a 	add	r11,r11,r2
 8002274:	dac02f15 	stw	r11,188(sp)
 8002278:	18020c1e 	bne	r3,zero,8002aac <___vfprintf_internal_r+0x10b4>
 800227c:	d8001f15 	stw	zero,124(sp)
 8002280:	da000404 	addi	r8,sp,16
 8002284:	003e1706 	br	8001ae4 <___vfprintf_internal_r+0xec>
 8002288:	8c400414 	ori	r17,r17,16
 800228c:	d8c02a15 	stw	r3,168(sp)
 8002290:	8880080c 	andi	r2,r17,32
 8002294:	10010126 	beq	r2,zero,800269c <___vfprintf_internal_r+0xca4>
 8002298:	db002d17 	ldw	r12,180(sp)
 800229c:	0005883a 	mov	r2,zero
 80022a0:	64c00017 	ldw	r19,0(r12)
 80022a4:	67000117 	ldw	fp,4(r12)
 80022a8:	63000204 	addi	r12,r12,8
 80022ac:	db002d15 	stw	r12,180(sp)
 80022b0:	9f06b03a 	or	r3,r19,fp
 80022b4:	d8002785 	stb	zero,158(sp)
 80022b8:	da403215 	stw	r9,200(sp)
 80022bc:	002b883a 	mov	r21,zero
 80022c0:	003f0106 	br	8001ec8 <___vfprintf_internal_r+0x4d0>
 80022c4:	8c400414 	ori	r17,r17,16
 80022c8:	d8c02a15 	stw	r3,168(sp)
 80022cc:	8880080c 	andi	r2,r17,32
 80022d0:	1000e326 	beq	r2,zero,8002660 <___vfprintf_internal_r+0xc68>
 80022d4:	dac02d17 	ldw	r11,180(sp)
 80022d8:	00800044 	movi	r2,1
 80022dc:	5cc00017 	ldw	r19,0(r11)
 80022e0:	5f000117 	ldw	fp,4(r11)
 80022e4:	5ac00204 	addi	r11,r11,8
 80022e8:	dac02d15 	stw	r11,180(sp)
 80022ec:	9f06b03a 	or	r3,r19,fp
 80022f0:	003ff006 	br	80022b4 <___vfprintf_internal_r+0x8bc>
 80022f4:	db002d17 	ldw	r12,180(sp)
 80022f8:	dac02d17 	ldw	r11,180(sp)
 80022fc:	d8c02a15 	stw	r3,168(sp)
 8002300:	63000017 	ldw	r12,0(r12)
 8002304:	5ac00117 	ldw	r11,4(r11)
 8002308:	d9802785 	stb	r6,158(sp)
 800230c:	6009883a 	mov	r4,r12
 8002310:	580b883a 	mov	r5,r11
 8002314:	db003715 	stw	r12,220(sp)
 8002318:	da003f15 	stw	r8,252(sp)
 800231c:	da403e15 	stw	r9,248(sp)
 8002320:	dac03915 	stw	r11,228(sp)
 8002324:	80081740 	call	8008174 <__fpclassifyd>
 8002328:	db002d17 	ldw	r12,180(sp)
 800232c:	04800044 	movi	r18,1
 8002330:	da003f17 	ldw	r8,252(sp)
 8002334:	64c00204 	addi	r19,r12,8
 8002338:	da403e17 	ldw	r9,248(sp)
 800233c:	d9003717 	ldw	r4,220(sp)
 8002340:	d9403917 	ldw	r5,228(sp)
 8002344:	14832b1e 	bne	r2,r18,8002ff4 <___vfprintf_internal_r+0x15fc>
 8002348:	000d883a 	mov	r6,zero
 800234c:	000f883a 	mov	r7,zero
 8002350:	800c0280 	call	800c028 <__ledf2>
 8002354:	da003f17 	ldw	r8,252(sp)
 8002358:	1004b716 	blt	r2,zero,8003638 <___vfprintf_internal_r+0x1c40>
 800235c:	dd402783 	ldbu	r21,158(sp)
 8002360:	008011c4 	movi	r2,71
 8002364:	14040e0e 	bge	r2,r16,80033a0 <___vfprintf_internal_r+0x19a8>
 8002368:	00c200b4 	movhi	r3,2050
 800236c:	18e69304 	addi	r3,r3,-26036
 8002370:	d8c03115 	stw	r3,196(sp)
 8002374:	02c000c4 	movi	r11,3
 8002378:	00bfdfc4 	movi	r2,-129
 800237c:	dac02b15 	stw	r11,172(sp)
 8002380:	88a2703a 	and	r17,r17,r2
 8002384:	dcc02d15 	stw	r19,180(sp)
 8002388:	5825883a 	mov	r18,r11
 800238c:	d8003215 	stw	zero,200(sp)
 8002390:	d8003415 	stw	zero,208(sp)
 8002394:	003eeb06 	br	8001f44 <___vfprintf_internal_r+0x54c>
 8002398:	db002d17 	ldw	r12,180(sp)
 800239c:	00800c04 	movi	r2,48
 80023a0:	d8802705 	stb	r2,156(sp)
 80023a4:	64c00017 	ldw	r19,0(r12)
 80023a8:	00801e04 	movi	r2,120
 80023ac:	d8802745 	stb	r2,157(sp)
 80023b0:	008200b4 	movhi	r2,2050
 80023b4:	10a69b04 	addi	r2,r2,-26004
 80023b8:	63000104 	addi	r12,r12,4
 80023bc:	d8c02a15 	stw	r3,168(sp)
 80023c0:	d8803b15 	stw	r2,236(sp)
 80023c4:	0039883a 	mov	fp,zero
 80023c8:	8c400094 	ori	r17,r17,2
 80023cc:	db002d15 	stw	r12,180(sp)
 80023d0:	00800084 	movi	r2,2
 80023d4:	04001e04 	movi	r16,120
 80023d8:	9807883a 	mov	r3,r19
 80023dc:	003fb506 	br	80022b4 <___vfprintf_internal_r+0x8bc>
 80023e0:	8c400214 	ori	r17,r17,8
 80023e4:	1805883a 	mov	r2,r3
 80023e8:	1c000007 	ldb	r16,0(r3)
 80023ec:	003de706 	br	8001b8c <___vfprintf_internal_r+0x194>
 80023f0:	d8c02a15 	stw	r3,168(sp)
 80023f4:	d9802785 	stb	r6,158(sp)
 80023f8:	8880080c 	andi	r2,r17,32
 80023fc:	d8c02d17 	ldw	r3,180(sp)
 8002400:	103ea61e 	bne	r2,zero,8001e9c <___vfprintf_internal_r+0x4a4>
 8002404:	8880040c 	andi	r2,r17,16
 8002408:	1002221e 	bne	r2,zero,8002c94 <___vfprintf_internal_r+0x129c>
 800240c:	8880100c 	andi	r2,r17,64
 8002410:	10022026 	beq	r2,zero,8002c94 <___vfprintf_internal_r+0x129c>
 8002414:	1cc0000f 	ldh	r19,0(r3)
 8002418:	db002d17 	ldw	r12,180(sp)
 800241c:	9839d7fa 	srai	fp,r19,31
 8002420:	63000104 	addi	r12,r12,4
 8002424:	db002d15 	stw	r12,180(sp)
 8002428:	e005883a 	mov	r2,fp
 800242c:	003ea106 	br	8001eb4 <___vfprintf_internal_r+0x4bc>
 8002430:	8c401014 	ori	r17,r17,64
 8002434:	1805883a 	mov	r2,r3
 8002438:	1c000007 	ldb	r16,0(r3)
 800243c:	003dd306 	br	8001b8c <___vfprintf_internal_r+0x194>
 8002440:	1c000007 	ldb	r16,0(r3)
 8002444:	81c3e926 	beq	r16,r7,80033ec <___vfprintf_internal_r+0x19f4>
 8002448:	8c400414 	ori	r17,r17,16
 800244c:	1805883a 	mov	r2,r3
 8002450:	003dce06 	br	8001b8c <___vfprintf_internal_r+0x194>
 8002454:	d8c02a15 	stw	r3,168(sp)
 8002458:	d9802785 	stb	r6,158(sp)
 800245c:	8880080c 	andi	r2,r17,32
 8002460:	10034726 	beq	r2,zero,8003180 <___vfprintf_internal_r+0x1788>
 8002464:	db002d17 	ldw	r12,180(sp)
 8002468:	dac02f17 	ldw	r11,188(sp)
 800246c:	60800017 	ldw	r2,0(r12)
 8002470:	5807d7fa 	srai	r3,r11,31
 8002474:	63000104 	addi	r12,r12,4
 8002478:	db002d15 	stw	r12,180(sp)
 800247c:	12c00015 	stw	r11,0(r2)
 8002480:	10c00115 	stw	r3,4(r2)
 8002484:	003d9706 	br	8001ae4 <___vfprintf_internal_r+0xec>
 8002488:	030200b4 	movhi	r12,2050
 800248c:	63269604 	addi	r12,r12,-26024
 8002490:	d8c02a15 	stw	r3,168(sp)
 8002494:	d9802785 	stb	r6,158(sp)
 8002498:	db003b15 	stw	r12,236(sp)
 800249c:	88c0080c 	andi	r3,r17,32
 80024a0:	d8802d17 	ldw	r2,180(sp)
 80024a4:	18005b26 	beq	r3,zero,8002614 <___vfprintf_internal_r+0xc1c>
 80024a8:	dac02d17 	ldw	r11,180(sp)
 80024ac:	14c00017 	ldw	r19,0(r2)
 80024b0:	17000117 	ldw	fp,4(r2)
 80024b4:	5ac00204 	addi	r11,r11,8
 80024b8:	dac02d15 	stw	r11,180(sp)
 80024bc:	8880004c 	andi	r2,r17,1
 80024c0:	10022926 	beq	r2,zero,8002d68 <___vfprintf_internal_r+0x1370>
 80024c4:	9f06b03a 	or	r3,r19,fp
 80024c8:	18032b26 	beq	r3,zero,8003178 <___vfprintf_internal_r+0x1780>
 80024cc:	00800c04 	movi	r2,48
 80024d0:	d8802705 	stb	r2,156(sp)
 80024d4:	dc002745 	stb	r16,157(sp)
 80024d8:	8c400094 	ori	r17,r17,2
 80024dc:	00800084 	movi	r2,2
 80024e0:	003f7406 	br	80022b4 <___vfprintf_internal_r+0x8bc>
 80024e4:	30803fcc 	andi	r2,r6,255
 80024e8:	1080201c 	xori	r2,r2,128
 80024ec:	10bfe004 	addi	r2,r2,-128
 80024f0:	1003351e 	bne	r2,zero,80031c8 <___vfprintf_internal_r+0x17d0>
 80024f4:	1805883a 	mov	r2,r3
 80024f8:	01800804 	movi	r6,32
 80024fc:	1c000007 	ldb	r16,0(r3)
 8002500:	003da206 	br	8001b8c <___vfprintf_internal_r+0x194>
 8002504:	dac02d17 	ldw	r11,180(sp)
 8002508:	db002d17 	ldw	r12,180(sp)
 800250c:	5ac00017 	ldw	r11,0(r11)
 8002510:	dac02e15 	stw	r11,184(sp)
 8002514:	62c00104 	addi	r11,r12,4
 8002518:	db002e17 	ldw	r12,184(sp)
 800251c:	6003ad16 	blt	r12,zero,80033d4 <___vfprintf_internal_r+0x19dc>
 8002520:	dac02d15 	stw	r11,180(sp)
 8002524:	1805883a 	mov	r2,r3
 8002528:	1c000007 	ldb	r16,0(r3)
 800252c:	003d9706 	br	8001b8c <___vfprintf_internal_r+0x194>
 8002530:	1805883a 	mov	r2,r3
 8002534:	01800ac4 	movi	r6,43
 8002538:	1c000007 	ldb	r16,0(r3)
 800253c:	003d9306 	br	8001b8c <___vfprintf_internal_r+0x194>
 8002540:	db002d17 	ldw	r12,180(sp)
 8002544:	d8c02a15 	stw	r3,168(sp)
 8002548:	00c00044 	movi	r3,1
 800254c:	60800017 	ldw	r2,0(r12)
 8002550:	63000104 	addi	r12,r12,4
 8002554:	d8c02b15 	stw	r3,172(sp)
 8002558:	d8002785 	stb	zero,158(sp)
 800255c:	d8801405 	stb	r2,80(sp)
 8002560:	db002d15 	stw	r12,180(sp)
 8002564:	dac01404 	addi	r11,sp,80
 8002568:	1825883a 	mov	r18,r3
 800256c:	d8003215 	stw	zero,200(sp)
 8002570:	d8003415 	stw	zero,208(sp)
 8002574:	dac03115 	stw	r11,196(sp)
 8002578:	0005883a 	mov	r2,zero
 800257c:	003e7806 	br	8001f60 <___vfprintf_internal_r+0x568>
 8002580:	dac02d17 	ldw	r11,180(sp)
 8002584:	db002d17 	ldw	r12,180(sp)
 8002588:	d8c02a15 	stw	r3,168(sp)
 800258c:	5ac00017 	ldw	r11,0(r11)
 8002590:	d8002785 	stb	zero,158(sp)
 8002594:	64c00104 	addi	r19,r12,4
 8002598:	dac03115 	stw	r11,196(sp)
 800259c:	5803fe26 	beq	r11,zero,8003598 <___vfprintf_internal_r+0x1ba0>
 80025a0:	d9003117 	ldw	r4,196(sp)
 80025a4:	4803b416 	blt	r9,zero,8003478 <___vfprintf_internal_r+0x1a80>
 80025a8:	480d883a 	mov	r6,r9
 80025ac:	000b883a 	mov	r5,zero
 80025b0:	da003f15 	stw	r8,252(sp)
 80025b4:	da403e15 	stw	r9,248(sp)
 80025b8:	80067cc0 	call	80067cc <memchr>
 80025bc:	da003f17 	ldw	r8,252(sp)
 80025c0:	da403e17 	ldw	r9,248(sp)
 80025c4:	10043026 	beq	r2,zero,8003688 <___vfprintf_internal_r+0x1c90>
 80025c8:	d8c03117 	ldw	r3,196(sp)
 80025cc:	10e5c83a 	sub	r18,r2,r3
 80025d0:	4c836b16 	blt	r9,r18,8003380 <___vfprintf_internal_r+0x1988>
 80025d4:	9005883a 	mov	r2,r18
 80025d8:	9003ac16 	blt	r18,zero,800348c <___vfprintf_internal_r+0x1a94>
 80025dc:	dd402783 	ldbu	r21,158(sp)
 80025e0:	d8802b15 	stw	r2,172(sp)
 80025e4:	dcc02d15 	stw	r19,180(sp)
 80025e8:	d8003215 	stw	zero,200(sp)
 80025ec:	d8003415 	stw	zero,208(sp)
 80025f0:	003e5406 	br	8001f44 <___vfprintf_internal_r+0x54c>
 80025f4:	008200b4 	movhi	r2,2050
 80025f8:	10a69b04 	addi	r2,r2,-26004
 80025fc:	d8c02a15 	stw	r3,168(sp)
 8002600:	d8803b15 	stw	r2,236(sp)
 8002604:	d9802785 	stb	r6,158(sp)
 8002608:	88c0080c 	andi	r3,r17,32
 800260c:	d8802d17 	ldw	r2,180(sp)
 8002610:	183fa51e 	bne	r3,zero,80024a8 <___vfprintf_internal_r+0xab0>
 8002614:	88c0040c 	andi	r3,r17,16
 8002618:	1802ee26 	beq	r3,zero,80031d4 <___vfprintf_internal_r+0x17dc>
 800261c:	db002d17 	ldw	r12,180(sp)
 8002620:	14c00017 	ldw	r19,0(r2)
 8002624:	0039883a 	mov	fp,zero
 8002628:	63000104 	addi	r12,r12,4
 800262c:	db002d15 	stw	r12,180(sp)
 8002630:	003fa206 	br	80024bc <___vfprintf_internal_r+0xac4>
 8002634:	8c400054 	ori	r17,r17,1
 8002638:	1805883a 	mov	r2,r3
 800263c:	1c000007 	ldb	r16,0(r3)
 8002640:	003d5206 	br	8001b8c <___vfprintf_internal_r+0x194>
 8002644:	8c400814 	ori	r17,r17,32
 8002648:	1805883a 	mov	r2,r3
 800264c:	1c000007 	ldb	r16,0(r3)
 8002650:	003d4e06 	br	8001b8c <___vfprintf_internal_r+0x194>
 8002654:	d8c02a15 	stw	r3,168(sp)
 8002658:	8880080c 	andi	r2,r17,32
 800265c:	103f1d1e 	bne	r2,zero,80022d4 <___vfprintf_internal_r+0x8dc>
 8002660:	8880040c 	andi	r2,r17,16
 8002664:	1001b81e 	bne	r2,zero,8002d48 <___vfprintf_internal_r+0x1350>
 8002668:	8880100c 	andi	r2,r17,64
 800266c:	1001b626 	beq	r2,zero,8002d48 <___vfprintf_internal_r+0x1350>
 8002670:	dac02d17 	ldw	r11,180(sp)
 8002674:	0039883a 	mov	fp,zero
 8002678:	00800044 	movi	r2,1
 800267c:	5cc0000b 	ldhu	r19,0(r11)
 8002680:	5ac00104 	addi	r11,r11,4
 8002684:	dac02d15 	stw	r11,180(sp)
 8002688:	9807883a 	mov	r3,r19
 800268c:	003f0906 	br	80022b4 <___vfprintf_internal_r+0x8bc>
 8002690:	d8c02a15 	stw	r3,168(sp)
 8002694:	8880080c 	andi	r2,r17,32
 8002698:	103eff1e 	bne	r2,zero,8002298 <___vfprintf_internal_r+0x8a0>
 800269c:	8880040c 	andi	r2,r17,16
 80026a0:	1001a11e 	bne	r2,zero,8002d28 <___vfprintf_internal_r+0x1330>
 80026a4:	8880100c 	andi	r2,r17,64
 80026a8:	10019f26 	beq	r2,zero,8002d28 <___vfprintf_internal_r+0x1330>
 80026ac:	db002d17 	ldw	r12,180(sp)
 80026b0:	0039883a 	mov	fp,zero
 80026b4:	0005883a 	mov	r2,zero
 80026b8:	64c0000b 	ldhu	r19,0(r12)
 80026bc:	63000104 	addi	r12,r12,4
 80026c0:	db002d15 	stw	r12,180(sp)
 80026c4:	9807883a 	mov	r3,r19
 80026c8:	003efa06 	br	80022b4 <___vfprintf_internal_r+0x8bc>
 80026cc:	d8c02a15 	stw	r3,168(sp)
 80026d0:	d9802785 	stb	r6,158(sp)
 80026d4:	803db626 	beq	r16,zero,8001db0 <___vfprintf_internal_r+0x3b8>
 80026d8:	00c00044 	movi	r3,1
 80026dc:	d8c02b15 	stw	r3,172(sp)
 80026e0:	dc001405 	stb	r16,80(sp)
 80026e4:	d8002785 	stb	zero,158(sp)
 80026e8:	003f9e06 	br	8002564 <___vfprintf_internal_r+0xb6c>
 80026ec:	d8c02017 	ldw	r3,128(sp)
 80026f0:	003e5306 	br	8002040 <___vfprintf_internal_r+0x648>
 80026f4:	10803fcc 	andi	r2,r2,255
 80026f8:	00c00044 	movi	r3,1
 80026fc:	10fdfa1e 	bne	r2,r3,8001ee8 <___vfprintf_internal_r+0x4f0>
 8002700:	e000021e 	bne	fp,zero,800270c <___vfprintf_internal_r+0xd14>
 8002704:	00800244 	movi	r2,9
 8002708:	14c0202e 	bgeu	r2,r19,800278c <___vfprintf_internal_r+0xd94>
 800270c:	dc002b15 	stw	r16,172(sp)
 8002710:	dc402c15 	stw	r17,176(sp)
 8002714:	9821883a 	mov	r16,r19
 8002718:	e023883a 	mov	r17,fp
 800271c:	dc801e04 	addi	r18,sp,120
 8002720:	4827883a 	mov	r19,r9
 8002724:	4039883a 	mov	fp,r8
 8002728:	8009883a 	mov	r4,r16
 800272c:	880b883a 	mov	r5,r17
 8002730:	01800284 	movi	r6,10
 8002734:	000f883a 	mov	r7,zero
 8002738:	800a6a00 	call	800a6a0 <__umoddi3>
 800273c:	10800c04 	addi	r2,r2,48
 8002740:	94bfffc4 	addi	r18,r18,-1
 8002744:	8009883a 	mov	r4,r16
 8002748:	880b883a 	mov	r5,r17
 800274c:	01800284 	movi	r6,10
 8002750:	000f883a 	mov	r7,zero
 8002754:	90800005 	stb	r2,0(r18)
 8002758:	800a0e00 	call	800a0e0 <__udivdi3>
 800275c:	1021883a 	mov	r16,r2
 8002760:	10c4b03a 	or	r2,r2,r3
 8002764:	1823883a 	mov	r17,r3
 8002768:	103fef1e 	bne	r2,zero,8002728 <___vfprintf_internal_r+0xd30>
 800276c:	dac02817 	ldw	r11,160(sp)
 8002770:	dc803115 	stw	r18,196(sp)
 8002774:	dc002b17 	ldw	r16,172(sp)
 8002778:	dc402c17 	ldw	r17,176(sp)
 800277c:	9813883a 	mov	r9,r19
 8002780:	e011883a 	mov	r8,fp
 8002784:	5ca5c83a 	sub	r18,r11,r18
 8002788:	003de906 	br	8001f30 <___vfprintf_internal_r+0x538>
 800278c:	9cc00c04 	addi	r19,r19,48
 8002790:	d8c01dc4 	addi	r3,sp,119
 8002794:	dcc01dc5 	stb	r19,119(sp)
 8002798:	dc803c17 	ldw	r18,240(sp)
 800279c:	d8c03115 	stw	r3,196(sp)
 80027a0:	003de306 	br	8001f30 <___vfprintf_internal_r+0x538>
 80027a4:	00801944 	movi	r2,101
 80027a8:	1400710e 	bge	r2,r16,8002970 <___vfprintf_internal_r+0xf78>
 80027ac:	d9003717 	ldw	r4,220(sp)
 80027b0:	d9403917 	ldw	r5,228(sp)
 80027b4:	000d883a 	mov	r6,zero
 80027b8:	000f883a 	mov	r7,zero
 80027bc:	d8c03d15 	stw	r3,244(sp)
 80027c0:	da003f15 	stw	r8,252(sp)
 80027c4:	800bec40 	call	800bec4 <__eqdf2>
 80027c8:	d8c03d17 	ldw	r3,244(sp)
 80027cc:	da003f17 	ldw	r8,252(sp)
 80027d0:	1000ef1e 	bne	r2,zero,8002b90 <___vfprintf_internal_r+0x1198>
 80027d4:	d8801f17 	ldw	r2,124(sp)
 80027d8:	010200b4 	movhi	r4,2050
 80027dc:	2126a204 	addi	r4,r4,-25976
 80027e0:	18c00044 	addi	r3,r3,1
 80027e4:	10800044 	addi	r2,r2,1
 80027e8:	41000015 	stw	r4,0(r8)
 80027ec:	01000044 	movi	r4,1
 80027f0:	41000115 	stw	r4,4(r8)
 80027f4:	d8c02015 	stw	r3,128(sp)
 80027f8:	d8801f15 	stw	r2,124(sp)
 80027fc:	010001c4 	movi	r4,7
 8002800:	20828e16 	blt	r4,r2,800323c <___vfprintf_internal_r+0x1844>
 8002804:	42000204 	addi	r8,r8,8
 8002808:	d8802617 	ldw	r2,152(sp)
 800280c:	dac03317 	ldw	r11,204(sp)
 8002810:	12c00216 	blt	r2,r11,800281c <___vfprintf_internal_r+0xe24>
 8002814:	8880004c 	andi	r2,r17,1
 8002818:	103e5d26 	beq	r2,zero,8002190 <___vfprintf_internal_r+0x798>
 800281c:	db003817 	ldw	r12,224(sp)
 8002820:	d8801f17 	ldw	r2,124(sp)
 8002824:	dac03517 	ldw	r11,212(sp)
 8002828:	1b07883a 	add	r3,r3,r12
 800282c:	10800044 	addi	r2,r2,1
 8002830:	42c00015 	stw	r11,0(r8)
 8002834:	43000115 	stw	r12,4(r8)
 8002838:	d8c02015 	stw	r3,128(sp)
 800283c:	d8801f15 	stw	r2,124(sp)
 8002840:	010001c4 	movi	r4,7
 8002844:	2082ed16 	blt	r4,r2,80033fc <___vfprintf_internal_r+0x1a04>
 8002848:	42000204 	addi	r8,r8,8
 800284c:	db003317 	ldw	r12,204(sp)
 8002850:	643fffc4 	addi	r16,r12,-1
 8002854:	043e4e0e 	bge	zero,r16,8002190 <___vfprintf_internal_r+0x798>
 8002858:	04800404 	movi	r18,16
 800285c:	d8801f17 	ldw	r2,124(sp)
 8002860:	94007e0e 	bge	r18,r16,8002a5c <___vfprintf_internal_r+0x1064>
 8002864:	014200b4 	movhi	r5,2050
 8002868:	2966a284 	addi	r5,r5,-25974
 800286c:	d9402c15 	stw	r5,176(sp)
 8002870:	054001c4 	movi	r21,7
 8002874:	00000306 	br	8002884 <___vfprintf_internal_r+0xe8c>
 8002878:	42000204 	addi	r8,r8,8
 800287c:	843ffc04 	addi	r16,r16,-16
 8002880:	9400790e 	bge	r18,r16,8002a68 <___vfprintf_internal_r+0x1070>
 8002884:	18c00404 	addi	r3,r3,16
 8002888:	10800044 	addi	r2,r2,1
 800288c:	45000015 	stw	r20,0(r8)
 8002890:	44800115 	stw	r18,4(r8)
 8002894:	d8c02015 	stw	r3,128(sp)
 8002898:	d8801f15 	stw	r2,124(sp)
 800289c:	a8bff60e 	bge	r21,r2,8002878 <___vfprintf_internal_r+0xe80>
 80028a0:	b009883a 	mov	r4,r22
 80028a4:	b80b883a 	mov	r5,r23
 80028a8:	d9801e04 	addi	r6,sp,120
 80028ac:	80084200 	call	8008420 <__sprint_r>
 80028b0:	103d451e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 80028b4:	d8c02017 	ldw	r3,128(sp)
 80028b8:	d8801f17 	ldw	r2,124(sp)
 80028bc:	da000404 	addi	r8,sp,16
 80028c0:	003fee06 	br	800287c <___vfprintf_internal_r+0xe84>
 80028c4:	dac02e17 	ldw	r11,184(sp)
 80028c8:	db002b17 	ldw	r12,172(sp)
 80028cc:	5b2bc83a 	sub	r21,r11,r12
 80028d0:	057df90e 	bge	zero,r21,80020b8 <___vfprintf_internal_r+0x6c0>
 80028d4:	07000404 	movi	fp,16
 80028d8:	d8801f17 	ldw	r2,124(sp)
 80028dc:	e543640e 	bge	fp,r21,8003670 <___vfprintf_internal_r+0x1c78>
 80028e0:	014200b4 	movhi	r5,2050
 80028e4:	2966a284 	addi	r5,r5,-25974
 80028e8:	d9402c15 	stw	r5,176(sp)
 80028ec:	04c001c4 	movi	r19,7
 80028f0:	00000306 	br	8002900 <___vfprintf_internal_r+0xf08>
 80028f4:	ad7ffc04 	addi	r21,r21,-16
 80028f8:	42000204 	addi	r8,r8,8
 80028fc:	e540110e 	bge	fp,r21,8002944 <___vfprintf_internal_r+0xf4c>
 8002900:	18c00404 	addi	r3,r3,16
 8002904:	10800044 	addi	r2,r2,1
 8002908:	45000015 	stw	r20,0(r8)
 800290c:	47000115 	stw	fp,4(r8)
 8002910:	d8c02015 	stw	r3,128(sp)
 8002914:	d8801f15 	stw	r2,124(sp)
 8002918:	98bff60e 	bge	r19,r2,80028f4 <___vfprintf_internal_r+0xefc>
 800291c:	b009883a 	mov	r4,r22
 8002920:	b80b883a 	mov	r5,r23
 8002924:	d9801e04 	addi	r6,sp,120
 8002928:	80084200 	call	8008420 <__sprint_r>
 800292c:	103d261e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002930:	ad7ffc04 	addi	r21,r21,-16
 8002934:	d8c02017 	ldw	r3,128(sp)
 8002938:	d8801f17 	ldw	r2,124(sp)
 800293c:	da000404 	addi	r8,sp,16
 8002940:	e57fef16 	blt	fp,r21,8002900 <___vfprintf_internal_r+0xf08>
 8002944:	dac02c17 	ldw	r11,176(sp)
 8002948:	1d47883a 	add	r3,r3,r21
 800294c:	10800044 	addi	r2,r2,1
 8002950:	42c00015 	stw	r11,0(r8)
 8002954:	45400115 	stw	r21,4(r8)
 8002958:	d8c02015 	stw	r3,128(sp)
 800295c:	d8801f15 	stw	r2,124(sp)
 8002960:	010001c4 	movi	r4,7
 8002964:	20819116 	blt	r4,r2,8002fac <___vfprintf_internal_r+0x15b4>
 8002968:	42000204 	addi	r8,r8,8
 800296c:	003dd206 	br	80020b8 <___vfprintf_internal_r+0x6c0>
 8002970:	db003317 	ldw	r12,204(sp)
 8002974:	00800044 	movi	r2,1
 8002978:	18c00044 	addi	r3,r3,1
 800297c:	1301530e 	bge	r2,r12,8002ecc <___vfprintf_internal_r+0x14d4>
 8002980:	dc001f17 	ldw	r16,124(sp)
 8002984:	dac03117 	ldw	r11,196(sp)
 8002988:	00800044 	movi	r2,1
 800298c:	84000044 	addi	r16,r16,1
 8002990:	40800115 	stw	r2,4(r8)
 8002994:	42c00015 	stw	r11,0(r8)
 8002998:	d8c02015 	stw	r3,128(sp)
 800299c:	dc001f15 	stw	r16,124(sp)
 80029a0:	008001c4 	movi	r2,7
 80029a4:	14016b16 	blt	r2,r16,8002f54 <___vfprintf_internal_r+0x155c>
 80029a8:	42000204 	addi	r8,r8,8
 80029ac:	db003817 	ldw	r12,224(sp)
 80029b0:	dac03517 	ldw	r11,212(sp)
 80029b4:	84000044 	addi	r16,r16,1
 80029b8:	1b07883a 	add	r3,r3,r12
 80029bc:	42c00015 	stw	r11,0(r8)
 80029c0:	43000115 	stw	r12,4(r8)
 80029c4:	d8c02015 	stw	r3,128(sp)
 80029c8:	dc001f15 	stw	r16,124(sp)
 80029cc:	008001c4 	movi	r2,7
 80029d0:	14016916 	blt	r2,r16,8002f78 <___vfprintf_internal_r+0x1580>
 80029d4:	44800204 	addi	r18,r8,8
 80029d8:	d9003717 	ldw	r4,220(sp)
 80029dc:	d9403917 	ldw	r5,228(sp)
 80029e0:	000d883a 	mov	r6,zero
 80029e4:	000f883a 	mov	r7,zero
 80029e8:	d8c03d15 	stw	r3,244(sp)
 80029ec:	800bec40 	call	800bec4 <__eqdf2>
 80029f0:	d8c03d17 	ldw	r3,244(sp)
 80029f4:	db003317 	ldw	r12,204(sp)
 80029f8:	1000ad26 	beq	r2,zero,8002cb0 <___vfprintf_internal_r+0x12b8>
 80029fc:	dac03117 	ldw	r11,196(sp)
 8002a00:	60bfffc4 	addi	r2,r12,-1
 8002a04:	1887883a 	add	r3,r3,r2
 8002a08:	59000044 	addi	r4,r11,1
 8002a0c:	84000044 	addi	r16,r16,1
 8002a10:	90800115 	stw	r2,4(r18)
 8002a14:	91000015 	stw	r4,0(r18)
 8002a18:	d8c02015 	stw	r3,128(sp)
 8002a1c:	dc001f15 	stw	r16,124(sp)
 8002a20:	008001c4 	movi	r2,7
 8002a24:	14014216 	blt	r2,r16,8002f30 <___vfprintf_internal_r+0x1538>
 8002a28:	94800204 	addi	r18,r18,8
 8002a2c:	dac03a17 	ldw	r11,232(sp)
 8002a30:	dd4022c4 	addi	r21,sp,139
 8002a34:	84000044 	addi	r16,r16,1
 8002a38:	1ac7883a 	add	r3,r3,r11
 8002a3c:	95400015 	stw	r21,0(r18)
 8002a40:	92c00115 	stw	r11,4(r18)
 8002a44:	d8c02015 	stw	r3,128(sp)
 8002a48:	dc001f15 	stw	r16,124(sp)
 8002a4c:	008001c4 	movi	r2,7
 8002a50:	14000e16 	blt	r2,r16,8002a8c <___vfprintf_internal_r+0x1094>
 8002a54:	92000204 	addi	r8,r18,8
 8002a58:	003dcd06 	br	8002190 <___vfprintf_internal_r+0x798>
 8002a5c:	010200b4 	movhi	r4,2050
 8002a60:	2126a284 	addi	r4,r4,-25974
 8002a64:	d9002c15 	stw	r4,176(sp)
 8002a68:	dac02c17 	ldw	r11,176(sp)
 8002a6c:	1c07883a 	add	r3,r3,r16
 8002a70:	44000115 	stw	r16,4(r8)
 8002a74:	42c00015 	stw	r11,0(r8)
 8002a78:	10800044 	addi	r2,r2,1
 8002a7c:	d8c02015 	stw	r3,128(sp)
 8002a80:	d8801f15 	stw	r2,124(sp)
 8002a84:	010001c4 	movi	r4,7
 8002a88:	20bdc00e 	bge	r4,r2,800218c <___vfprintf_internal_r+0x794>
 8002a8c:	b009883a 	mov	r4,r22
 8002a90:	b80b883a 	mov	r5,r23
 8002a94:	d9801e04 	addi	r6,sp,120
 8002a98:	80084200 	call	8008420 <__sprint_r>
 8002a9c:	103cca1e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002aa0:	d8c02017 	ldw	r3,128(sp)
 8002aa4:	da000404 	addi	r8,sp,16
 8002aa8:	003db906 	br	8002190 <___vfprintf_internal_r+0x798>
 8002aac:	b009883a 	mov	r4,r22
 8002ab0:	b80b883a 	mov	r5,r23
 8002ab4:	d9801e04 	addi	r6,sp,120
 8002ab8:	80084200 	call	8008420 <__sprint_r>
 8002abc:	103def26 	beq	r2,zero,800227c <___vfprintf_internal_r+0x884>
 8002ac0:	003cc106 	br	8001dc8 <___vfprintf_internal_r+0x3d0>
 8002ac4:	10803fcc 	andi	r2,r2,255
 8002ac8:	1000651e 	bne	r2,zero,8002c60 <___vfprintf_internal_r+0x1268>
 8002acc:	8880004c 	andi	r2,r17,1
 8002ad0:	10013226 	beq	r2,zero,8002f9c <___vfprintf_internal_r+0x15a4>
 8002ad4:	00800c04 	movi	r2,48
 8002ad8:	d8c01dc4 	addi	r3,sp,119
 8002adc:	d8801dc5 	stb	r2,119(sp)
 8002ae0:	dc803c17 	ldw	r18,240(sp)
 8002ae4:	d8c03115 	stw	r3,196(sp)
 8002ae8:	003d1106 	br	8001f30 <___vfprintf_internal_r+0x538>
 8002aec:	b009883a 	mov	r4,r22
 8002af0:	b80b883a 	mov	r5,r23
 8002af4:	d9801e04 	addi	r6,sp,120
 8002af8:	80084200 	call	8008420 <__sprint_r>
 8002afc:	103cb21e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002b00:	d8c02017 	ldw	r3,128(sp)
 8002b04:	da000404 	addi	r8,sp,16
 8002b08:	003d9406 	br	800215c <___vfprintf_internal_r+0x764>
 8002b0c:	b009883a 	mov	r4,r22
 8002b10:	b80b883a 	mov	r5,r23
 8002b14:	d9801e04 	addi	r6,sp,120
 8002b18:	80084200 	call	8008420 <__sprint_r>
 8002b1c:	103caa1e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002b20:	d8c02017 	ldw	r3,128(sp)
 8002b24:	da000404 	addi	r8,sp,16
 8002b28:	003d5206 	br	8002074 <___vfprintf_internal_r+0x67c>
 8002b2c:	b009883a 	mov	r4,r22
 8002b30:	b80b883a 	mov	r5,r23
 8002b34:	d9801e04 	addi	r6,sp,120
 8002b38:	80084200 	call	8008420 <__sprint_r>
 8002b3c:	103ca21e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002b40:	d8c02017 	ldw	r3,128(sp)
 8002b44:	da000404 	addi	r8,sp,16
 8002b48:	003d5806 	br	80020ac <___vfprintf_internal_r+0x6b4>
 8002b4c:	d9403b17 	ldw	r5,236(sp)
 8002b50:	d8c01e04 	addi	r3,sp,120
 8002b54:	988003cc 	andi	r2,r19,15
 8002b58:	e008973a 	slli	r4,fp,28
 8002b5c:	2885883a 	add	r2,r5,r2
 8002b60:	9826d13a 	srli	r19,r19,4
 8002b64:	10800003 	ldbu	r2,0(r2)
 8002b68:	e038d13a 	srli	fp,fp,4
 8002b6c:	18ffffc4 	addi	r3,r3,-1
 8002b70:	24e6b03a 	or	r19,r4,r19
 8002b74:	18800005 	stb	r2,0(r3)
 8002b78:	9f04b03a 	or	r2,r19,fp
 8002b7c:	103ff51e 	bne	r2,zero,8002b54 <___vfprintf_internal_r+0x115c>
 8002b80:	db002817 	ldw	r12,160(sp)
 8002b84:	d8c03115 	stw	r3,196(sp)
 8002b88:	60e5c83a 	sub	r18,r12,r3
 8002b8c:	003ce806 	br	8001f30 <___vfprintf_internal_r+0x538>
 8002b90:	dc002617 	ldw	r16,152(sp)
 8002b94:	0401b10e 	bge	zero,r16,800325c <___vfprintf_internal_r+0x1864>
 8002b98:	db003117 	ldw	r12,196(sp)
 8002b9c:	dac03317 	ldw	r11,204(sp)
 8002ba0:	62e1883a 	add	r16,r12,r11
 8002ba4:	db003417 	ldw	r12,208(sp)
 8002ba8:	5825883a 	mov	r18,r11
 8002bac:	62c0010e 	bge	r12,r11,8002bb4 <___vfprintf_internal_r+0x11bc>
 8002bb0:	6025883a 	mov	r18,r12
 8002bb4:	04800b0e 	bge	zero,r18,8002be4 <___vfprintf_internal_r+0x11ec>
 8002bb8:	d8801f17 	ldw	r2,124(sp)
 8002bbc:	dac03117 	ldw	r11,196(sp)
 8002bc0:	1c87883a 	add	r3,r3,r18
 8002bc4:	10800044 	addi	r2,r2,1
 8002bc8:	42c00015 	stw	r11,0(r8)
 8002bcc:	44800115 	stw	r18,4(r8)
 8002bd0:	d8c02015 	stw	r3,128(sp)
 8002bd4:	d8801f15 	stw	r2,124(sp)
 8002bd8:	010001c4 	movi	r4,7
 8002bdc:	20824f16 	blt	r4,r2,800351c <___vfprintf_internal_r+0x1b24>
 8002be0:	42000204 	addi	r8,r8,8
 8002be4:	90024b16 	blt	r18,zero,8003514 <___vfprintf_internal_r+0x1b1c>
 8002be8:	db003417 	ldw	r12,208(sp)
 8002bec:	64a5c83a 	sub	r18,r12,r18
 8002bf0:	0480730e 	bge	zero,r18,8002dc0 <___vfprintf_internal_r+0x13c8>
 8002bf4:	05400404 	movi	r21,16
 8002bf8:	d8801f17 	ldw	r2,124(sp)
 8002bfc:	ac817d0e 	bge	r21,r18,80031f4 <___vfprintf_internal_r+0x17fc>
 8002c00:	014200b4 	movhi	r5,2050
 8002c04:	2966a284 	addi	r5,r5,-25974
 8002c08:	d9402c15 	stw	r5,176(sp)
 8002c0c:	070001c4 	movi	fp,7
 8002c10:	00000306 	br	8002c20 <___vfprintf_internal_r+0x1228>
 8002c14:	42000204 	addi	r8,r8,8
 8002c18:	94bffc04 	addi	r18,r18,-16
 8002c1c:	ac81780e 	bge	r21,r18,8003200 <___vfprintf_internal_r+0x1808>
 8002c20:	18c00404 	addi	r3,r3,16
 8002c24:	10800044 	addi	r2,r2,1
 8002c28:	45000015 	stw	r20,0(r8)
 8002c2c:	45400115 	stw	r21,4(r8)
 8002c30:	d8c02015 	stw	r3,128(sp)
 8002c34:	d8801f15 	stw	r2,124(sp)
 8002c38:	e0bff60e 	bge	fp,r2,8002c14 <___vfprintf_internal_r+0x121c>
 8002c3c:	b009883a 	mov	r4,r22
 8002c40:	b80b883a 	mov	r5,r23
 8002c44:	d9801e04 	addi	r6,sp,120
 8002c48:	80084200 	call	8008420 <__sprint_r>
 8002c4c:	103c5e1e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002c50:	d8c02017 	ldw	r3,128(sp)
 8002c54:	d8801f17 	ldw	r2,124(sp)
 8002c58:	da000404 	addi	r8,sp,16
 8002c5c:	003fee06 	br	8002c18 <___vfprintf_internal_r+0x1220>
 8002c60:	dac01e04 	addi	r11,sp,120
 8002c64:	0025883a 	mov	r18,zero
 8002c68:	dac03115 	stw	r11,196(sp)
 8002c6c:	003cb006 	br	8001f30 <___vfprintf_internal_r+0x538>
 8002c70:	b009883a 	mov	r4,r22
 8002c74:	b80b883a 	mov	r5,r23
 8002c78:	d9801e04 	addi	r6,sp,120
 8002c7c:	80084200 	call	8008420 <__sprint_r>
 8002c80:	103c511e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002c84:	d8c02017 	ldw	r3,128(sp)
 8002c88:	d8802787 	ldb	r2,158(sp)
 8002c8c:	da000404 	addi	r8,sp,16
 8002c90:	003ceb06 	br	8002040 <___vfprintf_internal_r+0x648>
 8002c94:	1cc00017 	ldw	r19,0(r3)
 8002c98:	dac02d17 	ldw	r11,180(sp)
 8002c9c:	9839d7fa 	srai	fp,r19,31
 8002ca0:	5ac00104 	addi	r11,r11,4
 8002ca4:	dac02d15 	stw	r11,180(sp)
 8002ca8:	e005883a 	mov	r2,fp
 8002cac:	003c8106 	br	8001eb4 <___vfprintf_internal_r+0x4bc>
 8002cb0:	657fffc4 	addi	r21,r12,-1
 8002cb4:	057f5d0e 	bge	zero,r21,8002a2c <___vfprintf_internal_r+0x1034>
 8002cb8:	07000404 	movi	fp,16
 8002cbc:	e540900e 	bge	fp,r21,8002f00 <___vfprintf_internal_r+0x1508>
 8002cc0:	010200b4 	movhi	r4,2050
 8002cc4:	2126a284 	addi	r4,r4,-25974
 8002cc8:	d9002c15 	stw	r4,176(sp)
 8002ccc:	01c001c4 	movi	r7,7
 8002cd0:	00000306 	br	8002ce0 <___vfprintf_internal_r+0x12e8>
 8002cd4:	94800204 	addi	r18,r18,8
 8002cd8:	ad7ffc04 	addi	r21,r21,-16
 8002cdc:	e5408b0e 	bge	fp,r21,8002f0c <___vfprintf_internal_r+0x1514>
 8002ce0:	18c00404 	addi	r3,r3,16
 8002ce4:	84000044 	addi	r16,r16,1
 8002ce8:	95000015 	stw	r20,0(r18)
 8002cec:	97000115 	stw	fp,4(r18)
 8002cf0:	d8c02015 	stw	r3,128(sp)
 8002cf4:	dc001f15 	stw	r16,124(sp)
 8002cf8:	3c3ff60e 	bge	r7,r16,8002cd4 <___vfprintf_internal_r+0x12dc>
 8002cfc:	b009883a 	mov	r4,r22
 8002d00:	b80b883a 	mov	r5,r23
 8002d04:	d9801e04 	addi	r6,sp,120
 8002d08:	d9c03d15 	stw	r7,244(sp)
 8002d0c:	80084200 	call	8008420 <__sprint_r>
 8002d10:	d9c03d17 	ldw	r7,244(sp)
 8002d14:	103c2c1e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002d18:	d8c02017 	ldw	r3,128(sp)
 8002d1c:	dc001f17 	ldw	r16,124(sp)
 8002d20:	dc800404 	addi	r18,sp,16
 8002d24:	003fec06 	br	8002cd8 <___vfprintf_internal_r+0x12e0>
 8002d28:	dac02d17 	ldw	r11,180(sp)
 8002d2c:	0039883a 	mov	fp,zero
 8002d30:	0005883a 	mov	r2,zero
 8002d34:	5cc00017 	ldw	r19,0(r11)
 8002d38:	5ac00104 	addi	r11,r11,4
 8002d3c:	dac02d15 	stw	r11,180(sp)
 8002d40:	9807883a 	mov	r3,r19
 8002d44:	003d5b06 	br	80022b4 <___vfprintf_internal_r+0x8bc>
 8002d48:	db002d17 	ldw	r12,180(sp)
 8002d4c:	0039883a 	mov	fp,zero
 8002d50:	00800044 	movi	r2,1
 8002d54:	64c00017 	ldw	r19,0(r12)
 8002d58:	63000104 	addi	r12,r12,4
 8002d5c:	db002d15 	stw	r12,180(sp)
 8002d60:	9807883a 	mov	r3,r19
 8002d64:	003d5306 	br	80022b4 <___vfprintf_internal_r+0x8bc>
 8002d68:	00800084 	movi	r2,2
 8002d6c:	9f06b03a 	or	r3,r19,fp
 8002d70:	003d5006 	br	80022b4 <___vfprintf_internal_r+0x8bc>
 8002d74:	10803fcc 	andi	r2,r2,255
 8002d78:	1080201c 	xori	r2,r2,128
 8002d7c:	10bfe004 	addi	r2,r2,-128
 8002d80:	01000c04 	movi	r4,48
 8002d84:	1101a526 	beq	r2,r4,800341c <___vfprintf_internal_r+0x1a24>
 8002d88:	dac03117 	ldw	r11,196(sp)
 8002d8c:	db002817 	ldw	r12,160(sp)
 8002d90:	193fffc5 	stb	r4,-1(r3)
 8002d94:	5affffc4 	addi	r11,r11,-1
 8002d98:	dac03115 	stw	r11,196(sp)
 8002d9c:	62e5c83a 	sub	r18,r12,r11
 8002da0:	003c6306 	br	8001f30 <___vfprintf_internal_r+0x538>
 8002da4:	b009883a 	mov	r4,r22
 8002da8:	b80b883a 	mov	r5,r23
 8002dac:	d9801e04 	addi	r6,sp,120
 8002db0:	80084200 	call	8008420 <__sprint_r>
 8002db4:	103c041e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002db8:	d8c02017 	ldw	r3,128(sp)
 8002dbc:	da000404 	addi	r8,sp,16
 8002dc0:	db003117 	ldw	r12,196(sp)
 8002dc4:	dac03417 	ldw	r11,208(sp)
 8002dc8:	d8802617 	ldw	r2,152(sp)
 8002dcc:	62e5883a 	add	r18,r12,r11
 8002dd0:	db003317 	ldw	r12,204(sp)
 8002dd4:	13000216 	blt	r2,r12,8002de0 <___vfprintf_internal_r+0x13e8>
 8002dd8:	8900004c 	andi	r4,r17,1
 8002ddc:	20000c26 	beq	r4,zero,8002e10 <___vfprintf_internal_r+0x1418>
 8002de0:	dac03817 	ldw	r11,224(sp)
 8002de4:	d9001f17 	ldw	r4,124(sp)
 8002de8:	db003517 	ldw	r12,212(sp)
 8002dec:	1ac7883a 	add	r3,r3,r11
 8002df0:	21000044 	addi	r4,r4,1
 8002df4:	43000015 	stw	r12,0(r8)
 8002df8:	42c00115 	stw	r11,4(r8)
 8002dfc:	d8c02015 	stw	r3,128(sp)
 8002e00:	d9001f15 	stw	r4,124(sp)
 8002e04:	014001c4 	movi	r5,7
 8002e08:	2901cc16 	blt	r5,r4,800353c <___vfprintf_internal_r+0x1b44>
 8002e0c:	42000204 	addi	r8,r8,8
 8002e10:	dac03317 	ldw	r11,204(sp)
 8002e14:	8489c83a 	sub	r4,r16,r18
 8002e18:	5885c83a 	sub	r2,r11,r2
 8002e1c:	1021883a 	mov	r16,r2
 8002e20:	2080010e 	bge	r4,r2,8002e28 <___vfprintf_internal_r+0x1430>
 8002e24:	2021883a 	mov	r16,r4
 8002e28:	04000a0e 	bge	zero,r16,8002e54 <___vfprintf_internal_r+0x145c>
 8002e2c:	d9001f17 	ldw	r4,124(sp)
 8002e30:	1c07883a 	add	r3,r3,r16
 8002e34:	44800015 	stw	r18,0(r8)
 8002e38:	21000044 	addi	r4,r4,1
 8002e3c:	44000115 	stw	r16,4(r8)
 8002e40:	d8c02015 	stw	r3,128(sp)
 8002e44:	d9001f15 	stw	r4,124(sp)
 8002e48:	014001c4 	movi	r5,7
 8002e4c:	2901e316 	blt	r5,r4,80035dc <___vfprintf_internal_r+0x1be4>
 8002e50:	42000204 	addi	r8,r8,8
 8002e54:	8001df16 	blt	r16,zero,80035d4 <___vfprintf_internal_r+0x1bdc>
 8002e58:	1421c83a 	sub	r16,r2,r16
 8002e5c:	043ccc0e 	bge	zero,r16,8002190 <___vfprintf_internal_r+0x798>
 8002e60:	04800404 	movi	r18,16
 8002e64:	d8801f17 	ldw	r2,124(sp)
 8002e68:	943efc0e 	bge	r18,r16,8002a5c <___vfprintf_internal_r+0x1064>
 8002e6c:	014200b4 	movhi	r5,2050
 8002e70:	2966a284 	addi	r5,r5,-25974
 8002e74:	d9402c15 	stw	r5,176(sp)
 8002e78:	054001c4 	movi	r21,7
 8002e7c:	00000306 	br	8002e8c <___vfprintf_internal_r+0x1494>
 8002e80:	42000204 	addi	r8,r8,8
 8002e84:	843ffc04 	addi	r16,r16,-16
 8002e88:	943ef70e 	bge	r18,r16,8002a68 <___vfprintf_internal_r+0x1070>
 8002e8c:	18c00404 	addi	r3,r3,16
 8002e90:	10800044 	addi	r2,r2,1
 8002e94:	45000015 	stw	r20,0(r8)
 8002e98:	44800115 	stw	r18,4(r8)
 8002e9c:	d8c02015 	stw	r3,128(sp)
 8002ea0:	d8801f15 	stw	r2,124(sp)
 8002ea4:	a8bff60e 	bge	r21,r2,8002e80 <___vfprintf_internal_r+0x1488>
 8002ea8:	b009883a 	mov	r4,r22
 8002eac:	b80b883a 	mov	r5,r23
 8002eb0:	d9801e04 	addi	r6,sp,120
 8002eb4:	80084200 	call	8008420 <__sprint_r>
 8002eb8:	103bc31e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002ebc:	d8c02017 	ldw	r3,128(sp)
 8002ec0:	d8801f17 	ldw	r2,124(sp)
 8002ec4:	da000404 	addi	r8,sp,16
 8002ec8:	003fee06 	br	8002e84 <___vfprintf_internal_r+0x148c>
 8002ecc:	8888703a 	and	r4,r17,r2
 8002ed0:	203eab1e 	bne	r4,zero,8002980 <___vfprintf_internal_r+0xf88>
 8002ed4:	dc001f17 	ldw	r16,124(sp)
 8002ed8:	db003117 	ldw	r12,196(sp)
 8002edc:	40800115 	stw	r2,4(r8)
 8002ee0:	84000044 	addi	r16,r16,1
 8002ee4:	43000015 	stw	r12,0(r8)
 8002ee8:	d8c02015 	stw	r3,128(sp)
 8002eec:	dc001f15 	stw	r16,124(sp)
 8002ef0:	008001c4 	movi	r2,7
 8002ef4:	14000e16 	blt	r2,r16,8002f30 <___vfprintf_internal_r+0x1538>
 8002ef8:	44800204 	addi	r18,r8,8
 8002efc:	003ecb06 	br	8002a2c <___vfprintf_internal_r+0x1034>
 8002f00:	008200b4 	movhi	r2,2050
 8002f04:	10a6a284 	addi	r2,r2,-25974
 8002f08:	d8802c15 	stw	r2,176(sp)
 8002f0c:	dac02c17 	ldw	r11,176(sp)
 8002f10:	1d47883a 	add	r3,r3,r21
 8002f14:	84000044 	addi	r16,r16,1
 8002f18:	92c00015 	stw	r11,0(r18)
 8002f1c:	95400115 	stw	r21,4(r18)
 8002f20:	d8c02015 	stw	r3,128(sp)
 8002f24:	dc001f15 	stw	r16,124(sp)
 8002f28:	008001c4 	movi	r2,7
 8002f2c:	143ebe0e 	bge	r2,r16,8002a28 <___vfprintf_internal_r+0x1030>
 8002f30:	b009883a 	mov	r4,r22
 8002f34:	b80b883a 	mov	r5,r23
 8002f38:	d9801e04 	addi	r6,sp,120
 8002f3c:	80084200 	call	8008420 <__sprint_r>
 8002f40:	103ba11e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002f44:	d8c02017 	ldw	r3,128(sp)
 8002f48:	dc001f17 	ldw	r16,124(sp)
 8002f4c:	dc800404 	addi	r18,sp,16
 8002f50:	003eb606 	br	8002a2c <___vfprintf_internal_r+0x1034>
 8002f54:	b009883a 	mov	r4,r22
 8002f58:	b80b883a 	mov	r5,r23
 8002f5c:	d9801e04 	addi	r6,sp,120
 8002f60:	80084200 	call	8008420 <__sprint_r>
 8002f64:	103b981e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002f68:	d8c02017 	ldw	r3,128(sp)
 8002f6c:	dc001f17 	ldw	r16,124(sp)
 8002f70:	da000404 	addi	r8,sp,16
 8002f74:	003e8d06 	br	80029ac <___vfprintf_internal_r+0xfb4>
 8002f78:	b009883a 	mov	r4,r22
 8002f7c:	b80b883a 	mov	r5,r23
 8002f80:	d9801e04 	addi	r6,sp,120
 8002f84:	80084200 	call	8008420 <__sprint_r>
 8002f88:	103b8f1e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002f8c:	d8c02017 	ldw	r3,128(sp)
 8002f90:	dc001f17 	ldw	r16,124(sp)
 8002f94:	dc800404 	addi	r18,sp,16
 8002f98:	003e8f06 	br	80029d8 <___vfprintf_internal_r+0xfe0>
 8002f9c:	db001e04 	addi	r12,sp,120
 8002fa0:	0025883a 	mov	r18,zero
 8002fa4:	db003115 	stw	r12,196(sp)
 8002fa8:	003be106 	br	8001f30 <___vfprintf_internal_r+0x538>
 8002fac:	b009883a 	mov	r4,r22
 8002fb0:	b80b883a 	mov	r5,r23
 8002fb4:	d9801e04 	addi	r6,sp,120
 8002fb8:	80084200 	call	8008420 <__sprint_r>
 8002fbc:	103b821e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8002fc0:	d8c02017 	ldw	r3,128(sp)
 8002fc4:	da000404 	addi	r8,sp,16
 8002fc8:	003c3b06 	br	80020b8 <___vfprintf_internal_r+0x6c0>
 8002fcc:	04e7c83a 	sub	r19,zero,r19
 8002fd0:	9804c03a 	cmpne	r2,r19,zero
 8002fd4:	0739c83a 	sub	fp,zero,fp
 8002fd8:	e0b9c83a 	sub	fp,fp,r2
 8002fdc:	05400b44 	movi	r21,45
 8002fe0:	dd402785 	stb	r21,158(sp)
 8002fe4:	da403215 	stw	r9,200(sp)
 8002fe8:	00800044 	movi	r2,1
 8002fec:	9f06b03a 	or	r3,r19,fp
 8002ff0:	003bb506 	br	8001ec8 <___vfprintf_internal_r+0x4d0>
 8002ff4:	da003f15 	stw	r8,252(sp)
 8002ff8:	da403e15 	stw	r9,248(sp)
 8002ffc:	80081740 	call	8008174 <__fpclassifyd>
 8003000:	da003f17 	ldw	r8,252(sp)
 8003004:	da403e17 	ldw	r9,248(sp)
 8003008:	1000ce26 	beq	r2,zero,8003344 <___vfprintf_internal_r+0x194c>
 800300c:	057ff7c4 	movi	r21,-33
 8003010:	00bfffc4 	movi	r2,-1
 8003014:	856a703a 	and	r21,r16,r21
 8003018:	4881e826 	beq	r9,r2,80037bc <___vfprintf_internal_r+0x1dc4>
 800301c:	008011c4 	movi	r2,71
 8003020:	a881e326 	beq	r21,r2,80037b0 <___vfprintf_internal_r+0x1db8>
 8003024:	db003917 	ldw	r12,228(sp)
 8003028:	8ac04014 	ori	r11,r17,256
 800302c:	dac02d15 	stw	r11,180(sp)
 8003030:	6001ed16 	blt	r12,zero,80037e8 <___vfprintf_internal_r+0x1df0>
 8003034:	dc803917 	ldw	r18,228(sp)
 8003038:	d8002b05 	stb	zero,172(sp)
 800303c:	00801984 	movi	r2,102
 8003040:	80811826 	beq	r16,r2,80034a4 <___vfprintf_internal_r+0x1aac>
 8003044:	00801184 	movi	r2,70
 8003048:	80811626 	beq	r16,r2,80034a4 <___vfprintf_internal_r+0x1aac>
 800304c:	00801144 	movi	r2,69
 8003050:	a881e926 	beq	r21,r2,80037f8 <___vfprintf_internal_r+0x1e00>
 8003054:	4839883a 	mov	fp,r9
 8003058:	d8802604 	addi	r2,sp,152
 800305c:	d8800115 	stw	r2,4(sp)
 8003060:	d9403717 	ldw	r5,220(sp)
 8003064:	d8802504 	addi	r2,sp,148
 8003068:	d8800215 	stw	r2,8(sp)
 800306c:	d8802104 	addi	r2,sp,132
 8003070:	df000015 	stw	fp,0(sp)
 8003074:	d8800315 	stw	r2,12(sp)
 8003078:	b009883a 	mov	r4,r22
 800307c:	900d883a 	mov	r6,r18
 8003080:	01c00084 	movi	r7,2
 8003084:	da003f15 	stw	r8,252(sp)
 8003088:	da403e15 	stw	r9,248(sp)
 800308c:	8003d7c0 	call	8003d7c <_dtoa_r>
 8003090:	d8803115 	stw	r2,196(sp)
 8003094:	008019c4 	movi	r2,103
 8003098:	da003f17 	ldw	r8,252(sp)
 800309c:	da403e17 	ldw	r9,248(sp)
 80030a0:	80800226 	beq	r16,r2,80030ac <___vfprintf_internal_r+0x16b4>
 80030a4:	008011c4 	movi	r2,71
 80030a8:	8081101e 	bne	r16,r2,80034ec <___vfprintf_internal_r+0x1af4>
 80030ac:	8880004c 	andi	r2,r17,1
 80030b0:	1001dd26 	beq	r2,zero,8003828 <___vfprintf_internal_r+0x1e30>
 80030b4:	db003117 	ldw	r12,196(sp)
 80030b8:	6715883a 	add	r10,r12,fp
 80030bc:	d9003717 	ldw	r4,220(sp)
 80030c0:	900b883a 	mov	r5,r18
 80030c4:	000d883a 	mov	r6,zero
 80030c8:	000f883a 	mov	r7,zero
 80030cc:	da003f15 	stw	r8,252(sp)
 80030d0:	da403e15 	stw	r9,248(sp)
 80030d4:	da803d15 	stw	r10,244(sp)
 80030d8:	800bec40 	call	800bec4 <__eqdf2>
 80030dc:	da003f17 	ldw	r8,252(sp)
 80030e0:	da403e17 	ldw	r9,248(sp)
 80030e4:	da803d17 	ldw	r10,244(sp)
 80030e8:	10016526 	beq	r2,zero,8003680 <___vfprintf_internal_r+0x1c88>
 80030ec:	d8802117 	ldw	r2,132(sp)
 80030f0:	1280062e 	bgeu	r2,r10,800310c <___vfprintf_internal_r+0x1714>
 80030f4:	01000c04 	movi	r4,48
 80030f8:	10c00044 	addi	r3,r2,1
 80030fc:	d8c02115 	stw	r3,132(sp)
 8003100:	11000005 	stb	r4,0(r2)
 8003104:	d8802117 	ldw	r2,132(sp)
 8003108:	12bffb36 	bltu	r2,r10,80030f8 <___vfprintf_internal_r+0x1700>
 800310c:	db003117 	ldw	r12,196(sp)
 8003110:	1305c83a 	sub	r2,r2,r12
 8003114:	d8803315 	stw	r2,204(sp)
 8003118:	008011c4 	movi	r2,71
 800311c:	a8814d26 	beq	r21,r2,8003654 <___vfprintf_internal_r+0x1c5c>
 8003120:	00801944 	movi	r2,101
 8003124:	1402060e 	bge	r2,r16,8003940 <___vfprintf_internal_r+0x1f48>
 8003128:	00801984 	movi	r2,102
 800312c:	8081b426 	beq	r16,r2,8003800 <___vfprintf_internal_r+0x1e08>
 8003130:	db002617 	ldw	r12,152(sp)
 8003134:	db003415 	stw	r12,208(sp)
 8003138:	db003417 	ldw	r12,208(sp)
 800313c:	dac03317 	ldw	r11,204(sp)
 8003140:	62c1a016 	blt	r12,r11,80037c4 <___vfprintf_internal_r+0x1dcc>
 8003144:	8c40004c 	andi	r17,r17,1
 8003148:	8801bf1e 	bne	r17,zero,8003848 <___vfprintf_internal_r+0x1e50>
 800314c:	6005883a 	mov	r2,r12
 8003150:	6001b316 	blt	r12,zero,8003820 <___vfprintf_internal_r+0x1e28>
 8003154:	dc803417 	ldw	r18,208(sp)
 8003158:	df002b07 	ldb	fp,172(sp)
 800315c:	e0012e1e 	bne	fp,zero,8003618 <___vfprintf_internal_r+0x1c20>
 8003160:	dc402d17 	ldw	r17,180(sp)
 8003164:	dd402783 	ldbu	r21,158(sp)
 8003168:	d8802b15 	stw	r2,172(sp)
 800316c:	dcc02d15 	stw	r19,180(sp)
 8003170:	d8003215 	stw	zero,200(sp)
 8003174:	003b7306 	br	8001f44 <___vfprintf_internal_r+0x54c>
 8003178:	00800084 	movi	r2,2
 800317c:	003c4d06 	br	80022b4 <___vfprintf_internal_r+0x8bc>
 8003180:	8880040c 	andi	r2,r17,16
 8003184:	1000091e 	bne	r2,zero,80031ac <___vfprintf_internal_r+0x17b4>
 8003188:	8c40100c 	andi	r17,r17,64
 800318c:	88000726 	beq	r17,zero,80031ac <___vfprintf_internal_r+0x17b4>
 8003190:	db002d17 	ldw	r12,180(sp)
 8003194:	dac02f17 	ldw	r11,188(sp)
 8003198:	60800017 	ldw	r2,0(r12)
 800319c:	63000104 	addi	r12,r12,4
 80031a0:	db002d15 	stw	r12,180(sp)
 80031a4:	12c0000d 	sth	r11,0(r2)
 80031a8:	003a4e06 	br	8001ae4 <___vfprintf_internal_r+0xec>
 80031ac:	db002d17 	ldw	r12,180(sp)
 80031b0:	dac02f17 	ldw	r11,188(sp)
 80031b4:	60800017 	ldw	r2,0(r12)
 80031b8:	63000104 	addi	r12,r12,4
 80031bc:	db002d15 	stw	r12,180(sp)
 80031c0:	12c00015 	stw	r11,0(r2)
 80031c4:	003a4706 	br	8001ae4 <___vfprintf_internal_r+0xec>
 80031c8:	1c000007 	ldb	r16,0(r3)
 80031cc:	1805883a 	mov	r2,r3
 80031d0:	003a6e06 	br	8001b8c <___vfprintf_internal_r+0x194>
 80031d4:	88c0100c 	andi	r3,r17,64
 80031d8:	18006b26 	beq	r3,zero,8003388 <___vfprintf_internal_r+0x1990>
 80031dc:	dac02d17 	ldw	r11,180(sp)
 80031e0:	14c0000b 	ldhu	r19,0(r2)
 80031e4:	0039883a 	mov	fp,zero
 80031e8:	5ac00104 	addi	r11,r11,4
 80031ec:	dac02d15 	stw	r11,180(sp)
 80031f0:	003cb206 	br	80024bc <___vfprintf_internal_r+0xac4>
 80031f4:	010200b4 	movhi	r4,2050
 80031f8:	2126a284 	addi	r4,r4,-25974
 80031fc:	d9002c15 	stw	r4,176(sp)
 8003200:	dac02c17 	ldw	r11,176(sp)
 8003204:	1c87883a 	add	r3,r3,r18
 8003208:	10800044 	addi	r2,r2,1
 800320c:	42c00015 	stw	r11,0(r8)
 8003210:	44800115 	stw	r18,4(r8)
 8003214:	d8c02015 	stw	r3,128(sp)
 8003218:	d8801f15 	stw	r2,124(sp)
 800321c:	010001c4 	movi	r4,7
 8003220:	20bee016 	blt	r4,r2,8002da4 <___vfprintf_internal_r+0x13ac>
 8003224:	42000204 	addi	r8,r8,8
 8003228:	003ee506 	br	8002dc0 <___vfprintf_internal_r+0x13c8>
 800322c:	010200b4 	movhi	r4,2050
 8003230:	2126a284 	addi	r4,r4,-25974
 8003234:	d9002c15 	stw	r4,176(sp)
 8003238:	003bbe06 	br	8002134 <___vfprintf_internal_r+0x73c>
 800323c:	b009883a 	mov	r4,r22
 8003240:	b80b883a 	mov	r5,r23
 8003244:	d9801e04 	addi	r6,sp,120
 8003248:	80084200 	call	8008420 <__sprint_r>
 800324c:	103ade1e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8003250:	d8c02017 	ldw	r3,128(sp)
 8003254:	da000404 	addi	r8,sp,16
 8003258:	003d6b06 	br	8002808 <___vfprintf_internal_r+0xe10>
 800325c:	d8801f17 	ldw	r2,124(sp)
 8003260:	030200b4 	movhi	r12,2050
 8003264:	01000044 	movi	r4,1
 8003268:	18c00044 	addi	r3,r3,1
 800326c:	10800044 	addi	r2,r2,1
 8003270:	6326a204 	addi	r12,r12,-25976
 8003274:	41000115 	stw	r4,4(r8)
 8003278:	43000015 	stw	r12,0(r8)
 800327c:	d8c02015 	stw	r3,128(sp)
 8003280:	d8801f15 	stw	r2,124(sp)
 8003284:	010001c4 	movi	r4,7
 8003288:	20804916 	blt	r4,r2,80033b0 <___vfprintf_internal_r+0x19b8>
 800328c:	42000204 	addi	r8,r8,8
 8003290:	8000041e 	bne	r16,zero,80032a4 <___vfprintf_internal_r+0x18ac>
 8003294:	dac03317 	ldw	r11,204(sp)
 8003298:	5800021e 	bne	r11,zero,80032a4 <___vfprintf_internal_r+0x18ac>
 800329c:	8880004c 	andi	r2,r17,1
 80032a0:	103bbb26 	beq	r2,zero,8002190 <___vfprintf_internal_r+0x798>
 80032a4:	db003817 	ldw	r12,224(sp)
 80032a8:	d8801f17 	ldw	r2,124(sp)
 80032ac:	dac03517 	ldw	r11,212(sp)
 80032b0:	1b07883a 	add	r3,r3,r12
 80032b4:	10800044 	addi	r2,r2,1
 80032b8:	42c00015 	stw	r11,0(r8)
 80032bc:	43000115 	stw	r12,4(r8)
 80032c0:	d8c02015 	stw	r3,128(sp)
 80032c4:	d8801f15 	stw	r2,124(sp)
 80032c8:	010001c4 	movi	r4,7
 80032cc:	20812e16 	blt	r4,r2,8003788 <___vfprintf_internal_r+0x1d90>
 80032d0:	42000204 	addi	r8,r8,8
 80032d4:	0421c83a 	sub	r16,zero,r16
 80032d8:	04005c0e 	bge	zero,r16,800344c <___vfprintf_internal_r+0x1a54>
 80032dc:	04800404 	movi	r18,16
 80032e0:	94009f0e 	bge	r18,r16,8003560 <___vfprintf_internal_r+0x1b68>
 80032e4:	010200b4 	movhi	r4,2050
 80032e8:	2126a284 	addi	r4,r4,-25974
 80032ec:	d9002c15 	stw	r4,176(sp)
 80032f0:	054001c4 	movi	r21,7
 80032f4:	00000306 	br	8003304 <___vfprintf_internal_r+0x190c>
 80032f8:	42000204 	addi	r8,r8,8
 80032fc:	843ffc04 	addi	r16,r16,-16
 8003300:	94009a0e 	bge	r18,r16,800356c <___vfprintf_internal_r+0x1b74>
 8003304:	18c00404 	addi	r3,r3,16
 8003308:	10800044 	addi	r2,r2,1
 800330c:	45000015 	stw	r20,0(r8)
 8003310:	44800115 	stw	r18,4(r8)
 8003314:	d8c02015 	stw	r3,128(sp)
 8003318:	d8801f15 	stw	r2,124(sp)
 800331c:	a8bff60e 	bge	r21,r2,80032f8 <___vfprintf_internal_r+0x1900>
 8003320:	b009883a 	mov	r4,r22
 8003324:	b80b883a 	mov	r5,r23
 8003328:	d9801e04 	addi	r6,sp,120
 800332c:	80084200 	call	8008420 <__sprint_r>
 8003330:	103aa51e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8003334:	d8c02017 	ldw	r3,128(sp)
 8003338:	d8801f17 	ldw	r2,124(sp)
 800333c:	da000404 	addi	r8,sp,16
 8003340:	003fee06 	br	80032fc <___vfprintf_internal_r+0x1904>
 8003344:	008011c4 	movi	r2,71
 8003348:	1400be16 	blt	r2,r16,8003644 <___vfprintf_internal_r+0x1c4c>
 800334c:	030200b4 	movhi	r12,2050
 8003350:	63269404 	addi	r12,r12,-26032
 8003354:	db003115 	stw	r12,196(sp)
 8003358:	00c000c4 	movi	r3,3
 800335c:	00bfdfc4 	movi	r2,-129
 8003360:	d8c02b15 	stw	r3,172(sp)
 8003364:	88a2703a 	and	r17,r17,r2
 8003368:	dd402783 	ldbu	r21,158(sp)
 800336c:	dcc02d15 	stw	r19,180(sp)
 8003370:	1825883a 	mov	r18,r3
 8003374:	d8003215 	stw	zero,200(sp)
 8003378:	d8003415 	stw	zero,208(sp)
 800337c:	003af106 	br	8001f44 <___vfprintf_internal_r+0x54c>
 8003380:	4825883a 	mov	r18,r9
 8003384:	003c9306 	br	80025d4 <___vfprintf_internal_r+0xbdc>
 8003388:	db002d17 	ldw	r12,180(sp)
 800338c:	14c00017 	ldw	r19,0(r2)
 8003390:	0039883a 	mov	fp,zero
 8003394:	63000104 	addi	r12,r12,4
 8003398:	db002d15 	stw	r12,180(sp)
 800339c:	003c4706 	br	80024bc <___vfprintf_internal_r+0xac4>
 80033a0:	008200b4 	movhi	r2,2050
 80033a4:	10a69204 	addi	r2,r2,-26040
 80033a8:	d8803115 	stw	r2,196(sp)
 80033ac:	003bf106 	br	8002374 <___vfprintf_internal_r+0x97c>
 80033b0:	b009883a 	mov	r4,r22
 80033b4:	b80b883a 	mov	r5,r23
 80033b8:	d9801e04 	addi	r6,sp,120
 80033bc:	80084200 	call	8008420 <__sprint_r>
 80033c0:	103a811e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 80033c4:	dc002617 	ldw	r16,152(sp)
 80033c8:	d8c02017 	ldw	r3,128(sp)
 80033cc:	da000404 	addi	r8,sp,16
 80033d0:	003faf06 	br	8003290 <___vfprintf_internal_r+0x1898>
 80033d4:	db002e17 	ldw	r12,184(sp)
 80033d8:	1805883a 	mov	r2,r3
 80033dc:	dac02d15 	stw	r11,180(sp)
 80033e0:	0319c83a 	sub	r12,zero,r12
 80033e4:	db002e15 	stw	r12,184(sp)
 80033e8:	003a8206 	br	8001df4 <___vfprintf_internal_r+0x3fc>
 80033ec:	18800044 	addi	r2,r3,1
 80033f0:	8c400814 	ori	r17,r17,32
 80033f4:	1c000047 	ldb	r16,1(r3)
 80033f8:	0039e406 	br	8001b8c <___vfprintf_internal_r+0x194>
 80033fc:	b009883a 	mov	r4,r22
 8003400:	b80b883a 	mov	r5,r23
 8003404:	d9801e04 	addi	r6,sp,120
 8003408:	80084200 	call	8008420 <__sprint_r>
 800340c:	103a6e1e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8003410:	d8c02017 	ldw	r3,128(sp)
 8003414:	da000404 	addi	r8,sp,16
 8003418:	003d0c06 	br	800284c <___vfprintf_internal_r+0xe54>
 800341c:	db002817 	ldw	r12,160(sp)
 8003420:	d8c03117 	ldw	r3,196(sp)
 8003424:	60e5c83a 	sub	r18,r12,r3
 8003428:	003ac106 	br	8001f30 <___vfprintf_internal_r+0x538>
 800342c:	b009883a 	mov	r4,r22
 8003430:	b80b883a 	mov	r5,r23
 8003434:	d9801e04 	addi	r6,sp,120
 8003438:	80084200 	call	8008420 <__sprint_r>
 800343c:	103a621e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8003440:	d8c02017 	ldw	r3,128(sp)
 8003444:	d8801f17 	ldw	r2,124(sp)
 8003448:	da000404 	addi	r8,sp,16
 800344c:	db003317 	ldw	r12,204(sp)
 8003450:	dac03117 	ldw	r11,196(sp)
 8003454:	10800044 	addi	r2,r2,1
 8003458:	1b07883a 	add	r3,r3,r12
 800345c:	42c00015 	stw	r11,0(r8)
 8003460:	43000115 	stw	r12,4(r8)
 8003464:	d8c02015 	stw	r3,128(sp)
 8003468:	d8801f15 	stw	r2,124(sp)
 800346c:	010001c4 	movi	r4,7
 8003470:	20bb460e 	bge	r4,r2,800218c <___vfprintf_internal_r+0x794>
 8003474:	003d8506 	br	8002a8c <___vfprintf_internal_r+0x1094>
 8003478:	da003f15 	stw	r8,252(sp)
 800347c:	80019600 	call	8001960 <strlen>
 8003480:	1025883a 	mov	r18,r2
 8003484:	da003f17 	ldw	r8,252(sp)
 8003488:	903c540e 	bge	r18,zero,80025dc <___vfprintf_internal_r+0xbe4>
 800348c:	0005883a 	mov	r2,zero
 8003490:	003c5206 	br	80025dc <___vfprintf_internal_r+0xbe4>
 8003494:	010200b4 	movhi	r4,2050
 8003498:	2126a684 	addi	r4,r4,-25958
 800349c:	d9003615 	stw	r4,216(sp)
 80034a0:	003adc06 	br	8002014 <___vfprintf_internal_r+0x61c>
 80034a4:	d8802604 	addi	r2,sp,152
 80034a8:	d8800115 	stw	r2,4(sp)
 80034ac:	d9403717 	ldw	r5,220(sp)
 80034b0:	d8802504 	addi	r2,sp,148
 80034b4:	d8800215 	stw	r2,8(sp)
 80034b8:	d8802104 	addi	r2,sp,132
 80034bc:	da400015 	stw	r9,0(sp)
 80034c0:	d8800315 	stw	r2,12(sp)
 80034c4:	b009883a 	mov	r4,r22
 80034c8:	900d883a 	mov	r6,r18
 80034cc:	01c000c4 	movi	r7,3
 80034d0:	da003f15 	stw	r8,252(sp)
 80034d4:	da403e15 	stw	r9,248(sp)
 80034d8:	8003d7c0 	call	8003d7c <_dtoa_r>
 80034dc:	da403e17 	ldw	r9,248(sp)
 80034e0:	da003f17 	ldw	r8,252(sp)
 80034e4:	d8803115 	stw	r2,196(sp)
 80034e8:	4839883a 	mov	fp,r9
 80034ec:	dac03117 	ldw	r11,196(sp)
 80034f0:	00801184 	movi	r2,70
 80034f4:	5f15883a 	add	r10,r11,fp
 80034f8:	a8bef01e 	bne	r21,r2,80030bc <___vfprintf_internal_r+0x16c4>
 80034fc:	59000007 	ldb	r4,0(r11)
 8003500:	00800c04 	movi	r2,48
 8003504:	2080d526 	beq	r4,r2,800385c <___vfprintf_internal_r+0x1e64>
 8003508:	d8c02617 	ldw	r3,152(sp)
 800350c:	50d5883a 	add	r10,r10,r3
 8003510:	003eea06 	br	80030bc <___vfprintf_internal_r+0x16c4>
 8003514:	0025883a 	mov	r18,zero
 8003518:	003db306 	br	8002be8 <___vfprintf_internal_r+0x11f0>
 800351c:	b009883a 	mov	r4,r22
 8003520:	b80b883a 	mov	r5,r23
 8003524:	d9801e04 	addi	r6,sp,120
 8003528:	80084200 	call	8008420 <__sprint_r>
 800352c:	103a261e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8003530:	d8c02017 	ldw	r3,128(sp)
 8003534:	da000404 	addi	r8,sp,16
 8003538:	003daa06 	br	8002be4 <___vfprintf_internal_r+0x11ec>
 800353c:	b009883a 	mov	r4,r22
 8003540:	b80b883a 	mov	r5,r23
 8003544:	d9801e04 	addi	r6,sp,120
 8003548:	80084200 	call	8008420 <__sprint_r>
 800354c:	103a1e1e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 8003550:	d8802617 	ldw	r2,152(sp)
 8003554:	d8c02017 	ldw	r3,128(sp)
 8003558:	da000404 	addi	r8,sp,16
 800355c:	003e2c06 	br	8002e10 <___vfprintf_internal_r+0x1418>
 8003560:	030200b4 	movhi	r12,2050
 8003564:	6326a284 	addi	r12,r12,-25974
 8003568:	db002c15 	stw	r12,176(sp)
 800356c:	dac02c17 	ldw	r11,176(sp)
 8003570:	1c07883a 	add	r3,r3,r16
 8003574:	10800044 	addi	r2,r2,1
 8003578:	42c00015 	stw	r11,0(r8)
 800357c:	44000115 	stw	r16,4(r8)
 8003580:	d8c02015 	stw	r3,128(sp)
 8003584:	d8801f15 	stw	r2,124(sp)
 8003588:	010001c4 	movi	r4,7
 800358c:	20bfa716 	blt	r4,r2,800342c <___vfprintf_internal_r+0x1a34>
 8003590:	42000204 	addi	r8,r8,8
 8003594:	003fad06 	br	800344c <___vfprintf_internal_r+0x1a54>
 8003598:	00800184 	movi	r2,6
 800359c:	1240012e 	bgeu	r2,r9,80035a4 <___vfprintf_internal_r+0x1bac>
 80035a0:	1013883a 	mov	r9,r2
 80035a4:	4825883a 	mov	r18,r9
 80035a8:	4805883a 	mov	r2,r9
 80035ac:	4800c216 	blt	r9,zero,80038b8 <___vfprintf_internal_r+0x1ec0>
 80035b0:	d8802b15 	stw	r2,172(sp)
 80035b4:	008200b4 	movhi	r2,2050
 80035b8:	10a6a004 	addi	r2,r2,-25984
 80035bc:	d8803115 	stw	r2,196(sp)
 80035c0:	dcc02d15 	stw	r19,180(sp)
 80035c4:	d8003215 	stw	zero,200(sp)
 80035c8:	d8003415 	stw	zero,208(sp)
 80035cc:	0005883a 	mov	r2,zero
 80035d0:	003a6306 	br	8001f60 <___vfprintf_internal_r+0x568>
 80035d4:	0021883a 	mov	r16,zero
 80035d8:	003e1f06 	br	8002e58 <___vfprintf_internal_r+0x1460>
 80035dc:	b009883a 	mov	r4,r22
 80035e0:	b80b883a 	mov	r5,r23
 80035e4:	d9801e04 	addi	r6,sp,120
 80035e8:	80084200 	call	8008420 <__sprint_r>
 80035ec:	1039f61e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 80035f0:	d8802617 	ldw	r2,152(sp)
 80035f4:	db003317 	ldw	r12,204(sp)
 80035f8:	d8c02017 	ldw	r3,128(sp)
 80035fc:	da000404 	addi	r8,sp,16
 8003600:	6085c83a 	sub	r2,r12,r2
 8003604:	003e1306 	br	8002e54 <___vfprintf_internal_r+0x145c>
 8003608:	030200b4 	movhi	r12,2050
 800360c:	6326a684 	addi	r12,r12,-25958
 8003610:	db003615 	stw	r12,216(sp)
 8003614:	003b0206 	br	8002220 <___vfprintf_internal_r+0x828>
 8003618:	00c00b44 	movi	r3,45
 800361c:	d8802b15 	stw	r2,172(sp)
 8003620:	dc402d17 	ldw	r17,180(sp)
 8003624:	d8c02785 	stb	r3,158(sp)
 8003628:	dcc02d15 	stw	r19,180(sp)
 800362c:	d8003215 	stw	zero,200(sp)
 8003630:	00800b44 	movi	r2,45
 8003634:	003a4706 	br	8001f54 <___vfprintf_internal_r+0x55c>
 8003638:	05400b44 	movi	r21,45
 800363c:	dd402785 	stb	r21,158(sp)
 8003640:	003b4706 	br	8002360 <___vfprintf_internal_r+0x968>
 8003644:	008200b4 	movhi	r2,2050
 8003648:	10a69504 	addi	r2,r2,-26028
 800364c:	d8803115 	stw	r2,196(sp)
 8003650:	003f4106 	br	8003358 <___vfprintf_internal_r+0x1960>
 8003654:	d8c02617 	ldw	r3,152(sp)
 8003658:	00bfff44 	movi	r2,-3
 800365c:	18801116 	blt	r3,r2,80036a4 <___vfprintf_internal_r+0x1cac>
 8003660:	48c01016 	blt	r9,r3,80036a4 <___vfprintf_internal_r+0x1cac>
 8003664:	d8c03415 	stw	r3,208(sp)
 8003668:	040019c4 	movi	r16,103
 800366c:	003eb206 	br	8003138 <___vfprintf_internal_r+0x1740>
 8003670:	010200b4 	movhi	r4,2050
 8003674:	2126a284 	addi	r4,r4,-25974
 8003678:	d9002c15 	stw	r4,176(sp)
 800367c:	003cb106 	br	8002944 <___vfprintf_internal_r+0xf4c>
 8003680:	5005883a 	mov	r2,r10
 8003684:	003ea106 	br	800310c <___vfprintf_internal_r+0x1714>
 8003688:	da402b15 	stw	r9,172(sp)
 800368c:	dd402783 	ldbu	r21,158(sp)
 8003690:	4825883a 	mov	r18,r9
 8003694:	dcc02d15 	stw	r19,180(sp)
 8003698:	d8003215 	stw	zero,200(sp)
 800369c:	d8003415 	stw	zero,208(sp)
 80036a0:	003a2806 	br	8001f44 <___vfprintf_internal_r+0x54c>
 80036a4:	843fff84 	addi	r16,r16,-2
 80036a8:	1f3fffc4 	addi	fp,r3,-1
 80036ac:	df002615 	stw	fp,152(sp)
 80036b0:	dc0022c5 	stb	r16,139(sp)
 80036b4:	e0009816 	blt	fp,zero,8003918 <___vfprintf_internal_r+0x1f20>
 80036b8:	00800ac4 	movi	r2,43
 80036bc:	d8802305 	stb	r2,140(sp)
 80036c0:	00800244 	movi	r2,9
 80036c4:	1700750e 	bge	r2,fp,800389c <___vfprintf_internal_r+0x1ea4>
 80036c8:	dd4022c4 	addi	r21,sp,139
 80036cc:	dc002c15 	stw	r16,176(sp)
 80036d0:	4025883a 	mov	r18,r8
 80036d4:	a821883a 	mov	r16,r21
 80036d8:	e009883a 	mov	r4,fp
 80036dc:	01400284 	movi	r5,10
 80036e0:	800acf00 	call	800acf0 <__modsi3>
 80036e4:	10800c04 	addi	r2,r2,48
 80036e8:	843fffc4 	addi	r16,r16,-1
 80036ec:	e009883a 	mov	r4,fp
 80036f0:	01400284 	movi	r5,10
 80036f4:	80800005 	stb	r2,0(r16)
 80036f8:	800ac9c0 	call	800ac9c <__divsi3>
 80036fc:	1039883a 	mov	fp,r2
 8003700:	00800244 	movi	r2,9
 8003704:	173ff416 	blt	r2,fp,80036d8 <___vfprintf_internal_r+0x1ce0>
 8003708:	9011883a 	mov	r8,r18
 800370c:	e0800c04 	addi	r2,fp,48
 8003710:	8025883a 	mov	r18,r16
 8003714:	913fffc4 	addi	r4,r18,-1
 8003718:	90bfffc5 	stb	r2,-1(r18)
 800371c:	dc002c17 	ldw	r16,176(sp)
 8003720:	2540852e 	bgeu	r4,r21,8003938 <___vfprintf_internal_r+0x1f40>
 8003724:	d9402384 	addi	r5,sp,142
 8003728:	2c8bc83a 	sub	r5,r5,r18
 800372c:	d8c02344 	addi	r3,sp,141
 8003730:	a94b883a 	add	r5,r21,r5
 8003734:	00000106 	br	800373c <___vfprintf_internal_r+0x1d44>
 8003738:	20800003 	ldbu	r2,0(r4)
 800373c:	18800005 	stb	r2,0(r3)
 8003740:	18c00044 	addi	r3,r3,1
 8003744:	21000044 	addi	r4,r4,1
 8003748:	197ffb1e 	bne	r3,r5,8003738 <___vfprintf_internal_r+0x1d40>
 800374c:	d8802304 	addi	r2,sp,140
 8003750:	1485c83a 	sub	r2,r2,r18
 8003754:	d8c02344 	addi	r3,sp,141
 8003758:	1885883a 	add	r2,r3,r2
 800375c:	dac03317 	ldw	r11,204(sp)
 8003760:	156bc83a 	sub	r21,r2,r21
 8003764:	dd403a15 	stw	r21,232(sp)
 8003768:	00800044 	movi	r2,1
 800376c:	5d65883a 	add	r18,r11,r21
 8003770:	12c0660e 	bge	r2,r11,800390c <___vfprintf_internal_r+0x1f14>
 8003774:	94800044 	addi	r18,r18,1
 8003778:	9005883a 	mov	r2,r18
 800377c:	90006116 	blt	r18,zero,8003904 <___vfprintf_internal_r+0x1f0c>
 8003780:	d8003415 	stw	zero,208(sp)
 8003784:	003e7406 	br	8003158 <___vfprintf_internal_r+0x1760>
 8003788:	b009883a 	mov	r4,r22
 800378c:	b80b883a 	mov	r5,r23
 8003790:	d9801e04 	addi	r6,sp,120
 8003794:	80084200 	call	8008420 <__sprint_r>
 8003798:	10398b1e 	bne	r2,zero,8001dc8 <___vfprintf_internal_r+0x3d0>
 800379c:	dc002617 	ldw	r16,152(sp)
 80037a0:	d8c02017 	ldw	r3,128(sp)
 80037a4:	d8801f17 	ldw	r2,124(sp)
 80037a8:	da000404 	addi	r8,sp,16
 80037ac:	003ec906 	br	80032d4 <___vfprintf_internal_r+0x18dc>
 80037b0:	483e1c1e 	bne	r9,zero,8003024 <___vfprintf_internal_r+0x162c>
 80037b4:	9013883a 	mov	r9,r18
 80037b8:	003e1a06 	br	8003024 <___vfprintf_internal_r+0x162c>
 80037bc:	02400184 	movi	r9,6
 80037c0:	003e1806 	br	8003024 <___vfprintf_internal_r+0x162c>
 80037c4:	d8c03417 	ldw	r3,208(sp)
 80037c8:	00c04b0e 	bge	zero,r3,80038f8 <___vfprintf_internal_r+0x1f00>
 80037cc:	04800044 	movi	r18,1
 80037d0:	dac03317 	ldw	r11,204(sp)
 80037d4:	92e5883a 	add	r18,r18,r11
 80037d8:	9005883a 	mov	r2,r18
 80037dc:	903e5e0e 	bge	r18,zero,8003158 <___vfprintf_internal_r+0x1760>
 80037e0:	0005883a 	mov	r2,zero
 80037e4:	003e5c06 	br	8003158 <___vfprintf_internal_r+0x1760>
 80037e8:	00c00b44 	movi	r3,45
 80037ec:	64a0003c 	xorhi	r18,r12,32768
 80037f0:	d8c02b05 	stb	r3,172(sp)
 80037f4:	003e1106 	br	800303c <___vfprintf_internal_r+0x1644>
 80037f8:	4f000044 	addi	fp,r9,1
 80037fc:	003e1606 	br	8003058 <___vfprintf_internal_r+0x1660>
 8003800:	d8c02617 	ldw	r3,152(sp)
 8003804:	d8c03415 	stw	r3,208(sp)
 8003808:	00c0350e 	bge	zero,r3,80038e0 <___vfprintf_internal_r+0x1ee8>
 800380c:	4800081e 	bne	r9,zero,8003830 <___vfprintf_internal_r+0x1e38>
 8003810:	8c40004c 	andi	r17,r17,1
 8003814:	8800061e 	bne	r17,zero,8003830 <___vfprintf_internal_r+0x1e38>
 8003818:	1805883a 	mov	r2,r3
 800381c:	183e4d0e 	bge	r3,zero,8003154 <___vfprintf_internal_r+0x175c>
 8003820:	0005883a 	mov	r2,zero
 8003824:	003e4b06 	br	8003154 <___vfprintf_internal_r+0x175c>
 8003828:	d8802117 	ldw	r2,132(sp)
 800382c:	003e3706 	br	800310c <___vfprintf_internal_r+0x1714>
 8003830:	dac03417 	ldw	r11,208(sp)
 8003834:	4a400044 	addi	r9,r9,1
 8003838:	5a65883a 	add	r18,r11,r9
 800383c:	9005883a 	mov	r2,r18
 8003840:	903e450e 	bge	r18,zero,8003158 <___vfprintf_internal_r+0x1760>
 8003844:	003fe606 	br	80037e0 <___vfprintf_internal_r+0x1de8>
 8003848:	db003417 	ldw	r12,208(sp)
 800384c:	64800044 	addi	r18,r12,1
 8003850:	9005883a 	mov	r2,r18
 8003854:	903e400e 	bge	r18,zero,8003158 <___vfprintf_internal_r+0x1760>
 8003858:	003fe106 	br	80037e0 <___vfprintf_internal_r+0x1de8>
 800385c:	d9003717 	ldw	r4,220(sp)
 8003860:	900b883a 	mov	r5,r18
 8003864:	000d883a 	mov	r6,zero
 8003868:	000f883a 	mov	r7,zero
 800386c:	da003f15 	stw	r8,252(sp)
 8003870:	da403e15 	stw	r9,248(sp)
 8003874:	da803d15 	stw	r10,244(sp)
 8003878:	800bec40 	call	800bec4 <__eqdf2>
 800387c:	da003f17 	ldw	r8,252(sp)
 8003880:	da403e17 	ldw	r9,248(sp)
 8003884:	da803d17 	ldw	r10,244(sp)
 8003888:	103f1f26 	beq	r2,zero,8003508 <___vfprintf_internal_r+0x1b10>
 800388c:	00800044 	movi	r2,1
 8003890:	1707c83a 	sub	r3,r2,fp
 8003894:	d8c02615 	stw	r3,152(sp)
 8003898:	003f1c06 	br	800350c <___vfprintf_internal_r+0x1b14>
 800389c:	00800c04 	movi	r2,48
 80038a0:	e0c00c04 	addi	r3,fp,48
 80038a4:	d8802345 	stb	r2,141(sp)
 80038a8:	d8c02385 	stb	r3,142(sp)
 80038ac:	d88023c4 	addi	r2,sp,143
 80038b0:	dd4022c4 	addi	r21,sp,139
 80038b4:	003fa906 	br	800375c <___vfprintf_internal_r+0x1d64>
 80038b8:	0005883a 	mov	r2,zero
 80038bc:	003f3c06 	br	80035b0 <___vfprintf_internal_r+0x1bb8>
 80038c0:	dac02d17 	ldw	r11,180(sp)
 80038c4:	5a400017 	ldw	r9,0(r11)
 80038c8:	5ac00104 	addi	r11,r11,4
 80038cc:	dac02d15 	stw	r11,180(sp)
 80038d0:	483ec80e 	bge	r9,zero,80033f4 <___vfprintf_internal_r+0x19fc>
 80038d4:	027fffc4 	movi	r9,-1
 80038d8:	1c000047 	ldb	r16,1(r3)
 80038dc:	0038ab06 	br	8001b8c <___vfprintf_internal_r+0x194>
 80038e0:	4800111e 	bne	r9,zero,8003928 <___vfprintf_internal_r+0x1f30>
 80038e4:	8c40004c 	andi	r17,r17,1
 80038e8:	88000f1e 	bne	r17,zero,8003928 <___vfprintf_internal_r+0x1f30>
 80038ec:	00800044 	movi	r2,1
 80038f0:	1025883a 	mov	r18,r2
 80038f4:	003e1806 	br	8003158 <___vfprintf_internal_r+0x1760>
 80038f8:	04800084 	movi	r18,2
 80038fc:	90e5c83a 	sub	r18,r18,r3
 8003900:	003fb306 	br	80037d0 <___vfprintf_internal_r+0x1dd8>
 8003904:	0005883a 	mov	r2,zero
 8003908:	003f9d06 	br	8003780 <___vfprintf_internal_r+0x1d88>
 800390c:	88a2703a 	and	r17,r17,r2
 8003910:	883f9926 	beq	r17,zero,8003778 <___vfprintf_internal_r+0x1d80>
 8003914:	003f9706 	br	8003774 <___vfprintf_internal_r+0x1d7c>
 8003918:	00800b44 	movi	r2,45
 800391c:	0739c83a 	sub	fp,zero,fp
 8003920:	d8802305 	stb	r2,140(sp)
 8003924:	003f6606 	br	80036c0 <___vfprintf_internal_r+0x1cc8>
 8003928:	4c800084 	addi	r18,r9,2
 800392c:	9005883a 	mov	r2,r18
 8003930:	903e090e 	bge	r18,zero,8003158 <___vfprintf_internal_r+0x1760>
 8003934:	003faa06 	br	80037e0 <___vfprintf_internal_r+0x1de8>
 8003938:	d8802344 	addi	r2,sp,141
 800393c:	003f8706 	br	800375c <___vfprintf_internal_r+0x1d64>
 8003940:	d8c02617 	ldw	r3,152(sp)
 8003944:	003f5806 	br	80036a8 <___vfprintf_internal_r+0x1cb0>

08003948 <__vfprintf_internal>:
 8003948:	2007883a 	mov	r3,r4
 800394c:	010200b4 	movhi	r4,2050
 8003950:	21113b04 	addi	r4,r4,17644
 8003954:	21000017 	ldw	r4,0(r4)
 8003958:	2805883a 	mov	r2,r5
 800395c:	300f883a 	mov	r7,r6
 8003960:	180b883a 	mov	r5,r3
 8003964:	100d883a 	mov	r6,r2
 8003968:	80019f81 	jmpi	80019f8 <___vfprintf_internal_r>

0800396c <__sbprintf>:
 800396c:	2880030b 	ldhu	r2,12(r5)
 8003970:	2ac01917 	ldw	r11,100(r5)
 8003974:	2a80038b 	ldhu	r10,14(r5)
 8003978:	2a400717 	ldw	r9,28(r5)
 800397c:	2a000917 	ldw	r8,36(r5)
 8003980:	defee204 	addi	sp,sp,-1144
 8003984:	00c10004 	movi	r3,1024
 8003988:	dc011a15 	stw	r16,1128(sp)
 800398c:	10bfff4c 	andi	r2,r2,65533
 8003990:	2821883a 	mov	r16,r5
 8003994:	d8cb883a 	add	r5,sp,r3
 8003998:	dc811c15 	stw	r18,1136(sp)
 800399c:	dc411b15 	stw	r17,1132(sp)
 80039a0:	dfc11d15 	stw	ra,1140(sp)
 80039a4:	2025883a 	mov	r18,r4
 80039a8:	d881030d 	sth	r2,1036(sp)
 80039ac:	dac11915 	stw	r11,1124(sp)
 80039b0:	da81038d 	sth	r10,1038(sp)
 80039b4:	da410715 	stw	r9,1052(sp)
 80039b8:	da010915 	stw	r8,1060(sp)
 80039bc:	dec10015 	stw	sp,1024(sp)
 80039c0:	dec10415 	stw	sp,1040(sp)
 80039c4:	d8c10215 	stw	r3,1032(sp)
 80039c8:	d8c10515 	stw	r3,1044(sp)
 80039cc:	d8010615 	stw	zero,1048(sp)
 80039d0:	80019f80 	call	80019f8 <___vfprintf_internal_r>
 80039d4:	1023883a 	mov	r17,r2
 80039d8:	10000416 	blt	r2,zero,80039ec <__sbprintf+0x80>
 80039dc:	9009883a 	mov	r4,r18
 80039e0:	d9410004 	addi	r5,sp,1024
 80039e4:	80056ac0 	call	80056ac <_fflush_r>
 80039e8:	10000d1e 	bne	r2,zero,8003a20 <__sbprintf+0xb4>
 80039ec:	d8c1030b 	ldhu	r3,1036(sp)
 80039f0:	18c0100c 	andi	r3,r3,64
 80039f4:	18000326 	beq	r3,zero,8003a04 <__sbprintf+0x98>
 80039f8:	8080030b 	ldhu	r2,12(r16)
 80039fc:	10801014 	ori	r2,r2,64
 8003a00:	8080030d 	sth	r2,12(r16)
 8003a04:	8805883a 	mov	r2,r17
 8003a08:	dfc11d17 	ldw	ra,1140(sp)
 8003a0c:	dc811c17 	ldw	r18,1136(sp)
 8003a10:	dc411b17 	ldw	r17,1132(sp)
 8003a14:	dc011a17 	ldw	r16,1128(sp)
 8003a18:	dec11e04 	addi	sp,sp,1144
 8003a1c:	f800283a 	ret
 8003a20:	047fffc4 	movi	r17,-1
 8003a24:	003ff106 	br	80039ec <__sbprintf+0x80>

08003a28 <__swsetup_r>:
 8003a28:	008200b4 	movhi	r2,2050
 8003a2c:	defffd04 	addi	sp,sp,-12
 8003a30:	10913b04 	addi	r2,r2,17644
 8003a34:	dc400115 	stw	r17,4(sp)
 8003a38:	2023883a 	mov	r17,r4
 8003a3c:	11000017 	ldw	r4,0(r2)
 8003a40:	dc000015 	stw	r16,0(sp)
 8003a44:	dfc00215 	stw	ra,8(sp)
 8003a48:	2821883a 	mov	r16,r5
 8003a4c:	20000226 	beq	r4,zero,8003a58 <__swsetup_r+0x30>
 8003a50:	20c00e17 	ldw	r3,56(r4)
 8003a54:	18003126 	beq	r3,zero,8003b1c <__swsetup_r+0xf4>
 8003a58:	8080030b 	ldhu	r2,12(r16)
 8003a5c:	10c0020c 	andi	r3,r2,8
 8003a60:	100d883a 	mov	r6,r2
 8003a64:	18000f26 	beq	r3,zero,8003aa4 <__swsetup_r+0x7c>
 8003a68:	80c00417 	ldw	r3,16(r16)
 8003a6c:	18001526 	beq	r3,zero,8003ac4 <__swsetup_r+0x9c>
 8003a70:	1100004c 	andi	r4,r2,1
 8003a74:	20001c1e 	bne	r4,zero,8003ae8 <__swsetup_r+0xc0>
 8003a78:	1080008c 	andi	r2,r2,2
 8003a7c:	1000291e 	bne	r2,zero,8003b24 <__swsetup_r+0xfc>
 8003a80:	80800517 	ldw	r2,20(r16)
 8003a84:	80800215 	stw	r2,8(r16)
 8003a88:	18001c26 	beq	r3,zero,8003afc <__swsetup_r+0xd4>
 8003a8c:	0005883a 	mov	r2,zero
 8003a90:	dfc00217 	ldw	ra,8(sp)
 8003a94:	dc400117 	ldw	r17,4(sp)
 8003a98:	dc000017 	ldw	r16,0(sp)
 8003a9c:	dec00304 	addi	sp,sp,12
 8003aa0:	f800283a 	ret
 8003aa4:	3080040c 	andi	r2,r6,16
 8003aa8:	10002e26 	beq	r2,zero,8003b64 <__swsetup_r+0x13c>
 8003aac:	3080010c 	andi	r2,r6,4
 8003ab0:	10001e1e 	bne	r2,zero,8003b2c <__swsetup_r+0x104>
 8003ab4:	80c00417 	ldw	r3,16(r16)
 8003ab8:	30800214 	ori	r2,r6,8
 8003abc:	8080030d 	sth	r2,12(r16)
 8003ac0:	183feb1e 	bne	r3,zero,8003a70 <__swsetup_r+0x48>
 8003ac4:	1140a00c 	andi	r5,r2,640
 8003ac8:	01008004 	movi	r4,512
 8003acc:	293fe826 	beq	r5,r4,8003a70 <__swsetup_r+0x48>
 8003ad0:	8809883a 	mov	r4,r17
 8003ad4:	800b883a 	mov	r5,r16
 8003ad8:	80066140 	call	8006614 <__smakebuf_r>
 8003adc:	8080030b 	ldhu	r2,12(r16)
 8003ae0:	80c00417 	ldw	r3,16(r16)
 8003ae4:	003fe206 	br	8003a70 <__swsetup_r+0x48>
 8003ae8:	80800517 	ldw	r2,20(r16)
 8003aec:	80000215 	stw	zero,8(r16)
 8003af0:	0085c83a 	sub	r2,zero,r2
 8003af4:	80800615 	stw	r2,24(r16)
 8003af8:	183fe41e 	bne	r3,zero,8003a8c <__swsetup_r+0x64>
 8003afc:	80c0030b 	ldhu	r3,12(r16)
 8003b00:	0005883a 	mov	r2,zero
 8003b04:	1900200c 	andi	r4,r3,128
 8003b08:	203fe126 	beq	r4,zero,8003a90 <__swsetup_r+0x68>
 8003b0c:	18c01014 	ori	r3,r3,64
 8003b10:	80c0030d 	sth	r3,12(r16)
 8003b14:	00bfffc4 	movi	r2,-1
 8003b18:	003fdd06 	br	8003a90 <__swsetup_r+0x68>
 8003b1c:	8005a880 	call	8005a88 <__sinit>
 8003b20:	003fcd06 	br	8003a58 <__swsetup_r+0x30>
 8003b24:	0005883a 	mov	r2,zero
 8003b28:	003fd606 	br	8003a84 <__swsetup_r+0x5c>
 8003b2c:	81400c17 	ldw	r5,48(r16)
 8003b30:	28000626 	beq	r5,zero,8003b4c <__swsetup_r+0x124>
 8003b34:	80801004 	addi	r2,r16,64
 8003b38:	28800326 	beq	r5,r2,8003b48 <__swsetup_r+0x120>
 8003b3c:	8809883a 	mov	r4,r17
 8003b40:	8005bfc0 	call	8005bfc <_free_r>
 8003b44:	8180030b 	ldhu	r6,12(r16)
 8003b48:	80000c15 	stw	zero,48(r16)
 8003b4c:	80c00417 	ldw	r3,16(r16)
 8003b50:	00bff6c4 	movi	r2,-37
 8003b54:	118c703a 	and	r6,r2,r6
 8003b58:	80000115 	stw	zero,4(r16)
 8003b5c:	80c00015 	stw	r3,0(r16)
 8003b60:	003fd506 	br	8003ab8 <__swsetup_r+0x90>
 8003b64:	00800244 	movi	r2,9
 8003b68:	88800015 	stw	r2,0(r17)
 8003b6c:	30801014 	ori	r2,r6,64
 8003b70:	8080030d 	sth	r2,12(r16)
 8003b74:	00bfffc4 	movi	r2,-1
 8003b78:	003fc506 	br	8003a90 <__swsetup_r+0x68>

08003b7c <quorem>:
 8003b7c:	defff704 	addi	sp,sp,-36
 8003b80:	dc800215 	stw	r18,8(sp)
 8003b84:	20800417 	ldw	r2,16(r4)
 8003b88:	2c800417 	ldw	r18,16(r5)
 8003b8c:	dfc00815 	stw	ra,32(sp)
 8003b90:	ddc00715 	stw	r23,28(sp)
 8003b94:	dd800615 	stw	r22,24(sp)
 8003b98:	dd400515 	stw	r21,20(sp)
 8003b9c:	dd000415 	stw	r20,16(sp)
 8003ba0:	dcc00315 	stw	r19,12(sp)
 8003ba4:	dc400115 	stw	r17,4(sp)
 8003ba8:	dc000015 	stw	r16,0(sp)
 8003bac:	14807116 	blt	r2,r18,8003d74 <quorem+0x1f8>
 8003bb0:	94bfffc4 	addi	r18,r18,-1
 8003bb4:	94ad883a 	add	r22,r18,r18
 8003bb8:	b5ad883a 	add	r22,r22,r22
 8003bbc:	2c400504 	addi	r17,r5,20
 8003bc0:	8da9883a 	add	r20,r17,r22
 8003bc4:	25400504 	addi	r21,r4,20
 8003bc8:	282f883a 	mov	r23,r5
 8003bcc:	adad883a 	add	r22,r21,r22
 8003bd0:	a1400017 	ldw	r5,0(r20)
 8003bd4:	2021883a 	mov	r16,r4
 8003bd8:	b1000017 	ldw	r4,0(r22)
 8003bdc:	29400044 	addi	r5,r5,1
 8003be0:	800ad4c0 	call	800ad4c <__udivsi3>
 8003be4:	1027883a 	mov	r19,r2
 8003be8:	10002c26 	beq	r2,zero,8003c9c <quorem+0x120>
 8003bec:	a813883a 	mov	r9,r21
 8003bf0:	8811883a 	mov	r8,r17
 8003bf4:	0009883a 	mov	r4,zero
 8003bf8:	000d883a 	mov	r6,zero
 8003bfc:	41c00017 	ldw	r7,0(r8)
 8003c00:	49400017 	ldw	r5,0(r9)
 8003c04:	42000104 	addi	r8,r8,4
 8003c08:	38bfffcc 	andi	r2,r7,65535
 8003c0c:	14c5383a 	mul	r2,r2,r19
 8003c10:	380ed43a 	srli	r7,r7,16
 8003c14:	28ffffcc 	andi	r3,r5,65535
 8003c18:	2085883a 	add	r2,r4,r2
 8003c1c:	1008d43a 	srli	r4,r2,16
 8003c20:	3ccf383a 	mul	r7,r7,r19
 8003c24:	198d883a 	add	r6,r3,r6
 8003c28:	10ffffcc 	andi	r3,r2,65535
 8003c2c:	30c7c83a 	sub	r3,r6,r3
 8003c30:	280ad43a 	srli	r5,r5,16
 8003c34:	21c9883a 	add	r4,r4,r7
 8003c38:	180dd43a 	srai	r6,r3,16
 8003c3c:	20bfffcc 	andi	r2,r4,65535
 8003c40:	288bc83a 	sub	r5,r5,r2
 8003c44:	298b883a 	add	r5,r5,r6
 8003c48:	280e943a 	slli	r7,r5,16
 8003c4c:	18ffffcc 	andi	r3,r3,65535
 8003c50:	2008d43a 	srli	r4,r4,16
 8003c54:	38ceb03a 	or	r7,r7,r3
 8003c58:	49c00015 	stw	r7,0(r9)
 8003c5c:	280dd43a 	srai	r6,r5,16
 8003c60:	4a400104 	addi	r9,r9,4
 8003c64:	a23fe52e 	bgeu	r20,r8,8003bfc <quorem+0x80>
 8003c68:	b0800017 	ldw	r2,0(r22)
 8003c6c:	10000b1e 	bne	r2,zero,8003c9c <quorem+0x120>
 8003c70:	b0bfff04 	addi	r2,r22,-4
 8003c74:	a880082e 	bgeu	r21,r2,8003c98 <quorem+0x11c>
 8003c78:	b0ffff17 	ldw	r3,-4(r22)
 8003c7c:	18000326 	beq	r3,zero,8003c8c <quorem+0x110>
 8003c80:	00000506 	br	8003c98 <quorem+0x11c>
 8003c84:	10c00017 	ldw	r3,0(r2)
 8003c88:	1800031e 	bne	r3,zero,8003c98 <quorem+0x11c>
 8003c8c:	10bfff04 	addi	r2,r2,-4
 8003c90:	94bfffc4 	addi	r18,r18,-1
 8003c94:	a8bffb36 	bltu	r21,r2,8003c84 <quorem+0x108>
 8003c98:	84800415 	stw	r18,16(r16)
 8003c9c:	8009883a 	mov	r4,r16
 8003ca0:	b80b883a 	mov	r5,r23
 8003ca4:	80075400 	call	8007540 <__mcmp>
 8003ca8:	10002616 	blt	r2,zero,8003d44 <quorem+0x1c8>
 8003cac:	9cc00044 	addi	r19,r19,1
 8003cb0:	a80d883a 	mov	r6,r21
 8003cb4:	000b883a 	mov	r5,zero
 8003cb8:	31000017 	ldw	r4,0(r6)
 8003cbc:	88800017 	ldw	r2,0(r17)
 8003cc0:	31800104 	addi	r6,r6,4
 8003cc4:	20ffffcc 	andi	r3,r4,65535
 8003cc8:	194b883a 	add	r5,r3,r5
 8003ccc:	10ffffcc 	andi	r3,r2,65535
 8003cd0:	28c7c83a 	sub	r3,r5,r3
 8003cd4:	1004d43a 	srli	r2,r2,16
 8003cd8:	2008d43a 	srli	r4,r4,16
 8003cdc:	180bd43a 	srai	r5,r3,16
 8003ce0:	18ffffcc 	andi	r3,r3,65535
 8003ce4:	2089c83a 	sub	r4,r4,r2
 8003ce8:	2149883a 	add	r4,r4,r5
 8003cec:	2004943a 	slli	r2,r4,16
 8003cf0:	8c400104 	addi	r17,r17,4
 8003cf4:	200bd43a 	srai	r5,r4,16
 8003cf8:	10c6b03a 	or	r3,r2,r3
 8003cfc:	30ffff15 	stw	r3,-4(r6)
 8003d00:	a47fed2e 	bgeu	r20,r17,8003cb8 <quorem+0x13c>
 8003d04:	9485883a 	add	r2,r18,r18
 8003d08:	1085883a 	add	r2,r2,r2
 8003d0c:	a887883a 	add	r3,r21,r2
 8003d10:	18800017 	ldw	r2,0(r3)
 8003d14:	10000b1e 	bne	r2,zero,8003d44 <quorem+0x1c8>
 8003d18:	18bfff04 	addi	r2,r3,-4
 8003d1c:	a880082e 	bgeu	r21,r2,8003d40 <quorem+0x1c4>
 8003d20:	18ffff17 	ldw	r3,-4(r3)
 8003d24:	18000326 	beq	r3,zero,8003d34 <quorem+0x1b8>
 8003d28:	00000506 	br	8003d40 <quorem+0x1c4>
 8003d2c:	10c00017 	ldw	r3,0(r2)
 8003d30:	1800031e 	bne	r3,zero,8003d40 <quorem+0x1c4>
 8003d34:	10bfff04 	addi	r2,r2,-4
 8003d38:	94bfffc4 	addi	r18,r18,-1
 8003d3c:	a8bffb36 	bltu	r21,r2,8003d2c <quorem+0x1b0>
 8003d40:	84800415 	stw	r18,16(r16)
 8003d44:	9805883a 	mov	r2,r19
 8003d48:	dfc00817 	ldw	ra,32(sp)
 8003d4c:	ddc00717 	ldw	r23,28(sp)
 8003d50:	dd800617 	ldw	r22,24(sp)
 8003d54:	dd400517 	ldw	r21,20(sp)
 8003d58:	dd000417 	ldw	r20,16(sp)
 8003d5c:	dcc00317 	ldw	r19,12(sp)
 8003d60:	dc800217 	ldw	r18,8(sp)
 8003d64:	dc400117 	ldw	r17,4(sp)
 8003d68:	dc000017 	ldw	r16,0(sp)
 8003d6c:	dec00904 	addi	sp,sp,36
 8003d70:	f800283a 	ret
 8003d74:	0005883a 	mov	r2,zero
 8003d78:	003ff306 	br	8003d48 <quorem+0x1cc>

08003d7c <_dtoa_r>:
 8003d7c:	20801017 	ldw	r2,64(r4)
 8003d80:	deffde04 	addi	sp,sp,-136
 8003d84:	dd401d15 	stw	r21,116(sp)
 8003d88:	dcc01b15 	stw	r19,108(sp)
 8003d8c:	dc801a15 	stw	r18,104(sp)
 8003d90:	dc401915 	stw	r17,100(sp)
 8003d94:	dc001815 	stw	r16,96(sp)
 8003d98:	dfc02115 	stw	ra,132(sp)
 8003d9c:	df002015 	stw	fp,128(sp)
 8003da0:	ddc01f15 	stw	r23,124(sp)
 8003da4:	dd801e15 	stw	r22,120(sp)
 8003da8:	dd001c15 	stw	r20,112(sp)
 8003dac:	d9c00315 	stw	r7,12(sp)
 8003db0:	2021883a 	mov	r16,r4
 8003db4:	302b883a 	mov	r21,r6
 8003db8:	2825883a 	mov	r18,r5
 8003dbc:	dc402417 	ldw	r17,144(sp)
 8003dc0:	3027883a 	mov	r19,r6
 8003dc4:	10000826 	beq	r2,zero,8003de8 <_dtoa_r+0x6c>
 8003dc8:	21801117 	ldw	r6,68(r4)
 8003dcc:	00c00044 	movi	r3,1
 8003dd0:	100b883a 	mov	r5,r2
 8003dd4:	1986983a 	sll	r3,r3,r6
 8003dd8:	11800115 	stw	r6,4(r2)
 8003ddc:	10c00215 	stw	r3,8(r2)
 8003de0:	8006d140 	call	8006d14 <_Bfree>
 8003de4:	80001015 	stw	zero,64(r16)
 8003de8:	a8002d16 	blt	r21,zero,8003ea0 <_dtoa_r+0x124>
 8003dec:	88000015 	stw	zero,0(r17)
 8003df0:	a8dffc2c 	andhi	r3,r21,32752
 8003df4:	009ffc34 	movhi	r2,32752
 8003df8:	18801b26 	beq	r3,r2,8003e68 <_dtoa_r+0xec>
 8003dfc:	9009883a 	mov	r4,r18
 8003e00:	980b883a 	mov	r5,r19
 8003e04:	000d883a 	mov	r6,zero
 8003e08:	000f883a 	mov	r7,zero
 8003e0c:	800bec40 	call	800bec4 <__eqdf2>
 8003e10:	10002a1e 	bne	r2,zero,8003ebc <_dtoa_r+0x140>
 8003e14:	d8c02317 	ldw	r3,140(sp)
 8003e18:	d9002517 	ldw	r4,148(sp)
 8003e1c:	00800044 	movi	r2,1
 8003e20:	18800015 	stw	r2,0(r3)
 8003e24:	2001a226 	beq	r4,zero,80044b0 <_dtoa_r+0x734>
 8003e28:	008200b4 	movhi	r2,2050
 8003e2c:	10a6a244 	addi	r2,r2,-25975
 8003e30:	20800015 	stw	r2,0(r4)
 8003e34:	10bfffc4 	addi	r2,r2,-1
 8003e38:	dfc02117 	ldw	ra,132(sp)
 8003e3c:	df002017 	ldw	fp,128(sp)
 8003e40:	ddc01f17 	ldw	r23,124(sp)
 8003e44:	dd801e17 	ldw	r22,120(sp)
 8003e48:	dd401d17 	ldw	r21,116(sp)
 8003e4c:	dd001c17 	ldw	r20,112(sp)
 8003e50:	dcc01b17 	ldw	r19,108(sp)
 8003e54:	dc801a17 	ldw	r18,104(sp)
 8003e58:	dc401917 	ldw	r17,100(sp)
 8003e5c:	dc001817 	ldw	r16,96(sp)
 8003e60:	dec02204 	addi	sp,sp,136
 8003e64:	f800283a 	ret
 8003e68:	d8c02317 	ldw	r3,140(sp)
 8003e6c:	0089c3c4 	movi	r2,9999
 8003e70:	18800015 	stw	r2,0(r3)
 8003e74:	90017c26 	beq	r18,zero,8004468 <_dtoa_r+0x6ec>
 8003e78:	008200b4 	movhi	r2,2050
 8003e7c:	10a6ae04 	addi	r2,r2,-25928
 8003e80:	d9002517 	ldw	r4,148(sp)
 8003e84:	203fec26 	beq	r4,zero,8003e38 <_dtoa_r+0xbc>
 8003e88:	10c000c7 	ldb	r3,3(r2)
 8003e8c:	18017d1e 	bne	r3,zero,8004484 <_dtoa_r+0x708>
 8003e90:	10c000c4 	addi	r3,r2,3
 8003e94:	d9802517 	ldw	r6,148(sp)
 8003e98:	30c00015 	stw	r3,0(r6)
 8003e9c:	003fe606 	br	8003e38 <_dtoa_r+0xbc>
 8003ea0:	04e00034 	movhi	r19,32768
 8003ea4:	9cffffc4 	addi	r19,r19,-1
 8003ea8:	00800044 	movi	r2,1
 8003eac:	ace6703a 	and	r19,r21,r19
 8003eb0:	88800015 	stw	r2,0(r17)
 8003eb4:	982b883a 	mov	r21,r19
 8003eb8:	003fcd06 	br	8003df0 <_dtoa_r+0x74>
 8003ebc:	d8800204 	addi	r2,sp,8
 8003ec0:	a822d53a 	srli	r17,r21,20
 8003ec4:	d8800015 	stw	r2,0(sp)
 8003ec8:	8009883a 	mov	r4,r16
 8003ecc:	900b883a 	mov	r5,r18
 8003ed0:	980d883a 	mov	r6,r19
 8003ed4:	d9c00104 	addi	r7,sp,4
 8003ed8:	80078b40 	call	80078b4 <__d2b>
 8003edc:	1039883a 	mov	fp,r2
 8003ee0:	88016a1e 	bne	r17,zero,800448c <_dtoa_r+0x710>
 8003ee4:	dd000217 	ldw	r20,8(sp)
 8003ee8:	dc400117 	ldw	r17,4(sp)
 8003eec:	00befbc4 	movi	r2,-1041
 8003ef0:	a463883a 	add	r17,r20,r17
 8003ef4:	8882ea16 	blt	r17,r2,8004aa0 <_dtoa_r+0xd24>
 8003ef8:	00bf0384 	movi	r2,-1010
 8003efc:	1445c83a 	sub	r2,r2,r17
 8003f00:	89010484 	addi	r4,r17,1042
 8003f04:	a8aa983a 	sll	r21,r21,r2
 8003f08:	9108d83a 	srl	r4,r18,r4
 8003f0c:	a908b03a 	or	r4,r21,r4
 8003f10:	800d2540 	call	800d254 <__floatunsidf>
 8003f14:	017f8434 	movhi	r5,65040
 8003f18:	01800044 	movi	r6,1
 8003f1c:	1009883a 	mov	r4,r2
 8003f20:	194b883a 	add	r5,r3,r5
 8003f24:	8c7fffc4 	addi	r17,r17,-1
 8003f28:	d9800f15 	stw	r6,60(sp)
 8003f2c:	000d883a 	mov	r6,zero
 8003f30:	01cffe34 	movhi	r7,16376
 8003f34:	800c82c0 	call	800c82c <__subdf3>
 8003f38:	0198dbf4 	movhi	r6,25455
 8003f3c:	01cff4f4 	movhi	r7,16339
 8003f40:	1009883a 	mov	r4,r2
 8003f44:	180b883a 	mov	r5,r3
 8003f48:	3190d844 	addi	r6,r6,17249
 8003f4c:	39e1e9c4 	addi	r7,r7,-30809
 8003f50:	800c1080 	call	800c108 <__muldf3>
 8003f54:	01a2d874 	movhi	r6,35681
 8003f58:	01cff1f4 	movhi	r7,16327
 8003f5c:	180b883a 	mov	r5,r3
 8003f60:	31b22cc4 	addi	r6,r6,-14157
 8003f64:	39e28a04 	addi	r7,r7,-30168
 8003f68:	1009883a 	mov	r4,r2
 8003f6c:	800ad5c0 	call	800ad5c <__adddf3>
 8003f70:	8809883a 	mov	r4,r17
 8003f74:	102d883a 	mov	r22,r2
 8003f78:	182b883a 	mov	r21,r3
 8003f7c:	800d1840 	call	800d184 <__floatsidf>
 8003f80:	019427f4 	movhi	r6,20639
 8003f84:	01cff4f4 	movhi	r7,16339
 8003f88:	1009883a 	mov	r4,r2
 8003f8c:	180b883a 	mov	r5,r3
 8003f90:	319e7ec4 	addi	r6,r6,31227
 8003f94:	39d104c4 	addi	r7,r7,17427
 8003f98:	800c1080 	call	800c108 <__muldf3>
 8003f9c:	b009883a 	mov	r4,r22
 8003fa0:	a80b883a 	mov	r5,r21
 8003fa4:	100d883a 	mov	r6,r2
 8003fa8:	180f883a 	mov	r7,r3
 8003fac:	800ad5c0 	call	800ad5c <__adddf3>
 8003fb0:	1009883a 	mov	r4,r2
 8003fb4:	180b883a 	mov	r5,r3
 8003fb8:	102d883a 	mov	r22,r2
 8003fbc:	182b883a 	mov	r21,r3
 8003fc0:	800d0fc0 	call	800d0fc <__fixdfsi>
 8003fc4:	b009883a 	mov	r4,r22
 8003fc8:	a80b883a 	mov	r5,r21
 8003fcc:	000d883a 	mov	r6,zero
 8003fd0:	000f883a 	mov	r7,zero
 8003fd4:	d8800515 	stw	r2,20(sp)
 8003fd8:	800c0280 	call	800c028 <__ledf2>
 8003fdc:	10023116 	blt	r2,zero,80048a4 <_dtoa_r+0xb28>
 8003fe0:	d8c00517 	ldw	r3,20(sp)
 8003fe4:	00800584 	movi	r2,22
 8003fe8:	10c21f36 	bltu	r2,r3,8004868 <_dtoa_r+0xaec>
 8003fec:	180490fa 	slli	r2,r3,3
 8003ff0:	00c200b4 	movhi	r3,2050
 8003ff4:	18e6ca04 	addi	r3,r3,-25816
 8003ff8:	1885883a 	add	r2,r3,r2
 8003ffc:	11000017 	ldw	r4,0(r2)
 8004000:	11400117 	ldw	r5,4(r2)
 8004004:	900d883a 	mov	r6,r18
 8004008:	980f883a 	mov	r7,r19
 800400c:	800bf480 	call	800bf48 <__gedf2>
 8004010:	0082a70e 	bge	zero,r2,8004ab0 <_dtoa_r+0xd34>
 8004014:	d9000517 	ldw	r4,20(sp)
 8004018:	d8000d15 	stw	zero,52(sp)
 800401c:	213fffc4 	addi	r4,r4,-1
 8004020:	d9000515 	stw	r4,20(sp)
 8004024:	a463c83a 	sub	r17,r20,r17
 8004028:	8dbfffc4 	addi	r22,r17,-1
 800402c:	b0021916 	blt	r22,zero,8004894 <_dtoa_r+0xb18>
 8004030:	d8000815 	stw	zero,32(sp)
 8004034:	d8800517 	ldw	r2,20(sp)
 8004038:	10020e16 	blt	r2,zero,8004874 <_dtoa_r+0xaf8>
 800403c:	b0ad883a 	add	r22,r22,r2
 8004040:	d8800a15 	stw	r2,40(sp)
 8004044:	d8000915 	stw	zero,36(sp)
 8004048:	d8c00317 	ldw	r3,12(sp)
 800404c:	00800244 	movi	r2,9
 8004050:	10c11a36 	bltu	r2,r3,80044bc <_dtoa_r+0x740>
 8004054:	00800144 	movi	r2,5
 8004058:	10c4fc0e 	bge	r2,r3,800544c <_dtoa_r+0x16d0>
 800405c:	18ffff04 	addi	r3,r3,-4
 8004060:	d8c00315 	stw	r3,12(sp)
 8004064:	0029883a 	mov	r20,zero
 8004068:	d9800317 	ldw	r6,12(sp)
 800406c:	008000c4 	movi	r2,3
 8004070:	3083bd26 	beq	r6,r2,8004f68 <_dtoa_r+0x11ec>
 8004074:	1183670e 	bge	r2,r6,8004e14 <_dtoa_r+0x1098>
 8004078:	d8c00317 	ldw	r3,12(sp)
 800407c:	00800104 	movi	r2,4
 8004080:	1882e726 	beq	r3,r2,8004c20 <_dtoa_r+0xea4>
 8004084:	00800144 	movi	r2,5
 8004088:	1884f21e 	bne	r3,r2,8005454 <_dtoa_r+0x16d8>
 800408c:	00800044 	movi	r2,1
 8004090:	d8800b15 	stw	r2,44(sp)
 8004094:	d8c02217 	ldw	r3,136(sp)
 8004098:	d9000517 	ldw	r4,20(sp)
 800409c:	1907883a 	add	r3,r3,r4
 80040a0:	19800044 	addi	r6,r3,1
 80040a4:	d8c00c15 	stw	r3,48(sp)
 80040a8:	d9800615 	stw	r6,24(sp)
 80040ac:	0183c30e 	bge	zero,r6,8004fbc <_dtoa_r+0x1240>
 80040b0:	d9800617 	ldw	r6,24(sp)
 80040b4:	3023883a 	mov	r17,r6
 80040b8:	80001115 	stw	zero,68(r16)
 80040bc:	008005c4 	movi	r2,23
 80040c0:	1184f62e 	bgeu	r2,r6,800549c <_dtoa_r+0x1720>
 80040c4:	00c00044 	movi	r3,1
 80040c8:	00800104 	movi	r2,4
 80040cc:	1085883a 	add	r2,r2,r2
 80040d0:	11000504 	addi	r4,r2,20
 80040d4:	180b883a 	mov	r5,r3
 80040d8:	18c00044 	addi	r3,r3,1
 80040dc:	313ffb2e 	bgeu	r6,r4,80040cc <_dtoa_r+0x350>
 80040e0:	81401115 	stw	r5,68(r16)
 80040e4:	8009883a 	mov	r4,r16
 80040e8:	8006c6c0 	call	8006c6c <_Balloc>
 80040ec:	d8800715 	stw	r2,28(sp)
 80040f0:	80801015 	stw	r2,64(r16)
 80040f4:	00800384 	movi	r2,14
 80040f8:	1440fd36 	bltu	r2,r17,80044f0 <_dtoa_r+0x774>
 80040fc:	a000fc26 	beq	r20,zero,80044f0 <_dtoa_r+0x774>
 8004100:	d8800517 	ldw	r2,20(sp)
 8004104:	0083b90e 	bge	zero,r2,8004fec <_dtoa_r+0x1270>
 8004108:	d8c00517 	ldw	r3,20(sp)
 800410c:	108003cc 	andi	r2,r2,15
 8004110:	100490fa 	slli	r2,r2,3
 8004114:	182fd13a 	srai	r23,r3,4
 8004118:	00c200b4 	movhi	r3,2050
 800411c:	18e6ca04 	addi	r3,r3,-25816
 8004120:	1885883a 	add	r2,r3,r2
 8004124:	b8c0040c 	andi	r3,r23,16
 8004128:	12c00017 	ldw	r11,0(r2)
 800412c:	12800117 	ldw	r10,4(r2)
 8004130:	18039726 	beq	r3,zero,8004f90 <_dtoa_r+0x1214>
 8004134:	008200b4 	movhi	r2,2050
 8004138:	10a6c004 	addi	r2,r2,-25856
 800413c:	11800817 	ldw	r6,32(r2)
 8004140:	11c00917 	ldw	r7,36(r2)
 8004144:	9009883a 	mov	r4,r18
 8004148:	980b883a 	mov	r5,r19
 800414c:	da801615 	stw	r10,88(sp)
 8004150:	dac01515 	stw	r11,84(sp)
 8004154:	800b5f80 	call	800b5f8 <__divdf3>
 8004158:	da801617 	ldw	r10,88(sp)
 800415c:	dac01517 	ldw	r11,84(sp)
 8004160:	bdc003cc 	andi	r23,r23,15
 8004164:	044000c4 	movi	r17,3
 8004168:	d8800e15 	stw	r2,56(sp)
 800416c:	182b883a 	mov	r21,r3
 8004170:	b8001126 	beq	r23,zero,80041b8 <_dtoa_r+0x43c>
 8004174:	050200b4 	movhi	r20,2050
 8004178:	a526c004 	addi	r20,r20,-25856
 800417c:	5805883a 	mov	r2,r11
 8004180:	5007883a 	mov	r3,r10
 8004184:	b980004c 	andi	r6,r23,1
 8004188:	1009883a 	mov	r4,r2
 800418c:	b82fd07a 	srai	r23,r23,1
 8004190:	180b883a 	mov	r5,r3
 8004194:	30000426 	beq	r6,zero,80041a8 <_dtoa_r+0x42c>
 8004198:	a1800017 	ldw	r6,0(r20)
 800419c:	a1c00117 	ldw	r7,4(r20)
 80041a0:	8c400044 	addi	r17,r17,1
 80041a4:	800c1080 	call	800c108 <__muldf3>
 80041a8:	a5000204 	addi	r20,r20,8
 80041ac:	b83ff51e 	bne	r23,zero,8004184 <_dtoa_r+0x408>
 80041b0:	1017883a 	mov	r11,r2
 80041b4:	1815883a 	mov	r10,r3
 80041b8:	d9000e17 	ldw	r4,56(sp)
 80041bc:	a80b883a 	mov	r5,r21
 80041c0:	580d883a 	mov	r6,r11
 80041c4:	500f883a 	mov	r7,r10
 80041c8:	800b5f80 	call	800b5f8 <__divdf3>
 80041cc:	1029883a 	mov	r20,r2
 80041d0:	182b883a 	mov	r21,r3
 80041d4:	d9800d17 	ldw	r6,52(sp)
 80041d8:	30000626 	beq	r6,zero,80041f4 <_dtoa_r+0x478>
 80041dc:	a009883a 	mov	r4,r20
 80041e0:	a80b883a 	mov	r5,r21
 80041e4:	000d883a 	mov	r6,zero
 80041e8:	01cffc34 	movhi	r7,16368
 80041ec:	800c0280 	call	800c028 <__ledf2>
 80041f0:	10043216 	blt	r2,zero,80052bc <_dtoa_r+0x1540>
 80041f4:	8809883a 	mov	r4,r17
 80041f8:	800d1840 	call	800d184 <__floatsidf>
 80041fc:	1009883a 	mov	r4,r2
 8004200:	180b883a 	mov	r5,r3
 8004204:	a00d883a 	mov	r6,r20
 8004208:	a80f883a 	mov	r7,r21
 800420c:	800c1080 	call	800c108 <__muldf3>
 8004210:	000d883a 	mov	r6,zero
 8004214:	1009883a 	mov	r4,r2
 8004218:	180b883a 	mov	r5,r3
 800421c:	01d00734 	movhi	r7,16412
 8004220:	800ad5c0 	call	800ad5c <__adddf3>
 8004224:	1023883a 	mov	r17,r2
 8004228:	d9800617 	ldw	r6,24(sp)
 800422c:	00bf3034 	movhi	r2,64704
 8004230:	1885883a 	add	r2,r3,r2
 8004234:	d8800e15 	stw	r2,56(sp)
 8004238:	30032e26 	beq	r6,zero,8004ef4 <_dtoa_r+0x1178>
 800423c:	d8c00517 	ldw	r3,20(sp)
 8004240:	da800617 	ldw	r10,24(sp)
 8004244:	d8c01215 	stw	r3,72(sp)
 8004248:	d9000b17 	ldw	r4,44(sp)
 800424c:	2003b026 	beq	r4,zero,8005110 <_dtoa_r+0x1394>
 8004250:	50bfffc4 	addi	r2,r10,-1
 8004254:	100490fa 	slli	r2,r2,3
 8004258:	00c200b4 	movhi	r3,2050
 800425c:	18e6ca04 	addi	r3,r3,-25816
 8004260:	1885883a 	add	r2,r3,r2
 8004264:	11800017 	ldw	r6,0(r2)
 8004268:	11c00117 	ldw	r7,4(r2)
 800426c:	d8800717 	ldw	r2,28(sp)
 8004270:	0009883a 	mov	r4,zero
 8004274:	014ff834 	movhi	r5,16352
 8004278:	da801615 	stw	r10,88(sp)
 800427c:	15c00044 	addi	r23,r2,1
 8004280:	800b5f80 	call	800b5f8 <__divdf3>
 8004284:	d9c00e17 	ldw	r7,56(sp)
 8004288:	880d883a 	mov	r6,r17
 800428c:	1009883a 	mov	r4,r2
 8004290:	180b883a 	mov	r5,r3
 8004294:	800c82c0 	call	800c82c <__subdf3>
 8004298:	a80b883a 	mov	r5,r21
 800429c:	a009883a 	mov	r4,r20
 80042a0:	d8c01015 	stw	r3,64(sp)
 80042a4:	d8800e15 	stw	r2,56(sp)
 80042a8:	800d0fc0 	call	800d0fc <__fixdfsi>
 80042ac:	1009883a 	mov	r4,r2
 80042b0:	d8801715 	stw	r2,92(sp)
 80042b4:	800d1840 	call	800d184 <__floatsidf>
 80042b8:	a009883a 	mov	r4,r20
 80042bc:	a80b883a 	mov	r5,r21
 80042c0:	100d883a 	mov	r6,r2
 80042c4:	180f883a 	mov	r7,r3
 80042c8:	800c82c0 	call	800c82c <__subdf3>
 80042cc:	da001717 	ldw	r8,92(sp)
 80042d0:	1829883a 	mov	r20,r3
 80042d4:	d8c00717 	ldw	r3,28(sp)
 80042d8:	d9000e17 	ldw	r4,56(sp)
 80042dc:	d9401017 	ldw	r5,64(sp)
 80042e0:	42000c04 	addi	r8,r8,48
 80042e4:	1023883a 	mov	r17,r2
 80042e8:	1a000005 	stb	r8,0(r3)
 80042ec:	880d883a 	mov	r6,r17
 80042f0:	a00f883a 	mov	r7,r20
 80042f4:	402b883a 	mov	r21,r8
 80042f8:	800bf480 	call	800bf48 <__gedf2>
 80042fc:	00844516 	blt	zero,r2,8005414 <_dtoa_r+0x1698>
 8004300:	0009883a 	mov	r4,zero
 8004304:	014ffc34 	movhi	r5,16368
 8004308:	880d883a 	mov	r6,r17
 800430c:	a00f883a 	mov	r7,r20
 8004310:	800c82c0 	call	800c82c <__subdf3>
 8004314:	d9000e17 	ldw	r4,56(sp)
 8004318:	d9401017 	ldw	r5,64(sp)
 800431c:	100d883a 	mov	r6,r2
 8004320:	180f883a 	mov	r7,r3
 8004324:	800bf480 	call	800bf48 <__gedf2>
 8004328:	da801617 	ldw	r10,88(sp)
 800432c:	00843616 	blt	zero,r2,8005408 <_dtoa_r+0x168c>
 8004330:	00800044 	movi	r2,1
 8004334:	12806e0e 	bge	r2,r10,80044f0 <_dtoa_r+0x774>
 8004338:	d9000717 	ldw	r4,28(sp)
 800433c:	dd801315 	stw	r22,76(sp)
 8004340:	dc001115 	stw	r16,68(sp)
 8004344:	2295883a 	add	r10,r4,r10
 8004348:	dcc01415 	stw	r19,80(sp)
 800434c:	502d883a 	mov	r22,r10
 8004350:	dcc01017 	ldw	r19,64(sp)
 8004354:	b821883a 	mov	r16,r23
 8004358:	dc801015 	stw	r18,64(sp)
 800435c:	dc800e17 	ldw	r18,56(sp)
 8004360:	00000906 	br	8004388 <_dtoa_r+0x60c>
 8004364:	800c82c0 	call	800c82c <__subdf3>
 8004368:	1009883a 	mov	r4,r2
 800436c:	180b883a 	mov	r5,r3
 8004370:	900d883a 	mov	r6,r18
 8004374:	980f883a 	mov	r7,r19
 8004378:	800c0280 	call	800c028 <__ledf2>
 800437c:	10040e16 	blt	r2,zero,80053b8 <_dtoa_r+0x163c>
 8004380:	b821883a 	mov	r16,r23
 8004384:	bd841026 	beq	r23,r22,80053c8 <_dtoa_r+0x164c>
 8004388:	9009883a 	mov	r4,r18
 800438c:	980b883a 	mov	r5,r19
 8004390:	000d883a 	mov	r6,zero
 8004394:	01d00934 	movhi	r7,16420
 8004398:	800c1080 	call	800c108 <__muldf3>
 800439c:	000d883a 	mov	r6,zero
 80043a0:	01d00934 	movhi	r7,16420
 80043a4:	8809883a 	mov	r4,r17
 80043a8:	a00b883a 	mov	r5,r20
 80043ac:	1025883a 	mov	r18,r2
 80043b0:	1827883a 	mov	r19,r3
 80043b4:	800c1080 	call	800c108 <__muldf3>
 80043b8:	180b883a 	mov	r5,r3
 80043bc:	1009883a 	mov	r4,r2
 80043c0:	1823883a 	mov	r17,r3
 80043c4:	1029883a 	mov	r20,r2
 80043c8:	800d0fc0 	call	800d0fc <__fixdfsi>
 80043cc:	1009883a 	mov	r4,r2
 80043d0:	102b883a 	mov	r21,r2
 80043d4:	800d1840 	call	800d184 <__floatsidf>
 80043d8:	a009883a 	mov	r4,r20
 80043dc:	880b883a 	mov	r5,r17
 80043e0:	100d883a 	mov	r6,r2
 80043e4:	180f883a 	mov	r7,r3
 80043e8:	800c82c0 	call	800c82c <__subdf3>
 80043ec:	ad400c04 	addi	r21,r21,48
 80043f0:	1009883a 	mov	r4,r2
 80043f4:	180b883a 	mov	r5,r3
 80043f8:	900d883a 	mov	r6,r18
 80043fc:	980f883a 	mov	r7,r19
 8004400:	85400005 	stb	r21,0(r16)
 8004404:	1023883a 	mov	r17,r2
 8004408:	1829883a 	mov	r20,r3
 800440c:	800c0280 	call	800c028 <__ledf2>
 8004410:	bdc00044 	addi	r23,r23,1
 8004414:	0009883a 	mov	r4,zero
 8004418:	014ffc34 	movhi	r5,16368
 800441c:	880d883a 	mov	r6,r17
 8004420:	a00f883a 	mov	r7,r20
 8004424:	103fcf0e 	bge	r2,zero,8004364 <_dtoa_r+0x5e8>
 8004428:	d9801217 	ldw	r6,72(sp)
 800442c:	dc001117 	ldw	r16,68(sp)
 8004430:	d9800515 	stw	r6,20(sp)
 8004434:	8009883a 	mov	r4,r16
 8004438:	e00b883a 	mov	r5,fp
 800443c:	8006d140 	call	8006d14 <_Bfree>
 8004440:	d8c00517 	ldw	r3,20(sp)
 8004444:	d9002317 	ldw	r4,140(sp)
 8004448:	d9802517 	ldw	r6,148(sp)
 800444c:	b8000005 	stb	zero,0(r23)
 8004450:	18800044 	addi	r2,r3,1
 8004454:	20800015 	stw	r2,0(r4)
 8004458:	30027226 	beq	r6,zero,8004e24 <_dtoa_r+0x10a8>
 800445c:	35c00015 	stw	r23,0(r6)
 8004460:	d8800717 	ldw	r2,28(sp)
 8004464:	003e7406 	br	8003e38 <_dtoa_r+0xbc>
 8004468:	00800434 	movhi	r2,16
 800446c:	10bfffc4 	addi	r2,r2,-1
 8004470:	a8aa703a 	and	r21,r21,r2
 8004474:	a83e801e 	bne	r21,zero,8003e78 <_dtoa_r+0xfc>
 8004478:	008200b4 	movhi	r2,2050
 800447c:	10a6ab04 	addi	r2,r2,-25940
 8004480:	003e7f06 	br	8003e80 <_dtoa_r+0x104>
 8004484:	10c00204 	addi	r3,r2,8
 8004488:	003e8206 	br	8003e94 <_dtoa_r+0x118>
 800448c:	01400434 	movhi	r5,16
 8004490:	297fffc4 	addi	r5,r5,-1
 8004494:	994a703a 	and	r5,r19,r5
 8004498:	9009883a 	mov	r4,r18
 800449c:	8c7f0044 	addi	r17,r17,-1023
 80044a0:	294ffc34 	orhi	r5,r5,16368
 80044a4:	dd000217 	ldw	r20,8(sp)
 80044a8:	d8000f15 	stw	zero,60(sp)
 80044ac:	003e9f06 	br	8003f2c <_dtoa_r+0x1b0>
 80044b0:	008200b4 	movhi	r2,2050
 80044b4:	10a6a204 	addi	r2,r2,-25976
 80044b8:	003e5f06 	br	8003e38 <_dtoa_r+0xbc>
 80044bc:	80001115 	stw	zero,68(r16)
 80044c0:	8009883a 	mov	r4,r16
 80044c4:	000b883a 	mov	r5,zero
 80044c8:	8006c6c0 	call	8006c6c <_Balloc>
 80044cc:	01bfffc4 	movi	r6,-1
 80044d0:	d8800715 	stw	r2,28(sp)
 80044d4:	80801015 	stw	r2,64(r16)
 80044d8:	00800044 	movi	r2,1
 80044dc:	d9800c15 	stw	r6,48(sp)
 80044e0:	d8800b15 	stw	r2,44(sp)
 80044e4:	d9800615 	stw	r6,24(sp)
 80044e8:	d8002215 	stw	zero,136(sp)
 80044ec:	d8000315 	stw	zero,12(sp)
 80044f0:	d8800117 	ldw	r2,4(sp)
 80044f4:	10008e16 	blt	r2,zero,8004730 <_dtoa_r+0x9b4>
 80044f8:	d9000517 	ldw	r4,20(sp)
 80044fc:	00c00384 	movi	r3,14
 8004500:	19008b16 	blt	r3,r4,8004730 <_dtoa_r+0x9b4>
 8004504:	200490fa 	slli	r2,r4,3
 8004508:	00c200b4 	movhi	r3,2050
 800450c:	d9802217 	ldw	r6,136(sp)
 8004510:	18e6ca04 	addi	r3,r3,-25816
 8004514:	1885883a 	add	r2,r3,r2
 8004518:	14400017 	ldw	r17,0(r2)
 800451c:	15000117 	ldw	r20,4(r2)
 8004520:	3001c716 	blt	r6,zero,8004c40 <_dtoa_r+0xec4>
 8004524:	880d883a 	mov	r6,r17
 8004528:	a00f883a 	mov	r7,r20
 800452c:	9009883a 	mov	r4,r18
 8004530:	980b883a 	mov	r5,r19
 8004534:	800b5f80 	call	800b5f8 <__divdf3>
 8004538:	180b883a 	mov	r5,r3
 800453c:	1009883a 	mov	r4,r2
 8004540:	800d0fc0 	call	800d0fc <__fixdfsi>
 8004544:	1009883a 	mov	r4,r2
 8004548:	102d883a 	mov	r22,r2
 800454c:	800d1840 	call	800d184 <__floatsidf>
 8004550:	1009883a 	mov	r4,r2
 8004554:	180b883a 	mov	r5,r3
 8004558:	880d883a 	mov	r6,r17
 800455c:	a00f883a 	mov	r7,r20
 8004560:	800c1080 	call	800c108 <__muldf3>
 8004564:	9009883a 	mov	r4,r18
 8004568:	980b883a 	mov	r5,r19
 800456c:	100d883a 	mov	r6,r2
 8004570:	180f883a 	mov	r7,r3
 8004574:	800c82c0 	call	800c82c <__subdf3>
 8004578:	d9000717 	ldw	r4,28(sp)
 800457c:	d9800617 	ldw	r6,24(sp)
 8004580:	180b883a 	mov	r5,r3
 8004584:	b0c00c04 	addi	r3,r22,48
 8004588:	20c00005 	stb	r3,0(r4)
 800458c:	25c00044 	addi	r23,r4,1
 8004590:	01000044 	movi	r4,1
 8004594:	1011883a 	mov	r8,r2
 8004598:	2807883a 	mov	r3,r5
 800459c:	31003d26 	beq	r6,r4,8004694 <_dtoa_r+0x918>
 80045a0:	000d883a 	mov	r6,zero
 80045a4:	01d00934 	movhi	r7,16420
 80045a8:	1009883a 	mov	r4,r2
 80045ac:	800c1080 	call	800c108 <__muldf3>
 80045b0:	1009883a 	mov	r4,r2
 80045b4:	180b883a 	mov	r5,r3
 80045b8:	000d883a 	mov	r6,zero
 80045bc:	000f883a 	mov	r7,zero
 80045c0:	1027883a 	mov	r19,r2
 80045c4:	182b883a 	mov	r21,r3
 80045c8:	800bec40 	call	800bec4 <__eqdf2>
 80045cc:	103f9926 	beq	r2,zero,8004434 <_dtoa_r+0x6b8>
 80045d0:	d8c00617 	ldw	r3,24(sp)
 80045d4:	d9000717 	ldw	r4,28(sp)
 80045d8:	b825883a 	mov	r18,r23
 80045dc:	18bfffc4 	addi	r2,r3,-1
 80045e0:	20ad883a 	add	r22,r4,r2
 80045e4:	dc000315 	stw	r16,12(sp)
 80045e8:	00000a06 	br	8004614 <_dtoa_r+0x898>
 80045ec:	800c1080 	call	800c108 <__muldf3>
 80045f0:	1009883a 	mov	r4,r2
 80045f4:	180b883a 	mov	r5,r3
 80045f8:	000d883a 	mov	r6,zero
 80045fc:	000f883a 	mov	r7,zero
 8004600:	1027883a 	mov	r19,r2
 8004604:	182b883a 	mov	r21,r3
 8004608:	b825883a 	mov	r18,r23
 800460c:	800bec40 	call	800bec4 <__eqdf2>
 8004610:	10022626 	beq	r2,zero,8004eac <_dtoa_r+0x1130>
 8004614:	880d883a 	mov	r6,r17
 8004618:	a00f883a 	mov	r7,r20
 800461c:	9809883a 	mov	r4,r19
 8004620:	a80b883a 	mov	r5,r21
 8004624:	800b5f80 	call	800b5f8 <__divdf3>
 8004628:	180b883a 	mov	r5,r3
 800462c:	1009883a 	mov	r4,r2
 8004630:	800d0fc0 	call	800d0fc <__fixdfsi>
 8004634:	1009883a 	mov	r4,r2
 8004638:	1021883a 	mov	r16,r2
 800463c:	800d1840 	call	800d184 <__floatsidf>
 8004640:	1009883a 	mov	r4,r2
 8004644:	180b883a 	mov	r5,r3
 8004648:	880d883a 	mov	r6,r17
 800464c:	a00f883a 	mov	r7,r20
 8004650:	800c1080 	call	800c108 <__muldf3>
 8004654:	9809883a 	mov	r4,r19
 8004658:	a80b883a 	mov	r5,r21
 800465c:	100d883a 	mov	r6,r2
 8004660:	180f883a 	mov	r7,r3
 8004664:	800c82c0 	call	800c82c <__subdf3>
 8004668:	82000c04 	addi	r8,r16,48
 800466c:	92000005 	stb	r8,0(r18)
 8004670:	1009883a 	mov	r4,r2
 8004674:	180b883a 	mov	r5,r3
 8004678:	000d883a 	mov	r6,zero
 800467c:	01d00934 	movhi	r7,16420
 8004680:	1011883a 	mov	r8,r2
 8004684:	bdc00044 	addi	r23,r23,1
 8004688:	95bfd81e 	bne	r18,r22,80045ec <_dtoa_r+0x870>
 800468c:	802d883a 	mov	r22,r16
 8004690:	dc000317 	ldw	r16,12(sp)
 8004694:	4009883a 	mov	r4,r8
 8004698:	180b883a 	mov	r5,r3
 800469c:	400d883a 	mov	r6,r8
 80046a0:	180f883a 	mov	r7,r3
 80046a4:	800ad5c0 	call	800ad5c <__adddf3>
 80046a8:	8809883a 	mov	r4,r17
 80046ac:	a00b883a 	mov	r5,r20
 80046b0:	100d883a 	mov	r6,r2
 80046b4:	180f883a 	mov	r7,r3
 80046b8:	1027883a 	mov	r19,r2
 80046bc:	1825883a 	mov	r18,r3
 80046c0:	800c0280 	call	800c028 <__ledf2>
 80046c4:	10000816 	blt	r2,zero,80046e8 <_dtoa_r+0x96c>
 80046c8:	8809883a 	mov	r4,r17
 80046cc:	a00b883a 	mov	r5,r20
 80046d0:	980d883a 	mov	r6,r19
 80046d4:	900f883a 	mov	r7,r18
 80046d8:	800bec40 	call	800bec4 <__eqdf2>
 80046dc:	103f551e 	bne	r2,zero,8004434 <_dtoa_r+0x6b8>
 80046e0:	b580004c 	andi	r22,r22,1
 80046e4:	b03f5326 	beq	r22,zero,8004434 <_dtoa_r+0x6b8>
 80046e8:	bd7fffc3 	ldbu	r21,-1(r23)
 80046ec:	b8bfffc4 	addi	r2,r23,-1
 80046f0:	1007883a 	mov	r3,r2
 80046f4:	01400e44 	movi	r5,57
 80046f8:	d9800717 	ldw	r6,28(sp)
 80046fc:	00000506 	br	8004714 <_dtoa_r+0x998>
 8004700:	18ffffc4 	addi	r3,r3,-1
 8004704:	30825e26 	beq	r6,r2,8005080 <_dtoa_r+0x1304>
 8004708:	1d400003 	ldbu	r21,0(r3)
 800470c:	102f883a 	mov	r23,r2
 8004710:	10bfffc4 	addi	r2,r2,-1
 8004714:	a9003fcc 	andi	r4,r21,255
 8004718:	2100201c 	xori	r4,r4,128
 800471c:	213fe004 	addi	r4,r4,-128
 8004720:	217ff726 	beq	r4,r5,8004700 <_dtoa_r+0x984>
 8004724:	aa000044 	addi	r8,r21,1
 8004728:	12000005 	stb	r8,0(r2)
 800472c:	003f4106 	br	8004434 <_dtoa_r+0x6b8>
 8004730:	d8c00b17 	ldw	r3,44(sp)
 8004734:	18006726 	beq	r3,zero,80048d4 <_dtoa_r+0xb58>
 8004738:	d9000317 	ldw	r4,12(sp)
 800473c:	00c00044 	movi	r3,1
 8004740:	19016a0e 	bge	r3,r4,8004cec <_dtoa_r+0xf70>
 8004744:	d8800617 	ldw	r2,24(sp)
 8004748:	d8c00917 	ldw	r3,36(sp)
 800474c:	157fffc4 	addi	r21,r2,-1
 8004750:	1d420716 	blt	r3,r21,8004f70 <_dtoa_r+0x11f4>
 8004754:	1d6bc83a 	sub	r21,r3,r21
 8004758:	d8800617 	ldw	r2,24(sp)
 800475c:	1002c716 	blt	r2,zero,800527c <_dtoa_r+0x1500>
 8004760:	dd000817 	ldw	r20,32(sp)
 8004764:	d8800617 	ldw	r2,24(sp)
 8004768:	d9800817 	ldw	r6,32(sp)
 800476c:	8009883a 	mov	r4,r16
 8004770:	01400044 	movi	r5,1
 8004774:	308d883a 	add	r6,r6,r2
 8004778:	d9800815 	stw	r6,32(sp)
 800477c:	b0ad883a 	add	r22,r22,r2
 8004780:	80070780 	call	8007078 <__i2b>
 8004784:	1023883a 	mov	r17,r2
 8004788:	a0000826 	beq	r20,zero,80047ac <_dtoa_r+0xa30>
 800478c:	0580070e 	bge	zero,r22,80047ac <_dtoa_r+0xa30>
 8004790:	b005883a 	mov	r2,r22
 8004794:	a5812016 	blt	r20,r22,8004c18 <_dtoa_r+0xe9c>
 8004798:	d8c00817 	ldw	r3,32(sp)
 800479c:	a0a9c83a 	sub	r20,r20,r2
 80047a0:	b0adc83a 	sub	r22,r22,r2
 80047a4:	1887c83a 	sub	r3,r3,r2
 80047a8:	d8c00815 	stw	r3,32(sp)
 80047ac:	d9000917 	ldw	r4,36(sp)
 80047b0:	0100140e 	bge	zero,r4,8004804 <_dtoa_r+0xa88>
 80047b4:	d9800b17 	ldw	r6,44(sp)
 80047b8:	3001e526 	beq	r6,zero,8004f50 <_dtoa_r+0x11d4>
 80047bc:	05400e0e 	bge	zero,r21,80047f8 <_dtoa_r+0xa7c>
 80047c0:	880b883a 	mov	r5,r17
 80047c4:	8009883a 	mov	r4,r16
 80047c8:	a80d883a 	mov	r6,r21
 80047cc:	80072b00 	call	80072b0 <__pow5mult>
 80047d0:	e00d883a 	mov	r6,fp
 80047d4:	8009883a 	mov	r4,r16
 80047d8:	100b883a 	mov	r5,r2
 80047dc:	1023883a 	mov	r17,r2
 80047e0:	80070b40 	call	80070b4 <__multiply>
 80047e4:	102f883a 	mov	r23,r2
 80047e8:	e00b883a 	mov	r5,fp
 80047ec:	8009883a 	mov	r4,r16
 80047f0:	8006d140 	call	8006d14 <_Bfree>
 80047f4:	b839883a 	mov	fp,r23
 80047f8:	d8800917 	ldw	r2,36(sp)
 80047fc:	154dc83a 	sub	r6,r2,r21
 8004800:	3001281e 	bne	r6,zero,8004ca4 <_dtoa_r+0xf28>
 8004804:	05c00044 	movi	r23,1
 8004808:	8009883a 	mov	r4,r16
 800480c:	b80b883a 	mov	r5,r23
 8004810:	80070780 	call	8007078 <__i2b>
 8004814:	d8c00a17 	ldw	r3,40(sp)
 8004818:	102b883a 	mov	r21,r2
 800481c:	00c0310e 	bge	zero,r3,80048e4 <_dtoa_r+0xb68>
 8004820:	8009883a 	mov	r4,r16
 8004824:	100b883a 	mov	r5,r2
 8004828:	180d883a 	mov	r6,r3
 800482c:	80072b00 	call	80072b0 <__pow5mult>
 8004830:	d9000317 	ldw	r4,12(sp)
 8004834:	102b883a 	mov	r21,r2
 8004838:	b9011f0e 	bge	r23,r4,8004cb8 <_dtoa_r+0xf3c>
 800483c:	0027883a 	mov	r19,zero
 8004840:	a8800417 	ldw	r2,16(r21)
 8004844:	10800104 	addi	r2,r2,4
 8004848:	1085883a 	add	r2,r2,r2
 800484c:	1085883a 	add	r2,r2,r2
 8004850:	a885883a 	add	r2,r21,r2
 8004854:	11000017 	ldw	r4,0(r2)
 8004858:	8006f600 	call	8006f60 <__hi0bits>
 800485c:	00c00804 	movi	r3,32
 8004860:	1885c83a 	sub	r2,r3,r2
 8004864:	00002506 	br	80048fc <_dtoa_r+0xb80>
 8004868:	01800044 	movi	r6,1
 800486c:	d9800d15 	stw	r6,52(sp)
 8004870:	003dec06 	br	8004024 <_dtoa_r+0x2a8>
 8004874:	d8c00817 	ldw	r3,32(sp)
 8004878:	d9000517 	ldw	r4,20(sp)
 800487c:	d8000a15 	stw	zero,40(sp)
 8004880:	1907c83a 	sub	r3,r3,r4
 8004884:	010dc83a 	sub	r6,zero,r4
 8004888:	d8c00815 	stw	r3,32(sp)
 800488c:	d9800915 	stw	r6,36(sp)
 8004890:	003ded06 	br	8004048 <_dtoa_r+0x2cc>
 8004894:	05adc83a 	sub	r22,zero,r22
 8004898:	dd800815 	stw	r22,32(sp)
 800489c:	002d883a 	mov	r22,zero
 80048a0:	003de406 	br	8004034 <_dtoa_r+0x2b8>
 80048a4:	d9000517 	ldw	r4,20(sp)
 80048a8:	800d1840 	call	800d184 <__floatsidf>
 80048ac:	1009883a 	mov	r4,r2
 80048b0:	180b883a 	mov	r5,r3
 80048b4:	b00d883a 	mov	r6,r22
 80048b8:	a80f883a 	mov	r7,r21
 80048bc:	800bec40 	call	800bec4 <__eqdf2>
 80048c0:	103dc726 	beq	r2,zero,8003fe0 <_dtoa_r+0x264>
 80048c4:	d8800517 	ldw	r2,20(sp)
 80048c8:	10bfffc4 	addi	r2,r2,-1
 80048cc:	d8800515 	stw	r2,20(sp)
 80048d0:	003dc306 	br	8003fe0 <_dtoa_r+0x264>
 80048d4:	dd400917 	ldw	r21,36(sp)
 80048d8:	dd000817 	ldw	r20,32(sp)
 80048dc:	0023883a 	mov	r17,zero
 80048e0:	003fa906 	br	8004788 <_dtoa_r+0xa0c>
 80048e4:	d9800317 	ldw	r6,12(sp)
 80048e8:	b981670e 	bge	r23,r6,8004e88 <_dtoa_r+0x110c>
 80048ec:	0027883a 	mov	r19,zero
 80048f0:	d8c00a17 	ldw	r3,40(sp)
 80048f4:	183fd21e 	bne	r3,zero,8004840 <_dtoa_r+0xac4>
 80048f8:	00800044 	movi	r2,1
 80048fc:	1585883a 	add	r2,r2,r22
 8004900:	108007cc 	andi	r2,r2,31
 8004904:	10005f26 	beq	r2,zero,8004a84 <_dtoa_r+0xd08>
 8004908:	00c00804 	movi	r3,32
 800490c:	1887c83a 	sub	r3,r3,r2
 8004910:	01000104 	movi	r4,4
 8004914:	20c2dd0e 	bge	r4,r3,800548c <_dtoa_r+0x1710>
 8004918:	d9000817 	ldw	r4,32(sp)
 800491c:	00c00704 	movi	r3,28
 8004920:	1885c83a 	sub	r2,r3,r2
 8004924:	2089883a 	add	r4,r4,r2
 8004928:	d9000815 	stw	r4,32(sp)
 800492c:	a0a9883a 	add	r20,r20,r2
 8004930:	b0ad883a 	add	r22,r22,r2
 8004934:	d8800817 	ldw	r2,32(sp)
 8004938:	0080050e 	bge	zero,r2,8004950 <_dtoa_r+0xbd4>
 800493c:	e00b883a 	mov	r5,fp
 8004940:	8009883a 	mov	r4,r16
 8004944:	100d883a 	mov	r6,r2
 8004948:	80073f00 	call	80073f0 <__lshift>
 800494c:	1039883a 	mov	fp,r2
 8004950:	0580050e 	bge	zero,r22,8004968 <_dtoa_r+0xbec>
 8004954:	a80b883a 	mov	r5,r21
 8004958:	8009883a 	mov	r4,r16
 800495c:	b00d883a 	mov	r6,r22
 8004960:	80073f00 	call	80073f0 <__lshift>
 8004964:	102b883a 	mov	r21,r2
 8004968:	d8c00d17 	ldw	r3,52(sp)
 800496c:	1801161e 	bne	r3,zero,8004dc8 <_dtoa_r+0x104c>
 8004970:	d8c00617 	ldw	r3,24(sp)
 8004974:	00c12d0e 	bge	zero,r3,8004e2c <_dtoa_r+0x10b0>
 8004978:	d8c00b17 	ldw	r3,44(sp)
 800497c:	1800571e 	bne	r3,zero,8004adc <_dtoa_r+0xd60>
 8004980:	dc800717 	ldw	r18,28(sp)
 8004984:	dcc00617 	ldw	r19,24(sp)
 8004988:	9029883a 	mov	r20,r18
 800498c:	00000206 	br	8004998 <_dtoa_r+0xc1c>
 8004990:	8006d3c0 	call	8006d3c <__multadd>
 8004994:	1039883a 	mov	fp,r2
 8004998:	e009883a 	mov	r4,fp
 800499c:	a80b883a 	mov	r5,r21
 80049a0:	8003b7c0 	call	8003b7c <quorem>
 80049a4:	10800c04 	addi	r2,r2,48
 80049a8:	90800005 	stb	r2,0(r18)
 80049ac:	94800044 	addi	r18,r18,1
 80049b0:	9507c83a 	sub	r3,r18,r20
 80049b4:	8009883a 	mov	r4,r16
 80049b8:	e00b883a 	mov	r5,fp
 80049bc:	01800284 	movi	r6,10
 80049c0:	000f883a 	mov	r7,zero
 80049c4:	1cfff216 	blt	r3,r19,8004990 <_dtoa_r+0xc14>
 80049c8:	1011883a 	mov	r8,r2
 80049cc:	d8800617 	ldw	r2,24(sp)
 80049d0:	00822e0e 	bge	zero,r2,800528c <_dtoa_r+0x1510>
 80049d4:	d9000717 	ldw	r4,28(sp)
 80049d8:	0025883a 	mov	r18,zero
 80049dc:	20af883a 	add	r23,r4,r2
 80049e0:	e00b883a 	mov	r5,fp
 80049e4:	01800044 	movi	r6,1
 80049e8:	8009883a 	mov	r4,r16
 80049ec:	da001715 	stw	r8,92(sp)
 80049f0:	80073f00 	call	80073f0 <__lshift>
 80049f4:	1009883a 	mov	r4,r2
 80049f8:	a80b883a 	mov	r5,r21
 80049fc:	1039883a 	mov	fp,r2
 8004a00:	80075400 	call	8007540 <__mcmp>
 8004a04:	da001717 	ldw	r8,92(sp)
 8004a08:	00816e0e 	bge	zero,r2,8004fc4 <_dtoa_r+0x1248>
 8004a0c:	b93fffc3 	ldbu	r4,-1(r23)
 8004a10:	b8bfffc4 	addi	r2,r23,-1
 8004a14:	1007883a 	mov	r3,r2
 8004a18:	01800e44 	movi	r6,57
 8004a1c:	d9c00717 	ldw	r7,28(sp)
 8004a20:	00000506 	br	8004a38 <_dtoa_r+0xcbc>
 8004a24:	18ffffc4 	addi	r3,r3,-1
 8004a28:	38811926 	beq	r7,r2,8004e90 <_dtoa_r+0x1114>
 8004a2c:	19000003 	ldbu	r4,0(r3)
 8004a30:	102f883a 	mov	r23,r2
 8004a34:	10bfffc4 	addi	r2,r2,-1
 8004a38:	21403fcc 	andi	r5,r4,255
 8004a3c:	2940201c 	xori	r5,r5,128
 8004a40:	297fe004 	addi	r5,r5,-128
 8004a44:	29bff726 	beq	r5,r6,8004a24 <_dtoa_r+0xca8>
 8004a48:	21000044 	addi	r4,r4,1
 8004a4c:	11000005 	stb	r4,0(r2)
 8004a50:	8009883a 	mov	r4,r16
 8004a54:	a80b883a 	mov	r5,r21
 8004a58:	8006d140 	call	8006d14 <_Bfree>
 8004a5c:	883e7526 	beq	r17,zero,8004434 <_dtoa_r+0x6b8>
 8004a60:	90000426 	beq	r18,zero,8004a74 <_dtoa_r+0xcf8>
 8004a64:	94400326 	beq	r18,r17,8004a74 <_dtoa_r+0xcf8>
 8004a68:	8009883a 	mov	r4,r16
 8004a6c:	900b883a 	mov	r5,r18
 8004a70:	8006d140 	call	8006d14 <_Bfree>
 8004a74:	8009883a 	mov	r4,r16
 8004a78:	880b883a 	mov	r5,r17
 8004a7c:	8006d140 	call	8006d14 <_Bfree>
 8004a80:	003e6c06 	br	8004434 <_dtoa_r+0x6b8>
 8004a84:	00800704 	movi	r2,28
 8004a88:	d9800817 	ldw	r6,32(sp)
 8004a8c:	a0a9883a 	add	r20,r20,r2
 8004a90:	b0ad883a 	add	r22,r22,r2
 8004a94:	308d883a 	add	r6,r6,r2
 8004a98:	d9800815 	stw	r6,32(sp)
 8004a9c:	003fa506 	br	8004934 <_dtoa_r+0xbb8>
 8004aa0:	013efb84 	movi	r4,-1042
 8004aa4:	246bc83a 	sub	r21,r4,r17
 8004aa8:	9548983a 	sll	r4,r18,r21
 8004aac:	003d1806 	br	8003f10 <_dtoa_r+0x194>
 8004ab0:	d8000d15 	stw	zero,52(sp)
 8004ab4:	003d5b06 	br	8004024 <_dtoa_r+0x2a8>
 8004ab8:	880b883a 	mov	r5,r17
 8004abc:	8009883a 	mov	r4,r16
 8004ac0:	01800284 	movi	r6,10
 8004ac4:	000f883a 	mov	r7,zero
 8004ac8:	8006d3c0 	call	8006d3c <__multadd>
 8004acc:	1023883a 	mov	r17,r2
 8004ad0:	d8800c17 	ldw	r2,48(sp)
 8004ad4:	0082550e 	bge	zero,r2,800542c <_dtoa_r+0x16b0>
 8004ad8:	d8800615 	stw	r2,24(sp)
 8004adc:	0500050e 	bge	zero,r20,8004af4 <_dtoa_r+0xd78>
 8004ae0:	880b883a 	mov	r5,r17
 8004ae4:	8009883a 	mov	r4,r16
 8004ae8:	a00d883a 	mov	r6,r20
 8004aec:	80073f00 	call	80073f0 <__lshift>
 8004af0:	1023883a 	mov	r17,r2
 8004af4:	98016a1e 	bne	r19,zero,80050a0 <_dtoa_r+0x1324>
 8004af8:	8829883a 	mov	r20,r17
 8004afc:	d9000617 	ldw	r4,24(sp)
 8004b00:	dcc00717 	ldw	r19,28(sp)
 8004b04:	9480004c 	andi	r18,r18,1
 8004b08:	20bfffc4 	addi	r2,r4,-1
 8004b0c:	9885883a 	add	r2,r19,r2
 8004b10:	d8800415 	stw	r2,16(sp)
 8004b14:	dc800615 	stw	r18,24(sp)
 8004b18:	e009883a 	mov	r4,fp
 8004b1c:	a80b883a 	mov	r5,r21
 8004b20:	8003b7c0 	call	8003b7c <quorem>
 8004b24:	e009883a 	mov	r4,fp
 8004b28:	880b883a 	mov	r5,r17
 8004b2c:	102f883a 	mov	r23,r2
 8004b30:	80075400 	call	8007540 <__mcmp>
 8004b34:	8009883a 	mov	r4,r16
 8004b38:	a80b883a 	mov	r5,r21
 8004b3c:	a00d883a 	mov	r6,r20
 8004b40:	102d883a 	mov	r22,r2
 8004b44:	80075a00 	call	80075a0 <__mdiff>
 8004b48:	1007883a 	mov	r3,r2
 8004b4c:	10800317 	ldw	r2,12(r2)
 8004b50:	bc800c04 	addi	r18,r23,48
 8004b54:	1000971e 	bne	r2,zero,8004db4 <_dtoa_r+0x1038>
 8004b58:	180b883a 	mov	r5,r3
 8004b5c:	e009883a 	mov	r4,fp
 8004b60:	d8c01515 	stw	r3,84(sp)
 8004b64:	80075400 	call	8007540 <__mcmp>
 8004b68:	d8c01517 	ldw	r3,84(sp)
 8004b6c:	8009883a 	mov	r4,r16
 8004b70:	d8801515 	stw	r2,84(sp)
 8004b74:	180b883a 	mov	r5,r3
 8004b78:	8006d140 	call	8006d14 <_Bfree>
 8004b7c:	d8801517 	ldw	r2,84(sp)
 8004b80:	1000041e 	bne	r2,zero,8004b94 <_dtoa_r+0xe18>
 8004b84:	d9800317 	ldw	r6,12(sp)
 8004b88:	3000021e 	bne	r6,zero,8004b94 <_dtoa_r+0xe18>
 8004b8c:	d8c00617 	ldw	r3,24(sp)
 8004b90:	18007626 	beq	r3,zero,8004d6c <_dtoa_r+0xff0>
 8004b94:	b0005b16 	blt	r22,zero,8004d04 <_dtoa_r+0xf88>
 8004b98:	b000041e 	bne	r22,zero,8004bac <_dtoa_r+0xe30>
 8004b9c:	d9000317 	ldw	r4,12(sp)
 8004ba0:	2000021e 	bne	r4,zero,8004bac <_dtoa_r+0xe30>
 8004ba4:	d8c00617 	ldw	r3,24(sp)
 8004ba8:	18005626 	beq	r3,zero,8004d04 <_dtoa_r+0xf88>
 8004bac:	00814d16 	blt	zero,r2,80050e4 <_dtoa_r+0x1368>
 8004bb0:	d8c00417 	ldw	r3,16(sp)
 8004bb4:	9d800044 	addi	r22,r19,1
 8004bb8:	9c800005 	stb	r18,0(r19)
 8004bbc:	b02f883a 	mov	r23,r22
 8004bc0:	98c14c26 	beq	r19,r3,80050f4 <_dtoa_r+0x1378>
 8004bc4:	e00b883a 	mov	r5,fp
 8004bc8:	8009883a 	mov	r4,r16
 8004bcc:	01800284 	movi	r6,10
 8004bd0:	000f883a 	mov	r7,zero
 8004bd4:	8006d3c0 	call	8006d3c <__multadd>
 8004bd8:	1039883a 	mov	fp,r2
 8004bdc:	8d006d26 	beq	r17,r20,8004d94 <_dtoa_r+0x1018>
 8004be0:	880b883a 	mov	r5,r17
 8004be4:	01800284 	movi	r6,10
 8004be8:	000f883a 	mov	r7,zero
 8004bec:	8009883a 	mov	r4,r16
 8004bf0:	8006d3c0 	call	8006d3c <__multadd>
 8004bf4:	a00b883a 	mov	r5,r20
 8004bf8:	8009883a 	mov	r4,r16
 8004bfc:	01800284 	movi	r6,10
 8004c00:	000f883a 	mov	r7,zero
 8004c04:	1023883a 	mov	r17,r2
 8004c08:	8006d3c0 	call	8006d3c <__multadd>
 8004c0c:	1029883a 	mov	r20,r2
 8004c10:	b027883a 	mov	r19,r22
 8004c14:	003fc006 	br	8004b18 <_dtoa_r+0xd9c>
 8004c18:	a005883a 	mov	r2,r20
 8004c1c:	003ede06 	br	8004798 <_dtoa_r+0xa1c>
 8004c20:	01000044 	movi	r4,1
 8004c24:	d9000b15 	stw	r4,44(sp)
 8004c28:	d9802217 	ldw	r6,136(sp)
 8004c2c:	0180dc0e 	bge	zero,r6,8004fa0 <_dtoa_r+0x1224>
 8004c30:	3023883a 	mov	r17,r6
 8004c34:	d9800c15 	stw	r6,48(sp)
 8004c38:	d9800615 	stw	r6,24(sp)
 8004c3c:	003d1e06 	br	80040b8 <_dtoa_r+0x33c>
 8004c40:	d8800617 	ldw	r2,24(sp)
 8004c44:	00be3716 	blt	zero,r2,8004524 <_dtoa_r+0x7a8>
 8004c48:	1000be1e 	bne	r2,zero,8004f44 <_dtoa_r+0x11c8>
 8004c4c:	8809883a 	mov	r4,r17
 8004c50:	a00b883a 	mov	r5,r20
 8004c54:	000d883a 	mov	r6,zero
 8004c58:	01d00534 	movhi	r7,16404
 8004c5c:	800c1080 	call	800c108 <__muldf3>
 8004c60:	1009883a 	mov	r4,r2
 8004c64:	180b883a 	mov	r5,r3
 8004c68:	900d883a 	mov	r6,r18
 8004c6c:	980f883a 	mov	r7,r19
 8004c70:	800bf480 	call	800bf48 <__gedf2>
 8004c74:	002b883a 	mov	r21,zero
 8004c78:	0023883a 	mov	r17,zero
 8004c7c:	10007a16 	blt	r2,zero,8004e68 <_dtoa_r+0x10ec>
 8004c80:	d9002217 	ldw	r4,136(sp)
 8004c84:	ddc00717 	ldw	r23,28(sp)
 8004c88:	0108303a 	nor	r4,zero,r4
 8004c8c:	d9000515 	stw	r4,20(sp)
 8004c90:	8009883a 	mov	r4,r16
 8004c94:	a80b883a 	mov	r5,r21
 8004c98:	8006d140 	call	8006d14 <_Bfree>
 8004c9c:	883f751e 	bne	r17,zero,8004a74 <_dtoa_r+0xcf8>
 8004ca0:	003de406 	br	8004434 <_dtoa_r+0x6b8>
 8004ca4:	e00b883a 	mov	r5,fp
 8004ca8:	8009883a 	mov	r4,r16
 8004cac:	80072b00 	call	80072b0 <__pow5mult>
 8004cb0:	1039883a 	mov	fp,r2
 8004cb4:	003ed306 	br	8004804 <_dtoa_r+0xa88>
 8004cb8:	903ee01e 	bne	r18,zero,800483c <_dtoa_r+0xac0>
 8004cbc:	00800434 	movhi	r2,16
 8004cc0:	10bfffc4 	addi	r2,r2,-1
 8004cc4:	9884703a 	and	r2,r19,r2
 8004cc8:	103f081e 	bne	r2,zero,80048ec <_dtoa_r+0xb70>
 8004ccc:	9cdffc2c 	andhi	r19,r19,32752
 8004cd0:	983f0626 	beq	r19,zero,80048ec <_dtoa_r+0xb70>
 8004cd4:	d8800817 	ldw	r2,32(sp)
 8004cd8:	b5800044 	addi	r22,r22,1
 8004cdc:	04c00044 	movi	r19,1
 8004ce0:	10800044 	addi	r2,r2,1
 8004ce4:	d8800815 	stw	r2,32(sp)
 8004ce8:	003f0106 	br	80048f0 <_dtoa_r+0xb74>
 8004cec:	d9800f17 	ldw	r6,60(sp)
 8004cf0:	30016826 	beq	r6,zero,8005294 <_dtoa_r+0x1518>
 8004cf4:	10810cc4 	addi	r2,r2,1075
 8004cf8:	dd400917 	ldw	r21,36(sp)
 8004cfc:	dd000817 	ldw	r20,32(sp)
 8004d00:	003e9906 	br	8004768 <_dtoa_r+0x9ec>
 8004d04:	9011883a 	mov	r8,r18
 8004d08:	4007883a 	mov	r3,r8
 8004d0c:	e02d883a 	mov	r22,fp
 8004d10:	0080100e 	bge	zero,r2,8004d54 <_dtoa_r+0xfd8>
 8004d14:	01800044 	movi	r6,1
 8004d18:	8009883a 	mov	r4,r16
 8004d1c:	e00b883a 	mov	r5,fp
 8004d20:	da001515 	stw	r8,84(sp)
 8004d24:	da001715 	stw	r8,92(sp)
 8004d28:	80073f00 	call	80073f0 <__lshift>
 8004d2c:	1009883a 	mov	r4,r2
 8004d30:	a80b883a 	mov	r5,r21
 8004d34:	102d883a 	mov	r22,r2
 8004d38:	80075400 	call	8007540 <__mcmp>
 8004d3c:	d8c01517 	ldw	r3,84(sp)
 8004d40:	da001717 	ldw	r8,92(sp)
 8004d44:	0081a50e 	bge	zero,r2,80053dc <_dtoa_r+0x1660>
 8004d48:	00800e44 	movi	r2,57
 8004d4c:	40817b26 	beq	r8,r2,800533c <_dtoa_r+0x15c0>
 8004d50:	40c00044 	addi	r3,r8,1
 8004d54:	8825883a 	mov	r18,r17
 8004d58:	9dc00044 	addi	r23,r19,1
 8004d5c:	98c00005 	stb	r3,0(r19)
 8004d60:	a023883a 	mov	r17,r20
 8004d64:	b039883a 	mov	fp,r22
 8004d68:	003f3906 	br	8004a50 <_dtoa_r+0xcd4>
 8004d6c:	00800e44 	movi	r2,57
 8004d70:	9011883a 	mov	r8,r18
 8004d74:	90817226 	beq	r18,r2,8005340 <_dtoa_r+0x15c4>
 8004d78:	0580010e 	bge	zero,r22,8004d80 <_dtoa_r+0x1004>
 8004d7c:	ba000c44 	addi	r8,r23,49
 8004d80:	8825883a 	mov	r18,r17
 8004d84:	9dc00044 	addi	r23,r19,1
 8004d88:	9a000005 	stb	r8,0(r19)
 8004d8c:	a023883a 	mov	r17,r20
 8004d90:	003f2f06 	br	8004a50 <_dtoa_r+0xcd4>
 8004d94:	880b883a 	mov	r5,r17
 8004d98:	8009883a 	mov	r4,r16
 8004d9c:	01800284 	movi	r6,10
 8004da0:	000f883a 	mov	r7,zero
 8004da4:	8006d3c0 	call	8006d3c <__multadd>
 8004da8:	1023883a 	mov	r17,r2
 8004dac:	1029883a 	mov	r20,r2
 8004db0:	003f9706 	br	8004c10 <_dtoa_r+0xe94>
 8004db4:	8009883a 	mov	r4,r16
 8004db8:	180b883a 	mov	r5,r3
 8004dbc:	8006d140 	call	8006d14 <_Bfree>
 8004dc0:	00800044 	movi	r2,1
 8004dc4:	003f7306 	br	8004b94 <_dtoa_r+0xe18>
 8004dc8:	e009883a 	mov	r4,fp
 8004dcc:	a80b883a 	mov	r5,r21
 8004dd0:	80075400 	call	8007540 <__mcmp>
 8004dd4:	103ee60e 	bge	r2,zero,8004970 <_dtoa_r+0xbf4>
 8004dd8:	8009883a 	mov	r4,r16
 8004ddc:	e00b883a 	mov	r5,fp
 8004de0:	01800284 	movi	r6,10
 8004de4:	000f883a 	mov	r7,zero
 8004de8:	8006d3c0 	call	8006d3c <__multadd>
 8004dec:	d9000517 	ldw	r4,20(sp)
 8004df0:	d9800b17 	ldw	r6,44(sp)
 8004df4:	1039883a 	mov	fp,r2
 8004df8:	213fffc4 	addi	r4,r4,-1
 8004dfc:	d9000515 	stw	r4,20(sp)
 8004e00:	303f2d1e 	bne	r6,zero,8004ab8 <_dtoa_r+0xd3c>
 8004e04:	d9000c17 	ldw	r4,48(sp)
 8004e08:	0101780e 	bge	zero,r4,80053ec <_dtoa_r+0x1670>
 8004e0c:	d9000615 	stw	r4,24(sp)
 8004e10:	003edb06 	br	8004980 <_dtoa_r+0xc04>
 8004e14:	00800084 	movi	r2,2
 8004e18:	30818e1e 	bne	r6,r2,8005454 <_dtoa_r+0x16d8>
 8004e1c:	d8000b15 	stw	zero,44(sp)
 8004e20:	003f8106 	br	8004c28 <_dtoa_r+0xeac>
 8004e24:	d8800717 	ldw	r2,28(sp)
 8004e28:	003c0306 	br	8003e38 <_dtoa_r+0xbc>
 8004e2c:	d9000317 	ldw	r4,12(sp)
 8004e30:	00800084 	movi	r2,2
 8004e34:	113ed00e 	bge	r2,r4,8004978 <_dtoa_r+0xbfc>
 8004e38:	d8c00617 	ldw	r3,24(sp)
 8004e3c:	183f901e 	bne	r3,zero,8004c80 <_dtoa_r+0xf04>
 8004e40:	a80b883a 	mov	r5,r21
 8004e44:	8009883a 	mov	r4,r16
 8004e48:	01800144 	movi	r6,5
 8004e4c:	000f883a 	mov	r7,zero
 8004e50:	8006d3c0 	call	8006d3c <__multadd>
 8004e54:	e009883a 	mov	r4,fp
 8004e58:	100b883a 	mov	r5,r2
 8004e5c:	102b883a 	mov	r21,r2
 8004e60:	80075400 	call	8007540 <__mcmp>
 8004e64:	00bf860e 	bge	zero,r2,8004c80 <_dtoa_r+0xf04>
 8004e68:	d9800717 	ldw	r6,28(sp)
 8004e6c:	00800c44 	movi	r2,49
 8004e70:	30800005 	stb	r2,0(r6)
 8004e74:	d8800517 	ldw	r2,20(sp)
 8004e78:	35c00044 	addi	r23,r6,1
 8004e7c:	10800044 	addi	r2,r2,1
 8004e80:	d8800515 	stw	r2,20(sp)
 8004e84:	003f8206 	br	8004c90 <_dtoa_r+0xf14>
 8004e88:	903e981e 	bne	r18,zero,80048ec <_dtoa_r+0xb70>
 8004e8c:	003f8b06 	br	8004cbc <_dtoa_r+0xf40>
 8004e90:	d9800517 	ldw	r6,20(sp)
 8004e94:	d8c00717 	ldw	r3,28(sp)
 8004e98:	00800c44 	movi	r2,49
 8004e9c:	31800044 	addi	r6,r6,1
 8004ea0:	d9800515 	stw	r6,20(sp)
 8004ea4:	18800005 	stb	r2,0(r3)
 8004ea8:	003ee906 	br	8004a50 <_dtoa_r+0xcd4>
 8004eac:	dc000317 	ldw	r16,12(sp)
 8004eb0:	003d6006 	br	8004434 <_dtoa_r+0x6b8>
 8004eb4:	8809883a 	mov	r4,r17
 8004eb8:	800d1840 	call	800d184 <__floatsidf>
 8004ebc:	a009883a 	mov	r4,r20
 8004ec0:	a80b883a 	mov	r5,r21
 8004ec4:	100d883a 	mov	r6,r2
 8004ec8:	180f883a 	mov	r7,r3
 8004ecc:	800c1080 	call	800c108 <__muldf3>
 8004ed0:	1009883a 	mov	r4,r2
 8004ed4:	180b883a 	mov	r5,r3
 8004ed8:	000d883a 	mov	r6,zero
 8004edc:	01d00734 	movhi	r7,16412
 8004ee0:	800ad5c0 	call	800ad5c <__adddf3>
 8004ee4:	1023883a 	mov	r17,r2
 8004ee8:	00bf3034 	movhi	r2,64704
 8004eec:	1885883a 	add	r2,r3,r2
 8004ef0:	d8800e15 	stw	r2,56(sp)
 8004ef4:	a009883a 	mov	r4,r20
 8004ef8:	a80b883a 	mov	r5,r21
 8004efc:	000d883a 	mov	r6,zero
 8004f00:	01d00534 	movhi	r7,16404
 8004f04:	800c82c0 	call	800c82c <__subdf3>
 8004f08:	d9c00e17 	ldw	r7,56(sp)
 8004f0c:	1009883a 	mov	r4,r2
 8004f10:	180b883a 	mov	r5,r3
 8004f14:	880d883a 	mov	r6,r17
 8004f18:	102b883a 	mov	r21,r2
 8004f1c:	1829883a 	mov	r20,r3
 8004f20:	800bf480 	call	800bf48 <__gedf2>
 8004f24:	00807716 	blt	zero,r2,8005104 <_dtoa_r+0x1388>
 8004f28:	d8800e17 	ldw	r2,56(sp)
 8004f2c:	a809883a 	mov	r4,r21
 8004f30:	a00b883a 	mov	r5,r20
 8004f34:	11e0003c 	xorhi	r7,r2,32768
 8004f38:	880d883a 	mov	r6,r17
 8004f3c:	800c0280 	call	800c028 <__ledf2>
 8004f40:	103d6b0e 	bge	r2,zero,80044f0 <_dtoa_r+0x774>
 8004f44:	002b883a 	mov	r21,zero
 8004f48:	0023883a 	mov	r17,zero
 8004f4c:	003f4c06 	br	8004c80 <_dtoa_r+0xf04>
 8004f50:	d9800917 	ldw	r6,36(sp)
 8004f54:	e00b883a 	mov	r5,fp
 8004f58:	8009883a 	mov	r4,r16
 8004f5c:	80072b00 	call	80072b0 <__pow5mult>
 8004f60:	1039883a 	mov	fp,r2
 8004f64:	003e2706 	br	8004804 <_dtoa_r+0xa88>
 8004f68:	d8000b15 	stw	zero,44(sp)
 8004f6c:	003c4906 	br	8004094 <_dtoa_r+0x318>
 8004f70:	d9000917 	ldw	r4,36(sp)
 8004f74:	d9800a17 	ldw	r6,40(sp)
 8004f78:	dd400915 	stw	r21,36(sp)
 8004f7c:	a905c83a 	sub	r2,r21,r4
 8004f80:	308d883a 	add	r6,r6,r2
 8004f84:	d9800a15 	stw	r6,40(sp)
 8004f88:	002b883a 	mov	r21,zero
 8004f8c:	003df206 	br	8004758 <_dtoa_r+0x9dc>
 8004f90:	dc800e15 	stw	r18,56(sp)
 8004f94:	982b883a 	mov	r21,r19
 8004f98:	04400084 	movi	r17,2
 8004f9c:	003c7406 	br	8004170 <_dtoa_r+0x3f4>
 8004fa0:	04400044 	movi	r17,1
 8004fa4:	dc400c15 	stw	r17,48(sp)
 8004fa8:	dc400615 	stw	r17,24(sp)
 8004fac:	dc402215 	stw	r17,136(sp)
 8004fb0:	80001115 	stw	zero,68(r16)
 8004fb4:	000b883a 	mov	r5,zero
 8004fb8:	003c4a06 	br	80040e4 <_dtoa_r+0x368>
 8004fbc:	3023883a 	mov	r17,r6
 8004fc0:	003ffb06 	br	8004fb0 <_dtoa_r+0x1234>
 8004fc4:	1000021e 	bne	r2,zero,8004fd0 <_dtoa_r+0x1254>
 8004fc8:	4200004c 	andi	r8,r8,1
 8004fcc:	403e8f1e 	bne	r8,zero,8004a0c <_dtoa_r+0xc90>
 8004fd0:	01000c04 	movi	r4,48
 8004fd4:	00000106 	br	8004fdc <_dtoa_r+0x1260>
 8004fd8:	102f883a 	mov	r23,r2
 8004fdc:	b8bfffc4 	addi	r2,r23,-1
 8004fe0:	10c00007 	ldb	r3,0(r2)
 8004fe4:	193ffc26 	beq	r3,r4,8004fd8 <_dtoa_r+0x125c>
 8004fe8:	003e9906 	br	8004a50 <_dtoa_r+0xcd4>
 8004fec:	d9000517 	ldw	r4,20(sp)
 8004ff0:	012fc83a 	sub	r23,zero,r4
 8004ff4:	b800ad26 	beq	r23,zero,80052ac <_dtoa_r+0x1530>
 8004ff8:	b88003cc 	andi	r2,r23,15
 8004ffc:	100490fa 	slli	r2,r2,3
 8005000:	00c200b4 	movhi	r3,2050
 8005004:	18e6ca04 	addi	r3,r3,-25816
 8005008:	1885883a 	add	r2,r3,r2
 800500c:	11800017 	ldw	r6,0(r2)
 8005010:	11c00117 	ldw	r7,4(r2)
 8005014:	b82fd13a 	srai	r23,r23,4
 8005018:	9009883a 	mov	r4,r18
 800501c:	980b883a 	mov	r5,r19
 8005020:	800c1080 	call	800c108 <__muldf3>
 8005024:	1029883a 	mov	r20,r2
 8005028:	182b883a 	mov	r21,r3
 800502c:	b800f426 	beq	r23,zero,8005400 <_dtoa_r+0x1684>
 8005030:	020200b4 	movhi	r8,2050
 8005034:	4226c004 	addi	r8,r8,-25856
 8005038:	8029883a 	mov	r20,r16
 800503c:	04400084 	movi	r17,2
 8005040:	4021883a 	mov	r16,r8
 8005044:	b980004c 	andi	r6,r23,1
 8005048:	1009883a 	mov	r4,r2
 800504c:	b82fd07a 	srai	r23,r23,1
 8005050:	180b883a 	mov	r5,r3
 8005054:	30000426 	beq	r6,zero,8005068 <_dtoa_r+0x12ec>
 8005058:	81800017 	ldw	r6,0(r16)
 800505c:	81c00117 	ldw	r7,4(r16)
 8005060:	8c400044 	addi	r17,r17,1
 8005064:	800c1080 	call	800c108 <__muldf3>
 8005068:	84000204 	addi	r16,r16,8
 800506c:	b83ff51e 	bne	r23,zero,8005044 <_dtoa_r+0x12c8>
 8005070:	a021883a 	mov	r16,r20
 8005074:	182b883a 	mov	r21,r3
 8005078:	1029883a 	mov	r20,r2
 800507c:	003c5506 	br	80041d4 <_dtoa_r+0x458>
 8005080:	d9800517 	ldw	r6,20(sp)
 8005084:	d9000717 	ldw	r4,28(sp)
 8005088:	00c00c04 	movi	r3,48
 800508c:	31800044 	addi	r6,r6,1
 8005090:	d9800515 	stw	r6,20(sp)
 8005094:	20c00005 	stb	r3,0(r4)
 8005098:	02000c44 	movi	r8,49
 800509c:	003da206 	br	8004728 <_dtoa_r+0x9ac>
 80050a0:	89400117 	ldw	r5,4(r17)
 80050a4:	8009883a 	mov	r4,r16
 80050a8:	8006c6c0 	call	8006c6c <_Balloc>
 80050ac:	89800417 	ldw	r6,16(r17)
 80050b0:	11000304 	addi	r4,r2,12
 80050b4:	89400304 	addi	r5,r17,12
 80050b8:	31800084 	addi	r6,r6,2
 80050bc:	318d883a 	add	r6,r6,r6
 80050c0:	318d883a 	add	r6,r6,r6
 80050c4:	1027883a 	mov	r19,r2
 80050c8:	80068b40 	call	80068b4 <memcpy>
 80050cc:	8009883a 	mov	r4,r16
 80050d0:	980b883a 	mov	r5,r19
 80050d4:	01800044 	movi	r6,1
 80050d8:	80073f00 	call	80073f0 <__lshift>
 80050dc:	1029883a 	mov	r20,r2
 80050e0:	003e8606 	br	8004afc <_dtoa_r+0xd80>
 80050e4:	00800e44 	movi	r2,57
 80050e8:	90809526 	beq	r18,r2,8005340 <_dtoa_r+0x15c4>
 80050ec:	92000044 	addi	r8,r18,1
 80050f0:	003f2306 	br	8004d80 <_dtoa_r+0x1004>
 80050f4:	9011883a 	mov	r8,r18
 80050f8:	8825883a 	mov	r18,r17
 80050fc:	a023883a 	mov	r17,r20
 8005100:	003e3706 	br	80049e0 <_dtoa_r+0xc64>
 8005104:	002b883a 	mov	r21,zero
 8005108:	0023883a 	mov	r17,zero
 800510c:	003f5606 	br	8004e68 <_dtoa_r+0x10ec>
 8005110:	51bfffc4 	addi	r6,r10,-1
 8005114:	300490fa 	slli	r2,r6,3
 8005118:	00c200b4 	movhi	r3,2050
 800511c:	18e6ca04 	addi	r3,r3,-25816
 8005120:	1885883a 	add	r2,r3,r2
 8005124:	d9c00e17 	ldw	r7,56(sp)
 8005128:	11000017 	ldw	r4,0(r2)
 800512c:	11400117 	ldw	r5,4(r2)
 8005130:	d8800717 	ldw	r2,28(sp)
 8005134:	d9801015 	stw	r6,64(sp)
 8005138:	880d883a 	mov	r6,r17
 800513c:	da801615 	stw	r10,88(sp)
 8005140:	15c00044 	addi	r23,r2,1
 8005144:	800c1080 	call	800c108 <__muldf3>
 8005148:	a80b883a 	mov	r5,r21
 800514c:	a009883a 	mov	r4,r20
 8005150:	d8c01115 	stw	r3,68(sp)
 8005154:	d8800e15 	stw	r2,56(sp)
 8005158:	800d0fc0 	call	800d0fc <__fixdfsi>
 800515c:	1009883a 	mov	r4,r2
 8005160:	1023883a 	mov	r17,r2
 8005164:	800d1840 	call	800d184 <__floatsidf>
 8005168:	a009883a 	mov	r4,r20
 800516c:	a80b883a 	mov	r5,r21
 8005170:	100d883a 	mov	r6,r2
 8005174:	180f883a 	mov	r7,r3
 8005178:	800c82c0 	call	800c82c <__subdf3>
 800517c:	1813883a 	mov	r9,r3
 8005180:	d8c00717 	ldw	r3,28(sp)
 8005184:	8c400c04 	addi	r17,r17,48
 8005188:	1011883a 	mov	r8,r2
 800518c:	1c400005 	stb	r17,0(r3)
 8005190:	da801617 	ldw	r10,88(sp)
 8005194:	00800044 	movi	r2,1
 8005198:	50802326 	beq	r10,r2,8005228 <_dtoa_r+0x14ac>
 800519c:	d8800717 	ldw	r2,28(sp)
 80051a0:	b82b883a 	mov	r21,r23
 80051a4:	dc001315 	stw	r16,76(sp)
 80051a8:	12a9883a 	add	r20,r2,r10
 80051ac:	4807883a 	mov	r3,r9
 80051b0:	4005883a 	mov	r2,r8
 80051b4:	dc801415 	stw	r18,80(sp)
 80051b8:	000d883a 	mov	r6,zero
 80051bc:	01d00934 	movhi	r7,16420
 80051c0:	1009883a 	mov	r4,r2
 80051c4:	180b883a 	mov	r5,r3
 80051c8:	800c1080 	call	800c108 <__muldf3>
 80051cc:	180b883a 	mov	r5,r3
 80051d0:	1009883a 	mov	r4,r2
 80051d4:	1821883a 	mov	r16,r3
 80051d8:	1025883a 	mov	r18,r2
 80051dc:	800d0fc0 	call	800d0fc <__fixdfsi>
 80051e0:	1009883a 	mov	r4,r2
 80051e4:	1023883a 	mov	r17,r2
 80051e8:	800d1840 	call	800d184 <__floatsidf>
 80051ec:	9009883a 	mov	r4,r18
 80051f0:	800b883a 	mov	r5,r16
 80051f4:	100d883a 	mov	r6,r2
 80051f8:	180f883a 	mov	r7,r3
 80051fc:	8c400c04 	addi	r17,r17,48
 8005200:	800c82c0 	call	800c82c <__subdf3>
 8005204:	ad400044 	addi	r21,r21,1
 8005208:	ac7fffc5 	stb	r17,-1(r21)
 800520c:	ad3fea1e 	bne	r21,r20,80051b8 <_dtoa_r+0x143c>
 8005210:	1813883a 	mov	r9,r3
 8005214:	d8c01017 	ldw	r3,64(sp)
 8005218:	dc001317 	ldw	r16,76(sp)
 800521c:	dc801417 	ldw	r18,80(sp)
 8005220:	1011883a 	mov	r8,r2
 8005224:	b8ef883a 	add	r23,r23,r3
 8005228:	d9000e17 	ldw	r4,56(sp)
 800522c:	d9401117 	ldw	r5,68(sp)
 8005230:	000d883a 	mov	r6,zero
 8005234:	01cff834 	movhi	r7,16352
 8005238:	da001715 	stw	r8,92(sp)
 800523c:	da401515 	stw	r9,84(sp)
 8005240:	800ad5c0 	call	800ad5c <__adddf3>
 8005244:	da001717 	ldw	r8,92(sp)
 8005248:	da401517 	ldw	r9,84(sp)
 800524c:	1009883a 	mov	r4,r2
 8005250:	400d883a 	mov	r6,r8
 8005254:	480f883a 	mov	r7,r9
 8005258:	180b883a 	mov	r5,r3
 800525c:	800c0280 	call	800c028 <__ledf2>
 8005260:	da001717 	ldw	r8,92(sp)
 8005264:	da401517 	ldw	r9,84(sp)
 8005268:	10003b0e 	bge	r2,zero,8005358 <_dtoa_r+0x15dc>
 800526c:	d9001217 	ldw	r4,72(sp)
 8005270:	bd7fffc3 	ldbu	r21,-1(r23)
 8005274:	d9000515 	stw	r4,20(sp)
 8005278:	003d1c06 	br	80046ec <_dtoa_r+0x970>
 800527c:	d8c00817 	ldw	r3,32(sp)
 8005280:	18a9c83a 	sub	r20,r3,r2
 8005284:	0005883a 	mov	r2,zero
 8005288:	003d3706 	br	8004768 <_dtoa_r+0x9ec>
 800528c:	00800044 	movi	r2,1
 8005290:	003dd006 	br	80049d4 <_dtoa_r+0xc58>
 8005294:	d8c00217 	ldw	r3,8(sp)
 8005298:	00800d84 	movi	r2,54
 800529c:	dd400917 	ldw	r21,36(sp)
 80052a0:	10c5c83a 	sub	r2,r2,r3
 80052a4:	dd000817 	ldw	r20,32(sp)
 80052a8:	003d2f06 	br	8004768 <_dtoa_r+0x9ec>
 80052ac:	9029883a 	mov	r20,r18
 80052b0:	982b883a 	mov	r21,r19
 80052b4:	04400084 	movi	r17,2
 80052b8:	003bc606 	br	80041d4 <_dtoa_r+0x458>
 80052bc:	d8800617 	ldw	r2,24(sp)
 80052c0:	103efc26 	beq	r2,zero,8004eb4 <_dtoa_r+0x1138>
 80052c4:	d8c00c17 	ldw	r3,48(sp)
 80052c8:	00fc890e 	bge	zero,r3,80044f0 <_dtoa_r+0x774>
 80052cc:	a80b883a 	mov	r5,r21
 80052d0:	a009883a 	mov	r4,r20
 80052d4:	000d883a 	mov	r6,zero
 80052d8:	01d00934 	movhi	r7,16420
 80052dc:	800c1080 	call	800c108 <__muldf3>
 80052e0:	89000044 	addi	r4,r17,1
 80052e4:	1029883a 	mov	r20,r2
 80052e8:	182b883a 	mov	r21,r3
 80052ec:	800d1840 	call	800d184 <__floatsidf>
 80052f0:	a009883a 	mov	r4,r20
 80052f4:	a80b883a 	mov	r5,r21
 80052f8:	100d883a 	mov	r6,r2
 80052fc:	180f883a 	mov	r7,r3
 8005300:	800c1080 	call	800c108 <__muldf3>
 8005304:	1009883a 	mov	r4,r2
 8005308:	180b883a 	mov	r5,r3
 800530c:	000d883a 	mov	r6,zero
 8005310:	01d00734 	movhi	r7,16412
 8005314:	800ad5c0 	call	800ad5c <__adddf3>
 8005318:	d9000517 	ldw	r4,20(sp)
 800531c:	1023883a 	mov	r17,r2
 8005320:	00bf3034 	movhi	r2,64704
 8005324:	213fffc4 	addi	r4,r4,-1
 8005328:	1885883a 	add	r2,r3,r2
 800532c:	d9001215 	stw	r4,72(sp)
 8005330:	d8800e15 	stw	r2,56(sp)
 8005334:	da800c17 	ldw	r10,48(sp)
 8005338:	003bc306 	br	8004248 <_dtoa_r+0x4cc>
 800533c:	b039883a 	mov	fp,r22
 8005340:	01000e44 	movi	r4,57
 8005344:	8825883a 	mov	r18,r17
 8005348:	9dc00044 	addi	r23,r19,1
 800534c:	99000005 	stb	r4,0(r19)
 8005350:	a023883a 	mov	r17,r20
 8005354:	003dae06 	br	8004a10 <_dtoa_r+0xc94>
 8005358:	d9800e17 	ldw	r6,56(sp)
 800535c:	d9c01117 	ldw	r7,68(sp)
 8005360:	0009883a 	mov	r4,zero
 8005364:	014ff834 	movhi	r5,16352
 8005368:	da001715 	stw	r8,92(sp)
 800536c:	da401515 	stw	r9,84(sp)
 8005370:	800c82c0 	call	800c82c <__subdf3>
 8005374:	da001717 	ldw	r8,92(sp)
 8005378:	da401517 	ldw	r9,84(sp)
 800537c:	1009883a 	mov	r4,r2
 8005380:	180b883a 	mov	r5,r3
 8005384:	400d883a 	mov	r6,r8
 8005388:	480f883a 	mov	r7,r9
 800538c:	800bf480 	call	800bf48 <__gedf2>
 8005390:	00bc570e 	bge	zero,r2,80044f0 <_dtoa_r+0x774>
 8005394:	01000c04 	movi	r4,48
 8005398:	00000106 	br	80053a0 <_dtoa_r+0x1624>
 800539c:	102f883a 	mov	r23,r2
 80053a0:	b8bfffc4 	addi	r2,r23,-1
 80053a4:	10c00007 	ldb	r3,0(r2)
 80053a8:	193ffc26 	beq	r3,r4,800539c <_dtoa_r+0x1620>
 80053ac:	d9801217 	ldw	r6,72(sp)
 80053b0:	d9800515 	stw	r6,20(sp)
 80053b4:	003c1f06 	br	8004434 <_dtoa_r+0x6b8>
 80053b8:	d8801217 	ldw	r2,72(sp)
 80053bc:	dc001117 	ldw	r16,68(sp)
 80053c0:	d8800515 	stw	r2,20(sp)
 80053c4:	003cc906 	br	80046ec <_dtoa_r+0x970>
 80053c8:	dd801317 	ldw	r22,76(sp)
 80053cc:	dc001117 	ldw	r16,68(sp)
 80053d0:	dcc01417 	ldw	r19,80(sp)
 80053d4:	dc801017 	ldw	r18,64(sp)
 80053d8:	003c4506 	br	80044f0 <_dtoa_r+0x774>
 80053dc:	103e5d1e 	bne	r2,zero,8004d54 <_dtoa_r+0xfd8>
 80053e0:	4080004c 	andi	r2,r8,1
 80053e4:	103e5b26 	beq	r2,zero,8004d54 <_dtoa_r+0xfd8>
 80053e8:	003e5706 	br	8004d48 <_dtoa_r+0xfcc>
 80053ec:	d8c00317 	ldw	r3,12(sp)
 80053f0:	00800084 	movi	r2,2
 80053f4:	10c00a16 	blt	r2,r3,8005420 <_dtoa_r+0x16a4>
 80053f8:	d9000c17 	ldw	r4,48(sp)
 80053fc:	003e8306 	br	8004e0c <_dtoa_r+0x1090>
 8005400:	04400084 	movi	r17,2
 8005404:	003b7306 	br	80041d4 <_dtoa_r+0x458>
 8005408:	d9801217 	ldw	r6,72(sp)
 800540c:	d9800515 	stw	r6,20(sp)
 8005410:	003cb606 	br	80046ec <_dtoa_r+0x970>
 8005414:	d9001217 	ldw	r4,72(sp)
 8005418:	d9000515 	stw	r4,20(sp)
 800541c:	003c0506 	br	8004434 <_dtoa_r+0x6b8>
 8005420:	d9800c17 	ldw	r6,48(sp)
 8005424:	d9800615 	stw	r6,24(sp)
 8005428:	003e8306 	br	8004e38 <_dtoa_r+0x10bc>
 800542c:	d9800317 	ldw	r6,12(sp)
 8005430:	00800084 	movi	r2,2
 8005434:	11800216 	blt	r2,r6,8005440 <_dtoa_r+0x16c4>
 8005438:	d8800c17 	ldw	r2,48(sp)
 800543c:	003da606 	br	8004ad8 <_dtoa_r+0xd5c>
 8005440:	d8800c17 	ldw	r2,48(sp)
 8005444:	d8800615 	stw	r2,24(sp)
 8005448:	003e7b06 	br	8004e38 <_dtoa_r+0x10bc>
 800544c:	05000044 	movi	r20,1
 8005450:	003b0506 	br	8004068 <_dtoa_r+0x2ec>
 8005454:	8009883a 	mov	r4,r16
 8005458:	80001115 	stw	zero,68(r16)
 800545c:	000b883a 	mov	r5,zero
 8005460:	8006c6c0 	call	8006c6c <_Balloc>
 8005464:	d8800715 	stw	r2,28(sp)
 8005468:	d8c00717 	ldw	r3,28(sp)
 800546c:	00bfffc4 	movi	r2,-1
 8005470:	01000044 	movi	r4,1
 8005474:	d8800c15 	stw	r2,48(sp)
 8005478:	80c01015 	stw	r3,64(r16)
 800547c:	d9000b15 	stw	r4,44(sp)
 8005480:	d8800615 	stw	r2,24(sp)
 8005484:	d8002215 	stw	zero,136(sp)
 8005488:	003c1906 	br	80044f0 <_dtoa_r+0x774>
 800548c:	193d2926 	beq	r3,r4,8004934 <_dtoa_r+0xbb8>
 8005490:	00c00f04 	movi	r3,60
 8005494:	1885c83a 	sub	r2,r3,r2
 8005498:	003d7b06 	br	8004a88 <_dtoa_r+0xd0c>
 800549c:	000b883a 	mov	r5,zero
 80054a0:	003b1006 	br	80040e4 <_dtoa_r+0x368>

080054a4 <__sflush_r>:
 80054a4:	2880030b 	ldhu	r2,12(r5)
 80054a8:	defffb04 	addi	sp,sp,-20
 80054ac:	dcc00315 	stw	r19,12(sp)
 80054b0:	dc400115 	stw	r17,4(sp)
 80054b4:	dfc00415 	stw	ra,16(sp)
 80054b8:	dc800215 	stw	r18,8(sp)
 80054bc:	dc000015 	stw	r16,0(sp)
 80054c0:	10c0020c 	andi	r3,r2,8
 80054c4:	2823883a 	mov	r17,r5
 80054c8:	2027883a 	mov	r19,r4
 80054cc:	1800311e 	bne	r3,zero,8005594 <__sflush_r+0xf0>
 80054d0:	28c00117 	ldw	r3,4(r5)
 80054d4:	10820014 	ori	r2,r2,2048
 80054d8:	2880030d 	sth	r2,12(r5)
 80054dc:	00c04b0e 	bge	zero,r3,800560c <__sflush_r+0x168>
 80054e0:	8a000a17 	ldw	r8,40(r17)
 80054e4:	40002326 	beq	r8,zero,8005574 <__sflush_r+0xd0>
 80054e8:	9c000017 	ldw	r16,0(r19)
 80054ec:	10c4000c 	andi	r3,r2,4096
 80054f0:	98000015 	stw	zero,0(r19)
 80054f4:	18004826 	beq	r3,zero,8005618 <__sflush_r+0x174>
 80054f8:	89801417 	ldw	r6,80(r17)
 80054fc:	10c0010c 	andi	r3,r2,4
 8005500:	18000626 	beq	r3,zero,800551c <__sflush_r+0x78>
 8005504:	88c00117 	ldw	r3,4(r17)
 8005508:	88800c17 	ldw	r2,48(r17)
 800550c:	30cdc83a 	sub	r6,r6,r3
 8005510:	10000226 	beq	r2,zero,800551c <__sflush_r+0x78>
 8005514:	88800f17 	ldw	r2,60(r17)
 8005518:	308dc83a 	sub	r6,r6,r2
 800551c:	89400717 	ldw	r5,28(r17)
 8005520:	9809883a 	mov	r4,r19
 8005524:	000f883a 	mov	r7,zero
 8005528:	403ee83a 	callr	r8
 800552c:	00ffffc4 	movi	r3,-1
 8005530:	10c04426 	beq	r2,r3,8005644 <__sflush_r+0x1a0>
 8005534:	88c0030b 	ldhu	r3,12(r17)
 8005538:	89000417 	ldw	r4,16(r17)
 800553c:	88000115 	stw	zero,4(r17)
 8005540:	197dffcc 	andi	r5,r3,63487
 8005544:	8940030d 	sth	r5,12(r17)
 8005548:	89000015 	stw	r4,0(r17)
 800554c:	18c4000c 	andi	r3,r3,4096
 8005550:	18002c1e 	bne	r3,zero,8005604 <__sflush_r+0x160>
 8005554:	89400c17 	ldw	r5,48(r17)
 8005558:	9c000015 	stw	r16,0(r19)
 800555c:	28000526 	beq	r5,zero,8005574 <__sflush_r+0xd0>
 8005560:	88801004 	addi	r2,r17,64
 8005564:	28800226 	beq	r5,r2,8005570 <__sflush_r+0xcc>
 8005568:	9809883a 	mov	r4,r19
 800556c:	8005bfc0 	call	8005bfc <_free_r>
 8005570:	88000c15 	stw	zero,48(r17)
 8005574:	0005883a 	mov	r2,zero
 8005578:	dfc00417 	ldw	ra,16(sp)
 800557c:	dcc00317 	ldw	r19,12(sp)
 8005580:	dc800217 	ldw	r18,8(sp)
 8005584:	dc400117 	ldw	r17,4(sp)
 8005588:	dc000017 	ldw	r16,0(sp)
 800558c:	dec00504 	addi	sp,sp,20
 8005590:	f800283a 	ret
 8005594:	2c800417 	ldw	r18,16(r5)
 8005598:	903ff626 	beq	r18,zero,8005574 <__sflush_r+0xd0>
 800559c:	2c000017 	ldw	r16,0(r5)
 80055a0:	108000cc 	andi	r2,r2,3
 80055a4:	2c800015 	stw	r18,0(r5)
 80055a8:	84a1c83a 	sub	r16,r16,r18
 80055ac:	1000131e 	bne	r2,zero,80055fc <__sflush_r+0x158>
 80055b0:	28800517 	ldw	r2,20(r5)
 80055b4:	88800215 	stw	r2,8(r17)
 80055b8:	04000316 	blt	zero,r16,80055c8 <__sflush_r+0x124>
 80055bc:	003fed06 	br	8005574 <__sflush_r+0xd0>
 80055c0:	90a5883a 	add	r18,r18,r2
 80055c4:	043feb0e 	bge	zero,r16,8005574 <__sflush_r+0xd0>
 80055c8:	88800917 	ldw	r2,36(r17)
 80055cc:	89400717 	ldw	r5,28(r17)
 80055d0:	800f883a 	mov	r7,r16
 80055d4:	900d883a 	mov	r6,r18
 80055d8:	9809883a 	mov	r4,r19
 80055dc:	103ee83a 	callr	r2
 80055e0:	80a1c83a 	sub	r16,r16,r2
 80055e4:	00bff616 	blt	zero,r2,80055c0 <__sflush_r+0x11c>
 80055e8:	88c0030b 	ldhu	r3,12(r17)
 80055ec:	00bfffc4 	movi	r2,-1
 80055f0:	18c01014 	ori	r3,r3,64
 80055f4:	88c0030d 	sth	r3,12(r17)
 80055f8:	003fdf06 	br	8005578 <__sflush_r+0xd4>
 80055fc:	0005883a 	mov	r2,zero
 8005600:	003fec06 	br	80055b4 <__sflush_r+0x110>
 8005604:	88801415 	stw	r2,80(r17)
 8005608:	003fd206 	br	8005554 <__sflush_r+0xb0>
 800560c:	28c00f17 	ldw	r3,60(r5)
 8005610:	00ffb316 	blt	zero,r3,80054e0 <__sflush_r+0x3c>
 8005614:	003fd706 	br	8005574 <__sflush_r+0xd0>
 8005618:	89400717 	ldw	r5,28(r17)
 800561c:	000d883a 	mov	r6,zero
 8005620:	9809883a 	mov	r4,r19
 8005624:	01c00044 	movi	r7,1
 8005628:	403ee83a 	callr	r8
 800562c:	100d883a 	mov	r6,r2
 8005630:	00bfffc4 	movi	r2,-1
 8005634:	30801426 	beq	r6,r2,8005688 <__sflush_r+0x1e4>
 8005638:	8880030b 	ldhu	r2,12(r17)
 800563c:	8a000a17 	ldw	r8,40(r17)
 8005640:	003fae06 	br	80054fc <__sflush_r+0x58>
 8005644:	98c00017 	ldw	r3,0(r19)
 8005648:	183fba26 	beq	r3,zero,8005534 <__sflush_r+0x90>
 800564c:	01000744 	movi	r4,29
 8005650:	19000626 	beq	r3,r4,800566c <__sflush_r+0x1c8>
 8005654:	01000584 	movi	r4,22
 8005658:	19000426 	beq	r3,r4,800566c <__sflush_r+0x1c8>
 800565c:	88c0030b 	ldhu	r3,12(r17)
 8005660:	18c01014 	ori	r3,r3,64
 8005664:	88c0030d 	sth	r3,12(r17)
 8005668:	003fc306 	br	8005578 <__sflush_r+0xd4>
 800566c:	8880030b 	ldhu	r2,12(r17)
 8005670:	88c00417 	ldw	r3,16(r17)
 8005674:	88000115 	stw	zero,4(r17)
 8005678:	10bdffcc 	andi	r2,r2,63487
 800567c:	8880030d 	sth	r2,12(r17)
 8005680:	88c00015 	stw	r3,0(r17)
 8005684:	003fb306 	br	8005554 <__sflush_r+0xb0>
 8005688:	98800017 	ldw	r2,0(r19)
 800568c:	103fea26 	beq	r2,zero,8005638 <__sflush_r+0x194>
 8005690:	00c00744 	movi	r3,29
 8005694:	10c00226 	beq	r2,r3,80056a0 <__sflush_r+0x1fc>
 8005698:	00c00584 	movi	r3,22
 800569c:	10ffd21e 	bne	r2,r3,80055e8 <__sflush_r+0x144>
 80056a0:	9c000015 	stw	r16,0(r19)
 80056a4:	0005883a 	mov	r2,zero
 80056a8:	003fb306 	br	8005578 <__sflush_r+0xd4>

080056ac <_fflush_r>:
 80056ac:	defffd04 	addi	sp,sp,-12
 80056b0:	dc000115 	stw	r16,4(sp)
 80056b4:	dfc00215 	stw	ra,8(sp)
 80056b8:	2021883a 	mov	r16,r4
 80056bc:	20000226 	beq	r4,zero,80056c8 <_fflush_r+0x1c>
 80056c0:	20800e17 	ldw	r2,56(r4)
 80056c4:	10000c26 	beq	r2,zero,80056f8 <_fflush_r+0x4c>
 80056c8:	2880030f 	ldh	r2,12(r5)
 80056cc:	1000051e 	bne	r2,zero,80056e4 <_fflush_r+0x38>
 80056d0:	0005883a 	mov	r2,zero
 80056d4:	dfc00217 	ldw	ra,8(sp)
 80056d8:	dc000117 	ldw	r16,4(sp)
 80056dc:	dec00304 	addi	sp,sp,12
 80056e0:	f800283a 	ret
 80056e4:	8009883a 	mov	r4,r16
 80056e8:	dfc00217 	ldw	ra,8(sp)
 80056ec:	dc000117 	ldw	r16,4(sp)
 80056f0:	dec00304 	addi	sp,sp,12
 80056f4:	80054a41 	jmpi	80054a4 <__sflush_r>
 80056f8:	d9400015 	stw	r5,0(sp)
 80056fc:	8005a880 	call	8005a88 <__sinit>
 8005700:	d9400017 	ldw	r5,0(sp)
 8005704:	003ff006 	br	80056c8 <_fflush_r+0x1c>

08005708 <fflush>:
 8005708:	20000526 	beq	r4,zero,8005720 <fflush+0x18>
 800570c:	008200b4 	movhi	r2,2050
 8005710:	10913b04 	addi	r2,r2,17644
 8005714:	200b883a 	mov	r5,r4
 8005718:	11000017 	ldw	r4,0(r2)
 800571c:	80056ac1 	jmpi	80056ac <_fflush_r>
 8005720:	008200b4 	movhi	r2,2050
 8005724:	10913a04 	addi	r2,r2,17640
 8005728:	11000017 	ldw	r4,0(r2)
 800572c:	01420034 	movhi	r5,2048
 8005730:	2955ab04 	addi	r5,r5,22188
 8005734:	80064701 	jmpi	8006470 <_fwalk_reent>

08005738 <__fp_lock>:
 8005738:	0005883a 	mov	r2,zero
 800573c:	f800283a 	ret

08005740 <__fp_unlock>:
 8005740:	0005883a 	mov	r2,zero
 8005744:	f800283a 	ret

08005748 <_cleanup_r>:
 8005748:	01420074 	movhi	r5,2049
 800574c:	29665704 	addi	r5,r5,-26276
 8005750:	80064701 	jmpi	8006470 <_fwalk_reent>

08005754 <__sinit.part.1>:
 8005754:	defff704 	addi	sp,sp,-36
 8005758:	00c20034 	movhi	r3,2048
 800575c:	dfc00815 	stw	ra,32(sp)
 8005760:	ddc00715 	stw	r23,28(sp)
 8005764:	dd800615 	stw	r22,24(sp)
 8005768:	dd400515 	stw	r21,20(sp)
 800576c:	dd000415 	stw	r20,16(sp)
 8005770:	dcc00315 	stw	r19,12(sp)
 8005774:	dc800215 	stw	r18,8(sp)
 8005778:	dc400115 	stw	r17,4(sp)
 800577c:	dc000015 	stw	r16,0(sp)
 8005780:	18d5d204 	addi	r3,r3,22344
 8005784:	24000117 	ldw	r16,4(r4)
 8005788:	20c00f15 	stw	r3,60(r4)
 800578c:	2080bb04 	addi	r2,r4,748
 8005790:	00c000c4 	movi	r3,3
 8005794:	20c0b915 	stw	r3,740(r4)
 8005798:	2080ba15 	stw	r2,744(r4)
 800579c:	2000b815 	stw	zero,736(r4)
 80057a0:	05c00204 	movi	r23,8
 80057a4:	00800104 	movi	r2,4
 80057a8:	2025883a 	mov	r18,r4
 80057ac:	b80d883a 	mov	r6,r23
 80057b0:	81001704 	addi	r4,r16,92
 80057b4:	000b883a 	mov	r5,zero
 80057b8:	80000015 	stw	zero,0(r16)
 80057bc:	80000115 	stw	zero,4(r16)
 80057c0:	80000215 	stw	zero,8(r16)
 80057c4:	8080030d 	sth	r2,12(r16)
 80057c8:	80001915 	stw	zero,100(r16)
 80057cc:	8000038d 	sth	zero,14(r16)
 80057d0:	80000415 	stw	zero,16(r16)
 80057d4:	80000515 	stw	zero,20(r16)
 80057d8:	80000615 	stw	zero,24(r16)
 80057dc:	8006b480 	call	8006b48 <memset>
 80057e0:	05820074 	movhi	r22,2049
 80057e4:	94400217 	ldw	r17,8(r18)
 80057e8:	05420074 	movhi	r21,2049
 80057ec:	05020074 	movhi	r20,2049
 80057f0:	04c20074 	movhi	r19,2049
 80057f4:	b5a07a04 	addi	r22,r22,-32280
 80057f8:	ad609104 	addi	r21,r21,-32188
 80057fc:	a520b004 	addi	r20,r20,-32064
 8005800:	9ce0c704 	addi	r19,r19,-31972
 8005804:	85800815 	stw	r22,32(r16)
 8005808:	85400915 	stw	r21,36(r16)
 800580c:	85000a15 	stw	r20,40(r16)
 8005810:	84c00b15 	stw	r19,44(r16)
 8005814:	84000715 	stw	r16,28(r16)
 8005818:	00800284 	movi	r2,10
 800581c:	8880030d 	sth	r2,12(r17)
 8005820:	00800044 	movi	r2,1
 8005824:	89001704 	addi	r4,r17,92
 8005828:	b80d883a 	mov	r6,r23
 800582c:	000b883a 	mov	r5,zero
 8005830:	88000015 	stw	zero,0(r17)
 8005834:	88000115 	stw	zero,4(r17)
 8005838:	88000215 	stw	zero,8(r17)
 800583c:	88001915 	stw	zero,100(r17)
 8005840:	8880038d 	sth	r2,14(r17)
 8005844:	88000415 	stw	zero,16(r17)
 8005848:	88000515 	stw	zero,20(r17)
 800584c:	88000615 	stw	zero,24(r17)
 8005850:	8006b480 	call	8006b48 <memset>
 8005854:	94000317 	ldw	r16,12(r18)
 8005858:	00800484 	movi	r2,18
 800585c:	8c400715 	stw	r17,28(r17)
 8005860:	8d800815 	stw	r22,32(r17)
 8005864:	8d400915 	stw	r21,36(r17)
 8005868:	8d000a15 	stw	r20,40(r17)
 800586c:	8cc00b15 	stw	r19,44(r17)
 8005870:	8080030d 	sth	r2,12(r16)
 8005874:	00800084 	movi	r2,2
 8005878:	80000015 	stw	zero,0(r16)
 800587c:	80000115 	stw	zero,4(r16)
 8005880:	80000215 	stw	zero,8(r16)
 8005884:	80001915 	stw	zero,100(r16)
 8005888:	8080038d 	sth	r2,14(r16)
 800588c:	80000415 	stw	zero,16(r16)
 8005890:	80000515 	stw	zero,20(r16)
 8005894:	80000615 	stw	zero,24(r16)
 8005898:	81001704 	addi	r4,r16,92
 800589c:	000b883a 	mov	r5,zero
 80058a0:	b80d883a 	mov	r6,r23
 80058a4:	8006b480 	call	8006b48 <memset>
 80058a8:	00800044 	movi	r2,1
 80058ac:	84000715 	stw	r16,28(r16)
 80058b0:	85800815 	stw	r22,32(r16)
 80058b4:	85400915 	stw	r21,36(r16)
 80058b8:	85000a15 	stw	r20,40(r16)
 80058bc:	84c00b15 	stw	r19,44(r16)
 80058c0:	90800e15 	stw	r2,56(r18)
 80058c4:	dfc00817 	ldw	ra,32(sp)
 80058c8:	ddc00717 	ldw	r23,28(sp)
 80058cc:	dd800617 	ldw	r22,24(sp)
 80058d0:	dd400517 	ldw	r21,20(sp)
 80058d4:	dd000417 	ldw	r20,16(sp)
 80058d8:	dcc00317 	ldw	r19,12(sp)
 80058dc:	dc800217 	ldw	r18,8(sp)
 80058e0:	dc400117 	ldw	r17,4(sp)
 80058e4:	dc000017 	ldw	r16,0(sp)
 80058e8:	dec00904 	addi	sp,sp,36
 80058ec:	f800283a 	ret

080058f0 <__sfmoreglue>:
 80058f0:	defffc04 	addi	sp,sp,-16
 80058f4:	dc400115 	stw	r17,4(sp)
 80058f8:	2c7fffc4 	addi	r17,r5,-1
 80058fc:	8c401a24 	muli	r17,r17,104
 8005900:	dc800215 	stw	r18,8(sp)
 8005904:	2825883a 	mov	r18,r5
 8005908:	89401d04 	addi	r5,r17,116
 800590c:	dc000015 	stw	r16,0(sp)
 8005910:	dfc00315 	stw	ra,12(sp)
 8005914:	8000f9c0 	call	8000f9c <_malloc_r>
 8005918:	1021883a 	mov	r16,r2
 800591c:	10000726 	beq	r2,zero,800593c <__sfmoreglue+0x4c>
 8005920:	11000304 	addi	r4,r2,12
 8005924:	10000015 	stw	zero,0(r2)
 8005928:	14800115 	stw	r18,4(r2)
 800592c:	11000215 	stw	r4,8(r2)
 8005930:	000b883a 	mov	r5,zero
 8005934:	89801a04 	addi	r6,r17,104
 8005938:	8006b480 	call	8006b48 <memset>
 800593c:	8005883a 	mov	r2,r16
 8005940:	dfc00317 	ldw	ra,12(sp)
 8005944:	dc800217 	ldw	r18,8(sp)
 8005948:	dc400117 	ldw	r17,4(sp)
 800594c:	dc000017 	ldw	r16,0(sp)
 8005950:	dec00404 	addi	sp,sp,16
 8005954:	f800283a 	ret

08005958 <__sfp>:
 8005958:	008200b4 	movhi	r2,2050
 800595c:	defffb04 	addi	sp,sp,-20
 8005960:	10913a04 	addi	r2,r2,17640
 8005964:	dc800215 	stw	r18,8(sp)
 8005968:	14800017 	ldw	r18,0(r2)
 800596c:	dcc00315 	stw	r19,12(sp)
 8005970:	dfc00415 	stw	ra,16(sp)
 8005974:	90800e17 	ldw	r2,56(r18)
 8005978:	dc400115 	stw	r17,4(sp)
 800597c:	dc000015 	stw	r16,0(sp)
 8005980:	2027883a 	mov	r19,r4
 8005984:	1000021e 	bne	r2,zero,8005990 <__sfp+0x38>
 8005988:	9009883a 	mov	r4,r18
 800598c:	80057540 	call	8005754 <__sinit.part.1>
 8005990:	9480b804 	addi	r18,r18,736
 8005994:	047fffc4 	movi	r17,-1
 8005998:	91400117 	ldw	r5,4(r18)
 800599c:	94000217 	ldw	r16,8(r18)
 80059a0:	297fffc4 	addi	r5,r5,-1
 80059a4:	28000a16 	blt	r5,zero,80059d0 <__sfp+0x78>
 80059a8:	8080030f 	ldh	r2,12(r16)
 80059ac:	10000c26 	beq	r2,zero,80059e0 <__sfp+0x88>
 80059b0:	80c01d04 	addi	r3,r16,116
 80059b4:	00000206 	br	80059c0 <__sfp+0x68>
 80059b8:	18bfe60f 	ldh	r2,-104(r3)
 80059bc:	10000826 	beq	r2,zero,80059e0 <__sfp+0x88>
 80059c0:	297fffc4 	addi	r5,r5,-1
 80059c4:	1c3ffd04 	addi	r16,r3,-12
 80059c8:	18c01a04 	addi	r3,r3,104
 80059cc:	2c7ffa1e 	bne	r5,r17,80059b8 <__sfp+0x60>
 80059d0:	90800017 	ldw	r2,0(r18)
 80059d4:	10001d26 	beq	r2,zero,8005a4c <__sfp+0xf4>
 80059d8:	1025883a 	mov	r18,r2
 80059dc:	003fee06 	br	8005998 <__sfp+0x40>
 80059e0:	00bfffc4 	movi	r2,-1
 80059e4:	8080038d 	sth	r2,14(r16)
 80059e8:	00800044 	movi	r2,1
 80059ec:	8080030d 	sth	r2,12(r16)
 80059f0:	80001915 	stw	zero,100(r16)
 80059f4:	80000015 	stw	zero,0(r16)
 80059f8:	80000215 	stw	zero,8(r16)
 80059fc:	80000115 	stw	zero,4(r16)
 8005a00:	80000415 	stw	zero,16(r16)
 8005a04:	80000515 	stw	zero,20(r16)
 8005a08:	80000615 	stw	zero,24(r16)
 8005a0c:	81001704 	addi	r4,r16,92
 8005a10:	000b883a 	mov	r5,zero
 8005a14:	01800204 	movi	r6,8
 8005a18:	8006b480 	call	8006b48 <memset>
 8005a1c:	8005883a 	mov	r2,r16
 8005a20:	80000c15 	stw	zero,48(r16)
 8005a24:	80000d15 	stw	zero,52(r16)
 8005a28:	80001115 	stw	zero,68(r16)
 8005a2c:	80001215 	stw	zero,72(r16)
 8005a30:	dfc00417 	ldw	ra,16(sp)
 8005a34:	dcc00317 	ldw	r19,12(sp)
 8005a38:	dc800217 	ldw	r18,8(sp)
 8005a3c:	dc400117 	ldw	r17,4(sp)
 8005a40:	dc000017 	ldw	r16,0(sp)
 8005a44:	dec00504 	addi	sp,sp,20
 8005a48:	f800283a 	ret
 8005a4c:	9809883a 	mov	r4,r19
 8005a50:	01400104 	movi	r5,4
 8005a54:	80058f00 	call	80058f0 <__sfmoreglue>
 8005a58:	90800015 	stw	r2,0(r18)
 8005a5c:	103fde1e 	bne	r2,zero,80059d8 <__sfp+0x80>
 8005a60:	00800304 	movi	r2,12
 8005a64:	98800015 	stw	r2,0(r19)
 8005a68:	0005883a 	mov	r2,zero
 8005a6c:	003ff006 	br	8005a30 <__sfp+0xd8>

08005a70 <_cleanup>:
 8005a70:	008200b4 	movhi	r2,2050
 8005a74:	10913a04 	addi	r2,r2,17640
 8005a78:	11000017 	ldw	r4,0(r2)
 8005a7c:	01420074 	movhi	r5,2049
 8005a80:	29665704 	addi	r5,r5,-26276
 8005a84:	80064701 	jmpi	8006470 <_fwalk_reent>

08005a88 <__sinit>:
 8005a88:	20800e17 	ldw	r2,56(r4)
 8005a8c:	10000126 	beq	r2,zero,8005a94 <__sinit+0xc>
 8005a90:	f800283a 	ret
 8005a94:	80057541 	jmpi	8005754 <__sinit.part.1>

08005a98 <__sfp_lock_acquire>:
 8005a98:	f800283a 	ret

08005a9c <__sfp_lock_release>:
 8005a9c:	f800283a 	ret

08005aa0 <__sinit_lock_acquire>:
 8005aa0:	f800283a 	ret

08005aa4 <__sinit_lock_release>:
 8005aa4:	f800283a 	ret

08005aa8 <__fp_lock_all>:
 8005aa8:	008200b4 	movhi	r2,2050
 8005aac:	10913b04 	addi	r2,r2,17644
 8005ab0:	11000017 	ldw	r4,0(r2)
 8005ab4:	01420034 	movhi	r5,2048
 8005ab8:	2955ce04 	addi	r5,r5,22328
 8005abc:	80063ac1 	jmpi	80063ac <_fwalk>

08005ac0 <__fp_unlock_all>:
 8005ac0:	008200b4 	movhi	r2,2050
 8005ac4:	10913b04 	addi	r2,r2,17644
 8005ac8:	11000017 	ldw	r4,0(r2)
 8005acc:	01420034 	movhi	r5,2048
 8005ad0:	2955d004 	addi	r5,r5,22336
 8005ad4:	80063ac1 	jmpi	80063ac <_fwalk>

08005ad8 <_malloc_trim_r>:
 8005ad8:	defffb04 	addi	sp,sp,-20
 8005adc:	dcc00315 	stw	r19,12(sp)
 8005ae0:	04c200b4 	movhi	r19,2050
 8005ae4:	dc800215 	stw	r18,8(sp)
 8005ae8:	dc400115 	stw	r17,4(sp)
 8005aec:	dc000015 	stw	r16,0(sp)
 8005af0:	dfc00415 	stw	ra,16(sp)
 8005af4:	2821883a 	mov	r16,r5
 8005af8:	9cca5304 	addi	r19,r19,10572
 8005afc:	2025883a 	mov	r18,r4
 8005b00:	800de380 	call	800de38 <__malloc_lock>
 8005b04:	98800217 	ldw	r2,8(r19)
 8005b08:	14400117 	ldw	r17,4(r2)
 8005b0c:	00bfff04 	movi	r2,-4
 8005b10:	88a2703a 	and	r17,r17,r2
 8005b14:	8c21c83a 	sub	r16,r17,r16
 8005b18:	8403fbc4 	addi	r16,r16,4079
 8005b1c:	8020d33a 	srli	r16,r16,12
 8005b20:	0083ffc4 	movi	r2,4095
 8005b24:	843fffc4 	addi	r16,r16,-1
 8005b28:	8020933a 	slli	r16,r16,12
 8005b2c:	1400060e 	bge	r2,r16,8005b48 <_malloc_trim_r+0x70>
 8005b30:	9009883a 	mov	r4,r18
 8005b34:	000b883a 	mov	r5,zero
 8005b38:	80018680 	call	8001868 <_sbrk_r>
 8005b3c:	98c00217 	ldw	r3,8(r19)
 8005b40:	1c47883a 	add	r3,r3,r17
 8005b44:	10c00a26 	beq	r2,r3,8005b70 <_malloc_trim_r+0x98>
 8005b48:	9009883a 	mov	r4,r18
 8005b4c:	800df580 	call	800df58 <__malloc_unlock>
 8005b50:	0005883a 	mov	r2,zero
 8005b54:	dfc00417 	ldw	ra,16(sp)
 8005b58:	dcc00317 	ldw	r19,12(sp)
 8005b5c:	dc800217 	ldw	r18,8(sp)
 8005b60:	dc400117 	ldw	r17,4(sp)
 8005b64:	dc000017 	ldw	r16,0(sp)
 8005b68:	dec00504 	addi	sp,sp,20
 8005b6c:	f800283a 	ret
 8005b70:	9009883a 	mov	r4,r18
 8005b74:	040bc83a 	sub	r5,zero,r16
 8005b78:	80018680 	call	8001868 <_sbrk_r>
 8005b7c:	00ffffc4 	movi	r3,-1
 8005b80:	10c00d26 	beq	r2,r3,8005bb8 <_malloc_trim_r+0xe0>
 8005b84:	00c200f4 	movhi	r3,2051
 8005b88:	18cd5104 	addi	r3,r3,13636
 8005b8c:	18800017 	ldw	r2,0(r3)
 8005b90:	99000217 	ldw	r4,8(r19)
 8005b94:	8c23c83a 	sub	r17,r17,r16
 8005b98:	8c400054 	ori	r17,r17,1
 8005b9c:	1421c83a 	sub	r16,r2,r16
 8005ba0:	24400115 	stw	r17,4(r4)
 8005ba4:	9009883a 	mov	r4,r18
 8005ba8:	1c000015 	stw	r16,0(r3)
 8005bac:	800df580 	call	800df58 <__malloc_unlock>
 8005bb0:	00800044 	movi	r2,1
 8005bb4:	003fe706 	br	8005b54 <_malloc_trim_r+0x7c>
 8005bb8:	9009883a 	mov	r4,r18
 8005bbc:	000b883a 	mov	r5,zero
 8005bc0:	80018680 	call	8001868 <_sbrk_r>
 8005bc4:	99000217 	ldw	r4,8(r19)
 8005bc8:	014003c4 	movi	r5,15
 8005bcc:	1107c83a 	sub	r3,r2,r4
 8005bd0:	28ffdd0e 	bge	r5,r3,8005b48 <_malloc_trim_r+0x70>
 8005bd4:	014200b4 	movhi	r5,2050
 8005bd8:	29513804 	addi	r5,r5,17632
 8005bdc:	29400017 	ldw	r5,0(r5)
 8005be0:	18c00054 	ori	r3,r3,1
 8005be4:	20c00115 	stw	r3,4(r4)
 8005be8:	00c200f4 	movhi	r3,2051
 8005bec:	1145c83a 	sub	r2,r2,r5
 8005bf0:	18cd5104 	addi	r3,r3,13636
 8005bf4:	18800015 	stw	r2,0(r3)
 8005bf8:	003fd306 	br	8005b48 <_malloc_trim_r+0x70>

08005bfc <_free_r>:
 8005bfc:	28004c26 	beq	r5,zero,8005d30 <_free_r+0x134>
 8005c00:	defffd04 	addi	sp,sp,-12
 8005c04:	dc400115 	stw	r17,4(sp)
 8005c08:	dc000015 	stw	r16,0(sp)
 8005c0c:	2023883a 	mov	r17,r4
 8005c10:	2821883a 	mov	r16,r5
 8005c14:	dfc00215 	stw	ra,8(sp)
 8005c18:	800de380 	call	800de38 <__malloc_lock>
 8005c1c:	813fff17 	ldw	r4,-4(r16)
 8005c20:	00bfff84 	movi	r2,-2
 8005c24:	024200b4 	movhi	r9,2050
 8005c28:	81bffe04 	addi	r6,r16,-8
 8005c2c:	2084703a 	and	r2,r4,r2
 8005c30:	4a4a5304 	addi	r9,r9,10572
 8005c34:	308b883a 	add	r5,r6,r2
 8005c38:	2a000117 	ldw	r8,4(r5)
 8005c3c:	49c00217 	ldw	r7,8(r9)
 8005c40:	00ffff04 	movi	r3,-4
 8005c44:	40c6703a 	and	r3,r8,r3
 8005c48:	39405326 	beq	r7,r5,8005d98 <_free_r+0x19c>
 8005c4c:	28c00115 	stw	r3,4(r5)
 8005c50:	2100004c 	andi	r4,r4,1
 8005c54:	2000091e 	bne	r4,zero,8005c7c <_free_r+0x80>
 8005c58:	81fffe17 	ldw	r7,-8(r16)
 8005c5c:	4a000204 	addi	r8,r9,8
 8005c60:	31cdc83a 	sub	r6,r6,r7
 8005c64:	31000217 	ldw	r4,8(r6)
 8005c68:	11c5883a 	add	r2,r2,r7
 8005c6c:	22006126 	beq	r4,r8,8005df4 <_free_r+0x1f8>
 8005c70:	31c00317 	ldw	r7,12(r6)
 8005c74:	21c00315 	stw	r7,12(r4)
 8005c78:	39000215 	stw	r4,8(r7)
 8005c7c:	28c9883a 	add	r4,r5,r3
 8005c80:	21c00117 	ldw	r7,4(r4)
 8005c84:	39c0004c 	andi	r7,r7,1
 8005c88:	38000d1e 	bne	r7,zero,8005cc0 <_free_r+0xc4>
 8005c8c:	29000217 	ldw	r4,8(r5)
 8005c90:	10c5883a 	add	r2,r2,r3
 8005c94:	00c200b4 	movhi	r3,2050
 8005c98:	18ca5504 	addi	r3,r3,10580
 8005c9c:	20c07526 	beq	r4,r3,8005e74 <_free_r+0x278>
 8005ca0:	29c00317 	ldw	r7,12(r5)
 8005ca4:	11400054 	ori	r5,r2,1
 8005ca8:	3087883a 	add	r3,r6,r2
 8005cac:	21c00315 	stw	r7,12(r4)
 8005cb0:	39000215 	stw	r4,8(r7)
 8005cb4:	31400115 	stw	r5,4(r6)
 8005cb8:	18800015 	stw	r2,0(r3)
 8005cbc:	00000406 	br	8005cd0 <_free_r+0xd4>
 8005cc0:	10c00054 	ori	r3,r2,1
 8005cc4:	30c00115 	stw	r3,4(r6)
 8005cc8:	3087883a 	add	r3,r6,r2
 8005ccc:	18800015 	stw	r2,0(r3)
 8005cd0:	00c07fc4 	movi	r3,511
 8005cd4:	18801736 	bltu	r3,r2,8005d34 <_free_r+0x138>
 8005cd8:	1004d0fa 	srli	r2,r2,3
 8005cdc:	01400044 	movi	r5,1
 8005ce0:	49000117 	ldw	r4,4(r9)
 8005ce4:	1087883a 	add	r3,r2,r2
 8005ce8:	18c7883a 	add	r3,r3,r3
 8005cec:	1005d0ba 	srai	r2,r2,2
 8005cf0:	18c7883a 	add	r3,r3,r3
 8005cf4:	1a47883a 	add	r3,r3,r9
 8005cf8:	19c00217 	ldw	r7,8(r3)
 8005cfc:	2884983a 	sll	r2,r5,r2
 8005d00:	30c00315 	stw	r3,12(r6)
 8005d04:	31c00215 	stw	r7,8(r6)
 8005d08:	1104b03a 	or	r2,r2,r4
 8005d0c:	19800215 	stw	r6,8(r3)
 8005d10:	48800115 	stw	r2,4(r9)
 8005d14:	39800315 	stw	r6,12(r7)
 8005d18:	8809883a 	mov	r4,r17
 8005d1c:	dfc00217 	ldw	ra,8(sp)
 8005d20:	dc400117 	ldw	r17,4(sp)
 8005d24:	dc000017 	ldw	r16,0(sp)
 8005d28:	dec00304 	addi	sp,sp,12
 8005d2c:	800df581 	jmpi	800df58 <__malloc_unlock>
 8005d30:	f800283a 	ret
 8005d34:	1006d27a 	srli	r3,r2,9
 8005d38:	01000104 	movi	r4,4
 8005d3c:	20c04036 	bltu	r4,r3,8005e40 <_free_r+0x244>
 8005d40:	1006d1ba 	srli	r3,r2,6
 8005d44:	19400e04 	addi	r5,r3,56
 8005d48:	2947883a 	add	r3,r5,r5
 8005d4c:	18c7883a 	add	r3,r3,r3
 8005d50:	18c7883a 	add	r3,r3,r3
 8005d54:	1a49883a 	add	r4,r3,r9
 8005d58:	20c00217 	ldw	r3,8(r4)
 8005d5c:	01c200b4 	movhi	r7,2050
 8005d60:	39ca5304 	addi	r7,r7,10572
 8005d64:	19003b26 	beq	r3,r4,8005e54 <_free_r+0x258>
 8005d68:	01ffff04 	movi	r7,-4
 8005d6c:	19400117 	ldw	r5,4(r3)
 8005d70:	29ca703a 	and	r5,r5,r7
 8005d74:	1140022e 	bgeu	r2,r5,8005d80 <_free_r+0x184>
 8005d78:	18c00217 	ldw	r3,8(r3)
 8005d7c:	20fffb1e 	bne	r4,r3,8005d6c <_free_r+0x170>
 8005d80:	18800317 	ldw	r2,12(r3)
 8005d84:	30800315 	stw	r2,12(r6)
 8005d88:	30c00215 	stw	r3,8(r6)
 8005d8c:	11800215 	stw	r6,8(r2)
 8005d90:	19800315 	stw	r6,12(r3)
 8005d94:	003fe006 	br	8005d18 <_free_r+0x11c>
 8005d98:	2100004c 	andi	r4,r4,1
 8005d9c:	1885883a 	add	r2,r3,r2
 8005da0:	2000071e 	bne	r4,zero,8005dc0 <_free_r+0x1c4>
 8005da4:	817ffe17 	ldw	r5,-8(r16)
 8005da8:	314dc83a 	sub	r6,r6,r5
 8005dac:	30c00317 	ldw	r3,12(r6)
 8005db0:	31000217 	ldw	r4,8(r6)
 8005db4:	1145883a 	add	r2,r2,r5
 8005db8:	20c00315 	stw	r3,12(r4)
 8005dbc:	19000215 	stw	r4,8(r3)
 8005dc0:	10c00054 	ori	r3,r2,1
 8005dc4:	30c00115 	stw	r3,4(r6)
 8005dc8:	00c200b4 	movhi	r3,2050
 8005dcc:	18d13904 	addi	r3,r3,17636
 8005dd0:	18c00017 	ldw	r3,0(r3)
 8005dd4:	49800215 	stw	r6,8(r9)
 8005dd8:	10ffcf36 	bltu	r2,r3,8005d18 <_free_r+0x11c>
 8005ddc:	008200f4 	movhi	r2,2051
 8005de0:	10bb2c04 	addi	r2,r2,-4944
 8005de4:	11400017 	ldw	r5,0(r2)
 8005de8:	8809883a 	mov	r4,r17
 8005dec:	8005ad80 	call	8005ad8 <_malloc_trim_r>
 8005df0:	003fc906 	br	8005d18 <_free_r+0x11c>
 8005df4:	28c9883a 	add	r4,r5,r3
 8005df8:	21000117 	ldw	r4,4(r4)
 8005dfc:	2100004c 	andi	r4,r4,1
 8005e00:	20000a1e 	bne	r4,zero,8005e2c <_free_r+0x230>
 8005e04:	29000317 	ldw	r4,12(r5)
 8005e08:	29400217 	ldw	r5,8(r5)
 8005e0c:	10c5883a 	add	r2,r2,r3
 8005e10:	10c00054 	ori	r3,r2,1
 8005e14:	29000315 	stw	r4,12(r5)
 8005e18:	21400215 	stw	r5,8(r4)
 8005e1c:	30c00115 	stw	r3,4(r6)
 8005e20:	308d883a 	add	r6,r6,r2
 8005e24:	30800015 	stw	r2,0(r6)
 8005e28:	003fbb06 	br	8005d18 <_free_r+0x11c>
 8005e2c:	10c00054 	ori	r3,r2,1
 8005e30:	30c00115 	stw	r3,4(r6)
 8005e34:	308d883a 	add	r6,r6,r2
 8005e38:	30800015 	stw	r2,0(r6)
 8005e3c:	003fb606 	br	8005d18 <_free_r+0x11c>
 8005e40:	01000504 	movi	r4,20
 8005e44:	20c01436 	bltu	r4,r3,8005e98 <_free_r+0x29c>
 8005e48:	194016c4 	addi	r5,r3,91
 8005e4c:	2947883a 	add	r3,r5,r5
 8005e50:	003fbe06 	br	8005d4c <_free_r+0x150>
 8005e54:	280bd0ba 	srai	r5,r5,2
 8005e58:	00800044 	movi	r2,1
 8005e5c:	39000117 	ldw	r4,4(r7)
 8005e60:	114a983a 	sll	r5,r2,r5
 8005e64:	1805883a 	mov	r2,r3
 8005e68:	2908b03a 	or	r4,r5,r4
 8005e6c:	39000115 	stw	r4,4(r7)
 8005e70:	003fc406 	br	8005d84 <_free_r+0x188>
 8005e74:	49800515 	stw	r6,20(r9)
 8005e78:	49800415 	stw	r6,16(r9)
 8005e7c:	10c00054 	ori	r3,r2,1
 8005e80:	31000315 	stw	r4,12(r6)
 8005e84:	31000215 	stw	r4,8(r6)
 8005e88:	30c00115 	stw	r3,4(r6)
 8005e8c:	308d883a 	add	r6,r6,r2
 8005e90:	30800015 	stw	r2,0(r6)
 8005e94:	003fa006 	br	8005d18 <_free_r+0x11c>
 8005e98:	01001504 	movi	r4,84
 8005e9c:	20c00436 	bltu	r4,r3,8005eb0 <_free_r+0x2b4>
 8005ea0:	1006d33a 	srli	r3,r2,12
 8005ea4:	19401b84 	addi	r5,r3,110
 8005ea8:	2947883a 	add	r3,r5,r5
 8005eac:	003fa706 	br	8005d4c <_free_r+0x150>
 8005eb0:	01005504 	movi	r4,340
 8005eb4:	20c00436 	bltu	r4,r3,8005ec8 <_free_r+0x2cc>
 8005eb8:	1006d3fa 	srli	r3,r2,15
 8005ebc:	19401dc4 	addi	r5,r3,119
 8005ec0:	2947883a 	add	r3,r5,r5
 8005ec4:	003fa106 	br	8005d4c <_free_r+0x150>
 8005ec8:	01015504 	movi	r4,1364
 8005ecc:	20c00436 	bltu	r4,r3,8005ee0 <_free_r+0x2e4>
 8005ed0:	1006d4ba 	srli	r3,r2,18
 8005ed4:	19401f04 	addi	r5,r3,124
 8005ed8:	2947883a 	add	r3,r5,r5
 8005edc:	003f9b06 	br	8005d4c <_free_r+0x150>
 8005ee0:	00c03f04 	movi	r3,252
 8005ee4:	01401f84 	movi	r5,126
 8005ee8:	003f9806 	br	8005d4c <_free_r+0x150>

08005eec <__sfvwrite_r>:
 8005eec:	30800217 	ldw	r2,8(r6)
 8005ef0:	10006726 	beq	r2,zero,8006090 <__sfvwrite_r+0x1a4>
 8005ef4:	defff404 	addi	sp,sp,-48
 8005ef8:	dd000615 	stw	r20,24(sp)
 8005efc:	2029883a 	mov	r20,r4
 8005f00:	2900030b 	ldhu	r4,12(r5)
 8005f04:	ddc00915 	stw	r23,36(sp)
 8005f08:	dc000215 	stw	r16,8(sp)
 8005f0c:	dfc00b15 	stw	ra,44(sp)
 8005f10:	df000a15 	stw	fp,40(sp)
 8005f14:	dd800815 	stw	r22,32(sp)
 8005f18:	dd400715 	stw	r21,28(sp)
 8005f1c:	dcc00515 	stw	r19,20(sp)
 8005f20:	dc800415 	stw	r18,16(sp)
 8005f24:	dc400315 	stw	r17,12(sp)
 8005f28:	2080020c 	andi	r2,r4,8
 8005f2c:	2821883a 	mov	r16,r5
 8005f30:	302f883a 	mov	r23,r6
 8005f34:	10002726 	beq	r2,zero,8005fd4 <__sfvwrite_r+0xe8>
 8005f38:	28800417 	ldw	r2,16(r5)
 8005f3c:	10002526 	beq	r2,zero,8005fd4 <__sfvwrite_r+0xe8>
 8005f40:	2080008c 	andi	r2,r4,2
 8005f44:	bc400017 	ldw	r17,0(r23)
 8005f48:	10002a26 	beq	r2,zero,8005ff4 <__sfvwrite_r+0x108>
 8005f4c:	05600034 	movhi	r21,32768
 8005f50:	0027883a 	mov	r19,zero
 8005f54:	0025883a 	mov	r18,zero
 8005f58:	ad7f0004 	addi	r21,r21,-1024
 8005f5c:	980d883a 	mov	r6,r19
 8005f60:	a009883a 	mov	r4,r20
 8005f64:	90004626 	beq	r18,zero,8006080 <__sfvwrite_r+0x194>
 8005f68:	900f883a 	mov	r7,r18
 8005f6c:	81400717 	ldw	r5,28(r16)
 8005f70:	ac80022e 	bgeu	r21,r18,8005f7c <__sfvwrite_r+0x90>
 8005f74:	01e00034 	movhi	r7,32768
 8005f78:	39ff0004 	addi	r7,r7,-1024
 8005f7c:	80800917 	ldw	r2,36(r16)
 8005f80:	103ee83a 	callr	r2
 8005f84:	0080520e 	bge	zero,r2,80060d0 <__sfvwrite_r+0x1e4>
 8005f88:	b8c00217 	ldw	r3,8(r23)
 8005f8c:	98a7883a 	add	r19,r19,r2
 8005f90:	90a5c83a 	sub	r18,r18,r2
 8005f94:	1885c83a 	sub	r2,r3,r2
 8005f98:	b8800215 	stw	r2,8(r23)
 8005f9c:	103fef1e 	bne	r2,zero,8005f5c <__sfvwrite_r+0x70>
 8005fa0:	0005883a 	mov	r2,zero
 8005fa4:	dfc00b17 	ldw	ra,44(sp)
 8005fa8:	df000a17 	ldw	fp,40(sp)
 8005fac:	ddc00917 	ldw	r23,36(sp)
 8005fb0:	dd800817 	ldw	r22,32(sp)
 8005fb4:	dd400717 	ldw	r21,28(sp)
 8005fb8:	dd000617 	ldw	r20,24(sp)
 8005fbc:	dcc00517 	ldw	r19,20(sp)
 8005fc0:	dc800417 	ldw	r18,16(sp)
 8005fc4:	dc400317 	ldw	r17,12(sp)
 8005fc8:	dc000217 	ldw	r16,8(sp)
 8005fcc:	dec00c04 	addi	sp,sp,48
 8005fd0:	f800283a 	ret
 8005fd4:	a009883a 	mov	r4,r20
 8005fd8:	800b883a 	mov	r5,r16
 8005fdc:	8003a280 	call	8003a28 <__swsetup_r>
 8005fe0:	1000ec1e 	bne	r2,zero,8006394 <__sfvwrite_r+0x4a8>
 8005fe4:	8100030b 	ldhu	r4,12(r16)
 8005fe8:	bc400017 	ldw	r17,0(r23)
 8005fec:	2080008c 	andi	r2,r4,2
 8005ff0:	103fd61e 	bne	r2,zero,8005f4c <__sfvwrite_r+0x60>
 8005ff4:	2080004c 	andi	r2,r4,1
 8005ff8:	10003a1e 	bne	r2,zero,80060e4 <__sfvwrite_r+0x1f8>
 8005ffc:	0039883a 	mov	fp,zero
 8006000:	0025883a 	mov	r18,zero
 8006004:	90001a26 	beq	r18,zero,8006070 <__sfvwrite_r+0x184>
 8006008:	2080800c 	andi	r2,r4,512
 800600c:	85800217 	ldw	r22,8(r16)
 8006010:	10007626 	beq	r2,zero,80061ec <__sfvwrite_r+0x300>
 8006014:	b027883a 	mov	r19,r22
 8006018:	95809436 	bltu	r18,r22,800626c <__sfvwrite_r+0x380>
 800601c:	2081200c 	andi	r2,r4,1152
 8006020:	10009f1e 	bne	r2,zero,80062a0 <__sfvwrite_r+0x3b4>
 8006024:	81000017 	ldw	r4,0(r16)
 8006028:	e00b883a 	mov	r5,fp
 800602c:	980d883a 	mov	r6,r19
 8006030:	80069ec0 	call	80069ec <memmove>
 8006034:	81000217 	ldw	r4,8(r16)
 8006038:	81400017 	ldw	r5,0(r16)
 800603c:	9005883a 	mov	r2,r18
 8006040:	2587c83a 	sub	r3,r4,r22
 8006044:	2ce7883a 	add	r19,r5,r19
 8006048:	80c00215 	stw	r3,8(r16)
 800604c:	84c00015 	stw	r19,0(r16)
 8006050:	b8c00217 	ldw	r3,8(r23)
 8006054:	e0b9883a 	add	fp,fp,r2
 8006058:	90a5c83a 	sub	r18,r18,r2
 800605c:	1885c83a 	sub	r2,r3,r2
 8006060:	b8800215 	stw	r2,8(r23)
 8006064:	103fce26 	beq	r2,zero,8005fa0 <__sfvwrite_r+0xb4>
 8006068:	8100030b 	ldhu	r4,12(r16)
 800606c:	903fe61e 	bne	r18,zero,8006008 <__sfvwrite_r+0x11c>
 8006070:	8f000017 	ldw	fp,0(r17)
 8006074:	8c800117 	ldw	r18,4(r17)
 8006078:	8c400204 	addi	r17,r17,8
 800607c:	003fe106 	br	8006004 <__sfvwrite_r+0x118>
 8006080:	8cc00017 	ldw	r19,0(r17)
 8006084:	8c800117 	ldw	r18,4(r17)
 8006088:	8c400204 	addi	r17,r17,8
 800608c:	003fb306 	br	8005f5c <__sfvwrite_r+0x70>
 8006090:	0005883a 	mov	r2,zero
 8006094:	f800283a 	ret
 8006098:	00a00034 	movhi	r2,32768
 800609c:	10bfffc4 	addi	r2,r2,-1
 80060a0:	9009883a 	mov	r4,r18
 80060a4:	1480012e 	bgeu	r2,r18,80060ac <__sfvwrite_r+0x1c0>
 80060a8:	1009883a 	mov	r4,r2
 80060ac:	980b883a 	mov	r5,r19
 80060b0:	800ac9c0 	call	800ac9c <__divsi3>
 80060b4:	81400717 	ldw	r5,28(r16)
 80060b8:	80c00917 	ldw	r3,36(r16)
 80060bc:	988f383a 	mul	r7,r19,r2
 80060c0:	a009883a 	mov	r4,r20
 80060c4:	e00d883a 	mov	r6,fp
 80060c8:	183ee83a 	callr	r3
 80060cc:	00bfe016 	blt	zero,r2,8006050 <__sfvwrite_r+0x164>
 80060d0:	8080030b 	ldhu	r2,12(r16)
 80060d4:	10801014 	ori	r2,r2,64
 80060d8:	8080030d 	sth	r2,12(r16)
 80060dc:	00bfffc4 	movi	r2,-1
 80060e0:	003fb006 	br	8005fa4 <__sfvwrite_r+0xb8>
 80060e4:	0027883a 	mov	r19,zero
 80060e8:	0011883a 	mov	r8,zero
 80060ec:	0039883a 	mov	fp,zero
 80060f0:	0025883a 	mov	r18,zero
 80060f4:	90001f26 	beq	r18,zero,8006174 <__sfvwrite_r+0x288>
 80060f8:	40006026 	beq	r8,zero,800627c <__sfvwrite_r+0x390>
 80060fc:	982b883a 	mov	r21,r19
 8006100:	94c0012e 	bgeu	r18,r19,8006108 <__sfvwrite_r+0x21c>
 8006104:	902b883a 	mov	r21,r18
 8006108:	81000017 	ldw	r4,0(r16)
 800610c:	80800417 	ldw	r2,16(r16)
 8006110:	a82d883a 	mov	r22,r21
 8006114:	81800217 	ldw	r6,8(r16)
 8006118:	81c00517 	ldw	r7,20(r16)
 800611c:	1100022e 	bgeu	r2,r4,8006128 <__sfvwrite_r+0x23c>
 8006120:	31c7883a 	add	r3,r6,r7
 8006124:	1d401816 	blt	r3,r21,8006188 <__sfvwrite_r+0x29c>
 8006128:	a9c04416 	blt	r21,r7,800623c <__sfvwrite_r+0x350>
 800612c:	80800917 	ldw	r2,36(r16)
 8006130:	81400717 	ldw	r5,28(r16)
 8006134:	a009883a 	mov	r4,r20
 8006138:	da000115 	stw	r8,4(sp)
 800613c:	e00d883a 	mov	r6,fp
 8006140:	103ee83a 	callr	r2
 8006144:	102d883a 	mov	r22,r2
 8006148:	da000117 	ldw	r8,4(sp)
 800614c:	00bfe00e 	bge	zero,r2,80060d0 <__sfvwrite_r+0x1e4>
 8006150:	9da7c83a 	sub	r19,r19,r22
 8006154:	98001f26 	beq	r19,zero,80061d4 <__sfvwrite_r+0x2e8>
 8006158:	b8800217 	ldw	r2,8(r23)
 800615c:	e5b9883a 	add	fp,fp,r22
 8006160:	95a5c83a 	sub	r18,r18,r22
 8006164:	15adc83a 	sub	r22,r2,r22
 8006168:	bd800215 	stw	r22,8(r23)
 800616c:	b03f8c26 	beq	r22,zero,8005fa0 <__sfvwrite_r+0xb4>
 8006170:	903fe11e 	bne	r18,zero,80060f8 <__sfvwrite_r+0x20c>
 8006174:	8f000017 	ldw	fp,0(r17)
 8006178:	8c800117 	ldw	r18,4(r17)
 800617c:	0011883a 	mov	r8,zero
 8006180:	8c400204 	addi	r17,r17,8
 8006184:	003fdb06 	br	80060f4 <__sfvwrite_r+0x208>
 8006188:	180d883a 	mov	r6,r3
 800618c:	e00b883a 	mov	r5,fp
 8006190:	da000115 	stw	r8,4(sp)
 8006194:	d8c00015 	stw	r3,0(sp)
 8006198:	80069ec0 	call	80069ec <memmove>
 800619c:	d8c00017 	ldw	r3,0(sp)
 80061a0:	80800017 	ldw	r2,0(r16)
 80061a4:	a009883a 	mov	r4,r20
 80061a8:	800b883a 	mov	r5,r16
 80061ac:	10c5883a 	add	r2,r2,r3
 80061b0:	80800015 	stw	r2,0(r16)
 80061b4:	d8c00015 	stw	r3,0(sp)
 80061b8:	80056ac0 	call	80056ac <_fflush_r>
 80061bc:	d8c00017 	ldw	r3,0(sp)
 80061c0:	da000117 	ldw	r8,4(sp)
 80061c4:	103fc21e 	bne	r2,zero,80060d0 <__sfvwrite_r+0x1e4>
 80061c8:	182d883a 	mov	r22,r3
 80061cc:	9da7c83a 	sub	r19,r19,r22
 80061d0:	983fe11e 	bne	r19,zero,8006158 <__sfvwrite_r+0x26c>
 80061d4:	a009883a 	mov	r4,r20
 80061d8:	800b883a 	mov	r5,r16
 80061dc:	80056ac0 	call	80056ac <_fflush_r>
 80061e0:	103fbb1e 	bne	r2,zero,80060d0 <__sfvwrite_r+0x1e4>
 80061e4:	0011883a 	mov	r8,zero
 80061e8:	003fdb06 	br	8006158 <__sfvwrite_r+0x26c>
 80061ec:	81000017 	ldw	r4,0(r16)
 80061f0:	80800417 	ldw	r2,16(r16)
 80061f4:	11000236 	bltu	r2,r4,8006200 <__sfvwrite_r+0x314>
 80061f8:	84c00517 	ldw	r19,20(r16)
 80061fc:	94ffa62e 	bgeu	r18,r19,8006098 <__sfvwrite_r+0x1ac>
 8006200:	9027883a 	mov	r19,r18
 8006204:	b480012e 	bgeu	r22,r18,800620c <__sfvwrite_r+0x320>
 8006208:	b027883a 	mov	r19,r22
 800620c:	e00b883a 	mov	r5,fp
 8006210:	980d883a 	mov	r6,r19
 8006214:	80069ec0 	call	80069ec <memmove>
 8006218:	80800217 	ldw	r2,8(r16)
 800621c:	80c00017 	ldw	r3,0(r16)
 8006220:	14c5c83a 	sub	r2,r2,r19
 8006224:	1cc7883a 	add	r3,r3,r19
 8006228:	80800215 	stw	r2,8(r16)
 800622c:	80c00015 	stw	r3,0(r16)
 8006230:	10004326 	beq	r2,zero,8006340 <__sfvwrite_r+0x454>
 8006234:	9805883a 	mov	r2,r19
 8006238:	003f8506 	br	8006050 <__sfvwrite_r+0x164>
 800623c:	a80d883a 	mov	r6,r21
 8006240:	e00b883a 	mov	r5,fp
 8006244:	da000115 	stw	r8,4(sp)
 8006248:	80069ec0 	call	80069ec <memmove>
 800624c:	80800217 	ldw	r2,8(r16)
 8006250:	80c00017 	ldw	r3,0(r16)
 8006254:	da000117 	ldw	r8,4(sp)
 8006258:	1545c83a 	sub	r2,r2,r21
 800625c:	1d6b883a 	add	r21,r3,r21
 8006260:	80800215 	stw	r2,8(r16)
 8006264:	85400015 	stw	r21,0(r16)
 8006268:	003fb906 	br	8006150 <__sfvwrite_r+0x264>
 800626c:	81000017 	ldw	r4,0(r16)
 8006270:	902d883a 	mov	r22,r18
 8006274:	9027883a 	mov	r19,r18
 8006278:	003f6b06 	br	8006028 <__sfvwrite_r+0x13c>
 800627c:	e009883a 	mov	r4,fp
 8006280:	01400284 	movi	r5,10
 8006284:	900d883a 	mov	r6,r18
 8006288:	80067cc0 	call	80067cc <memchr>
 800628c:	10003e26 	beq	r2,zero,8006388 <__sfvwrite_r+0x49c>
 8006290:	10800044 	addi	r2,r2,1
 8006294:	1727c83a 	sub	r19,r2,fp
 8006298:	02000044 	movi	r8,1
 800629c:	003f9706 	br	80060fc <__sfvwrite_r+0x210>
 80062a0:	80800517 	ldw	r2,20(r16)
 80062a4:	81400417 	ldw	r5,16(r16)
 80062a8:	80c00017 	ldw	r3,0(r16)
 80062ac:	10a7883a 	add	r19,r2,r2
 80062b0:	9885883a 	add	r2,r19,r2
 80062b4:	1026d7fa 	srli	r19,r2,31
 80062b8:	196bc83a 	sub	r21,r3,r5
 80062bc:	a9800044 	addi	r6,r21,1
 80062c0:	9885883a 	add	r2,r19,r2
 80062c4:	1027d07a 	srai	r19,r2,1
 80062c8:	3485883a 	add	r2,r6,r18
 80062cc:	980d883a 	mov	r6,r19
 80062d0:	9880022e 	bgeu	r19,r2,80062dc <__sfvwrite_r+0x3f0>
 80062d4:	1027883a 	mov	r19,r2
 80062d8:	100d883a 	mov	r6,r2
 80062dc:	2101000c 	andi	r4,r4,1024
 80062e0:	20001c26 	beq	r4,zero,8006354 <__sfvwrite_r+0x468>
 80062e4:	a009883a 	mov	r4,r20
 80062e8:	300b883a 	mov	r5,r6
 80062ec:	8000f9c0 	call	8000f9c <_malloc_r>
 80062f0:	102d883a 	mov	r22,r2
 80062f4:	10002926 	beq	r2,zero,800639c <__sfvwrite_r+0x4b0>
 80062f8:	81400417 	ldw	r5,16(r16)
 80062fc:	1009883a 	mov	r4,r2
 8006300:	a80d883a 	mov	r6,r21
 8006304:	80068b40 	call	80068b4 <memcpy>
 8006308:	8080030b 	ldhu	r2,12(r16)
 800630c:	00fedfc4 	movi	r3,-1153
 8006310:	10c4703a 	and	r2,r2,r3
 8006314:	10802014 	ori	r2,r2,128
 8006318:	8080030d 	sth	r2,12(r16)
 800631c:	b549883a 	add	r4,r22,r21
 8006320:	9d4bc83a 	sub	r5,r19,r21
 8006324:	85800415 	stw	r22,16(r16)
 8006328:	84c00515 	stw	r19,20(r16)
 800632c:	81000015 	stw	r4,0(r16)
 8006330:	902d883a 	mov	r22,r18
 8006334:	81400215 	stw	r5,8(r16)
 8006338:	9027883a 	mov	r19,r18
 800633c:	003f3a06 	br	8006028 <__sfvwrite_r+0x13c>
 8006340:	a009883a 	mov	r4,r20
 8006344:	800b883a 	mov	r5,r16
 8006348:	80056ac0 	call	80056ac <_fflush_r>
 800634c:	103fb926 	beq	r2,zero,8006234 <__sfvwrite_r+0x348>
 8006350:	003f5f06 	br	80060d0 <__sfvwrite_r+0x1e4>
 8006354:	a009883a 	mov	r4,r20
 8006358:	8007c0c0 	call	8007c0c <_realloc_r>
 800635c:	102d883a 	mov	r22,r2
 8006360:	103fee1e 	bne	r2,zero,800631c <__sfvwrite_r+0x430>
 8006364:	81400417 	ldw	r5,16(r16)
 8006368:	a009883a 	mov	r4,r20
 800636c:	8005bfc0 	call	8005bfc <_free_r>
 8006370:	8080030b 	ldhu	r2,12(r16)
 8006374:	00ffdfc4 	movi	r3,-129
 8006378:	1884703a 	and	r2,r3,r2
 800637c:	00c00304 	movi	r3,12
 8006380:	a0c00015 	stw	r3,0(r20)
 8006384:	003f5306 	br	80060d4 <__sfvwrite_r+0x1e8>
 8006388:	94c00044 	addi	r19,r18,1
 800638c:	02000044 	movi	r8,1
 8006390:	003f5a06 	br	80060fc <__sfvwrite_r+0x210>
 8006394:	00bfffc4 	movi	r2,-1
 8006398:	003f0206 	br	8005fa4 <__sfvwrite_r+0xb8>
 800639c:	00800304 	movi	r2,12
 80063a0:	a0800015 	stw	r2,0(r20)
 80063a4:	8080030b 	ldhu	r2,12(r16)
 80063a8:	003f4a06 	br	80060d4 <__sfvwrite_r+0x1e8>

080063ac <_fwalk>:
 80063ac:	defff704 	addi	sp,sp,-36
 80063b0:	dd000415 	stw	r20,16(sp)
 80063b4:	dfc00815 	stw	ra,32(sp)
 80063b8:	ddc00715 	stw	r23,28(sp)
 80063bc:	dd800615 	stw	r22,24(sp)
 80063c0:	dd400515 	stw	r21,20(sp)
 80063c4:	dcc00315 	stw	r19,12(sp)
 80063c8:	dc800215 	stw	r18,8(sp)
 80063cc:	dc400115 	stw	r17,4(sp)
 80063d0:	dc000015 	stw	r16,0(sp)
 80063d4:	2500b804 	addi	r20,r4,736
 80063d8:	a0002326 	beq	r20,zero,8006468 <_fwalk+0xbc>
 80063dc:	282b883a 	mov	r21,r5
 80063e0:	002f883a 	mov	r23,zero
 80063e4:	05800044 	movi	r22,1
 80063e8:	04ffffc4 	movi	r19,-1
 80063ec:	a4400117 	ldw	r17,4(r20)
 80063f0:	a4800217 	ldw	r18,8(r20)
 80063f4:	8c7fffc4 	addi	r17,r17,-1
 80063f8:	88000d16 	blt	r17,zero,8006430 <_fwalk+0x84>
 80063fc:	94000304 	addi	r16,r18,12
 8006400:	94800384 	addi	r18,r18,14
 8006404:	80c0000b 	ldhu	r3,0(r16)
 8006408:	8c7fffc4 	addi	r17,r17,-1
 800640c:	813ffd04 	addi	r4,r16,-12
 8006410:	b0c0042e 	bgeu	r22,r3,8006424 <_fwalk+0x78>
 8006414:	90c0000f 	ldh	r3,0(r18)
 8006418:	1cc00226 	beq	r3,r19,8006424 <_fwalk+0x78>
 800641c:	a83ee83a 	callr	r21
 8006420:	b8aeb03a 	or	r23,r23,r2
 8006424:	84001a04 	addi	r16,r16,104
 8006428:	94801a04 	addi	r18,r18,104
 800642c:	8cfff51e 	bne	r17,r19,8006404 <_fwalk+0x58>
 8006430:	a5000017 	ldw	r20,0(r20)
 8006434:	a03fed1e 	bne	r20,zero,80063ec <_fwalk+0x40>
 8006438:	b805883a 	mov	r2,r23
 800643c:	dfc00817 	ldw	ra,32(sp)
 8006440:	ddc00717 	ldw	r23,28(sp)
 8006444:	dd800617 	ldw	r22,24(sp)
 8006448:	dd400517 	ldw	r21,20(sp)
 800644c:	dd000417 	ldw	r20,16(sp)
 8006450:	dcc00317 	ldw	r19,12(sp)
 8006454:	dc800217 	ldw	r18,8(sp)
 8006458:	dc400117 	ldw	r17,4(sp)
 800645c:	dc000017 	ldw	r16,0(sp)
 8006460:	dec00904 	addi	sp,sp,36
 8006464:	f800283a 	ret
 8006468:	002f883a 	mov	r23,zero
 800646c:	003ff206 	br	8006438 <_fwalk+0x8c>

08006470 <_fwalk_reent>:
 8006470:	defff704 	addi	sp,sp,-36
 8006474:	dd400515 	stw	r21,20(sp)
 8006478:	dfc00815 	stw	ra,32(sp)
 800647c:	ddc00715 	stw	r23,28(sp)
 8006480:	dd800615 	stw	r22,24(sp)
 8006484:	dd000415 	stw	r20,16(sp)
 8006488:	dcc00315 	stw	r19,12(sp)
 800648c:	dc800215 	stw	r18,8(sp)
 8006490:	dc400115 	stw	r17,4(sp)
 8006494:	dc000015 	stw	r16,0(sp)
 8006498:	2540b804 	addi	r21,r4,736
 800649c:	a8002326 	beq	r21,zero,800652c <_fwalk_reent+0xbc>
 80064a0:	2829883a 	mov	r20,r5
 80064a4:	202d883a 	mov	r22,r4
 80064a8:	002f883a 	mov	r23,zero
 80064ac:	04c00044 	movi	r19,1
 80064b0:	04bfffc4 	movi	r18,-1
 80064b4:	ac400117 	ldw	r17,4(r21)
 80064b8:	ac000217 	ldw	r16,8(r21)
 80064bc:	8c7fffc4 	addi	r17,r17,-1
 80064c0:	88000c16 	blt	r17,zero,80064f4 <_fwalk_reent+0x84>
 80064c4:	84000304 	addi	r16,r16,12
 80064c8:	80c0000b 	ldhu	r3,0(r16)
 80064cc:	8c7fffc4 	addi	r17,r17,-1
 80064d0:	817ffd04 	addi	r5,r16,-12
 80064d4:	98c0052e 	bgeu	r19,r3,80064ec <_fwalk_reent+0x7c>
 80064d8:	80c0008f 	ldh	r3,2(r16)
 80064dc:	b009883a 	mov	r4,r22
 80064e0:	1c800226 	beq	r3,r18,80064ec <_fwalk_reent+0x7c>
 80064e4:	a03ee83a 	callr	r20
 80064e8:	b8aeb03a 	or	r23,r23,r2
 80064ec:	84001a04 	addi	r16,r16,104
 80064f0:	8cbff51e 	bne	r17,r18,80064c8 <_fwalk_reent+0x58>
 80064f4:	ad400017 	ldw	r21,0(r21)
 80064f8:	a83fee1e 	bne	r21,zero,80064b4 <_fwalk_reent+0x44>
 80064fc:	b805883a 	mov	r2,r23
 8006500:	dfc00817 	ldw	ra,32(sp)
 8006504:	ddc00717 	ldw	r23,28(sp)
 8006508:	dd800617 	ldw	r22,24(sp)
 800650c:	dd400517 	ldw	r21,20(sp)
 8006510:	dd000417 	ldw	r20,16(sp)
 8006514:	dcc00317 	ldw	r19,12(sp)
 8006518:	dc800217 	ldw	r18,8(sp)
 800651c:	dc400117 	ldw	r17,4(sp)
 8006520:	dc000017 	ldw	r16,0(sp)
 8006524:	dec00904 	addi	sp,sp,36
 8006528:	f800283a 	ret
 800652c:	002f883a 	mov	r23,zero
 8006530:	003ff206 	br	80064fc <_fwalk_reent+0x8c>

08006534 <_setlocale_r>:
 8006534:	30001b26 	beq	r6,zero,80065a4 <_setlocale_r+0x70>
 8006538:	014200b4 	movhi	r5,2050
 800653c:	defffe04 	addi	sp,sp,-8
 8006540:	2966b004 	addi	r5,r5,-25920
 8006544:	3009883a 	mov	r4,r6
 8006548:	dc000015 	stw	r16,0(sp)
 800654c:	dfc00115 	stw	ra,4(sp)
 8006550:	3021883a 	mov	r16,r6
 8006554:	80018bc0 	call	80018bc <strcmp>
 8006558:	1000061e 	bne	r2,zero,8006574 <_setlocale_r+0x40>
 800655c:	008200b4 	movhi	r2,2050
 8006560:	10a6af04 	addi	r2,r2,-25924
 8006564:	dfc00117 	ldw	ra,4(sp)
 8006568:	dc000017 	ldw	r16,0(sp)
 800656c:	dec00204 	addi	sp,sp,8
 8006570:	f800283a 	ret
 8006574:	014200b4 	movhi	r5,2050
 8006578:	2966af04 	addi	r5,r5,-25924
 800657c:	8009883a 	mov	r4,r16
 8006580:	80018bc0 	call	80018bc <strcmp>
 8006584:	103ff526 	beq	r2,zero,800655c <_setlocale_r+0x28>
 8006588:	014200b4 	movhi	r5,2050
 800658c:	29669a04 	addi	r5,r5,-26008
 8006590:	8009883a 	mov	r4,r16
 8006594:	80018bc0 	call	80018bc <strcmp>
 8006598:	103ff026 	beq	r2,zero,800655c <_setlocale_r+0x28>
 800659c:	0005883a 	mov	r2,zero
 80065a0:	003ff006 	br	8006564 <_setlocale_r+0x30>
 80065a4:	008200b4 	movhi	r2,2050
 80065a8:	10a6af04 	addi	r2,r2,-25924
 80065ac:	f800283a 	ret

080065b0 <__locale_charset>:
 80065b0:	008200b4 	movhi	r2,2050
 80065b4:	108c6604 	addi	r2,r2,12696
 80065b8:	f800283a 	ret

080065bc <__locale_mb_cur_max>:
 80065bc:	008200b4 	movhi	r2,2050
 80065c0:	10913c04 	addi	r2,r2,17648
 80065c4:	10800017 	ldw	r2,0(r2)
 80065c8:	f800283a 	ret

080065cc <__locale_msgcharset>:
 80065cc:	008200b4 	movhi	r2,2050
 80065d0:	108c5e04 	addi	r2,r2,12664
 80065d4:	f800283a 	ret

080065d8 <__locale_cjk_lang>:
 80065d8:	0005883a 	mov	r2,zero
 80065dc:	f800283a 	ret

080065e0 <_localeconv_r>:
 80065e0:	008200b4 	movhi	r2,2050
 80065e4:	108c6e04 	addi	r2,r2,12728
 80065e8:	f800283a 	ret

080065ec <setlocale>:
 80065ec:	00c200b4 	movhi	r3,2050
 80065f0:	18d13b04 	addi	r3,r3,17644
 80065f4:	2005883a 	mov	r2,r4
 80065f8:	19000017 	ldw	r4,0(r3)
 80065fc:	280d883a 	mov	r6,r5
 8006600:	100b883a 	mov	r5,r2
 8006604:	80065341 	jmpi	8006534 <_setlocale_r>

08006608 <localeconv>:
 8006608:	008200b4 	movhi	r2,2050
 800660c:	108c6e04 	addi	r2,r2,12728
 8006610:	f800283a 	ret

08006614 <__smakebuf_r>:
 8006614:	2880030b 	ldhu	r2,12(r5)
 8006618:	10c0008c 	andi	r3,r2,2
 800661c:	1800401e 	bne	r3,zero,8006720 <__smakebuf_r+0x10c>
 8006620:	deffec04 	addi	sp,sp,-80
 8006624:	dc000f15 	stw	r16,60(sp)
 8006628:	2821883a 	mov	r16,r5
 800662c:	2940038f 	ldh	r5,14(r5)
 8006630:	dc401015 	stw	r17,64(sp)
 8006634:	dfc01315 	stw	ra,76(sp)
 8006638:	dcc01215 	stw	r19,72(sp)
 800663c:	dc801115 	stw	r18,68(sp)
 8006640:	2023883a 	mov	r17,r4
 8006644:	28001b16 	blt	r5,zero,80066b4 <__smakebuf_r+0xa0>
 8006648:	d80d883a 	mov	r6,sp
 800664c:	8009c400 	call	8009c40 <_fstat_r>
 8006650:	10001716 	blt	r2,zero,80066b0 <__smakebuf_r+0x9c>
 8006654:	d8800117 	ldw	r2,4(sp)
 8006658:	00e00014 	movui	r3,32768
 800665c:	10bc000c 	andi	r2,r2,61440
 8006660:	10c03726 	beq	r2,r3,8006740 <__smakebuf_r+0x12c>
 8006664:	80c0030b 	ldhu	r3,12(r16)
 8006668:	18c20014 	ori	r3,r3,2048
 800666c:	80c0030d 	sth	r3,12(r16)
 8006670:	00c80004 	movi	r3,8192
 8006674:	10c03c1e 	bne	r2,r3,8006768 <__smakebuf_r+0x154>
 8006678:	8140038f 	ldh	r5,14(r16)
 800667c:	8809883a 	mov	r4,r17
 8006680:	8009c980 	call	8009c98 <_isatty_r>
 8006684:	10004e26 	beq	r2,zero,80067c0 <__smakebuf_r+0x1ac>
 8006688:	8080030b 	ldhu	r2,12(r16)
 800668c:	04c00044 	movi	r19,1
 8006690:	80c010c4 	addi	r3,r16,67
 8006694:	14c4b03a 	or	r2,r2,r19
 8006698:	8080030d 	sth	r2,12(r16)
 800669c:	80c00015 	stw	r3,0(r16)
 80066a0:	80c00415 	stw	r3,16(r16)
 80066a4:	84c00515 	stw	r19,20(r16)
 80066a8:	04810004 	movi	r18,1024
 80066ac:	00000706 	br	80066cc <__smakebuf_r+0xb8>
 80066b0:	8080030b 	ldhu	r2,12(r16)
 80066b4:	10c0200c 	andi	r3,r2,128
 80066b8:	18001f1e 	bne	r3,zero,8006738 <__smakebuf_r+0x124>
 80066bc:	04810004 	movi	r18,1024
 80066c0:	10820014 	ori	r2,r2,2048
 80066c4:	8080030d 	sth	r2,12(r16)
 80066c8:	0027883a 	mov	r19,zero
 80066cc:	8809883a 	mov	r4,r17
 80066d0:	900b883a 	mov	r5,r18
 80066d4:	8000f9c0 	call	8000f9c <_malloc_r>
 80066d8:	10002e26 	beq	r2,zero,8006794 <__smakebuf_r+0x180>
 80066dc:	80c0030b 	ldhu	r3,12(r16)
 80066e0:	01020034 	movhi	r4,2048
 80066e4:	2115d204 	addi	r4,r4,22344
 80066e8:	89000f15 	stw	r4,60(r17)
 80066ec:	18c02014 	ori	r3,r3,128
 80066f0:	80c0030d 	sth	r3,12(r16)
 80066f4:	80800015 	stw	r2,0(r16)
 80066f8:	80800415 	stw	r2,16(r16)
 80066fc:	84800515 	stw	r18,20(r16)
 8006700:	98001c1e 	bne	r19,zero,8006774 <__smakebuf_r+0x160>
 8006704:	dfc01317 	ldw	ra,76(sp)
 8006708:	dcc01217 	ldw	r19,72(sp)
 800670c:	dc801117 	ldw	r18,68(sp)
 8006710:	dc401017 	ldw	r17,64(sp)
 8006714:	dc000f17 	ldw	r16,60(sp)
 8006718:	dec01404 	addi	sp,sp,80
 800671c:	f800283a 	ret
 8006720:	288010c4 	addi	r2,r5,67
 8006724:	28800015 	stw	r2,0(r5)
 8006728:	28800415 	stw	r2,16(r5)
 800672c:	00800044 	movi	r2,1
 8006730:	28800515 	stw	r2,20(r5)
 8006734:	f800283a 	ret
 8006738:	04801004 	movi	r18,64
 800673c:	003fe006 	br	80066c0 <__smakebuf_r+0xac>
 8006740:	81000a17 	ldw	r4,40(r16)
 8006744:	00c20074 	movhi	r3,2049
 8006748:	18e0b004 	addi	r3,r3,-32064
 800674c:	20ffc51e 	bne	r4,r3,8006664 <__smakebuf_r+0x50>
 8006750:	80c0030b 	ldhu	r3,12(r16)
 8006754:	01010004 	movi	r4,1024
 8006758:	81001315 	stw	r4,76(r16)
 800675c:	1906b03a 	or	r3,r3,r4
 8006760:	80c0030d 	sth	r3,12(r16)
 8006764:	003fc206 	br	8006670 <__smakebuf_r+0x5c>
 8006768:	0027883a 	mov	r19,zero
 800676c:	04810004 	movi	r18,1024
 8006770:	003fd606 	br	80066cc <__smakebuf_r+0xb8>
 8006774:	8140038f 	ldh	r5,14(r16)
 8006778:	8809883a 	mov	r4,r17
 800677c:	8009c980 	call	8009c98 <_isatty_r>
 8006780:	103fe026 	beq	r2,zero,8006704 <__smakebuf_r+0xf0>
 8006784:	8080030b 	ldhu	r2,12(r16)
 8006788:	10800054 	ori	r2,r2,1
 800678c:	8080030d 	sth	r2,12(r16)
 8006790:	003fdc06 	br	8006704 <__smakebuf_r+0xf0>
 8006794:	8080030b 	ldhu	r2,12(r16)
 8006798:	10c0800c 	andi	r3,r2,512
 800679c:	183fd91e 	bne	r3,zero,8006704 <__smakebuf_r+0xf0>
 80067a0:	10800094 	ori	r2,r2,2
 80067a4:	80c010c4 	addi	r3,r16,67
 80067a8:	8080030d 	sth	r2,12(r16)
 80067ac:	00800044 	movi	r2,1
 80067b0:	80c00015 	stw	r3,0(r16)
 80067b4:	80c00415 	stw	r3,16(r16)
 80067b8:	80800515 	stw	r2,20(r16)
 80067bc:	003fd106 	br	8006704 <__smakebuf_r+0xf0>
 80067c0:	04c00044 	movi	r19,1
 80067c4:	04810004 	movi	r18,1024
 80067c8:	003fc006 	br	80066cc <__smakebuf_r+0xb8>

080067cc <memchr>:
 80067cc:	208000cc 	andi	r2,r4,3
 80067d0:	280f883a 	mov	r7,r5
 80067d4:	10003526 	beq	r2,zero,80068ac <memchr+0xe0>
 80067d8:	30bfffc4 	addi	r2,r6,-1
 80067dc:	30001b26 	beq	r6,zero,800684c <memchr+0x80>
 80067e0:	21800003 	ldbu	r6,0(r4)
 80067e4:	28c03fcc 	andi	r3,r5,255
 80067e8:	30c01a26 	beq	r6,r3,8006854 <memchr+0x88>
 80067ec:	180d883a 	mov	r6,r3
 80067f0:	00000406 	br	8006804 <memchr+0x38>
 80067f4:	10001526 	beq	r2,zero,800684c <memchr+0x80>
 80067f8:	20c00003 	ldbu	r3,0(r4)
 80067fc:	10bfffc4 	addi	r2,r2,-1
 8006800:	19801426 	beq	r3,r6,8006854 <memchr+0x88>
 8006804:	21000044 	addi	r4,r4,1
 8006808:	20c000cc 	andi	r3,r4,3
 800680c:	183ff91e 	bne	r3,zero,80067f4 <memchr+0x28>
 8006810:	024000c4 	movi	r9,3
 8006814:	48801136 	bltu	r9,r2,800685c <memchr+0x90>
 8006818:	10000c26 	beq	r2,zero,800684c <memchr+0x80>
 800681c:	20c00003 	ldbu	r3,0(r4)
 8006820:	29403fcc 	andi	r5,r5,255
 8006824:	19400b26 	beq	r3,r5,8006854 <memchr+0x88>
 8006828:	20c00044 	addi	r3,r4,1
 800682c:	2085883a 	add	r2,r4,r2
 8006830:	39803fcc 	andi	r6,r7,255
 8006834:	00000306 	br	8006844 <memchr+0x78>
 8006838:	18c00044 	addi	r3,r3,1
 800683c:	197fffc3 	ldbu	r5,-1(r3)
 8006840:	29800426 	beq	r5,r6,8006854 <memchr+0x88>
 8006844:	1809883a 	mov	r4,r3
 8006848:	18bffb1e 	bne	r3,r2,8006838 <memchr+0x6c>
 800684c:	0005883a 	mov	r2,zero
 8006850:	f800283a 	ret
 8006854:	2005883a 	mov	r2,r4
 8006858:	f800283a 	ret
 800685c:	28c03fcc 	andi	r3,r5,255
 8006860:	1810923a 	slli	r8,r3,8
 8006864:	02ffbff4 	movhi	r11,65279
 8006868:	02a02074 	movhi	r10,32897
 800686c:	40c6b03a 	or	r3,r8,r3
 8006870:	1810943a 	slli	r8,r3,16
 8006874:	5affbfc4 	addi	r11,r11,-257
 8006878:	52a02004 	addi	r10,r10,-32640
 800687c:	40d0b03a 	or	r8,r8,r3
 8006880:	20c00017 	ldw	r3,0(r4)
 8006884:	40c6f03a 	xor	r3,r8,r3
 8006888:	1acd883a 	add	r6,r3,r11
 800688c:	00c6303a 	nor	r3,zero,r3
 8006890:	30c6703a 	and	r3,r6,r3
 8006894:	1a86703a 	and	r3,r3,r10
 8006898:	183fdf1e 	bne	r3,zero,8006818 <memchr+0x4c>
 800689c:	10bfff04 	addi	r2,r2,-4
 80068a0:	21000104 	addi	r4,r4,4
 80068a4:	48bff636 	bltu	r9,r2,8006880 <memchr+0xb4>
 80068a8:	003fdb06 	br	8006818 <memchr+0x4c>
 80068ac:	3005883a 	mov	r2,r6
 80068b0:	003fd706 	br	8006810 <memchr+0x44>

080068b4 <memcpy>:
 80068b4:	deffff04 	addi	sp,sp,-4
 80068b8:	dc000015 	stw	r16,0(sp)
 80068bc:	00c003c4 	movi	r3,15
 80068c0:	2005883a 	mov	r2,r4
 80068c4:	1980432e 	bgeu	r3,r6,80069d4 <memcpy+0x120>
 80068c8:	2146b03a 	or	r3,r4,r5
 80068cc:	18c000cc 	andi	r3,r3,3
 80068d0:	1800421e 	bne	r3,zero,80069dc <memcpy+0x128>
 80068d4:	343ffc04 	addi	r16,r6,-16
 80068d8:	8020d13a 	srli	r16,r16,4
 80068dc:	28c00104 	addi	r3,r5,4
 80068e0:	23400104 	addi	r13,r4,4
 80068e4:	801e913a 	slli	r15,r16,4
 80068e8:	2b000204 	addi	r12,r5,8
 80068ec:	22c00204 	addi	r11,r4,8
 80068f0:	7bc00504 	addi	r15,r15,20
 80068f4:	2a800304 	addi	r10,r5,12
 80068f8:	22400304 	addi	r9,r4,12
 80068fc:	2bdf883a 	add	r15,r5,r15
 8006900:	2811883a 	mov	r8,r5
 8006904:	200f883a 	mov	r7,r4
 8006908:	41000017 	ldw	r4,0(r8)
 800690c:	39c00404 	addi	r7,r7,16
 8006910:	18c00404 	addi	r3,r3,16
 8006914:	393ffc15 	stw	r4,-16(r7)
 8006918:	1bbffc17 	ldw	r14,-16(r3)
 800691c:	6b400404 	addi	r13,r13,16
 8006920:	5ac00404 	addi	r11,r11,16
 8006924:	6bbffc15 	stw	r14,-16(r13)
 8006928:	63800017 	ldw	r14,0(r12)
 800692c:	4a400404 	addi	r9,r9,16
 8006930:	42000404 	addi	r8,r8,16
 8006934:	5bbffc15 	stw	r14,-16(r11)
 8006938:	53800017 	ldw	r14,0(r10)
 800693c:	63000404 	addi	r12,r12,16
 8006940:	52800404 	addi	r10,r10,16
 8006944:	4bbffc15 	stw	r14,-16(r9)
 8006948:	1bffef1e 	bne	r3,r15,8006908 <memcpy+0x54>
 800694c:	81c00044 	addi	r7,r16,1
 8006950:	380e913a 	slli	r7,r7,4
 8006954:	310003cc 	andi	r4,r6,15
 8006958:	02c000c4 	movi	r11,3
 800695c:	11c7883a 	add	r3,r2,r7
 8006960:	29cb883a 	add	r5,r5,r7
 8006964:	59001f2e 	bgeu	r11,r4,80069e4 <memcpy+0x130>
 8006968:	1813883a 	mov	r9,r3
 800696c:	2811883a 	mov	r8,r5
 8006970:	200f883a 	mov	r7,r4
 8006974:	42800017 	ldw	r10,0(r8)
 8006978:	4a400104 	addi	r9,r9,4
 800697c:	39ffff04 	addi	r7,r7,-4
 8006980:	4abfff15 	stw	r10,-4(r9)
 8006984:	42000104 	addi	r8,r8,4
 8006988:	59fffa36 	bltu	r11,r7,8006974 <memcpy+0xc0>
 800698c:	213fff04 	addi	r4,r4,-4
 8006990:	2008d0ba 	srli	r4,r4,2
 8006994:	318000cc 	andi	r6,r6,3
 8006998:	21000044 	addi	r4,r4,1
 800699c:	2109883a 	add	r4,r4,r4
 80069a0:	2109883a 	add	r4,r4,r4
 80069a4:	1907883a 	add	r3,r3,r4
 80069a8:	290b883a 	add	r5,r5,r4
 80069ac:	30000626 	beq	r6,zero,80069c8 <memcpy+0x114>
 80069b0:	198d883a 	add	r6,r3,r6
 80069b4:	29c00003 	ldbu	r7,0(r5)
 80069b8:	18c00044 	addi	r3,r3,1
 80069bc:	29400044 	addi	r5,r5,1
 80069c0:	19ffffc5 	stb	r7,-1(r3)
 80069c4:	19bffb1e 	bne	r3,r6,80069b4 <memcpy+0x100>
 80069c8:	dc000017 	ldw	r16,0(sp)
 80069cc:	dec00104 	addi	sp,sp,4
 80069d0:	f800283a 	ret
 80069d4:	2007883a 	mov	r3,r4
 80069d8:	003ff406 	br	80069ac <memcpy+0xf8>
 80069dc:	2007883a 	mov	r3,r4
 80069e0:	003ff306 	br	80069b0 <memcpy+0xfc>
 80069e4:	200d883a 	mov	r6,r4
 80069e8:	003ff006 	br	80069ac <memcpy+0xf8>

080069ec <memmove>:
 80069ec:	2005883a 	mov	r2,r4
 80069f0:	29000b2e 	bgeu	r5,r4,8006a20 <memmove+0x34>
 80069f4:	298f883a 	add	r7,r5,r6
 80069f8:	21c0092e 	bgeu	r4,r7,8006a20 <memmove+0x34>
 80069fc:	2187883a 	add	r3,r4,r6
 8006a00:	198bc83a 	sub	r5,r3,r6
 8006a04:	30004b26 	beq	r6,zero,8006b34 <memmove+0x148>
 8006a08:	39ffffc4 	addi	r7,r7,-1
 8006a0c:	39000003 	ldbu	r4,0(r7)
 8006a10:	18ffffc4 	addi	r3,r3,-1
 8006a14:	19000005 	stb	r4,0(r3)
 8006a18:	197ffb1e 	bne	r3,r5,8006a08 <memmove+0x1c>
 8006a1c:	f800283a 	ret
 8006a20:	00c003c4 	movi	r3,15
 8006a24:	1980412e 	bgeu	r3,r6,8006b2c <memmove+0x140>
 8006a28:	1146b03a 	or	r3,r2,r5
 8006a2c:	18c000cc 	andi	r3,r3,3
 8006a30:	1800411e 	bne	r3,zero,8006b38 <memmove+0x14c>
 8006a34:	33fffc04 	addi	r15,r6,-16
 8006a38:	781ed13a 	srli	r15,r15,4
 8006a3c:	28c00104 	addi	r3,r5,4
 8006a40:	13400104 	addi	r13,r2,4
 8006a44:	781c913a 	slli	r14,r15,4
 8006a48:	2b000204 	addi	r12,r5,8
 8006a4c:	12c00204 	addi	r11,r2,8
 8006a50:	73800504 	addi	r14,r14,20
 8006a54:	2a800304 	addi	r10,r5,12
 8006a58:	12400304 	addi	r9,r2,12
 8006a5c:	2b9d883a 	add	r14,r5,r14
 8006a60:	2811883a 	mov	r8,r5
 8006a64:	100f883a 	mov	r7,r2
 8006a68:	41000017 	ldw	r4,0(r8)
 8006a6c:	39c00404 	addi	r7,r7,16
 8006a70:	18c00404 	addi	r3,r3,16
 8006a74:	393ffc15 	stw	r4,-16(r7)
 8006a78:	193ffc17 	ldw	r4,-16(r3)
 8006a7c:	6b400404 	addi	r13,r13,16
 8006a80:	5ac00404 	addi	r11,r11,16
 8006a84:	693ffc15 	stw	r4,-16(r13)
 8006a88:	61000017 	ldw	r4,0(r12)
 8006a8c:	4a400404 	addi	r9,r9,16
 8006a90:	42000404 	addi	r8,r8,16
 8006a94:	593ffc15 	stw	r4,-16(r11)
 8006a98:	51000017 	ldw	r4,0(r10)
 8006a9c:	63000404 	addi	r12,r12,16
 8006aa0:	52800404 	addi	r10,r10,16
 8006aa4:	493ffc15 	stw	r4,-16(r9)
 8006aa8:	1bbfef1e 	bne	r3,r14,8006a68 <memmove+0x7c>
 8006aac:	79000044 	addi	r4,r15,1
 8006ab0:	2008913a 	slli	r4,r4,4
 8006ab4:	328003cc 	andi	r10,r6,15
 8006ab8:	02c000c4 	movi	r11,3
 8006abc:	1107883a 	add	r3,r2,r4
 8006ac0:	290b883a 	add	r5,r5,r4
 8006ac4:	5a801e2e 	bgeu	r11,r10,8006b40 <memmove+0x154>
 8006ac8:	1813883a 	mov	r9,r3
 8006acc:	2811883a 	mov	r8,r5
 8006ad0:	500f883a 	mov	r7,r10
 8006ad4:	41000017 	ldw	r4,0(r8)
 8006ad8:	4a400104 	addi	r9,r9,4
 8006adc:	39ffff04 	addi	r7,r7,-4
 8006ae0:	493fff15 	stw	r4,-4(r9)
 8006ae4:	42000104 	addi	r8,r8,4
 8006ae8:	59fffa36 	bltu	r11,r7,8006ad4 <memmove+0xe8>
 8006aec:	513fff04 	addi	r4,r10,-4
 8006af0:	2008d0ba 	srli	r4,r4,2
 8006af4:	318000cc 	andi	r6,r6,3
 8006af8:	21000044 	addi	r4,r4,1
 8006afc:	2109883a 	add	r4,r4,r4
 8006b00:	2109883a 	add	r4,r4,r4
 8006b04:	1907883a 	add	r3,r3,r4
 8006b08:	290b883a 	add	r5,r5,r4
 8006b0c:	30000926 	beq	r6,zero,8006b34 <memmove+0x148>
 8006b10:	198d883a 	add	r6,r3,r6
 8006b14:	29c00003 	ldbu	r7,0(r5)
 8006b18:	18c00044 	addi	r3,r3,1
 8006b1c:	29400044 	addi	r5,r5,1
 8006b20:	19ffffc5 	stb	r7,-1(r3)
 8006b24:	19bffb1e 	bne	r3,r6,8006b14 <memmove+0x128>
 8006b28:	f800283a 	ret
 8006b2c:	1007883a 	mov	r3,r2
 8006b30:	003ff606 	br	8006b0c <memmove+0x120>
 8006b34:	f800283a 	ret
 8006b38:	1007883a 	mov	r3,r2
 8006b3c:	003ff406 	br	8006b10 <memmove+0x124>
 8006b40:	500d883a 	mov	r6,r10
 8006b44:	003ff106 	br	8006b0c <memmove+0x120>

08006b48 <memset>:
 8006b48:	20c000cc 	andi	r3,r4,3
 8006b4c:	2005883a 	mov	r2,r4
 8006b50:	18004326 	beq	r3,zero,8006c60 <memset+0x118>
 8006b54:	31ffffc4 	addi	r7,r6,-1
 8006b58:	30004026 	beq	r6,zero,8006c5c <memset+0x114>
 8006b5c:	2813883a 	mov	r9,r5
 8006b60:	200d883a 	mov	r6,r4
 8006b64:	2007883a 	mov	r3,r4
 8006b68:	00000406 	br	8006b7c <memset+0x34>
 8006b6c:	3a3fffc4 	addi	r8,r7,-1
 8006b70:	31800044 	addi	r6,r6,1
 8006b74:	38003926 	beq	r7,zero,8006c5c <memset+0x114>
 8006b78:	400f883a 	mov	r7,r8
 8006b7c:	18c00044 	addi	r3,r3,1
 8006b80:	32400005 	stb	r9,0(r6)
 8006b84:	1a0000cc 	andi	r8,r3,3
 8006b88:	403ff81e 	bne	r8,zero,8006b6c <memset+0x24>
 8006b8c:	010000c4 	movi	r4,3
 8006b90:	21c02d2e 	bgeu	r4,r7,8006c48 <memset+0x100>
 8006b94:	29803fcc 	andi	r6,r5,255
 8006b98:	3008923a 	slli	r4,r6,8
 8006b9c:	218cb03a 	or	r6,r4,r6
 8006ba0:	3008943a 	slli	r4,r6,16
 8006ba4:	218cb03a 	or	r6,r4,r6
 8006ba8:	010003c4 	movi	r4,15
 8006bac:	21c0182e 	bgeu	r4,r7,8006c10 <memset+0xc8>
 8006bb0:	3b3ffc04 	addi	r12,r7,-16
 8006bb4:	6018d13a 	srli	r12,r12,4
 8006bb8:	1a000104 	addi	r8,r3,4
 8006bbc:	1ac00204 	addi	r11,r3,8
 8006bc0:	6008913a 	slli	r4,r12,4
 8006bc4:	1a800304 	addi	r10,r3,12
 8006bc8:	1813883a 	mov	r9,r3
 8006bcc:	21000504 	addi	r4,r4,20
 8006bd0:	1909883a 	add	r4,r3,r4
 8006bd4:	49800015 	stw	r6,0(r9)
 8006bd8:	41800015 	stw	r6,0(r8)
 8006bdc:	59800015 	stw	r6,0(r11)
 8006be0:	51800015 	stw	r6,0(r10)
 8006be4:	42000404 	addi	r8,r8,16
 8006be8:	4a400404 	addi	r9,r9,16
 8006bec:	5ac00404 	addi	r11,r11,16
 8006bf0:	52800404 	addi	r10,r10,16
 8006bf4:	413ff71e 	bne	r8,r4,8006bd4 <memset+0x8c>
 8006bf8:	63000044 	addi	r12,r12,1
 8006bfc:	6018913a 	slli	r12,r12,4
 8006c00:	39c003cc 	andi	r7,r7,15
 8006c04:	010000c4 	movi	r4,3
 8006c08:	1b07883a 	add	r3,r3,r12
 8006c0c:	21c00e2e 	bgeu	r4,r7,8006c48 <memset+0x100>
 8006c10:	1813883a 	mov	r9,r3
 8006c14:	3811883a 	mov	r8,r7
 8006c18:	010000c4 	movi	r4,3
 8006c1c:	49800015 	stw	r6,0(r9)
 8006c20:	423fff04 	addi	r8,r8,-4
 8006c24:	4a400104 	addi	r9,r9,4
 8006c28:	223ffc36 	bltu	r4,r8,8006c1c <memset+0xd4>
 8006c2c:	393fff04 	addi	r4,r7,-4
 8006c30:	2008d0ba 	srli	r4,r4,2
 8006c34:	39c000cc 	andi	r7,r7,3
 8006c38:	21000044 	addi	r4,r4,1
 8006c3c:	2109883a 	add	r4,r4,r4
 8006c40:	2109883a 	add	r4,r4,r4
 8006c44:	1907883a 	add	r3,r3,r4
 8006c48:	38000426 	beq	r7,zero,8006c5c <memset+0x114>
 8006c4c:	19cf883a 	add	r7,r3,r7
 8006c50:	19400005 	stb	r5,0(r3)
 8006c54:	18c00044 	addi	r3,r3,1
 8006c58:	19fffd1e 	bne	r3,r7,8006c50 <memset+0x108>
 8006c5c:	f800283a 	ret
 8006c60:	2007883a 	mov	r3,r4
 8006c64:	300f883a 	mov	r7,r6
 8006c68:	003fc806 	br	8006b8c <memset+0x44>

08006c6c <_Balloc>:
 8006c6c:	20801317 	ldw	r2,76(r4)
 8006c70:	defffc04 	addi	sp,sp,-16
 8006c74:	dc400115 	stw	r17,4(sp)
 8006c78:	dc000015 	stw	r16,0(sp)
 8006c7c:	dfc00315 	stw	ra,12(sp)
 8006c80:	dc800215 	stw	r18,8(sp)
 8006c84:	2023883a 	mov	r17,r4
 8006c88:	2821883a 	mov	r16,r5
 8006c8c:	10000f26 	beq	r2,zero,8006ccc <_Balloc+0x60>
 8006c90:	8407883a 	add	r3,r16,r16
 8006c94:	18c7883a 	add	r3,r3,r3
 8006c98:	10c7883a 	add	r3,r2,r3
 8006c9c:	18800017 	ldw	r2,0(r3)
 8006ca0:	10001126 	beq	r2,zero,8006ce8 <_Balloc+0x7c>
 8006ca4:	11000017 	ldw	r4,0(r2)
 8006ca8:	19000015 	stw	r4,0(r3)
 8006cac:	10000415 	stw	zero,16(r2)
 8006cb0:	10000315 	stw	zero,12(r2)
 8006cb4:	dfc00317 	ldw	ra,12(sp)
 8006cb8:	dc800217 	ldw	r18,8(sp)
 8006cbc:	dc400117 	ldw	r17,4(sp)
 8006cc0:	dc000017 	ldw	r16,0(sp)
 8006cc4:	dec00404 	addi	sp,sp,16
 8006cc8:	f800283a 	ret
 8006ccc:	01400104 	movi	r5,4
 8006cd0:	01800844 	movi	r6,33
 8006cd4:	80098980 	call	8009898 <_calloc_r>
 8006cd8:	88801315 	stw	r2,76(r17)
 8006cdc:	103fec1e 	bne	r2,zero,8006c90 <_Balloc+0x24>
 8006ce0:	0005883a 	mov	r2,zero
 8006ce4:	003ff306 	br	8006cb4 <_Balloc+0x48>
 8006ce8:	01400044 	movi	r5,1
 8006cec:	2c24983a 	sll	r18,r5,r16
 8006cf0:	8809883a 	mov	r4,r17
 8006cf4:	91800144 	addi	r6,r18,5
 8006cf8:	318d883a 	add	r6,r6,r6
 8006cfc:	318d883a 	add	r6,r6,r6
 8006d00:	80098980 	call	8009898 <_calloc_r>
 8006d04:	103ff626 	beq	r2,zero,8006ce0 <_Balloc+0x74>
 8006d08:	14000115 	stw	r16,4(r2)
 8006d0c:	14800215 	stw	r18,8(r2)
 8006d10:	003fe606 	br	8006cac <_Balloc+0x40>

08006d14 <_Bfree>:
 8006d14:	28000826 	beq	r5,zero,8006d38 <_Bfree+0x24>
 8006d18:	28c00117 	ldw	r3,4(r5)
 8006d1c:	20801317 	ldw	r2,76(r4)
 8006d20:	18c7883a 	add	r3,r3,r3
 8006d24:	18c7883a 	add	r3,r3,r3
 8006d28:	10c5883a 	add	r2,r2,r3
 8006d2c:	10c00017 	ldw	r3,0(r2)
 8006d30:	28c00015 	stw	r3,0(r5)
 8006d34:	11400015 	stw	r5,0(r2)
 8006d38:	f800283a 	ret

08006d3c <__multadd>:
 8006d3c:	defffa04 	addi	sp,sp,-24
 8006d40:	dc000115 	stw	r16,4(sp)
 8006d44:	2c000417 	ldw	r16,16(r5)
 8006d48:	dc800315 	stw	r18,12(sp)
 8006d4c:	dc400215 	stw	r17,8(sp)
 8006d50:	dfc00515 	stw	ra,20(sp)
 8006d54:	dcc00415 	stw	r19,16(sp)
 8006d58:	2823883a 	mov	r17,r5
 8006d5c:	2025883a 	mov	r18,r4
 8006d60:	2a400504 	addi	r9,r5,20
 8006d64:	0015883a 	mov	r10,zero
 8006d68:	4a000017 	ldw	r8,0(r9)
 8006d6c:	4a400104 	addi	r9,r9,4
 8006d70:	52800044 	addi	r10,r10,1
 8006d74:	40ffffcc 	andi	r3,r8,65535
 8006d78:	1987383a 	mul	r3,r3,r6
 8006d7c:	4010d43a 	srli	r8,r8,16
 8006d80:	19cf883a 	add	r7,r3,r7
 8006d84:	4191383a 	mul	r8,r8,r6
 8006d88:	3816d43a 	srli	r11,r7,16
 8006d8c:	38ffffcc 	andi	r3,r7,65535
 8006d90:	5a0f883a 	add	r7,r11,r8
 8006d94:	3810943a 	slli	r8,r7,16
 8006d98:	380ed43a 	srli	r7,r7,16
 8006d9c:	40c7883a 	add	r3,r8,r3
 8006da0:	48ffff15 	stw	r3,-4(r9)
 8006da4:	543ff016 	blt	r10,r16,8006d68 <__multadd+0x2c>
 8006da8:	38000926 	beq	r7,zero,8006dd0 <__multadd+0x94>
 8006dac:	88800217 	ldw	r2,8(r17)
 8006db0:	80800f0e 	bge	r16,r2,8006df0 <__multadd+0xb4>
 8006db4:	80800144 	addi	r2,r16,5
 8006db8:	1085883a 	add	r2,r2,r2
 8006dbc:	1085883a 	add	r2,r2,r2
 8006dc0:	8885883a 	add	r2,r17,r2
 8006dc4:	11c00015 	stw	r7,0(r2)
 8006dc8:	84000044 	addi	r16,r16,1
 8006dcc:	8c000415 	stw	r16,16(r17)
 8006dd0:	8805883a 	mov	r2,r17
 8006dd4:	dfc00517 	ldw	ra,20(sp)
 8006dd8:	dcc00417 	ldw	r19,16(sp)
 8006ddc:	dc800317 	ldw	r18,12(sp)
 8006de0:	dc400217 	ldw	r17,8(sp)
 8006de4:	dc000117 	ldw	r16,4(sp)
 8006de8:	dec00604 	addi	sp,sp,24
 8006dec:	f800283a 	ret
 8006df0:	89400117 	ldw	r5,4(r17)
 8006df4:	9009883a 	mov	r4,r18
 8006df8:	d9c00015 	stw	r7,0(sp)
 8006dfc:	29400044 	addi	r5,r5,1
 8006e00:	8006c6c0 	call	8006c6c <_Balloc>
 8006e04:	89800417 	ldw	r6,16(r17)
 8006e08:	11000304 	addi	r4,r2,12
 8006e0c:	89400304 	addi	r5,r17,12
 8006e10:	31800084 	addi	r6,r6,2
 8006e14:	318d883a 	add	r6,r6,r6
 8006e18:	318d883a 	add	r6,r6,r6
 8006e1c:	1027883a 	mov	r19,r2
 8006e20:	80068b40 	call	80068b4 <memcpy>
 8006e24:	d9c00017 	ldw	r7,0(sp)
 8006e28:	88000a26 	beq	r17,zero,8006e54 <__multadd+0x118>
 8006e2c:	89000117 	ldw	r4,4(r17)
 8006e30:	90c01317 	ldw	r3,76(r18)
 8006e34:	2109883a 	add	r4,r4,r4
 8006e38:	2109883a 	add	r4,r4,r4
 8006e3c:	1907883a 	add	r3,r3,r4
 8006e40:	18800017 	ldw	r2,0(r3)
 8006e44:	88800015 	stw	r2,0(r17)
 8006e48:	1c400015 	stw	r17,0(r3)
 8006e4c:	9823883a 	mov	r17,r19
 8006e50:	003fd806 	br	8006db4 <__multadd+0x78>
 8006e54:	9823883a 	mov	r17,r19
 8006e58:	003fd606 	br	8006db4 <__multadd+0x78>

08006e5c <__s2b>:
 8006e5c:	defff904 	addi	sp,sp,-28
 8006e60:	dc400115 	stw	r17,4(sp)
 8006e64:	dc000015 	stw	r16,0(sp)
 8006e68:	2023883a 	mov	r17,r4
 8006e6c:	2821883a 	mov	r16,r5
 8006e70:	39000204 	addi	r4,r7,8
 8006e74:	01400244 	movi	r5,9
 8006e78:	dcc00315 	stw	r19,12(sp)
 8006e7c:	dc800215 	stw	r18,8(sp)
 8006e80:	dfc00615 	stw	ra,24(sp)
 8006e84:	dd400515 	stw	r21,20(sp)
 8006e88:	dd000415 	stw	r20,16(sp)
 8006e8c:	3825883a 	mov	r18,r7
 8006e90:	3027883a 	mov	r19,r6
 8006e94:	800ac9c0 	call	800ac9c <__divsi3>
 8006e98:	00c00044 	movi	r3,1
 8006e9c:	000b883a 	mov	r5,zero
 8006ea0:	1880030e 	bge	r3,r2,8006eb0 <__s2b+0x54>
 8006ea4:	18c7883a 	add	r3,r3,r3
 8006ea8:	29400044 	addi	r5,r5,1
 8006eac:	18bffd16 	blt	r3,r2,8006ea4 <__s2b+0x48>
 8006eb0:	8809883a 	mov	r4,r17
 8006eb4:	8006c6c0 	call	8006c6c <_Balloc>
 8006eb8:	d8c00717 	ldw	r3,28(sp)
 8006ebc:	10c00515 	stw	r3,20(r2)
 8006ec0:	00c00044 	movi	r3,1
 8006ec4:	10c00415 	stw	r3,16(r2)
 8006ec8:	00c00244 	movi	r3,9
 8006ecc:	1cc0210e 	bge	r3,r19,8006f54 <__s2b+0xf8>
 8006ed0:	80eb883a 	add	r21,r16,r3
 8006ed4:	a829883a 	mov	r20,r21
 8006ed8:	84e1883a 	add	r16,r16,r19
 8006edc:	a1c00007 	ldb	r7,0(r20)
 8006ee0:	8809883a 	mov	r4,r17
 8006ee4:	a5000044 	addi	r20,r20,1
 8006ee8:	100b883a 	mov	r5,r2
 8006eec:	01800284 	movi	r6,10
 8006ef0:	39fff404 	addi	r7,r7,-48
 8006ef4:	8006d3c0 	call	8006d3c <__multadd>
 8006ef8:	a43ff81e 	bne	r20,r16,8006edc <__s2b+0x80>
 8006efc:	ace1883a 	add	r16,r21,r19
 8006f00:	843ffe04 	addi	r16,r16,-8
 8006f04:	9c800a0e 	bge	r19,r18,8006f30 <__s2b+0xd4>
 8006f08:	94e5c83a 	sub	r18,r18,r19
 8006f0c:	84a5883a 	add	r18,r16,r18
 8006f10:	81c00007 	ldb	r7,0(r16)
 8006f14:	8809883a 	mov	r4,r17
 8006f18:	84000044 	addi	r16,r16,1
 8006f1c:	100b883a 	mov	r5,r2
 8006f20:	01800284 	movi	r6,10
 8006f24:	39fff404 	addi	r7,r7,-48
 8006f28:	8006d3c0 	call	8006d3c <__multadd>
 8006f2c:	84bff81e 	bne	r16,r18,8006f10 <__s2b+0xb4>
 8006f30:	dfc00617 	ldw	ra,24(sp)
 8006f34:	dd400517 	ldw	r21,20(sp)
 8006f38:	dd000417 	ldw	r20,16(sp)
 8006f3c:	dcc00317 	ldw	r19,12(sp)
 8006f40:	dc800217 	ldw	r18,8(sp)
 8006f44:	dc400117 	ldw	r17,4(sp)
 8006f48:	dc000017 	ldw	r16,0(sp)
 8006f4c:	dec00704 	addi	sp,sp,28
 8006f50:	f800283a 	ret
 8006f54:	84000284 	addi	r16,r16,10
 8006f58:	1827883a 	mov	r19,r3
 8006f5c:	003fe906 	br	8006f04 <__s2b+0xa8>

08006f60 <__hi0bits>:
 8006f60:	20bfffec 	andhi	r2,r4,65535
 8006f64:	1000141e 	bne	r2,zero,8006fb8 <__hi0bits+0x58>
 8006f68:	2008943a 	slli	r4,r4,16
 8006f6c:	00800404 	movi	r2,16
 8006f70:	20ffc02c 	andhi	r3,r4,65280
 8006f74:	1800021e 	bne	r3,zero,8006f80 <__hi0bits+0x20>
 8006f78:	2008923a 	slli	r4,r4,8
 8006f7c:	10800204 	addi	r2,r2,8
 8006f80:	20fc002c 	andhi	r3,r4,61440
 8006f84:	1800021e 	bne	r3,zero,8006f90 <__hi0bits+0x30>
 8006f88:	2008913a 	slli	r4,r4,4
 8006f8c:	10800104 	addi	r2,r2,4
 8006f90:	20f0002c 	andhi	r3,r4,49152
 8006f94:	1800031e 	bne	r3,zero,8006fa4 <__hi0bits+0x44>
 8006f98:	2109883a 	add	r4,r4,r4
 8006f9c:	10800084 	addi	r2,r2,2
 8006fa0:	2109883a 	add	r4,r4,r4
 8006fa4:	20000316 	blt	r4,zero,8006fb4 <__hi0bits+0x54>
 8006fa8:	2110002c 	andhi	r4,r4,16384
 8006fac:	2000041e 	bne	r4,zero,8006fc0 <__hi0bits+0x60>
 8006fb0:	00800804 	movi	r2,32
 8006fb4:	f800283a 	ret
 8006fb8:	0005883a 	mov	r2,zero
 8006fbc:	003fec06 	br	8006f70 <__hi0bits+0x10>
 8006fc0:	10800044 	addi	r2,r2,1
 8006fc4:	f800283a 	ret

08006fc8 <__lo0bits>:
 8006fc8:	20c00017 	ldw	r3,0(r4)
 8006fcc:	188001cc 	andi	r2,r3,7
 8006fd0:	10000826 	beq	r2,zero,8006ff4 <__lo0bits+0x2c>
 8006fd4:	1880004c 	andi	r2,r3,1
 8006fd8:	1000211e 	bne	r2,zero,8007060 <__lo0bits+0x98>
 8006fdc:	1880008c 	andi	r2,r3,2
 8006fe0:	1000211e 	bne	r2,zero,8007068 <__lo0bits+0xa0>
 8006fe4:	1806d0ba 	srli	r3,r3,2
 8006fe8:	00800084 	movi	r2,2
 8006fec:	20c00015 	stw	r3,0(r4)
 8006ff0:	f800283a 	ret
 8006ff4:	18bfffcc 	andi	r2,r3,65535
 8006ff8:	10001326 	beq	r2,zero,8007048 <__lo0bits+0x80>
 8006ffc:	0005883a 	mov	r2,zero
 8007000:	19403fcc 	andi	r5,r3,255
 8007004:	2800021e 	bne	r5,zero,8007010 <__lo0bits+0x48>
 8007008:	1806d23a 	srli	r3,r3,8
 800700c:	10800204 	addi	r2,r2,8
 8007010:	194003cc 	andi	r5,r3,15
 8007014:	2800021e 	bne	r5,zero,8007020 <__lo0bits+0x58>
 8007018:	1806d13a 	srli	r3,r3,4
 800701c:	10800104 	addi	r2,r2,4
 8007020:	194000cc 	andi	r5,r3,3
 8007024:	2800021e 	bne	r5,zero,8007030 <__lo0bits+0x68>
 8007028:	1806d0ba 	srli	r3,r3,2
 800702c:	10800084 	addi	r2,r2,2
 8007030:	1940004c 	andi	r5,r3,1
 8007034:	2800081e 	bne	r5,zero,8007058 <__lo0bits+0x90>
 8007038:	1806d07a 	srli	r3,r3,1
 800703c:	1800051e 	bne	r3,zero,8007054 <__lo0bits+0x8c>
 8007040:	00800804 	movi	r2,32
 8007044:	f800283a 	ret
 8007048:	1806d43a 	srli	r3,r3,16
 800704c:	00800404 	movi	r2,16
 8007050:	003feb06 	br	8007000 <__lo0bits+0x38>
 8007054:	10800044 	addi	r2,r2,1
 8007058:	20c00015 	stw	r3,0(r4)
 800705c:	f800283a 	ret
 8007060:	0005883a 	mov	r2,zero
 8007064:	f800283a 	ret
 8007068:	1806d07a 	srli	r3,r3,1
 800706c:	00800044 	movi	r2,1
 8007070:	20c00015 	stw	r3,0(r4)
 8007074:	f800283a 	ret

08007078 <__i2b>:
 8007078:	defffd04 	addi	sp,sp,-12
 800707c:	dc000015 	stw	r16,0(sp)
 8007080:	04000044 	movi	r16,1
 8007084:	dc400115 	stw	r17,4(sp)
 8007088:	2823883a 	mov	r17,r5
 800708c:	800b883a 	mov	r5,r16
 8007090:	dfc00215 	stw	ra,8(sp)
 8007094:	8006c6c0 	call	8006c6c <_Balloc>
 8007098:	14400515 	stw	r17,20(r2)
 800709c:	14000415 	stw	r16,16(r2)
 80070a0:	dfc00217 	ldw	ra,8(sp)
 80070a4:	dc400117 	ldw	r17,4(sp)
 80070a8:	dc000017 	ldw	r16,0(sp)
 80070ac:	dec00304 	addi	sp,sp,12
 80070b0:	f800283a 	ret

080070b4 <__multiply>:
 80070b4:	defffa04 	addi	sp,sp,-24
 80070b8:	dcc00315 	stw	r19,12(sp)
 80070bc:	dc800215 	stw	r18,8(sp)
 80070c0:	2cc00417 	ldw	r19,16(r5)
 80070c4:	34800417 	ldw	r18,16(r6)
 80070c8:	dd000415 	stw	r20,16(sp)
 80070cc:	dc400115 	stw	r17,4(sp)
 80070d0:	dfc00515 	stw	ra,20(sp)
 80070d4:	dc000015 	stw	r16,0(sp)
 80070d8:	2829883a 	mov	r20,r5
 80070dc:	3023883a 	mov	r17,r6
 80070e0:	9c807016 	blt	r19,r18,80072a4 <__multiply+0x1f0>
 80070e4:	9005883a 	mov	r2,r18
 80070e8:	9825883a 	mov	r18,r19
 80070ec:	1027883a 	mov	r19,r2
 80070f0:	a0800217 	ldw	r2,8(r20)
 80070f4:	94e1883a 	add	r16,r18,r19
 80070f8:	a1400117 	ldw	r5,4(r20)
 80070fc:	1400010e 	bge	r2,r16,8007104 <__multiply+0x50>
 8007100:	29400044 	addi	r5,r5,1
 8007104:	8006c6c0 	call	8006c6c <_Balloc>
 8007108:	8417883a 	add	r11,r16,r16
 800710c:	13000504 	addi	r12,r2,20
 8007110:	5ad7883a 	add	r11,r11,r11
 8007114:	62d7883a 	add	r11,r12,r11
 8007118:	6007883a 	mov	r3,r12
 800711c:	62c0032e 	bgeu	r12,r11,800712c <__multiply+0x78>
 8007120:	18000015 	stw	zero,0(r3)
 8007124:	18c00104 	addi	r3,r3,4
 8007128:	1afffd36 	bltu	r3,r11,8007120 <__multiply+0x6c>
 800712c:	9ce7883a 	add	r19,r19,r19
 8007130:	94a5883a 	add	r18,r18,r18
 8007134:	89800504 	addi	r6,r17,20
 8007138:	9ce7883a 	add	r19,r19,r19
 800713c:	a3800504 	addi	r14,r20,20
 8007140:	94a5883a 	add	r18,r18,r18
 8007144:	34db883a 	add	r13,r6,r19
 8007148:	7495883a 	add	r10,r14,r18
 800714c:	3340422e 	bgeu	r6,r13,8007258 <__multiply+0x1a4>
 8007150:	34400017 	ldw	r17,0(r6)
 8007154:	8cbfffcc 	andi	r18,r17,65535
 8007158:	90001b26 	beq	r18,zero,80071c8 <__multiply+0x114>
 800715c:	6013883a 	mov	r9,r12
 8007160:	7023883a 	mov	r17,r14
 8007164:	0011883a 	mov	r8,zero
 8007168:	88c00017 	ldw	r3,0(r17)
 800716c:	4bc00017 	ldw	r15,0(r9)
 8007170:	8c400104 	addi	r17,r17,4
 8007174:	19ffffcc 	andi	r7,r3,65535
 8007178:	3c8f383a 	mul	r7,r7,r18
 800717c:	1808d43a 	srli	r4,r3,16
 8007180:	797fffcc 	andi	r5,r15,65535
 8007184:	29cb883a 	add	r5,r5,r7
 8007188:	2a0b883a 	add	r5,r5,r8
 800718c:	2489383a 	mul	r4,r4,r18
 8007190:	7806d43a 	srli	r3,r15,16
 8007194:	2810d43a 	srli	r8,r5,16
 8007198:	297fffcc 	andi	r5,r5,65535
 800719c:	1907883a 	add	r3,r3,r4
 80071a0:	1a07883a 	add	r3,r3,r8
 80071a4:	1808943a 	slli	r4,r3,16
 80071a8:	480f883a 	mov	r7,r9
 80071ac:	1810d43a 	srli	r8,r3,16
 80071b0:	214ab03a 	or	r5,r4,r5
 80071b4:	49400015 	stw	r5,0(r9)
 80071b8:	4a400104 	addi	r9,r9,4
 80071bc:	8abfea36 	bltu	r17,r10,8007168 <__multiply+0xb4>
 80071c0:	3a000115 	stw	r8,4(r7)
 80071c4:	34400017 	ldw	r17,0(r6)
 80071c8:	8822d43a 	srli	r17,r17,16
 80071cc:	88001f26 	beq	r17,zero,800724c <__multiply+0x198>
 80071d0:	60c00017 	ldw	r3,0(r12)
 80071d4:	7013883a 	mov	r9,r14
 80071d8:	601f883a 	mov	r15,r12
 80071dc:	1811883a 	mov	r8,r3
 80071e0:	6027883a 	mov	r19,r12
 80071e4:	000f883a 	mov	r7,zero
 80071e8:	00000106 	br	80071f0 <__multiply+0x13c>
 80071ec:	9027883a 	mov	r19,r18
 80071f0:	4940000b 	ldhu	r5,0(r9)
 80071f4:	4010d43a 	srli	r8,r8,16
 80071f8:	193fffcc 	andi	r4,r3,65535
 80071fc:	2c4b383a 	mul	r5,r5,r17
 8007200:	7bc00104 	addi	r15,r15,4
 8007204:	4a400104 	addi	r9,r9,4
 8007208:	2a0b883a 	add	r5,r5,r8
 800720c:	29cb883a 	add	r5,r5,r7
 8007210:	2806943a 	slli	r3,r5,16
 8007214:	9c800104 	addi	r18,r19,4
 8007218:	280ad43a 	srli	r5,r5,16
 800721c:	1908b03a 	or	r4,r3,r4
 8007220:	793fff15 	stw	r4,-4(r15)
 8007224:	48ffff17 	ldw	r3,-4(r9)
 8007228:	92000017 	ldw	r8,0(r18)
 800722c:	1806d43a 	srli	r3,r3,16
 8007230:	413fffcc 	andi	r4,r8,65535
 8007234:	1c47383a 	mul	r3,r3,r17
 8007238:	1907883a 	add	r3,r3,r4
 800723c:	1947883a 	add	r3,r3,r5
 8007240:	180ed43a 	srli	r7,r3,16
 8007244:	4abfe936 	bltu	r9,r10,80071ec <__multiply+0x138>
 8007248:	98c00115 	stw	r3,4(r19)
 800724c:	31800104 	addi	r6,r6,4
 8007250:	63000104 	addi	r12,r12,4
 8007254:	337fbe36 	bltu	r6,r13,8007150 <__multiply+0x9c>
 8007258:	0400090e 	bge	zero,r16,8007280 <__multiply+0x1cc>
 800725c:	58ffff17 	ldw	r3,-4(r11)
 8007260:	5affff04 	addi	r11,r11,-4
 8007264:	18000326 	beq	r3,zero,8007274 <__multiply+0x1c0>
 8007268:	00000506 	br	8007280 <__multiply+0x1cc>
 800726c:	58c00017 	ldw	r3,0(r11)
 8007270:	1800031e 	bne	r3,zero,8007280 <__multiply+0x1cc>
 8007274:	843fffc4 	addi	r16,r16,-1
 8007278:	5affff04 	addi	r11,r11,-4
 800727c:	803ffb1e 	bne	r16,zero,800726c <__multiply+0x1b8>
 8007280:	14000415 	stw	r16,16(r2)
 8007284:	dfc00517 	ldw	ra,20(sp)
 8007288:	dd000417 	ldw	r20,16(sp)
 800728c:	dcc00317 	ldw	r19,12(sp)
 8007290:	dc800217 	ldw	r18,8(sp)
 8007294:	dc400117 	ldw	r17,4(sp)
 8007298:	dc000017 	ldw	r16,0(sp)
 800729c:	dec00604 	addi	sp,sp,24
 80072a0:	f800283a 	ret
 80072a4:	3029883a 	mov	r20,r6
 80072a8:	2823883a 	mov	r17,r5
 80072ac:	003f9006 	br	80070f0 <__multiply+0x3c>

080072b0 <__pow5mult>:
 80072b0:	defffa04 	addi	sp,sp,-24
 80072b4:	dcc00315 	stw	r19,12(sp)
 80072b8:	dc800215 	stw	r18,8(sp)
 80072bc:	dc000015 	stw	r16,0(sp)
 80072c0:	dfc00515 	stw	ra,20(sp)
 80072c4:	dd000415 	stw	r20,16(sp)
 80072c8:	dc400115 	stw	r17,4(sp)
 80072cc:	308000cc 	andi	r2,r6,3
 80072d0:	3021883a 	mov	r16,r6
 80072d4:	2027883a 	mov	r19,r4
 80072d8:	2825883a 	mov	r18,r5
 80072dc:	10002e1e 	bne	r2,zero,8007398 <__pow5mult+0xe8>
 80072e0:	8021d0ba 	srai	r16,r16,2
 80072e4:	80001a26 	beq	r16,zero,8007350 <__pow5mult+0xa0>
 80072e8:	9c401217 	ldw	r17,72(r19)
 80072ec:	8800061e 	bne	r17,zero,8007308 <__pow5mult+0x58>
 80072f0:	00003406 	br	80073c4 <__pow5mult+0x114>
 80072f4:	8021d07a 	srai	r16,r16,1
 80072f8:	80001526 	beq	r16,zero,8007350 <__pow5mult+0xa0>
 80072fc:	88800017 	ldw	r2,0(r17)
 8007300:	10001c26 	beq	r2,zero,8007374 <__pow5mult+0xc4>
 8007304:	1023883a 	mov	r17,r2
 8007308:	80c0004c 	andi	r3,r16,1
 800730c:	183ff926 	beq	r3,zero,80072f4 <__pow5mult+0x44>
 8007310:	900b883a 	mov	r5,r18
 8007314:	880d883a 	mov	r6,r17
 8007318:	9809883a 	mov	r4,r19
 800731c:	80070b40 	call	80070b4 <__multiply>
 8007320:	90001b26 	beq	r18,zero,8007390 <__pow5mult+0xe0>
 8007324:	91c00117 	ldw	r7,4(r18)
 8007328:	98c01317 	ldw	r3,76(r19)
 800732c:	8021d07a 	srai	r16,r16,1
 8007330:	39cf883a 	add	r7,r7,r7
 8007334:	39cf883a 	add	r7,r7,r7
 8007338:	19c7883a 	add	r3,r3,r7
 800733c:	19000017 	ldw	r4,0(r3)
 8007340:	91000015 	stw	r4,0(r18)
 8007344:	1c800015 	stw	r18,0(r3)
 8007348:	1025883a 	mov	r18,r2
 800734c:	803feb1e 	bne	r16,zero,80072fc <__pow5mult+0x4c>
 8007350:	9005883a 	mov	r2,r18
 8007354:	dfc00517 	ldw	ra,20(sp)
 8007358:	dd000417 	ldw	r20,16(sp)
 800735c:	dcc00317 	ldw	r19,12(sp)
 8007360:	dc800217 	ldw	r18,8(sp)
 8007364:	dc400117 	ldw	r17,4(sp)
 8007368:	dc000017 	ldw	r16,0(sp)
 800736c:	dec00604 	addi	sp,sp,24
 8007370:	f800283a 	ret
 8007374:	9809883a 	mov	r4,r19
 8007378:	880b883a 	mov	r5,r17
 800737c:	880d883a 	mov	r6,r17
 8007380:	80070b40 	call	80070b4 <__multiply>
 8007384:	88800015 	stw	r2,0(r17)
 8007388:	10000015 	stw	zero,0(r2)
 800738c:	003fdd06 	br	8007304 <__pow5mult+0x54>
 8007390:	1025883a 	mov	r18,r2
 8007394:	003fd706 	br	80072f4 <__pow5mult+0x44>
 8007398:	10bfffc4 	addi	r2,r2,-1
 800739c:	1085883a 	add	r2,r2,r2
 80073a0:	00c200b4 	movhi	r3,2050
 80073a4:	18e6b304 	addi	r3,r3,-25908
 80073a8:	1085883a 	add	r2,r2,r2
 80073ac:	1885883a 	add	r2,r3,r2
 80073b0:	11800017 	ldw	r6,0(r2)
 80073b4:	000f883a 	mov	r7,zero
 80073b8:	8006d3c0 	call	8006d3c <__multadd>
 80073bc:	1025883a 	mov	r18,r2
 80073c0:	003fc706 	br	80072e0 <__pow5mult+0x30>
 80073c4:	05000044 	movi	r20,1
 80073c8:	9809883a 	mov	r4,r19
 80073cc:	a00b883a 	mov	r5,r20
 80073d0:	8006c6c0 	call	8006c6c <_Balloc>
 80073d4:	1023883a 	mov	r17,r2
 80073d8:	00809c44 	movi	r2,625
 80073dc:	88800515 	stw	r2,20(r17)
 80073e0:	8d000415 	stw	r20,16(r17)
 80073e4:	9c401215 	stw	r17,72(r19)
 80073e8:	88000015 	stw	zero,0(r17)
 80073ec:	003fc606 	br	8007308 <__pow5mult+0x58>

080073f0 <__lshift>:
 80073f0:	defff904 	addi	sp,sp,-28
 80073f4:	dd000415 	stw	r20,16(sp)
 80073f8:	dcc00315 	stw	r19,12(sp)
 80073fc:	3029d17a 	srai	r20,r6,5
 8007400:	2cc00417 	ldw	r19,16(r5)
 8007404:	28800217 	ldw	r2,8(r5)
 8007408:	dd400515 	stw	r21,20(sp)
 800740c:	a4e7883a 	add	r19,r20,r19
 8007410:	dc800215 	stw	r18,8(sp)
 8007414:	dc400115 	stw	r17,4(sp)
 8007418:	dc000015 	stw	r16,0(sp)
 800741c:	dfc00615 	stw	ra,24(sp)
 8007420:	9c000044 	addi	r16,r19,1
 8007424:	2823883a 	mov	r17,r5
 8007428:	302b883a 	mov	r21,r6
 800742c:	2025883a 	mov	r18,r4
 8007430:	29400117 	ldw	r5,4(r5)
 8007434:	1400030e 	bge	r2,r16,8007444 <__lshift+0x54>
 8007438:	1085883a 	add	r2,r2,r2
 800743c:	29400044 	addi	r5,r5,1
 8007440:	143ffd16 	blt	r2,r16,8007438 <__lshift+0x48>
 8007444:	9009883a 	mov	r4,r18
 8007448:	8006c6c0 	call	8006c6c <_Balloc>
 800744c:	11c00504 	addi	r7,r2,20
 8007450:	0500090e 	bge	zero,r20,8007478 <__lshift+0x88>
 8007454:	3811883a 	mov	r8,r7
 8007458:	0007883a 	mov	r3,zero
 800745c:	40000015 	stw	zero,0(r8)
 8007460:	18c00044 	addi	r3,r3,1
 8007464:	42000104 	addi	r8,r8,4
 8007468:	1d3ffc1e 	bne	r3,r20,800745c <__lshift+0x6c>
 800746c:	18c7883a 	add	r3,r3,r3
 8007470:	18c7883a 	add	r3,r3,r3
 8007474:	38cf883a 	add	r7,r7,r3
 8007478:	89000417 	ldw	r4,16(r17)
 800747c:	88c00504 	addi	r3,r17,20
 8007480:	a98007cc 	andi	r6,r21,31
 8007484:	2109883a 	add	r4,r4,r4
 8007488:	2109883a 	add	r4,r4,r4
 800748c:	1909883a 	add	r4,r3,r4
 8007490:	30002326 	beq	r6,zero,8007520 <__lshift+0x130>
 8007494:	01400804 	movi	r5,32
 8007498:	298bc83a 	sub	r5,r5,r6
 800749c:	0013883a 	mov	r9,zero
 80074a0:	1a000017 	ldw	r8,0(r3)
 80074a4:	3815883a 	mov	r10,r7
 80074a8:	39c00104 	addi	r7,r7,4
 80074ac:	4190983a 	sll	r8,r8,r6
 80074b0:	18c00104 	addi	r3,r3,4
 80074b4:	4a10b03a 	or	r8,r9,r8
 80074b8:	3a3fff15 	stw	r8,-4(r7)
 80074bc:	1a3fff17 	ldw	r8,-4(r3)
 80074c0:	4152d83a 	srl	r9,r8,r5
 80074c4:	193ff636 	bltu	r3,r4,80074a0 <__lshift+0xb0>
 80074c8:	52400115 	stw	r9,4(r10)
 80074cc:	48001a1e 	bne	r9,zero,8007538 <__lshift+0x148>
 80074d0:	843fffc4 	addi	r16,r16,-1
 80074d4:	14000415 	stw	r16,16(r2)
 80074d8:	88000826 	beq	r17,zero,80074fc <__lshift+0x10c>
 80074dc:	89000117 	ldw	r4,4(r17)
 80074e0:	90c01317 	ldw	r3,76(r18)
 80074e4:	2109883a 	add	r4,r4,r4
 80074e8:	2109883a 	add	r4,r4,r4
 80074ec:	1907883a 	add	r3,r3,r4
 80074f0:	19000017 	ldw	r4,0(r3)
 80074f4:	89000015 	stw	r4,0(r17)
 80074f8:	1c400015 	stw	r17,0(r3)
 80074fc:	dfc00617 	ldw	ra,24(sp)
 8007500:	dd400517 	ldw	r21,20(sp)
 8007504:	dd000417 	ldw	r20,16(sp)
 8007508:	dcc00317 	ldw	r19,12(sp)
 800750c:	dc800217 	ldw	r18,8(sp)
 8007510:	dc400117 	ldw	r17,4(sp)
 8007514:	dc000017 	ldw	r16,0(sp)
 8007518:	dec00704 	addi	sp,sp,28
 800751c:	f800283a 	ret
 8007520:	19400017 	ldw	r5,0(r3)
 8007524:	39c00104 	addi	r7,r7,4
 8007528:	18c00104 	addi	r3,r3,4
 800752c:	397fff15 	stw	r5,-4(r7)
 8007530:	193ffb36 	bltu	r3,r4,8007520 <__lshift+0x130>
 8007534:	003fe606 	br	80074d0 <__lshift+0xe0>
 8007538:	9c000084 	addi	r16,r19,2
 800753c:	003fe406 	br	80074d0 <__lshift+0xe0>

08007540 <__mcmp>:
 8007540:	20800417 	ldw	r2,16(r4)
 8007544:	28c00417 	ldw	r3,16(r5)
 8007548:	10c5c83a 	sub	r2,r2,r3
 800754c:	1000111e 	bne	r2,zero,8007594 <__mcmp+0x54>
 8007550:	18c7883a 	add	r3,r3,r3
 8007554:	18c7883a 	add	r3,r3,r3
 8007558:	21000504 	addi	r4,r4,20
 800755c:	29400504 	addi	r5,r5,20
 8007560:	20c5883a 	add	r2,r4,r3
 8007564:	28cb883a 	add	r5,r5,r3
 8007568:	00000106 	br	8007570 <__mcmp+0x30>
 800756c:	20800a2e 	bgeu	r4,r2,8007598 <__mcmp+0x58>
 8007570:	10bfff04 	addi	r2,r2,-4
 8007574:	297fff04 	addi	r5,r5,-4
 8007578:	11800017 	ldw	r6,0(r2)
 800757c:	28c00017 	ldw	r3,0(r5)
 8007580:	30fffa26 	beq	r6,r3,800756c <__mcmp+0x2c>
 8007584:	30c00236 	bltu	r6,r3,8007590 <__mcmp+0x50>
 8007588:	00800044 	movi	r2,1
 800758c:	f800283a 	ret
 8007590:	00bfffc4 	movi	r2,-1
 8007594:	f800283a 	ret
 8007598:	0005883a 	mov	r2,zero
 800759c:	f800283a 	ret

080075a0 <__mdiff>:
 80075a0:	defffb04 	addi	sp,sp,-20
 80075a4:	dc000015 	stw	r16,0(sp)
 80075a8:	2821883a 	mov	r16,r5
 80075ac:	dcc00315 	stw	r19,12(sp)
 80075b0:	300b883a 	mov	r5,r6
 80075b4:	2027883a 	mov	r19,r4
 80075b8:	8009883a 	mov	r4,r16
 80075bc:	dc800215 	stw	r18,8(sp)
 80075c0:	dfc00415 	stw	ra,16(sp)
 80075c4:	dc400115 	stw	r17,4(sp)
 80075c8:	3025883a 	mov	r18,r6
 80075cc:	80075400 	call	8007540 <__mcmp>
 80075d0:	10005226 	beq	r2,zero,800771c <__mdiff+0x17c>
 80075d4:	10004c16 	blt	r2,zero,8007708 <__mdiff+0x168>
 80075d8:	0023883a 	mov	r17,zero
 80075dc:	81400117 	ldw	r5,4(r16)
 80075e0:	9809883a 	mov	r4,r19
 80075e4:	8006c6c0 	call	8006c6c <_Balloc>
 80075e8:	83400417 	ldw	r13,16(r16)
 80075ec:	93800417 	ldw	r14,16(r18)
 80075f0:	81000504 	addi	r4,r16,20
 80075f4:	6b59883a 	add	r12,r13,r13
 80075f8:	739d883a 	add	r14,r14,r14
 80075fc:	6319883a 	add	r12,r12,r12
 8007600:	91800504 	addi	r6,r18,20
 8007604:	739d883a 	add	r14,r14,r14
 8007608:	14400315 	stw	r17,12(r2)
 800760c:	2319883a 	add	r12,r4,r12
 8007610:	339d883a 	add	r14,r6,r14
 8007614:	12400504 	addi	r9,r2,20
 8007618:	0007883a 	mov	r3,zero
 800761c:	22000017 	ldw	r8,0(r4)
 8007620:	32800017 	ldw	r10,0(r6)
 8007624:	4ac00104 	addi	r11,r9,4
 8007628:	41ffffcc 	andi	r7,r8,65535
 800762c:	38c7883a 	add	r3,r7,r3
 8007630:	51ffffcc 	andi	r7,r10,65535
 8007634:	19cfc83a 	sub	r7,r3,r7
 8007638:	4010d43a 	srli	r8,r8,16
 800763c:	5014d43a 	srli	r10,r10,16
 8007640:	3807d43a 	srai	r3,r7,16
 8007644:	39ffffcc 	andi	r7,r7,65535
 8007648:	4291c83a 	sub	r8,r8,r10
 800764c:	40c7883a 	add	r3,r8,r3
 8007650:	1810943a 	slli	r8,r3,16
 8007654:	31800104 	addi	r6,r6,4
 8007658:	21000104 	addi	r4,r4,4
 800765c:	41ceb03a 	or	r7,r8,r7
 8007660:	49c00015 	stw	r7,0(r9)
 8007664:	1807d43a 	srai	r3,r3,16
 8007668:	580b883a 	mov	r5,r11
 800766c:	5813883a 	mov	r9,r11
 8007670:	33bfea36 	bltu	r6,r14,800761c <__mdiff+0x7c>
 8007674:	2011883a 	mov	r8,r4
 8007678:	2300152e 	bgeu	r4,r12,80076d0 <__mdiff+0x130>
 800767c:	21400017 	ldw	r5,0(r4)
 8007680:	4a400104 	addi	r9,r9,4
 8007684:	21000104 	addi	r4,r4,4
 8007688:	29ffffcc 	andi	r7,r5,65535
 800768c:	38c7883a 	add	r3,r7,r3
 8007690:	280ad43a 	srli	r5,r5,16
 8007694:	180dd43a 	srai	r6,r3,16
 8007698:	19ffffcc 	andi	r7,r3,65535
 800769c:	3147883a 	add	r3,r6,r5
 80076a0:	180a943a 	slli	r5,r3,16
 80076a4:	1807d43a 	srai	r3,r3,16
 80076a8:	29ceb03a 	or	r7,r5,r7
 80076ac:	49ffff15 	stw	r7,-4(r9)
 80076b0:	233ff236 	bltu	r4,r12,800767c <__mdiff+0xdc>
 80076b4:	0206303a 	nor	r3,zero,r8
 80076b8:	1b07883a 	add	r3,r3,r12
 80076bc:	1806d0ba 	srli	r3,r3,2
 80076c0:	18c00044 	addi	r3,r3,1
 80076c4:	18c7883a 	add	r3,r3,r3
 80076c8:	18c7883a 	add	r3,r3,r3
 80076cc:	58cb883a 	add	r5,r11,r3
 80076d0:	28ffff04 	addi	r3,r5,-4
 80076d4:	3800041e 	bne	r7,zero,80076e8 <__mdiff+0x148>
 80076d8:	18ffff04 	addi	r3,r3,-4
 80076dc:	19000017 	ldw	r4,0(r3)
 80076e0:	6b7fffc4 	addi	r13,r13,-1
 80076e4:	203ffc26 	beq	r4,zero,80076d8 <__mdiff+0x138>
 80076e8:	13400415 	stw	r13,16(r2)
 80076ec:	dfc00417 	ldw	ra,16(sp)
 80076f0:	dcc00317 	ldw	r19,12(sp)
 80076f4:	dc800217 	ldw	r18,8(sp)
 80076f8:	dc400117 	ldw	r17,4(sp)
 80076fc:	dc000017 	ldw	r16,0(sp)
 8007700:	dec00504 	addi	sp,sp,20
 8007704:	f800283a 	ret
 8007708:	8005883a 	mov	r2,r16
 800770c:	04400044 	movi	r17,1
 8007710:	9021883a 	mov	r16,r18
 8007714:	1025883a 	mov	r18,r2
 8007718:	003fb006 	br	80075dc <__mdiff+0x3c>
 800771c:	9809883a 	mov	r4,r19
 8007720:	000b883a 	mov	r5,zero
 8007724:	8006c6c0 	call	8006c6c <_Balloc>
 8007728:	00c00044 	movi	r3,1
 800772c:	10c00415 	stw	r3,16(r2)
 8007730:	10000515 	stw	zero,20(r2)
 8007734:	003fed06 	br	80076ec <__mdiff+0x14c>

08007738 <__ulp>:
 8007738:	295ffc2c 	andhi	r5,r5,32752
 800773c:	00bf3034 	movhi	r2,64704
 8007740:	2887883a 	add	r3,r5,r2
 8007744:	00c0020e 	bge	zero,r3,8007750 <__ulp+0x18>
 8007748:	0005883a 	mov	r2,zero
 800774c:	f800283a 	ret
 8007750:	00c7c83a 	sub	r3,zero,r3
 8007754:	180bd53a 	srai	r5,r3,20
 8007758:	008004c4 	movi	r2,19
 800775c:	11400a0e 	bge	r2,r5,8007788 <__ulp+0x50>
 8007760:	00800c84 	movi	r2,50
 8007764:	0007883a 	mov	r3,zero
 8007768:	11400516 	blt	r2,r5,8007780 <__ulp+0x48>
 800776c:	00800cc4 	movi	r2,51
 8007770:	114bc83a 	sub	r5,r2,r5
 8007774:	00800044 	movi	r2,1
 8007778:	1144983a 	sll	r2,r2,r5
 800777c:	f800283a 	ret
 8007780:	00800044 	movi	r2,1
 8007784:	f800283a 	ret
 8007788:	00800234 	movhi	r2,8
 800778c:	1147d83a 	sra	r3,r2,r5
 8007790:	0005883a 	mov	r2,zero
 8007794:	f800283a 	ret

08007798 <__b2d>:
 8007798:	defffa04 	addi	sp,sp,-24
 800779c:	dc000015 	stw	r16,0(sp)
 80077a0:	24000417 	ldw	r16,16(r4)
 80077a4:	dc400115 	stw	r17,4(sp)
 80077a8:	24400504 	addi	r17,r4,20
 80077ac:	8421883a 	add	r16,r16,r16
 80077b0:	8421883a 	add	r16,r16,r16
 80077b4:	8c21883a 	add	r16,r17,r16
 80077b8:	dc800215 	stw	r18,8(sp)
 80077bc:	84bfff17 	ldw	r18,-4(r16)
 80077c0:	dd000415 	stw	r20,16(sp)
 80077c4:	dcc00315 	stw	r19,12(sp)
 80077c8:	9009883a 	mov	r4,r18
 80077cc:	2829883a 	mov	r20,r5
 80077d0:	dfc00515 	stw	ra,20(sp)
 80077d4:	8006f600 	call	8006f60 <__hi0bits>
 80077d8:	00c00804 	movi	r3,32
 80077dc:	1887c83a 	sub	r3,r3,r2
 80077e0:	a0c00015 	stw	r3,0(r20)
 80077e4:	00c00284 	movi	r3,10
 80077e8:	84ffff04 	addi	r19,r16,-4
 80077ec:	18801216 	blt	r3,r2,8007838 <__b2d+0xa0>
 80077f0:	014002c4 	movi	r5,11
 80077f4:	2889c83a 	sub	r4,r5,r2
 80077f8:	9106d83a 	srl	r3,r18,r4
 80077fc:	18cffc34 	orhi	r3,r3,16368
 8007800:	8cc0282e 	bgeu	r17,r19,80078a4 <__b2d+0x10c>
 8007804:	817ffe17 	ldw	r5,-8(r16)
 8007808:	290ad83a 	srl	r5,r5,r4
 800780c:	10800544 	addi	r2,r2,21
 8007810:	9084983a 	sll	r2,r18,r2
 8007814:	2884b03a 	or	r2,r5,r2
 8007818:	dfc00517 	ldw	ra,20(sp)
 800781c:	dd000417 	ldw	r20,16(sp)
 8007820:	dcc00317 	ldw	r19,12(sp)
 8007824:	dc800217 	ldw	r18,8(sp)
 8007828:	dc400117 	ldw	r17,4(sp)
 800782c:	dc000017 	ldw	r16,0(sp)
 8007830:	dec00604 	addi	sp,sp,24
 8007834:	f800283a 	ret
 8007838:	113ffd44 	addi	r4,r2,-11
 800783c:	8cc00f2e 	bgeu	r17,r19,800787c <__b2d+0xe4>
 8007840:	81bffe04 	addi	r6,r16,-8
 8007844:	817ffe17 	ldw	r5,-8(r16)
 8007848:	20001326 	beq	r4,zero,8007898 <__b2d+0x100>
 800784c:	00c00ac4 	movi	r3,43
 8007850:	1885c83a 	sub	r2,r3,r2
 8007854:	2886d83a 	srl	r3,r5,r2
 8007858:	9124983a 	sll	r18,r18,r4
 800785c:	90e4b03a 	or	r18,r18,r3
 8007860:	90cffc34 	orhi	r3,r18,16368
 8007864:	8980112e 	bgeu	r17,r6,80078ac <__b2d+0x114>
 8007868:	81bffd17 	ldw	r6,-12(r16)
 800786c:	308cd83a 	srl	r6,r6,r2
 8007870:	2904983a 	sll	r2,r5,r4
 8007874:	1184b03a 	or	r2,r2,r6
 8007878:	003fe706 	br	8007818 <__b2d+0x80>
 800787c:	20000526 	beq	r4,zero,8007894 <__b2d+0xfc>
 8007880:	9124983a 	sll	r18,r18,r4
 8007884:	000d883a 	mov	r6,zero
 8007888:	000b883a 	mov	r5,zero
 800788c:	90cffc34 	orhi	r3,r18,16368
 8007890:	003ff706 	br	8007870 <__b2d+0xd8>
 8007894:	000b883a 	mov	r5,zero
 8007898:	90cffc34 	orhi	r3,r18,16368
 800789c:	2805883a 	mov	r2,r5
 80078a0:	003fdd06 	br	8007818 <__b2d+0x80>
 80078a4:	000b883a 	mov	r5,zero
 80078a8:	003fd806 	br	800780c <__b2d+0x74>
 80078ac:	000d883a 	mov	r6,zero
 80078b0:	003fef06 	br	8007870 <__b2d+0xd8>

080078b4 <__d2b>:
 80078b4:	defff704 	addi	sp,sp,-36
 80078b8:	dc000215 	stw	r16,8(sp)
 80078bc:	3021883a 	mov	r16,r6
 80078c0:	dc400315 	stw	r17,12(sp)
 80078c4:	8022907a 	slli	r17,r16,1
 80078c8:	dd400715 	stw	r21,28(sp)
 80078cc:	282b883a 	mov	r21,r5
 80078d0:	01400044 	movi	r5,1
 80078d4:	dd000615 	stw	r20,24(sp)
 80078d8:	dcc00515 	stw	r19,20(sp)
 80078dc:	dc800415 	stw	r18,16(sp)
 80078e0:	dfc00815 	stw	ra,32(sp)
 80078e4:	3829883a 	mov	r20,r7
 80078e8:	dc800917 	ldw	r18,36(sp)
 80078ec:	8822d57a 	srli	r17,r17,21
 80078f0:	8006c6c0 	call	8006c6c <_Balloc>
 80078f4:	1027883a 	mov	r19,r2
 80078f8:	00800434 	movhi	r2,16
 80078fc:	10bfffc4 	addi	r2,r2,-1
 8007900:	808c703a 	and	r6,r16,r2
 8007904:	88000126 	beq	r17,zero,800790c <__d2b+0x58>
 8007908:	31800434 	orhi	r6,r6,16
 800790c:	d9800015 	stw	r6,0(sp)
 8007910:	a8001f26 	beq	r21,zero,8007990 <__d2b+0xdc>
 8007914:	d9000104 	addi	r4,sp,4
 8007918:	dd400115 	stw	r21,4(sp)
 800791c:	8006fc80 	call	8006fc8 <__lo0bits>
 8007920:	d8c00017 	ldw	r3,0(sp)
 8007924:	1000291e 	bne	r2,zero,80079cc <__d2b+0x118>
 8007928:	d9000117 	ldw	r4,4(sp)
 800792c:	99000515 	stw	r4,20(r19)
 8007930:	1820c03a 	cmpne	r16,r3,zero
 8007934:	84000044 	addi	r16,r16,1
 8007938:	98c00615 	stw	r3,24(r19)
 800793c:	9c000415 	stw	r16,16(r19)
 8007940:	88001b1e 	bne	r17,zero,80079b0 <__d2b+0xfc>
 8007944:	800690ba 	slli	r3,r16,2
 8007948:	10bef384 	addi	r2,r2,-1074
 800794c:	a0800015 	stw	r2,0(r20)
 8007950:	98c5883a 	add	r2,r19,r3
 8007954:	11000417 	ldw	r4,16(r2)
 8007958:	8020917a 	slli	r16,r16,5
 800795c:	8006f600 	call	8006f60 <__hi0bits>
 8007960:	8085c83a 	sub	r2,r16,r2
 8007964:	90800015 	stw	r2,0(r18)
 8007968:	9805883a 	mov	r2,r19
 800796c:	dfc00817 	ldw	ra,32(sp)
 8007970:	dd400717 	ldw	r21,28(sp)
 8007974:	dd000617 	ldw	r20,24(sp)
 8007978:	dcc00517 	ldw	r19,20(sp)
 800797c:	dc800417 	ldw	r18,16(sp)
 8007980:	dc400317 	ldw	r17,12(sp)
 8007984:	dc000217 	ldw	r16,8(sp)
 8007988:	dec00904 	addi	sp,sp,36
 800798c:	f800283a 	ret
 8007990:	d809883a 	mov	r4,sp
 8007994:	8006fc80 	call	8006fc8 <__lo0bits>
 8007998:	d8c00017 	ldw	r3,0(sp)
 800799c:	04000044 	movi	r16,1
 80079a0:	9c000415 	stw	r16,16(r19)
 80079a4:	98c00515 	stw	r3,20(r19)
 80079a8:	10800804 	addi	r2,r2,32
 80079ac:	883fe526 	beq	r17,zero,8007944 <__d2b+0x90>
 80079b0:	8c7ef344 	addi	r17,r17,-1075
 80079b4:	88a3883a 	add	r17,r17,r2
 80079b8:	00c00d44 	movi	r3,53
 80079bc:	a4400015 	stw	r17,0(r20)
 80079c0:	1885c83a 	sub	r2,r3,r2
 80079c4:	90800015 	stw	r2,0(r18)
 80079c8:	003fe706 	br	8007968 <__d2b+0xb4>
 80079cc:	01000804 	movi	r4,32
 80079d0:	2089c83a 	sub	r4,r4,r2
 80079d4:	1908983a 	sll	r4,r3,r4
 80079d8:	d9400117 	ldw	r5,4(sp)
 80079dc:	1886d83a 	srl	r3,r3,r2
 80079e0:	2148b03a 	or	r4,r4,r5
 80079e4:	99000515 	stw	r4,20(r19)
 80079e8:	d8c00015 	stw	r3,0(sp)
 80079ec:	003fd006 	br	8007930 <__d2b+0x7c>

080079f0 <__ratio>:
 80079f0:	defff904 	addi	sp,sp,-28
 80079f4:	dc400315 	stw	r17,12(sp)
 80079f8:	2823883a 	mov	r17,r5
 80079fc:	d9400104 	addi	r5,sp,4
 8007a00:	dfc00615 	stw	ra,24(sp)
 8007a04:	dcc00515 	stw	r19,20(sp)
 8007a08:	dc800415 	stw	r18,16(sp)
 8007a0c:	2027883a 	mov	r19,r4
 8007a10:	dc000215 	stw	r16,8(sp)
 8007a14:	80077980 	call	8007798 <__b2d>
 8007a18:	8809883a 	mov	r4,r17
 8007a1c:	d80b883a 	mov	r5,sp
 8007a20:	1025883a 	mov	r18,r2
 8007a24:	1821883a 	mov	r16,r3
 8007a28:	80077980 	call	8007798 <__b2d>
 8007a2c:	8a400417 	ldw	r9,16(r17)
 8007a30:	9a000417 	ldw	r8,16(r19)
 8007a34:	100d883a 	mov	r6,r2
 8007a38:	d8800017 	ldw	r2,0(sp)
 8007a3c:	4251c83a 	sub	r8,r8,r9
 8007a40:	4012917a 	slli	r9,r8,5
 8007a44:	da000117 	ldw	r8,4(sp)
 8007a48:	4091c83a 	sub	r8,r8,r2
 8007a4c:	4251883a 	add	r8,r8,r9
 8007a50:	02000d0e 	bge	zero,r8,8007a88 <__ratio+0x98>
 8007a54:	4010953a 	slli	r8,r8,20
 8007a58:	4421883a 	add	r16,r8,r16
 8007a5c:	9009883a 	mov	r4,r18
 8007a60:	800b883a 	mov	r5,r16
 8007a64:	180f883a 	mov	r7,r3
 8007a68:	800b5f80 	call	800b5f8 <__divdf3>
 8007a6c:	dfc00617 	ldw	ra,24(sp)
 8007a70:	dcc00517 	ldw	r19,20(sp)
 8007a74:	dc800417 	ldw	r18,16(sp)
 8007a78:	dc400317 	ldw	r17,12(sp)
 8007a7c:	dc000217 	ldw	r16,8(sp)
 8007a80:	dec00704 	addi	sp,sp,28
 8007a84:	f800283a 	ret
 8007a88:	4010953a 	slli	r8,r8,20
 8007a8c:	1a07c83a 	sub	r3,r3,r8
 8007a90:	003ff206 	br	8007a5c <__ratio+0x6c>

08007a94 <_mprec_log10>:
 8007a94:	defffe04 	addi	sp,sp,-8
 8007a98:	dc000015 	stw	r16,0(sp)
 8007a9c:	dfc00115 	stw	ra,4(sp)
 8007aa0:	008005c4 	movi	r2,23
 8007aa4:	2021883a 	mov	r16,r4
 8007aa8:	11000d0e 	bge	r2,r4,8007ae0 <_mprec_log10+0x4c>
 8007aac:	0005883a 	mov	r2,zero
 8007ab0:	00cffc34 	movhi	r3,16368
 8007ab4:	843fffc4 	addi	r16,r16,-1
 8007ab8:	1009883a 	mov	r4,r2
 8007abc:	180b883a 	mov	r5,r3
 8007ac0:	000d883a 	mov	r6,zero
 8007ac4:	01d00934 	movhi	r7,16420
 8007ac8:	800c1080 	call	800c108 <__muldf3>
 8007acc:	803ff91e 	bne	r16,zero,8007ab4 <_mprec_log10+0x20>
 8007ad0:	dfc00117 	ldw	ra,4(sp)
 8007ad4:	dc000017 	ldw	r16,0(sp)
 8007ad8:	dec00204 	addi	sp,sp,8
 8007adc:	f800283a 	ret
 8007ae0:	202090fa 	slli	r16,r4,3
 8007ae4:	008200b4 	movhi	r2,2050
 8007ae8:	10a6ca04 	addi	r2,r2,-25816
 8007aec:	1421883a 	add	r16,r2,r16
 8007af0:	80800017 	ldw	r2,0(r16)
 8007af4:	80c00117 	ldw	r3,4(r16)
 8007af8:	dfc00117 	ldw	ra,4(sp)
 8007afc:	dc000017 	ldw	r16,0(sp)
 8007b00:	dec00204 	addi	sp,sp,8
 8007b04:	f800283a 	ret

08007b08 <__copybits>:
 8007b08:	297fffc4 	addi	r5,r5,-1
 8007b0c:	280fd17a 	srai	r7,r5,5
 8007b10:	30c00417 	ldw	r3,16(r6)
 8007b14:	30800504 	addi	r2,r6,20
 8007b18:	39c00044 	addi	r7,r7,1
 8007b1c:	18c7883a 	add	r3,r3,r3
 8007b20:	39cf883a 	add	r7,r7,r7
 8007b24:	18c7883a 	add	r3,r3,r3
 8007b28:	39cf883a 	add	r7,r7,r7
 8007b2c:	10c7883a 	add	r3,r2,r3
 8007b30:	21cf883a 	add	r7,r4,r7
 8007b34:	10c00d2e 	bgeu	r2,r3,8007b6c <__copybits+0x64>
 8007b38:	200b883a 	mov	r5,r4
 8007b3c:	12000017 	ldw	r8,0(r2)
 8007b40:	29400104 	addi	r5,r5,4
 8007b44:	10800104 	addi	r2,r2,4
 8007b48:	2a3fff15 	stw	r8,-4(r5)
 8007b4c:	10fffb36 	bltu	r2,r3,8007b3c <__copybits+0x34>
 8007b50:	1985c83a 	sub	r2,r3,r6
 8007b54:	10bffac4 	addi	r2,r2,-21
 8007b58:	1004d0ba 	srli	r2,r2,2
 8007b5c:	10800044 	addi	r2,r2,1
 8007b60:	1085883a 	add	r2,r2,r2
 8007b64:	1085883a 	add	r2,r2,r2
 8007b68:	2089883a 	add	r4,r4,r2
 8007b6c:	21c0032e 	bgeu	r4,r7,8007b7c <__copybits+0x74>
 8007b70:	20000015 	stw	zero,0(r4)
 8007b74:	21000104 	addi	r4,r4,4
 8007b78:	21fffd36 	bltu	r4,r7,8007b70 <__copybits+0x68>
 8007b7c:	f800283a 	ret

08007b80 <__any_on>:
 8007b80:	20c00417 	ldw	r3,16(r4)
 8007b84:	2805d17a 	srai	r2,r5,5
 8007b88:	21000504 	addi	r4,r4,20
 8007b8c:	18800d0e 	bge	r3,r2,8007bc4 <__any_on+0x44>
 8007b90:	18c7883a 	add	r3,r3,r3
 8007b94:	18c7883a 	add	r3,r3,r3
 8007b98:	20c7883a 	add	r3,r4,r3
 8007b9c:	20c0192e 	bgeu	r4,r3,8007c04 <__any_on+0x84>
 8007ba0:	18bfff17 	ldw	r2,-4(r3)
 8007ba4:	18ffff04 	addi	r3,r3,-4
 8007ba8:	1000041e 	bne	r2,zero,8007bbc <__any_on+0x3c>
 8007bac:	20c0142e 	bgeu	r4,r3,8007c00 <__any_on+0x80>
 8007bb0:	18ffff04 	addi	r3,r3,-4
 8007bb4:	19400017 	ldw	r5,0(r3)
 8007bb8:	283ffc26 	beq	r5,zero,8007bac <__any_on+0x2c>
 8007bbc:	00800044 	movi	r2,1
 8007bc0:	f800283a 	ret
 8007bc4:	10c00a0e 	bge	r2,r3,8007bf0 <__any_on+0x70>
 8007bc8:	1085883a 	add	r2,r2,r2
 8007bcc:	1085883a 	add	r2,r2,r2
 8007bd0:	294007cc 	andi	r5,r5,31
 8007bd4:	2087883a 	add	r3,r4,r2
 8007bd8:	283ff026 	beq	r5,zero,8007b9c <__any_on+0x1c>
 8007bdc:	19800017 	ldw	r6,0(r3)
 8007be0:	3144d83a 	srl	r2,r6,r5
 8007be4:	114a983a 	sll	r5,r2,r5
 8007be8:	29bff41e 	bne	r5,r6,8007bbc <__any_on+0x3c>
 8007bec:	003feb06 	br	8007b9c <__any_on+0x1c>
 8007bf0:	1085883a 	add	r2,r2,r2
 8007bf4:	1085883a 	add	r2,r2,r2
 8007bf8:	2087883a 	add	r3,r4,r2
 8007bfc:	003fe706 	br	8007b9c <__any_on+0x1c>
 8007c00:	f800283a 	ret
 8007c04:	0005883a 	mov	r2,zero
 8007c08:	f800283a 	ret

08007c0c <_realloc_r>:
 8007c0c:	defff604 	addi	sp,sp,-40
 8007c10:	dd000415 	stw	r20,16(sp)
 8007c14:	dc400115 	stw	r17,4(sp)
 8007c18:	dfc00915 	stw	ra,36(sp)
 8007c1c:	df000815 	stw	fp,32(sp)
 8007c20:	ddc00715 	stw	r23,28(sp)
 8007c24:	dd800615 	stw	r22,24(sp)
 8007c28:	dd400515 	stw	r21,20(sp)
 8007c2c:	dcc00315 	stw	r19,12(sp)
 8007c30:	dc800215 	stw	r18,8(sp)
 8007c34:	dc000015 	stw	r16,0(sp)
 8007c38:	2829883a 	mov	r20,r5
 8007c3c:	3023883a 	mov	r17,r6
 8007c40:	2800ad26 	beq	r5,zero,8007ef8 <_realloc_r+0x2ec>
 8007c44:	2025883a 	mov	r18,r4
 8007c48:	800de380 	call	800de38 <__malloc_lock>
 8007c4c:	a0ffff17 	ldw	r3,-4(r20)
 8007c50:	043fff04 	movi	r16,-4
 8007c54:	890002c4 	addi	r4,r17,11
 8007c58:	01c00584 	movi	r7,22
 8007c5c:	a57ffe04 	addi	r21,r20,-8
 8007c60:	1c20703a 	and	r16,r3,r16
 8007c64:	39001d2e 	bgeu	r7,r4,8007cdc <_realloc_r+0xd0>
 8007c68:	05bffe04 	movi	r22,-8
 8007c6c:	25ac703a 	and	r22,r4,r22
 8007c70:	b00f883a 	mov	r7,r22
 8007c74:	b0006516 	blt	r22,zero,8007e0c <_realloc_r+0x200>
 8007c78:	b4406436 	bltu	r22,r17,8007e0c <_realloc_r+0x200>
 8007c7c:	81c01a0e 	bge	r16,r7,8007ce8 <_realloc_r+0xdc>
 8007c80:	070200b4 	movhi	fp,2050
 8007c84:	e70a5304 	addi	fp,fp,10572
 8007c88:	e1400217 	ldw	r5,8(fp)
 8007c8c:	ac11883a 	add	r8,r21,r16
 8007c90:	2a006226 	beq	r5,r8,8007e1c <_realloc_r+0x210>
 8007c94:	41800117 	ldw	r6,4(r8)
 8007c98:	027fff84 	movi	r9,-2
 8007c9c:	3252703a 	and	r9,r6,r9
 8007ca0:	4253883a 	add	r9,r8,r9
 8007ca4:	49000117 	ldw	r4,4(r9)
 8007ca8:	2100004c 	andi	r4,r4,1
 8007cac:	2000281e 	bne	r4,zero,8007d50 <_realloc_r+0x144>
 8007cb0:	00bfff04 	movi	r2,-4
 8007cb4:	3084703a 	and	r2,r6,r2
 8007cb8:	1409883a 	add	r4,r2,r16
 8007cbc:	21c05e16 	blt	r4,r7,8007e38 <_realloc_r+0x22c>
 8007cc0:	40800317 	ldw	r2,12(r8)
 8007cc4:	41400217 	ldw	r5,8(r8)
 8007cc8:	a023883a 	mov	r17,r20
 8007ccc:	2021883a 	mov	r16,r4
 8007cd0:	28800315 	stw	r2,12(r5)
 8007cd4:	11400215 	stw	r5,8(r2)
 8007cd8:	00000406 	br	8007cec <_realloc_r+0xe0>
 8007cdc:	01c00404 	movi	r7,16
 8007ce0:	382d883a 	mov	r22,r7
 8007ce4:	003fe406 	br	8007c78 <_realloc_r+0x6c>
 8007ce8:	a023883a 	mov	r17,r20
 8007cec:	858fc83a 	sub	r7,r16,r22
 8007cf0:	008003c4 	movi	r2,15
 8007cf4:	18c0004c 	andi	r3,r3,1
 8007cf8:	11c07236 	bltu	r2,r7,8007ec4 <_realloc_r+0x2b8>
 8007cfc:	1c06b03a 	or	r3,r3,r16
 8007d00:	a8c00115 	stw	r3,4(r21)
 8007d04:	ac21883a 	add	r16,r21,r16
 8007d08:	80800117 	ldw	r2,4(r16)
 8007d0c:	10800054 	ori	r2,r2,1
 8007d10:	80800115 	stw	r2,4(r16)
 8007d14:	9009883a 	mov	r4,r18
 8007d18:	800df580 	call	800df58 <__malloc_unlock>
 8007d1c:	8805883a 	mov	r2,r17
 8007d20:	dfc00917 	ldw	ra,36(sp)
 8007d24:	df000817 	ldw	fp,32(sp)
 8007d28:	ddc00717 	ldw	r23,28(sp)
 8007d2c:	dd800617 	ldw	r22,24(sp)
 8007d30:	dd400517 	ldw	r21,20(sp)
 8007d34:	dd000417 	ldw	r20,16(sp)
 8007d38:	dcc00317 	ldw	r19,12(sp)
 8007d3c:	dc800217 	ldw	r18,8(sp)
 8007d40:	dc400117 	ldw	r17,4(sp)
 8007d44:	dc000017 	ldw	r16,0(sp)
 8007d48:	dec00a04 	addi	sp,sp,40
 8007d4c:	f800283a 	ret
 8007d50:	18c0004c 	andi	r3,r3,1
 8007d54:	1800081e 	bne	r3,zero,8007d78 <_realloc_r+0x16c>
 8007d58:	a4fffe17 	ldw	r19,-8(r20)
 8007d5c:	00bfff04 	movi	r2,-4
 8007d60:	ace7c83a 	sub	r19,r21,r19
 8007d64:	98c00117 	ldw	r3,4(r19)
 8007d68:	1886703a 	and	r3,r3,r2
 8007d6c:	98000226 	beq	r19,zero,8007d78 <_realloc_r+0x16c>
 8007d70:	1c2f883a 	add	r23,r3,r16
 8007d74:	b9c06d0e 	bge	r23,r7,8007f2c <_realloc_r+0x320>
 8007d78:	880b883a 	mov	r5,r17
 8007d7c:	9009883a 	mov	r4,r18
 8007d80:	8000f9c0 	call	8000f9c <_malloc_r>
 8007d84:	1023883a 	mov	r17,r2
 8007d88:	1000ef26 	beq	r2,zero,8008148 <_realloc_r+0x53c>
 8007d8c:	a0ffff17 	ldw	r3,-4(r20)
 8007d90:	113ffe04 	addi	r4,r2,-8
 8007d94:	00bfff84 	movi	r2,-2
 8007d98:	1884703a 	and	r2,r3,r2
 8007d9c:	a885883a 	add	r2,r21,r2
 8007da0:	2080bf26 	beq	r4,r2,80080a0 <_realloc_r+0x494>
 8007da4:	81bfff04 	addi	r6,r16,-4
 8007da8:	00800904 	movi	r2,36
 8007dac:	11808936 	bltu	r2,r6,8007fd4 <_realloc_r+0x3c8>
 8007db0:	00c004c4 	movi	r3,19
 8007db4:	19806c2e 	bgeu	r3,r6,8007f68 <_realloc_r+0x35c>
 8007db8:	a0c00017 	ldw	r3,0(r20)
 8007dbc:	88c00015 	stw	r3,0(r17)
 8007dc0:	a0c00117 	ldw	r3,4(r20)
 8007dc4:	88c00115 	stw	r3,4(r17)
 8007dc8:	00c006c4 	movi	r3,27
 8007dcc:	1980ac36 	bltu	r3,r6,8008080 <_realloc_r+0x474>
 8007dd0:	88800204 	addi	r2,r17,8
 8007dd4:	a0c00204 	addi	r3,r20,8
 8007dd8:	19000017 	ldw	r4,0(r3)
 8007ddc:	11000015 	stw	r4,0(r2)
 8007de0:	19000117 	ldw	r4,4(r3)
 8007de4:	11000115 	stw	r4,4(r2)
 8007de8:	18c00217 	ldw	r3,8(r3)
 8007dec:	10c00215 	stw	r3,8(r2)
 8007df0:	a00b883a 	mov	r5,r20
 8007df4:	9009883a 	mov	r4,r18
 8007df8:	8005bfc0 	call	8005bfc <_free_r>
 8007dfc:	9009883a 	mov	r4,r18
 8007e00:	800df580 	call	800df58 <__malloc_unlock>
 8007e04:	8805883a 	mov	r2,r17
 8007e08:	003fc506 	br	8007d20 <_realloc_r+0x114>
 8007e0c:	00800304 	movi	r2,12
 8007e10:	90800015 	stw	r2,0(r18)
 8007e14:	0005883a 	mov	r2,zero
 8007e18:	003fc106 	br	8007d20 <_realloc_r+0x114>
 8007e1c:	29800117 	ldw	r6,4(r5)
 8007e20:	00bfff04 	movi	r2,-4
 8007e24:	b1000404 	addi	r4,r22,16
 8007e28:	3084703a 	and	r2,r6,r2
 8007e2c:	140d883a 	add	r6,r2,r16
 8007e30:	31005b0e 	bge	r6,r4,8007fa0 <_realloc_r+0x394>
 8007e34:	2811883a 	mov	r8,r5
 8007e38:	18c0004c 	andi	r3,r3,1
 8007e3c:	183fce1e 	bne	r3,zero,8007d78 <_realloc_r+0x16c>
 8007e40:	a4fffe17 	ldw	r19,-8(r20)
 8007e44:	00ffff04 	movi	r3,-4
 8007e48:	ace7c83a 	sub	r19,r21,r19
 8007e4c:	99000117 	ldw	r4,4(r19)
 8007e50:	20c6703a 	and	r3,r4,r3
 8007e54:	403fc526 	beq	r8,zero,8007d6c <_realloc_r+0x160>
 8007e58:	1c2f883a 	add	r23,r3,r16
 8007e5c:	b8af883a 	add	r23,r23,r2
 8007e60:	41406026 	beq	r8,r5,8007fe4 <_realloc_r+0x3d8>
 8007e64:	b9ffc116 	blt	r23,r7,8007d6c <_realloc_r+0x160>
 8007e68:	40c00217 	ldw	r3,8(r8)
 8007e6c:	40800317 	ldw	r2,12(r8)
 8007e70:	81bfff04 	addi	r6,r16,-4
 8007e74:	01000904 	movi	r4,36
 8007e78:	18800315 	stw	r2,12(r3)
 8007e7c:	10c00215 	stw	r3,8(r2)
 8007e80:	99400217 	ldw	r5,8(r19)
 8007e84:	98c00317 	ldw	r3,12(r19)
 8007e88:	9c400204 	addi	r17,r19,8
 8007e8c:	28c00315 	stw	r3,12(r5)
 8007e90:	19400215 	stw	r5,8(r3)
 8007e94:	21802d36 	bltu	r4,r6,8007f4c <_realloc_r+0x340>
 8007e98:	008004c4 	movi	r2,19
 8007e9c:	1180352e 	bgeu	r2,r6,8007f74 <_realloc_r+0x368>
 8007ea0:	a0800017 	ldw	r2,0(r20)
 8007ea4:	98800215 	stw	r2,8(r19)
 8007ea8:	a0800117 	ldw	r2,4(r20)
 8007eac:	98800315 	stw	r2,12(r19)
 8007eb0:	008006c4 	movi	r2,27
 8007eb4:	11808036 	bltu	r2,r6,80080b8 <_realloc_r+0x4ac>
 8007eb8:	98c00404 	addi	r3,r19,16
 8007ebc:	a5000204 	addi	r20,r20,8
 8007ec0:	00002d06 	br	8007f78 <_realloc_r+0x36c>
 8007ec4:	1d86b03a 	or	r3,r3,r22
 8007ec8:	ad8b883a 	add	r5,r21,r22
 8007ecc:	a8c00115 	stw	r3,4(r21)
 8007ed0:	38800054 	ori	r2,r7,1
 8007ed4:	28800115 	stw	r2,4(r5)
 8007ed8:	29cf883a 	add	r7,r5,r7
 8007edc:	38800117 	ldw	r2,4(r7)
 8007ee0:	9009883a 	mov	r4,r18
 8007ee4:	29400204 	addi	r5,r5,8
 8007ee8:	10800054 	ori	r2,r2,1
 8007eec:	38800115 	stw	r2,4(r7)
 8007ef0:	8005bfc0 	call	8005bfc <_free_r>
 8007ef4:	003f8706 	br	8007d14 <_realloc_r+0x108>
 8007ef8:	300b883a 	mov	r5,r6
 8007efc:	dfc00917 	ldw	ra,36(sp)
 8007f00:	df000817 	ldw	fp,32(sp)
 8007f04:	ddc00717 	ldw	r23,28(sp)
 8007f08:	dd800617 	ldw	r22,24(sp)
 8007f0c:	dd400517 	ldw	r21,20(sp)
 8007f10:	dd000417 	ldw	r20,16(sp)
 8007f14:	dcc00317 	ldw	r19,12(sp)
 8007f18:	dc800217 	ldw	r18,8(sp)
 8007f1c:	dc400117 	ldw	r17,4(sp)
 8007f20:	dc000017 	ldw	r16,0(sp)
 8007f24:	dec00a04 	addi	sp,sp,40
 8007f28:	8000f9c1 	jmpi	8000f9c <_malloc_r>
 8007f2c:	98800317 	ldw	r2,12(r19)
 8007f30:	98c00217 	ldw	r3,8(r19)
 8007f34:	81bfff04 	addi	r6,r16,-4
 8007f38:	01000904 	movi	r4,36
 8007f3c:	18800315 	stw	r2,12(r3)
 8007f40:	10c00215 	stw	r3,8(r2)
 8007f44:	9c400204 	addi	r17,r19,8
 8007f48:	21bfd32e 	bgeu	r4,r6,8007e98 <_realloc_r+0x28c>
 8007f4c:	8809883a 	mov	r4,r17
 8007f50:	a00b883a 	mov	r5,r20
 8007f54:	80069ec0 	call	80069ec <memmove>
 8007f58:	98c00117 	ldw	r3,4(r19)
 8007f5c:	b821883a 	mov	r16,r23
 8007f60:	982b883a 	mov	r21,r19
 8007f64:	003f6106 	br	8007cec <_realloc_r+0xe0>
 8007f68:	8805883a 	mov	r2,r17
 8007f6c:	a007883a 	mov	r3,r20
 8007f70:	003f9906 	br	8007dd8 <_realloc_r+0x1cc>
 8007f74:	8807883a 	mov	r3,r17
 8007f78:	a0800017 	ldw	r2,0(r20)
 8007f7c:	b821883a 	mov	r16,r23
 8007f80:	982b883a 	mov	r21,r19
 8007f84:	18800015 	stw	r2,0(r3)
 8007f88:	a0800117 	ldw	r2,4(r20)
 8007f8c:	18800115 	stw	r2,4(r3)
 8007f90:	a0800217 	ldw	r2,8(r20)
 8007f94:	18800215 	stw	r2,8(r3)
 8007f98:	98c00117 	ldw	r3,4(r19)
 8007f9c:	003f5306 	br	8007cec <_realloc_r+0xe0>
 8007fa0:	adab883a 	add	r21,r21,r22
 8007fa4:	3585c83a 	sub	r2,r6,r22
 8007fa8:	e5400215 	stw	r21,8(fp)
 8007fac:	10800054 	ori	r2,r2,1
 8007fb0:	a8800115 	stw	r2,4(r21)
 8007fb4:	a0bfff17 	ldw	r2,-4(r20)
 8007fb8:	9009883a 	mov	r4,r18
 8007fbc:	1080004c 	andi	r2,r2,1
 8007fc0:	b0acb03a 	or	r22,r22,r2
 8007fc4:	a5bfff15 	stw	r22,-4(r20)
 8007fc8:	800df580 	call	800df58 <__malloc_unlock>
 8007fcc:	a005883a 	mov	r2,r20
 8007fd0:	003f5306 	br	8007d20 <_realloc_r+0x114>
 8007fd4:	8809883a 	mov	r4,r17
 8007fd8:	a00b883a 	mov	r5,r20
 8007fdc:	80069ec0 	call	80069ec <memmove>
 8007fe0:	003f8306 	br	8007df0 <_realloc_r+0x1e4>
 8007fe4:	b0800404 	addi	r2,r22,16
 8007fe8:	b8bf6016 	blt	r23,r2,8007d6c <_realloc_r+0x160>
 8007fec:	98800317 	ldw	r2,12(r19)
 8007ff0:	98c00217 	ldw	r3,8(r19)
 8007ff4:	81bfff04 	addi	r6,r16,-4
 8007ff8:	01000904 	movi	r4,36
 8007ffc:	18800315 	stw	r2,12(r3)
 8008000:	10c00215 	stw	r3,8(r2)
 8008004:	9c400204 	addi	r17,r19,8
 8008008:	21804336 	bltu	r4,r6,8008118 <_realloc_r+0x50c>
 800800c:	008004c4 	movi	r2,19
 8008010:	11803f2e 	bgeu	r2,r6,8008110 <_realloc_r+0x504>
 8008014:	a0800017 	ldw	r2,0(r20)
 8008018:	98800215 	stw	r2,8(r19)
 800801c:	a0800117 	ldw	r2,4(r20)
 8008020:	98800315 	stw	r2,12(r19)
 8008024:	008006c4 	movi	r2,27
 8008028:	11803f36 	bltu	r2,r6,8008128 <_realloc_r+0x51c>
 800802c:	98800404 	addi	r2,r19,16
 8008030:	a5000204 	addi	r20,r20,8
 8008034:	a0c00017 	ldw	r3,0(r20)
 8008038:	10c00015 	stw	r3,0(r2)
 800803c:	a0c00117 	ldw	r3,4(r20)
 8008040:	10c00115 	stw	r3,4(r2)
 8008044:	a0c00217 	ldw	r3,8(r20)
 8008048:	10c00215 	stw	r3,8(r2)
 800804c:	9d87883a 	add	r3,r19,r22
 8008050:	bd85c83a 	sub	r2,r23,r22
 8008054:	e0c00215 	stw	r3,8(fp)
 8008058:	10800054 	ori	r2,r2,1
 800805c:	18800115 	stw	r2,4(r3)
 8008060:	98800117 	ldw	r2,4(r19)
 8008064:	9009883a 	mov	r4,r18
 8008068:	1080004c 	andi	r2,r2,1
 800806c:	b0acb03a 	or	r22,r22,r2
 8008070:	9d800115 	stw	r22,4(r19)
 8008074:	800df580 	call	800df58 <__malloc_unlock>
 8008078:	8805883a 	mov	r2,r17
 800807c:	003f2806 	br	8007d20 <_realloc_r+0x114>
 8008080:	a0c00217 	ldw	r3,8(r20)
 8008084:	88c00215 	stw	r3,8(r17)
 8008088:	a0c00317 	ldw	r3,12(r20)
 800808c:	88c00315 	stw	r3,12(r17)
 8008090:	30801126 	beq	r6,r2,80080d8 <_realloc_r+0x4cc>
 8008094:	88800404 	addi	r2,r17,16
 8008098:	a0c00404 	addi	r3,r20,16
 800809c:	003f4e06 	br	8007dd8 <_realloc_r+0x1cc>
 80080a0:	893fff17 	ldw	r4,-4(r17)
 80080a4:	00bfff04 	movi	r2,-4
 80080a8:	a023883a 	mov	r17,r20
 80080ac:	2084703a 	and	r2,r4,r2
 80080b0:	80a1883a 	add	r16,r16,r2
 80080b4:	003f0d06 	br	8007cec <_realloc_r+0xe0>
 80080b8:	a0800217 	ldw	r2,8(r20)
 80080bc:	98800415 	stw	r2,16(r19)
 80080c0:	a0800317 	ldw	r2,12(r20)
 80080c4:	98800515 	stw	r2,20(r19)
 80080c8:	31000a26 	beq	r6,r4,80080f4 <_realloc_r+0x4e8>
 80080cc:	98c00604 	addi	r3,r19,24
 80080d0:	a5000404 	addi	r20,r20,16
 80080d4:	003fa806 	br	8007f78 <_realloc_r+0x36c>
 80080d8:	a1000417 	ldw	r4,16(r20)
 80080dc:	88800604 	addi	r2,r17,24
 80080e0:	a0c00604 	addi	r3,r20,24
 80080e4:	89000415 	stw	r4,16(r17)
 80080e8:	a1000517 	ldw	r4,20(r20)
 80080ec:	89000515 	stw	r4,20(r17)
 80080f0:	003f3906 	br	8007dd8 <_realloc_r+0x1cc>
 80080f4:	a0800417 	ldw	r2,16(r20)
 80080f8:	a5000604 	addi	r20,r20,24
 80080fc:	98c00804 	addi	r3,r19,32
 8008100:	98800615 	stw	r2,24(r19)
 8008104:	a0bfff17 	ldw	r2,-4(r20)
 8008108:	98800715 	stw	r2,28(r19)
 800810c:	003f9a06 	br	8007f78 <_realloc_r+0x36c>
 8008110:	8805883a 	mov	r2,r17
 8008114:	003fc706 	br	8008034 <_realloc_r+0x428>
 8008118:	8809883a 	mov	r4,r17
 800811c:	a00b883a 	mov	r5,r20
 8008120:	80069ec0 	call	80069ec <memmove>
 8008124:	003fc906 	br	800804c <_realloc_r+0x440>
 8008128:	a0800217 	ldw	r2,8(r20)
 800812c:	98800415 	stw	r2,16(r19)
 8008130:	a0800317 	ldw	r2,12(r20)
 8008134:	98800515 	stw	r2,20(r19)
 8008138:	31000726 	beq	r6,r4,8008158 <_realloc_r+0x54c>
 800813c:	98800604 	addi	r2,r19,24
 8008140:	a5000404 	addi	r20,r20,16
 8008144:	003fbb06 	br	8008034 <_realloc_r+0x428>
 8008148:	9009883a 	mov	r4,r18
 800814c:	800df580 	call	800df58 <__malloc_unlock>
 8008150:	0005883a 	mov	r2,zero
 8008154:	003ef206 	br	8007d20 <_realloc_r+0x114>
 8008158:	a0c00417 	ldw	r3,16(r20)
 800815c:	a5000604 	addi	r20,r20,24
 8008160:	98800804 	addi	r2,r19,32
 8008164:	98c00615 	stw	r3,24(r19)
 8008168:	a0ffff17 	ldw	r3,-4(r20)
 800816c:	98c00715 	stw	r3,28(r19)
 8008170:	003fb006 	br	8008034 <_realloc_r+0x428>

08008174 <__fpclassifyd>:
 8008174:	00a00034 	movhi	r2,32768
 8008178:	10bfffc4 	addi	r2,r2,-1
 800817c:	2884703a 	and	r2,r5,r2
 8008180:	10000726 	beq	r2,zero,80081a0 <__fpclassifyd+0x2c>
 8008184:	00fffc34 	movhi	r3,65520
 8008188:	019ff834 	movhi	r6,32736
 800818c:	28c7883a 	add	r3,r5,r3
 8008190:	31bfffc4 	addi	r6,r6,-1
 8008194:	30c00536 	bltu	r6,r3,80081ac <__fpclassifyd+0x38>
 8008198:	00800104 	movi	r2,4
 800819c:	f800283a 	ret
 80081a0:	2000021e 	bne	r4,zero,80081ac <__fpclassifyd+0x38>
 80081a4:	00800084 	movi	r2,2
 80081a8:	f800283a 	ret
 80081ac:	00dffc34 	movhi	r3,32752
 80081b0:	019ff834 	movhi	r6,32736
 80081b4:	28cb883a 	add	r5,r5,r3
 80081b8:	31bfffc4 	addi	r6,r6,-1
 80081bc:	317ff62e 	bgeu	r6,r5,8008198 <__fpclassifyd+0x24>
 80081c0:	01400434 	movhi	r5,16
 80081c4:	297fffc4 	addi	r5,r5,-1
 80081c8:	28800236 	bltu	r5,r2,80081d4 <__fpclassifyd+0x60>
 80081cc:	008000c4 	movi	r2,3
 80081d0:	f800283a 	ret
 80081d4:	10c00226 	beq	r2,r3,80081e0 <__fpclassifyd+0x6c>
 80081d8:	0005883a 	mov	r2,zero
 80081dc:	f800283a 	ret
 80081e0:	2005003a 	cmpeq	r2,r4,zero
 80081e4:	f800283a 	ret

080081e8 <__sread>:
 80081e8:	defffe04 	addi	sp,sp,-8
 80081ec:	dc000015 	stw	r16,0(sp)
 80081f0:	2821883a 	mov	r16,r5
 80081f4:	2940038f 	ldh	r5,14(r5)
 80081f8:	dfc00115 	stw	ra,4(sp)
 80081fc:	8009d480 	call	8009d48 <_read_r>
 8008200:	10000716 	blt	r2,zero,8008220 <__sread+0x38>
 8008204:	80c01417 	ldw	r3,80(r16)
 8008208:	1887883a 	add	r3,r3,r2
 800820c:	80c01415 	stw	r3,80(r16)
 8008210:	dfc00117 	ldw	ra,4(sp)
 8008214:	dc000017 	ldw	r16,0(sp)
 8008218:	dec00204 	addi	sp,sp,8
 800821c:	f800283a 	ret
 8008220:	80c0030b 	ldhu	r3,12(r16)
 8008224:	18fbffcc 	andi	r3,r3,61439
 8008228:	80c0030d 	sth	r3,12(r16)
 800822c:	dfc00117 	ldw	ra,4(sp)
 8008230:	dc000017 	ldw	r16,0(sp)
 8008234:	dec00204 	addi	sp,sp,8
 8008238:	f800283a 	ret

0800823c <__seofread>:
 800823c:	0005883a 	mov	r2,zero
 8008240:	f800283a 	ret

08008244 <__swrite>:
 8008244:	2880030b 	ldhu	r2,12(r5)
 8008248:	defffb04 	addi	sp,sp,-20
 800824c:	dcc00315 	stw	r19,12(sp)
 8008250:	dc800215 	stw	r18,8(sp)
 8008254:	dc400115 	stw	r17,4(sp)
 8008258:	dc000015 	stw	r16,0(sp)
 800825c:	dfc00415 	stw	ra,16(sp)
 8008260:	10c0400c 	andi	r3,r2,256
 8008264:	2821883a 	mov	r16,r5
 8008268:	2027883a 	mov	r19,r4
 800826c:	3025883a 	mov	r18,r6
 8008270:	3823883a 	mov	r17,r7
 8008274:	18000526 	beq	r3,zero,800828c <__swrite+0x48>
 8008278:	2940038f 	ldh	r5,14(r5)
 800827c:	000d883a 	mov	r6,zero
 8008280:	01c00084 	movi	r7,2
 8008284:	8009cec0 	call	8009cec <_lseek_r>
 8008288:	8080030b 	ldhu	r2,12(r16)
 800828c:	8140038f 	ldh	r5,14(r16)
 8008290:	10bbffcc 	andi	r2,r2,61439
 8008294:	9809883a 	mov	r4,r19
 8008298:	900d883a 	mov	r6,r18
 800829c:	880f883a 	mov	r7,r17
 80082a0:	8080030d 	sth	r2,12(r16)
 80082a4:	dfc00417 	ldw	ra,16(sp)
 80082a8:	dcc00317 	ldw	r19,12(sp)
 80082ac:	dc800217 	ldw	r18,8(sp)
 80082b0:	dc400117 	ldw	r17,4(sp)
 80082b4:	dc000017 	ldw	r16,0(sp)
 80082b8:	dec00504 	addi	sp,sp,20
 80082bc:	80097e81 	jmpi	80097e8 <_write_r>

080082c0 <__sseek>:
 80082c0:	defffe04 	addi	sp,sp,-8
 80082c4:	dc000015 	stw	r16,0(sp)
 80082c8:	2821883a 	mov	r16,r5
 80082cc:	2940038f 	ldh	r5,14(r5)
 80082d0:	dfc00115 	stw	ra,4(sp)
 80082d4:	8009cec0 	call	8009cec <_lseek_r>
 80082d8:	00ffffc4 	movi	r3,-1
 80082dc:	10c00826 	beq	r2,r3,8008300 <__sseek+0x40>
 80082e0:	80c0030b 	ldhu	r3,12(r16)
 80082e4:	80801415 	stw	r2,80(r16)
 80082e8:	18c40014 	ori	r3,r3,4096
 80082ec:	80c0030d 	sth	r3,12(r16)
 80082f0:	dfc00117 	ldw	ra,4(sp)
 80082f4:	dc000017 	ldw	r16,0(sp)
 80082f8:	dec00204 	addi	sp,sp,8
 80082fc:	f800283a 	ret
 8008300:	80c0030b 	ldhu	r3,12(r16)
 8008304:	18fbffcc 	andi	r3,r3,61439
 8008308:	80c0030d 	sth	r3,12(r16)
 800830c:	dfc00117 	ldw	ra,4(sp)
 8008310:	dc000017 	ldw	r16,0(sp)
 8008314:	dec00204 	addi	sp,sp,8
 8008318:	f800283a 	ret

0800831c <__sclose>:
 800831c:	2940038f 	ldh	r5,14(r5)
 8008320:	80098441 	jmpi	8009844 <_close_r>

08008324 <__sprint_r.part.0>:
 8008324:	28801917 	ldw	r2,100(r5)
 8008328:	defff604 	addi	sp,sp,-40
 800832c:	dd400515 	stw	r21,20(sp)
 8008330:	dcc00315 	stw	r19,12(sp)
 8008334:	dfc00915 	stw	ra,36(sp)
 8008338:	df000815 	stw	fp,32(sp)
 800833c:	ddc00715 	stw	r23,28(sp)
 8008340:	dd800615 	stw	r22,24(sp)
 8008344:	dd000415 	stw	r20,16(sp)
 8008348:	dc800215 	stw	r18,8(sp)
 800834c:	dc400115 	stw	r17,4(sp)
 8008350:	dc000015 	stw	r16,0(sp)
 8008354:	1088000c 	andi	r2,r2,8192
 8008358:	2827883a 	mov	r19,r5
 800835c:	302b883a 	mov	r21,r6
 8008360:	10002d26 	beq	r2,zero,8008418 <__sprint_r.part.0+0xf4>
 8008364:	30800217 	ldw	r2,8(r6)
 8008368:	35800017 	ldw	r22,0(r6)
 800836c:	10002826 	beq	r2,zero,8008410 <__sprint_r.part.0+0xec>
 8008370:	2029883a 	mov	r20,r4
 8008374:	b5c00104 	addi	r23,r22,4
 8008378:	04bfffc4 	movi	r18,-1
 800837c:	bc400017 	ldw	r17,0(r23)
 8008380:	b4000017 	ldw	r16,0(r22)
 8008384:	0039883a 	mov	fp,zero
 8008388:	8822d0ba 	srli	r17,r17,2
 800838c:	04400316 	blt	zero,r17,800839c <__sprint_r.part.0+0x78>
 8008390:	00001806 	br	80083f4 <__sprint_r.part.0+0xd0>
 8008394:	84000104 	addi	r16,r16,4
 8008398:	8f001526 	beq	r17,fp,80083f0 <__sprint_r.part.0+0xcc>
 800839c:	81400017 	ldw	r5,0(r16)
 80083a0:	a009883a 	mov	r4,r20
 80083a4:	980d883a 	mov	r6,r19
 80083a8:	8009a600 	call	8009a60 <_fputwc_r>
 80083ac:	e7000044 	addi	fp,fp,1
 80083b0:	14bff81e 	bne	r2,r18,8008394 <__sprint_r.part.0+0x70>
 80083b4:	9005883a 	mov	r2,r18
 80083b8:	a8000215 	stw	zero,8(r21)
 80083bc:	a8000115 	stw	zero,4(r21)
 80083c0:	dfc00917 	ldw	ra,36(sp)
 80083c4:	df000817 	ldw	fp,32(sp)
 80083c8:	ddc00717 	ldw	r23,28(sp)
 80083cc:	dd800617 	ldw	r22,24(sp)
 80083d0:	dd400517 	ldw	r21,20(sp)
 80083d4:	dd000417 	ldw	r20,16(sp)
 80083d8:	dcc00317 	ldw	r19,12(sp)
 80083dc:	dc800217 	ldw	r18,8(sp)
 80083e0:	dc400117 	ldw	r17,4(sp)
 80083e4:	dc000017 	ldw	r16,0(sp)
 80083e8:	dec00a04 	addi	sp,sp,40
 80083ec:	f800283a 	ret
 80083f0:	a8800217 	ldw	r2,8(r21)
 80083f4:	8c63883a 	add	r17,r17,r17
 80083f8:	8c63883a 	add	r17,r17,r17
 80083fc:	1445c83a 	sub	r2,r2,r17
 8008400:	a8800215 	stw	r2,8(r21)
 8008404:	b5800204 	addi	r22,r22,8
 8008408:	bdc00204 	addi	r23,r23,8
 800840c:	103fdb1e 	bne	r2,zero,800837c <__sprint_r.part.0+0x58>
 8008410:	0005883a 	mov	r2,zero
 8008414:	003fe806 	br	80083b8 <__sprint_r.part.0+0x94>
 8008418:	8005eec0 	call	8005eec <__sfvwrite_r>
 800841c:	003fe606 	br	80083b8 <__sprint_r.part.0+0x94>

08008420 <__sprint_r>:
 8008420:	30c00217 	ldw	r3,8(r6)
 8008424:	18000126 	beq	r3,zero,800842c <__sprint_r+0xc>
 8008428:	80083241 	jmpi	8008324 <__sprint_r.part.0>
 800842c:	30000115 	stw	zero,4(r6)
 8008430:	0005883a 	mov	r2,zero
 8008434:	f800283a 	ret

08008438 <___vfiprintf_internal_r>:
 8008438:	deffca04 	addi	sp,sp,-216
 800843c:	dd803215 	stw	r22,200(sp)
 8008440:	dd403115 	stw	r21,196(sp)
 8008444:	dfc03515 	stw	ra,212(sp)
 8008448:	df003415 	stw	fp,208(sp)
 800844c:	ddc03315 	stw	r23,204(sp)
 8008450:	dd003015 	stw	r20,192(sp)
 8008454:	dcc02f15 	stw	r19,188(sp)
 8008458:	dc802e15 	stw	r18,184(sp)
 800845c:	dc402d15 	stw	r17,180(sp)
 8008460:	dc002c15 	stw	r16,176(sp)
 8008464:	d9002015 	stw	r4,128(sp)
 8008468:	d9c02215 	stw	r7,136(sp)
 800846c:	282b883a 	mov	r21,r5
 8008470:	302d883a 	mov	r22,r6
 8008474:	20000226 	beq	r4,zero,8008480 <___vfiprintf_internal_r+0x48>
 8008478:	20800e17 	ldw	r2,56(r4)
 800847c:	1001b126 	beq	r2,zero,8008b44 <___vfiprintf_internal_r+0x70c>
 8008480:	a880030b 	ldhu	r2,12(r21)
 8008484:	10c8000c 	andi	r3,r2,8192
 8008488:	1800061e 	bne	r3,zero,80084a4 <___vfiprintf_internal_r+0x6c>
 800848c:	a9001917 	ldw	r4,100(r21)
 8008490:	00f7ffc4 	movi	r3,-8193
 8008494:	10880014 	ori	r2,r2,8192
 8008498:	20c6703a 	and	r3,r4,r3
 800849c:	a880030d 	sth	r2,12(r21)
 80084a0:	a8c01915 	stw	r3,100(r21)
 80084a4:	10c0020c 	andi	r3,r2,8
 80084a8:	18018926 	beq	r3,zero,8008ad0 <___vfiprintf_internal_r+0x698>
 80084ac:	a8c00417 	ldw	r3,16(r21)
 80084b0:	18018726 	beq	r3,zero,8008ad0 <___vfiprintf_internal_r+0x698>
 80084b4:	1080068c 	andi	r2,r2,26
 80084b8:	00c00284 	movi	r3,10
 80084bc:	10c18c26 	beq	r2,r3,8008af0 <___vfiprintf_internal_r+0x6b8>
 80084c0:	d8801a04 	addi	r2,sp,104
 80084c4:	d8c019c4 	addi	r3,sp,103
 80084c8:	070200b4 	movhi	fp,2050
 80084cc:	05c200b4 	movhi	r23,2050
 80084d0:	10c9c83a 	sub	r4,r2,r3
 80084d4:	e7270004 	addi	fp,fp,-25600
 80084d8:	bde6fc04 	addi	r23,r23,-25616
 80084dc:	d8801e15 	stw	r2,120(sp)
 80084e0:	d8c01f15 	stw	r3,124(sp)
 80084e4:	dec01a15 	stw	sp,104(sp)
 80084e8:	d8001c15 	stw	zero,112(sp)
 80084ec:	d8001b15 	stw	zero,108(sp)
 80084f0:	d8002615 	stw	zero,152(sp)
 80084f4:	d8002315 	stw	zero,140(sp)
 80084f8:	d9002715 	stw	r4,156(sp)
 80084fc:	d811883a 	mov	r8,sp
 8008500:	dd402115 	stw	r21,132(sp)
 8008504:	b021883a 	mov	r16,r22
 8008508:	80800007 	ldb	r2,0(r16)
 800850c:	10037226 	beq	r2,zero,80092d8 <___vfiprintf_internal_r+0xea0>
 8008510:	01000944 	movi	r4,37
 8008514:	11037026 	beq	r2,r4,80092d8 <___vfiprintf_internal_r+0xea0>
 8008518:	8005883a 	mov	r2,r16
 800851c:	00000106 	br	8008524 <___vfiprintf_internal_r+0xec>
 8008520:	19000326 	beq	r3,r4,8008530 <___vfiprintf_internal_r+0xf8>
 8008524:	10800044 	addi	r2,r2,1
 8008528:	10c00007 	ldb	r3,0(r2)
 800852c:	183ffc1e 	bne	r3,zero,8008520 <___vfiprintf_internal_r+0xe8>
 8008530:	1425c83a 	sub	r18,r2,r16
 8008534:	1023883a 	mov	r17,r2
 8008538:	90001026 	beq	r18,zero,800857c <___vfiprintf_internal_r+0x144>
 800853c:	d8c01c17 	ldw	r3,112(sp)
 8008540:	d8801b17 	ldw	r2,108(sp)
 8008544:	44000015 	stw	r16,0(r8)
 8008548:	90c7883a 	add	r3,r18,r3
 800854c:	10800044 	addi	r2,r2,1
 8008550:	44800115 	stw	r18,4(r8)
 8008554:	d8c01c15 	stw	r3,112(sp)
 8008558:	d8801b15 	stw	r2,108(sp)
 800855c:	010001c4 	movi	r4,7
 8008560:	2080750e 	bge	r4,r2,8008738 <___vfiprintf_internal_r+0x300>
 8008564:	18036f1e 	bne	r3,zero,8009324 <___vfiprintf_internal_r+0xeec>
 8008568:	d8802317 	ldw	r2,140(sp)
 800856c:	d8001b15 	stw	zero,108(sp)
 8008570:	d811883a 	mov	r8,sp
 8008574:	1485883a 	add	r2,r2,r18
 8008578:	d8802315 	stw	r2,140(sp)
 800857c:	88800007 	ldb	r2,0(r17)
 8008580:	10041026 	beq	r2,zero,80095c4 <___vfiprintf_internal_r+0x118c>
 8008584:	88c00047 	ldb	r3,1(r17)
 8008588:	88800044 	addi	r2,r17,1
 800858c:	d8001d85 	stb	zero,118(sp)
 8008590:	000f883a 	mov	r7,zero
 8008594:	027fffc4 	movi	r9,-1
 8008598:	0025883a 	mov	r18,zero
 800859c:	002b883a 	mov	r21,zero
 80085a0:	01401604 	movi	r5,88
 80085a4:	01800244 	movi	r6,9
 80085a8:	03400a84 	movi	r13,42
 80085ac:	03001b04 	movi	r12,108
 80085b0:	14000044 	addi	r16,r2,1
 80085b4:	18bff804 	addi	r2,r3,-32
 80085b8:	28825536 	bltu	r5,r2,8008f10 <___vfiprintf_internal_r+0xad8>
 80085bc:	100490ba 	slli	r2,r2,2
 80085c0:	01020074 	movhi	r4,2049
 80085c4:	21217504 	addi	r4,r4,-31276
 80085c8:	1105883a 	add	r2,r2,r4
 80085cc:	10800017 	ldw	r2,0(r2)
 80085d0:	1000683a 	jmp	r2
 80085d4:	08008cd4 	ori	zero,at,563
 80085d8:	08008f10 	cmplti	zero,at,572
 80085dc:	08008f10 	cmplti	zero,at,572
 80085e0:	08008cf4 	orhi	zero,at,563
 80085e4:	08008f10 	cmplti	zero,at,572
 80085e8:	08008f10 	cmplti	zero,at,572
 80085ec:	08008f10 	cmplti	zero,at,572
 80085f0:	08008f10 	cmplti	zero,at,572
 80085f4:	08008f10 	cmplti	zero,at,572
 80085f8:	08008f10 	cmplti	zero,at,572
 80085fc:	08008d04 	addi	zero,at,564
 8008600:	08008d24 	muli	zero,at,564
 8008604:	08008f10 	cmplti	zero,at,572
 8008608:	08008b4c 	andi	zero,at,557
 800860c:	08008c38 	rdprs	zero,at,560
 8008610:	08008f10 	cmplti	zero,at,572
 8008614:	08008bb8 	rdprs	zero,at,558
 8008618:	08008bc8 	cmpgei	zero,at,559
 800861c:	08008bc8 	cmpgei	zero,at,559
 8008620:	08008bc8 	cmpgei	zero,at,559
 8008624:	08008bc8 	cmpgei	zero,at,559
 8008628:	08008bc8 	cmpgei	zero,at,559
 800862c:	08008bc8 	cmpgei	zero,at,559
 8008630:	08008bc8 	cmpgei	zero,at,559
 8008634:	08008bc8 	cmpgei	zero,at,559
 8008638:	08008bc8 	cmpgei	zero,at,559
 800863c:	08008f10 	cmplti	zero,at,572
 8008640:	08008f10 	cmplti	zero,at,572
 8008644:	08008f10 	cmplti	zero,at,572
 8008648:	08008f10 	cmplti	zero,at,572
 800864c:	08008f10 	cmplti	zero,at,572
 8008650:	08008f10 	cmplti	zero,at,572
 8008654:	08008f10 	cmplti	zero,at,572
 8008658:	08008f10 	cmplti	zero,at,572
 800865c:	08008f10 	cmplti	zero,at,572
 8008660:	08008f10 	cmplti	zero,at,572
 8008664:	08008bf4 	orhi	zero,at,559
 8008668:	08008f10 	cmplti	zero,at,572
 800866c:	08008f10 	cmplti	zero,at,572
 8008670:	08008f10 	cmplti	zero,at,572
 8008674:	08008f10 	cmplti	zero,at,572
 8008678:	08008f10 	cmplti	zero,at,572
 800867c:	08008f10 	cmplti	zero,at,572
 8008680:	08008f10 	cmplti	zero,at,572
 8008684:	08008f10 	cmplti	zero,at,572
 8008688:	08008f10 	cmplti	zero,at,572
 800868c:	08008f10 	cmplti	zero,at,572
 8008690:	08008780 	call	800878 <OSCtxSw_SWITCH_PC+0x800838>
 8008694:	08008f10 	cmplti	zero,at,572
 8008698:	08008f10 	cmplti	zero,at,572
 800869c:	08008f10 	cmplti	zero,at,572
 80086a0:	08008f10 	cmplti	zero,at,572
 80086a4:	08008f10 	cmplti	zero,at,572
 80086a8:	0800874c 	andi	zero,at,541
 80086ac:	08008f10 	cmplti	zero,at,572
 80086b0:	08008f10 	cmplti	zero,at,572
 80086b4:	08008d94 	ori	zero,at,566
 80086b8:	08008f10 	cmplti	zero,at,572
 80086bc:	08008f10 	cmplti	zero,at,572
 80086c0:	08008f10 	cmplti	zero,at,572
 80086c4:	08008f10 	cmplti	zero,at,572
 80086c8:	08008f10 	cmplti	zero,at,572
 80086cc:	08008f10 	cmplti	zero,at,572
 80086d0:	08008f10 	cmplti	zero,at,572
 80086d4:	08008f10 	cmplti	zero,at,572
 80086d8:	08008f10 	cmplti	zero,at,572
 80086dc:	08008f10 	cmplti	zero,at,572
 80086e0:	08008d34 	orhi	zero,at,564
 80086e4:	08008d60 	cmpeqi	zero,at,565
 80086e8:	08008f10 	cmplti	zero,at,572
 80086ec:	08008f10 	cmplti	zero,at,572
 80086f0:	08008f10 	cmplti	zero,at,572
 80086f4:	08008e3c 	xorhi	zero,at,568
 80086f8:	08008d60 	cmpeqi	zero,at,565
 80086fc:	08008f10 	cmplti	zero,at,572
 8008700:	08008f10 	cmplti	zero,at,572
 8008704:	08008e4c 	andi	zero,at,569
 8008708:	08008f10 	cmplti	zero,at,572
 800870c:	08008c78 	rdprs	zero,at,561
 8008710:	08008784 	addi	zero,at,542
 8008714:	08008e60 	cmpeqi	zero,at,569
 8008718:	08008ea0 	cmpeqi	zero,at,570
 800871c:	08008f10 	cmplti	zero,at,572
 8008720:	08008de8 	cmpgeui	zero,at,567
 8008724:	08008f10 	cmplti	zero,at,572
 8008728:	08008750 	cmplti	zero,at,541
 800872c:	08008f10 	cmplti	zero,at,572
 8008730:	08008f10 	cmplti	zero,at,572
 8008734:	08008eb0 	cmpltui	zero,at,570
 8008738:	42000204 	addi	r8,r8,8
 800873c:	d8802317 	ldw	r2,140(sp)
 8008740:	1485883a 	add	r2,r2,r18
 8008744:	d8802315 	stw	r2,140(sp)
 8008748:	003f8c06 	br	800857c <___vfiprintf_internal_r+0x144>
 800874c:	ad400414 	ori	r21,r21,16
 8008750:	a880080c 	andi	r2,r21,32
 8008754:	1001e61e 	bne	r2,zero,8008ef0 <___vfiprintf_internal_r+0xab8>
 8008758:	a880040c 	andi	r2,r21,16
 800875c:	10034726 	beq	r2,zero,800947c <___vfiprintf_internal_r+0x1044>
 8008760:	d8802217 	ldw	r2,136(sp)
 8008764:	001b883a 	mov	r13,zero
 8008768:	15800017 	ldw	r22,0(r2)
 800876c:	10800104 	addi	r2,r2,4
 8008770:	d8802215 	stw	r2,136(sp)
 8008774:	b009883a 	mov	r4,r22
 8008778:	00800044 	movi	r2,1
 800877c:	00000c06 	br	80087b0 <___vfiprintf_internal_r+0x378>
 8008780:	ad400414 	ori	r21,r21,16
 8008784:	a880080c 	andi	r2,r21,32
 8008788:	1001491e 	bne	r2,zero,8008cb0 <___vfiprintf_internal_r+0x878>
 800878c:	a880040c 	andi	r2,r21,16
 8008790:	10032d26 	beq	r2,zero,8009448 <___vfiprintf_internal_r+0x1010>
 8008794:	d9002217 	ldw	r4,136(sp)
 8008798:	001b883a 	mov	r13,zero
 800879c:	0005883a 	mov	r2,zero
 80087a0:	25800017 	ldw	r22,0(r4)
 80087a4:	21000104 	addi	r4,r4,4
 80087a8:	d9002215 	stw	r4,136(sp)
 80087ac:	b009883a 	mov	r4,r22
 80087b0:	d8001d85 	stb	zero,118(sp)
 80087b4:	4827883a 	mov	r19,r9
 80087b8:	001d883a 	mov	r14,zero
 80087bc:	48000216 	blt	r9,zero,80087c8 <___vfiprintf_internal_r+0x390>
 80087c0:	00ffdfc4 	movi	r3,-129
 80087c4:	a8ea703a 	and	r21,r21,r3
 80087c8:	2002071e 	bne	r4,zero,8008fe8 <___vfiprintf_internal_r+0xbb0>
 80087cc:	4802ad26 	beq	r9,zero,8009284 <___vfiprintf_internal_r+0xe4c>
 80087d0:	10803fcc 	andi	r2,r2,255
 80087d4:	00c00044 	movi	r3,1
 80087d8:	10c22b26 	beq	r2,r3,8009088 <___vfiprintf_internal_r+0xc50>
 80087dc:	00c00084 	movi	r3,2
 80087e0:	dd001a04 	addi	r20,sp,104
 80087e4:	10c0dd1e 	bne	r2,r3,8008b5c <___vfiprintf_internal_r+0x724>
 80087e8:	d9002617 	ldw	r4,152(sp)
 80087ec:	b08003cc 	andi	r2,r22,15
 80087f0:	6806973a 	slli	r3,r13,28
 80087f4:	2085883a 	add	r2,r4,r2
 80087f8:	b02cd13a 	srli	r22,r22,4
 80087fc:	10800003 	ldbu	r2,0(r2)
 8008800:	681ad13a 	srli	r13,r13,4
 8008804:	a53fffc4 	addi	r20,r20,-1
 8008808:	1dacb03a 	or	r22,r3,r22
 800880c:	a0800005 	stb	r2,0(r20)
 8008810:	b344b03a 	or	r2,r22,r13
 8008814:	103ff51e 	bne	r2,zero,80087ec <___vfiprintf_internal_r+0x3b4>
 8008818:	d9001e17 	ldw	r4,120(sp)
 800881c:	2527c83a 	sub	r19,r4,r20
 8008820:	9823883a 	mov	r17,r19
 8008824:	9a40010e 	bge	r19,r9,800882c <___vfiprintf_internal_r+0x3f4>
 8008828:	4823883a 	mov	r17,r9
 800882c:	73803fcc 	andi	r14,r14,255
 8008830:	7380201c 	xori	r14,r14,128
 8008834:	73bfe004 	addi	r14,r14,-128
 8008838:	70000126 	beq	r14,zero,8008840 <___vfiprintf_internal_r+0x408>
 800883c:	8c400044 	addi	r17,r17,1
 8008840:	ab40008c 	andi	r13,r21,2
 8008844:	68000126 	beq	r13,zero,800884c <___vfiprintf_internal_r+0x414>
 8008848:	8c400084 	addi	r17,r17,2
 800884c:	ad80210c 	andi	r22,r21,132
 8008850:	b001c51e 	bne	r22,zero,8008f68 <___vfiprintf_internal_r+0xb30>
 8008854:	9447c83a 	sub	r3,r18,r17
 8008858:	00c1c30e 	bge	zero,r3,8008f68 <___vfiprintf_internal_r+0xb30>
 800885c:	01c00404 	movi	r7,16
 8008860:	d8801c17 	ldw	r2,112(sp)
 8008864:	38c37b0e 	bge	r7,r3,8009654 <___vfiprintf_internal_r+0x121c>
 8008868:	010200b4 	movhi	r4,2050
 800886c:	21270004 	addi	r4,r4,-25600
 8008870:	dc002915 	stw	r16,164(sp)
 8008874:	d9801b17 	ldw	r6,108(sp)
 8008878:	d9002415 	stw	r4,144(sp)
 800887c:	03c001c4 	movi	r15,7
 8008880:	da402515 	stw	r9,148(sp)
 8008884:	db402815 	stw	r13,160(sp)
 8008888:	1821883a 	mov	r16,r3
 800888c:	00000506 	br	80088a4 <___vfiprintf_internal_r+0x46c>
 8008890:	31400084 	addi	r5,r6,2
 8008894:	42000204 	addi	r8,r8,8
 8008898:	200d883a 	mov	r6,r4
 800889c:	843ffc04 	addi	r16,r16,-16
 80088a0:	3c000d0e 	bge	r7,r16,80088d8 <___vfiprintf_internal_r+0x4a0>
 80088a4:	10800404 	addi	r2,r2,16
 80088a8:	31000044 	addi	r4,r6,1
 80088ac:	47000015 	stw	fp,0(r8)
 80088b0:	41c00115 	stw	r7,4(r8)
 80088b4:	d8801c15 	stw	r2,112(sp)
 80088b8:	d9001b15 	stw	r4,108(sp)
 80088bc:	793ff40e 	bge	r15,r4,8008890 <___vfiprintf_internal_r+0x458>
 80088c0:	10019b1e 	bne	r2,zero,8008f30 <___vfiprintf_internal_r+0xaf8>
 80088c4:	843ffc04 	addi	r16,r16,-16
 80088c8:	000d883a 	mov	r6,zero
 80088cc:	01400044 	movi	r5,1
 80088d0:	d811883a 	mov	r8,sp
 80088d4:	3c3ff316 	blt	r7,r16,80088a4 <___vfiprintf_internal_r+0x46c>
 80088d8:	8007883a 	mov	r3,r16
 80088dc:	da402517 	ldw	r9,148(sp)
 80088e0:	db402817 	ldw	r13,160(sp)
 80088e4:	dc002917 	ldw	r16,164(sp)
 80088e8:	d9002417 	ldw	r4,144(sp)
 80088ec:	1885883a 	add	r2,r3,r2
 80088f0:	40c00115 	stw	r3,4(r8)
 80088f4:	41000015 	stw	r4,0(r8)
 80088f8:	d8801c15 	stw	r2,112(sp)
 80088fc:	d9401b15 	stw	r5,108(sp)
 8008900:	00c001c4 	movi	r3,7
 8008904:	19426a16 	blt	r3,r5,80092b0 <___vfiprintf_internal_r+0xe78>
 8008908:	d8c01d87 	ldb	r3,118(sp)
 800890c:	42000204 	addi	r8,r8,8
 8008910:	29000044 	addi	r4,r5,1
 8008914:	1801991e 	bne	r3,zero,8008f7c <___vfiprintf_internal_r+0xb44>
 8008918:	68000c26 	beq	r13,zero,800894c <___vfiprintf_internal_r+0x514>
 800891c:	d8c01d04 	addi	r3,sp,116
 8008920:	10800084 	addi	r2,r2,2
 8008924:	40c00015 	stw	r3,0(r8)
 8008928:	00c00084 	movi	r3,2
 800892c:	40c00115 	stw	r3,4(r8)
 8008930:	d8801c15 	stw	r2,112(sp)
 8008934:	d9001b15 	stw	r4,108(sp)
 8008938:	00c001c4 	movi	r3,7
 800893c:	19024c16 	blt	r3,r4,8009270 <___vfiprintf_internal_r+0xe38>
 8008940:	200b883a 	mov	r5,r4
 8008944:	42000204 	addi	r8,r8,8
 8008948:	21000044 	addi	r4,r4,1
 800894c:	00c02004 	movi	r3,128
 8008950:	b0c20126 	beq	r22,r3,8009158 <___vfiprintf_internal_r+0xd20>
 8008954:	4cedc83a 	sub	r22,r9,r19
 8008958:	0580230e 	bge	zero,r22,80089e8 <___vfiprintf_internal_r+0x5b0>
 800895c:	01c00404 	movi	r7,16
 8008960:	3d83140e 	bge	r7,r22,80095b4 <___vfiprintf_internal_r+0x117c>
 8008964:	010200b4 	movhi	r4,2050
 8008968:	2126fc04 	addi	r4,r4,-25616
 800896c:	d9002415 	stw	r4,144(sp)
 8008970:	034001c4 	movi	r13,7
 8008974:	00000506 	br	800898c <___vfiprintf_internal_r+0x554>
 8008978:	29000084 	addi	r4,r5,2
 800897c:	42000204 	addi	r8,r8,8
 8008980:	180b883a 	mov	r5,r3
 8008984:	b5bffc04 	addi	r22,r22,-16
 8008988:	3d800d0e 	bge	r7,r22,80089c0 <___vfiprintf_internal_r+0x588>
 800898c:	10800404 	addi	r2,r2,16
 8008990:	28c00044 	addi	r3,r5,1
 8008994:	45c00015 	stw	r23,0(r8)
 8008998:	41c00115 	stw	r7,4(r8)
 800899c:	d8801c15 	stw	r2,112(sp)
 80089a0:	d8c01b15 	stw	r3,108(sp)
 80089a4:	68fff40e 	bge	r13,r3,8008978 <___vfiprintf_internal_r+0x540>
 80089a8:	1001811e 	bne	r2,zero,8008fb0 <___vfiprintf_internal_r+0xb78>
 80089ac:	b5bffc04 	addi	r22,r22,-16
 80089b0:	01000044 	movi	r4,1
 80089b4:	000b883a 	mov	r5,zero
 80089b8:	d811883a 	mov	r8,sp
 80089bc:	3dbff316 	blt	r7,r22,800898c <___vfiprintf_internal_r+0x554>
 80089c0:	d8c02417 	ldw	r3,144(sp)
 80089c4:	1585883a 	add	r2,r2,r22
 80089c8:	45800115 	stw	r22,4(r8)
 80089cc:	40c00015 	stw	r3,0(r8)
 80089d0:	d8801c15 	stw	r2,112(sp)
 80089d4:	d9001b15 	stw	r4,108(sp)
 80089d8:	00c001c4 	movi	r3,7
 80089dc:	1901d016 	blt	r3,r4,8009120 <___vfiprintf_internal_r+0xce8>
 80089e0:	42000204 	addi	r8,r8,8
 80089e4:	21000044 	addi	r4,r4,1
 80089e8:	14c5883a 	add	r2,r2,r19
 80089ec:	45000015 	stw	r20,0(r8)
 80089f0:	44c00115 	stw	r19,4(r8)
 80089f4:	d8801c15 	stw	r2,112(sp)
 80089f8:	d9001b15 	stw	r4,108(sp)
 80089fc:	00c001c4 	movi	r3,7
 8008a00:	1901cf0e 	bge	r3,r4,8009140 <___vfiprintf_internal_r+0xd08>
 8008a04:	1002361e 	bne	r2,zero,80092e0 <___vfiprintf_internal_r+0xea8>
 8008a08:	d8001b15 	stw	zero,108(sp)
 8008a0c:	aac0010c 	andi	r11,r21,4
 8008a10:	58002826 	beq	r11,zero,8008ab4 <___vfiprintf_internal_r+0x67c>
 8008a14:	9467c83a 	sub	r19,r18,r17
 8008a18:	d811883a 	mov	r8,sp
 8008a1c:	04c3340e 	bge	zero,r19,80096f0 <___vfiprintf_internal_r+0x12b8>
 8008a20:	01c00404 	movi	r7,16
 8008a24:	3cc31b0e 	bge	r7,r19,8009694 <___vfiprintf_internal_r+0x125c>
 8008a28:	00c200b4 	movhi	r3,2050
 8008a2c:	18e70004 	addi	r3,r3,-25600
 8008a30:	d9001b17 	ldw	r4,108(sp)
 8008a34:	d8c02415 	stw	r3,144(sp)
 8008a38:	382b883a 	mov	r21,r7
 8008a3c:	050001c4 	movi	r20,7
 8008a40:	dd802017 	ldw	r22,128(sp)
 8008a44:	00000506 	br	8008a5c <___vfiprintf_internal_r+0x624>
 8008a48:	21400084 	addi	r5,r4,2
 8008a4c:	42000204 	addi	r8,r8,8
 8008a50:	1809883a 	mov	r4,r3
 8008a54:	9cfffc04 	addi	r19,r19,-16
 8008a58:	acc00d0e 	bge	r21,r19,8008a90 <___vfiprintf_internal_r+0x658>
 8008a5c:	10800404 	addi	r2,r2,16
 8008a60:	20c00044 	addi	r3,r4,1
 8008a64:	47000015 	stw	fp,0(r8)
 8008a68:	45400115 	stw	r21,4(r8)
 8008a6c:	d8801c15 	stw	r2,112(sp)
 8008a70:	d8c01b15 	stw	r3,108(sp)
 8008a74:	a0fff40e 	bge	r20,r3,8008a48 <___vfiprintf_internal_r+0x610>
 8008a78:	10019f1e 	bne	r2,zero,80090f8 <___vfiprintf_internal_r+0xcc0>
 8008a7c:	9cfffc04 	addi	r19,r19,-16
 8008a80:	01400044 	movi	r5,1
 8008a84:	0009883a 	mov	r4,zero
 8008a88:	d811883a 	mov	r8,sp
 8008a8c:	acfff316 	blt	r21,r19,8008a5c <___vfiprintf_internal_r+0x624>
 8008a90:	d8c02417 	ldw	r3,144(sp)
 8008a94:	14c5883a 	add	r2,r2,r19
 8008a98:	44c00115 	stw	r19,4(r8)
 8008a9c:	40c00015 	stw	r3,0(r8)
 8008aa0:	d8801c15 	stw	r2,112(sp)
 8008aa4:	d9401b15 	stw	r5,108(sp)
 8008aa8:	00c001c4 	movi	r3,7
 8008aac:	1941810e 	bge	r3,r5,80090b4 <___vfiprintf_internal_r+0xc7c>
 8008ab0:	10017a1e 	bne	r2,zero,800909c <___vfiprintf_internal_r+0xc64>
 8008ab4:	8c82a416 	blt	r17,r18,8009548 <___vfiprintf_internal_r+0x1110>
 8008ab8:	d9002317 	ldw	r4,140(sp)
 8008abc:	2449883a 	add	r4,r4,r17
 8008ac0:	d9002315 	stw	r4,140(sp)
 8008ac4:	d8001b15 	stw	zero,108(sp)
 8008ac8:	d811883a 	mov	r8,sp
 8008acc:	003e8e06 	br	8008508 <___vfiprintf_internal_r+0xd0>
 8008ad0:	d9002017 	ldw	r4,128(sp)
 8008ad4:	a80b883a 	mov	r5,r21
 8008ad8:	8003a280 	call	8003a28 <__swsetup_r>
 8008adc:	10000c1e 	bne	r2,zero,8008b10 <___vfiprintf_internal_r+0x6d8>
 8008ae0:	a880030b 	ldhu	r2,12(r21)
 8008ae4:	00c00284 	movi	r3,10
 8008ae8:	1080068c 	andi	r2,r2,26
 8008aec:	10fe741e 	bne	r2,r3,80084c0 <___vfiprintf_internal_r+0x88>
 8008af0:	a880038f 	ldh	r2,14(r21)
 8008af4:	103e7216 	blt	r2,zero,80084c0 <___vfiprintf_internal_r+0x88>
 8008af8:	d9002017 	ldw	r4,128(sp)
 8008afc:	d9c02217 	ldw	r7,136(sp)
 8008b00:	a80b883a 	mov	r5,r21
 8008b04:	b00d883a 	mov	r6,r22
 8008b08:	800972c0 	call	800972c <__sbprintf>
 8008b0c:	00000106 	br	8008b14 <___vfiprintf_internal_r+0x6dc>
 8008b10:	00bfffc4 	movi	r2,-1
 8008b14:	dfc03517 	ldw	ra,212(sp)
 8008b18:	df003417 	ldw	fp,208(sp)
 8008b1c:	ddc03317 	ldw	r23,204(sp)
 8008b20:	dd803217 	ldw	r22,200(sp)
 8008b24:	dd403117 	ldw	r21,196(sp)
 8008b28:	dd003017 	ldw	r20,192(sp)
 8008b2c:	dcc02f17 	ldw	r19,188(sp)
 8008b30:	dc802e17 	ldw	r18,184(sp)
 8008b34:	dc402d17 	ldw	r17,180(sp)
 8008b38:	dc002c17 	ldw	r16,176(sp)
 8008b3c:	dec03604 	addi	sp,sp,216
 8008b40:	f800283a 	ret
 8008b44:	8005a880 	call	8005a88 <__sinit>
 8008b48:	003e4d06 	br	8008480 <___vfiprintf_internal_r+0x48>
 8008b4c:	8005883a 	mov	r2,r16
 8008b50:	ad400114 	ori	r21,r21,4
 8008b54:	80c00007 	ldb	r3,0(r16)
 8008b58:	003e9506 	br	80085b0 <___vfiprintf_internal_r+0x178>
 8008b5c:	b006d0fa 	srli	r3,r22,3
 8008b60:	6808977a 	slli	r4,r13,29
 8008b64:	681ad0fa 	srli	r13,r13,3
 8008b68:	b58001cc 	andi	r22,r22,7
 8008b6c:	b0800c04 	addi	r2,r22,48
 8008b70:	a53fffc4 	addi	r20,r20,-1
 8008b74:	20ecb03a 	or	r22,r4,r3
 8008b78:	a0800005 	stb	r2,0(r20)
 8008b7c:	b346b03a 	or	r3,r22,r13
 8008b80:	183ff61e 	bne	r3,zero,8008b5c <___vfiprintf_internal_r+0x724>
 8008b84:	a8c0004c 	andi	r3,r21,1
 8008b88:	a009883a 	mov	r4,r20
 8008b8c:	18013b26 	beq	r3,zero,800907c <___vfiprintf_internal_r+0xc44>
 8008b90:	10803fcc 	andi	r2,r2,255
 8008b94:	1080201c 	xori	r2,r2,128
 8008b98:	10bfe004 	addi	r2,r2,-128
 8008b9c:	00c00c04 	movi	r3,48
 8008ba0:	10ff1d26 	beq	r2,r3,8008818 <___vfiprintf_internal_r+0x3e0>
 8008ba4:	d8801e17 	ldw	r2,120(sp)
 8008ba8:	a53fffc4 	addi	r20,r20,-1
 8008bac:	20ffffc5 	stb	r3,-1(r4)
 8008bb0:	1527c83a 	sub	r19,r2,r20
 8008bb4:	003f1a06 	br	8008820 <___vfiprintf_internal_r+0x3e8>
 8008bb8:	ad402014 	ori	r21,r21,128
 8008bbc:	8005883a 	mov	r2,r16
 8008bc0:	80c00007 	ldb	r3,0(r16)
 8008bc4:	003e7a06 	br	80085b0 <___vfiprintf_internal_r+0x178>
 8008bc8:	8005883a 	mov	r2,r16
 8008bcc:	0025883a 	mov	r18,zero
 8008bd0:	193ff404 	addi	r4,r3,-48
 8008bd4:	10c00007 	ldb	r3,0(r2)
 8008bd8:	948002a4 	muli	r18,r18,10
 8008bdc:	84000044 	addi	r16,r16,1
 8008be0:	8005883a 	mov	r2,r16
 8008be4:	9125883a 	add	r18,r18,r4
 8008be8:	193ff404 	addi	r4,r3,-48
 8008bec:	313ff92e 	bgeu	r6,r4,8008bd4 <___vfiprintf_internal_r+0x79c>
 8008bf0:	003e7006 	br	80085b4 <___vfiprintf_internal_r+0x17c>
 8008bf4:	ad400414 	ori	r21,r21,16
 8008bf8:	d9c01d85 	stb	r7,118(sp)
 8008bfc:	a880080c 	andi	r2,r21,32
 8008c00:	d8c02217 	ldw	r3,136(sp)
 8008c04:	10005a26 	beq	r2,zero,8008d70 <___vfiprintf_internal_r+0x938>
 8008c08:	d9002217 	ldw	r4,136(sp)
 8008c0c:	18800117 	ldw	r2,4(r3)
 8008c10:	1d800017 	ldw	r22,0(r3)
 8008c14:	21000204 	addi	r4,r4,8
 8008c18:	d9002215 	stw	r4,136(sp)
 8008c1c:	101b883a 	mov	r13,r2
 8008c20:	1001f416 	blt	r2,zero,80093f4 <___vfiprintf_internal_r+0xfbc>
 8008c24:	db801d83 	ldbu	r14,118(sp)
 8008c28:	4827883a 	mov	r19,r9
 8008c2c:	00800044 	movi	r2,1
 8008c30:	b348b03a 	or	r4,r22,r13
 8008c34:	003ee106 	br	80087bc <___vfiprintf_internal_r+0x384>
 8008c38:	80c00007 	ldb	r3,0(r16)
 8008c3c:	80800044 	addi	r2,r16,1
 8008c40:	1b42a326 	beq	r3,r13,80096d0 <___vfiprintf_internal_r+0x1298>
 8008c44:	193ff404 	addi	r4,r3,-48
 8008c48:	1021883a 	mov	r16,r2
 8008c4c:	0013883a 	mov	r9,zero
 8008c50:	313e5836 	bltu	r6,r4,80085b4 <___vfiprintf_internal_r+0x17c>
 8008c54:	80c00007 	ldb	r3,0(r16)
 8008c58:	4a4002a4 	muli	r9,r9,10
 8008c5c:	84000044 	addi	r16,r16,1
 8008c60:	2253883a 	add	r9,r4,r9
 8008c64:	193ff404 	addi	r4,r3,-48
 8008c68:	313ffa2e 	bgeu	r6,r4,8008c54 <___vfiprintf_internal_r+0x81c>
 8008c6c:	483e510e 	bge	r9,zero,80085b4 <___vfiprintf_internal_r+0x17c>
 8008c70:	027fffc4 	movi	r9,-1
 8008c74:	003e4f06 	br	80085b4 <___vfiprintf_internal_r+0x17c>
 8008c78:	d9c01d85 	stb	r7,118(sp)
 8008c7c:	a880080c 	andi	r2,r21,32
 8008c80:	10020826 	beq	r2,zero,80094a4 <___vfiprintf_internal_r+0x106c>
 8008c84:	d8c02217 	ldw	r3,136(sp)
 8008c88:	d9002317 	ldw	r4,140(sp)
 8008c8c:	18800017 	ldw	r2,0(r3)
 8008c90:	2007d7fa 	srai	r3,r4,31
 8008c94:	d9002217 	ldw	r4,136(sp)
 8008c98:	10c00115 	stw	r3,4(r2)
 8008c9c:	21000104 	addi	r4,r4,4
 8008ca0:	d9002215 	stw	r4,136(sp)
 8008ca4:	d9002317 	ldw	r4,140(sp)
 8008ca8:	11000015 	stw	r4,0(r2)
 8008cac:	003e1606 	br	8008508 <___vfiprintf_internal_r+0xd0>
 8008cb0:	d8802217 	ldw	r2,136(sp)
 8008cb4:	d8c02217 	ldw	r3,136(sp)
 8008cb8:	15800017 	ldw	r22,0(r2)
 8008cbc:	13400117 	ldw	r13,4(r2)
 8008cc0:	18c00204 	addi	r3,r3,8
 8008cc4:	0005883a 	mov	r2,zero
 8008cc8:	d8c02215 	stw	r3,136(sp)
 8008ccc:	b348b03a 	or	r4,r22,r13
 8008cd0:	003eb706 	br	80087b0 <___vfiprintf_internal_r+0x378>
 8008cd4:	38803fcc 	andi	r2,r7,255
 8008cd8:	1080201c 	xori	r2,r2,128
 8008cdc:	10bfe004 	addi	r2,r2,-128
 8008ce0:	1001e31e 	bne	r2,zero,8009470 <___vfiprintf_internal_r+0x1038>
 8008ce4:	8005883a 	mov	r2,r16
 8008ce8:	01c00804 	movi	r7,32
 8008cec:	80c00007 	ldb	r3,0(r16)
 8008cf0:	003e2f06 	br	80085b0 <___vfiprintf_internal_r+0x178>
 8008cf4:	ad400054 	ori	r21,r21,1
 8008cf8:	8005883a 	mov	r2,r16
 8008cfc:	80c00007 	ldb	r3,0(r16)
 8008d00:	003e2b06 	br	80085b0 <___vfiprintf_internal_r+0x178>
 8008d04:	d8c02217 	ldw	r3,136(sp)
 8008d08:	1c800017 	ldw	r18,0(r3)
 8008d0c:	18c00104 	addi	r3,r3,4
 8008d10:	90023816 	blt	r18,zero,80095f4 <___vfiprintf_internal_r+0x11bc>
 8008d14:	d8c02215 	stw	r3,136(sp)
 8008d18:	8005883a 	mov	r2,r16
 8008d1c:	80c00007 	ldb	r3,0(r16)
 8008d20:	003e2306 	br	80085b0 <___vfiprintf_internal_r+0x178>
 8008d24:	8005883a 	mov	r2,r16
 8008d28:	01c00ac4 	movi	r7,43
 8008d2c:	80c00007 	ldb	r3,0(r16)
 8008d30:	003e1f06 	br	80085b0 <___vfiprintf_internal_r+0x178>
 8008d34:	d8c02217 	ldw	r3,136(sp)
 8008d38:	04400044 	movi	r17,1
 8008d3c:	d8001d85 	stb	zero,118(sp)
 8008d40:	18800017 	ldw	r2,0(r3)
 8008d44:	18c00104 	addi	r3,r3,4
 8008d48:	d8c02215 	stw	r3,136(sp)
 8008d4c:	d8801005 	stb	r2,64(sp)
 8008d50:	8827883a 	mov	r19,r17
 8008d54:	dd001004 	addi	r20,sp,64
 8008d58:	0013883a 	mov	r9,zero
 8008d5c:	003eb806 	br	8008840 <___vfiprintf_internal_r+0x408>
 8008d60:	d9c01d85 	stb	r7,118(sp)
 8008d64:	a880080c 	andi	r2,r21,32
 8008d68:	d8c02217 	ldw	r3,136(sp)
 8008d6c:	103fa61e 	bne	r2,zero,8008c08 <___vfiprintf_internal_r+0x7d0>
 8008d70:	a880040c 	andi	r2,r21,16
 8008d74:	1001dd26 	beq	r2,zero,80094ec <___vfiprintf_internal_r+0x10b4>
 8008d78:	1d800017 	ldw	r22,0(r3)
 8008d7c:	d8802217 	ldw	r2,136(sp)
 8008d80:	b01bd7fa 	srai	r13,r22,31
 8008d84:	10800104 	addi	r2,r2,4
 8008d88:	d8802215 	stw	r2,136(sp)
 8008d8c:	6805883a 	mov	r2,r13
 8008d90:	003fa306 	br	8008c20 <___vfiprintf_internal_r+0x7e8>
 8008d94:	008200b4 	movhi	r2,2050
 8008d98:	10a69604 	addi	r2,r2,-26024
 8008d9c:	d8802615 	stw	r2,152(sp)
 8008da0:	d9c01d85 	stb	r7,118(sp)
 8008da4:	a880080c 	andi	r2,r21,32
 8008da8:	10004726 	beq	r2,zero,8008ec8 <___vfiprintf_internal_r+0xa90>
 8008dac:	d9002217 	ldw	r4,136(sp)
 8008db0:	25800017 	ldw	r22,0(r4)
 8008db4:	23400117 	ldw	r13,4(r4)
 8008db8:	21000204 	addi	r4,r4,8
 8008dbc:	d9002215 	stw	r4,136(sp)
 8008dc0:	a880004c 	andi	r2,r21,1
 8008dc4:	10014e26 	beq	r2,zero,8009300 <___vfiprintf_internal_r+0xec8>
 8008dc8:	b348b03a 	or	r4,r22,r13
 8008dcc:	20019c26 	beq	r4,zero,8009440 <___vfiprintf_internal_r+0x1008>
 8008dd0:	00800c04 	movi	r2,48
 8008dd4:	d8801d05 	stb	r2,116(sp)
 8008dd8:	d8c01d45 	stb	r3,117(sp)
 8008ddc:	ad400094 	ori	r21,r21,2
 8008de0:	00800084 	movi	r2,2
 8008de4:	003e7206 	br	80087b0 <___vfiprintf_internal_r+0x378>
 8008de8:	d8c02217 	ldw	r3,136(sp)
 8008dec:	d8001d85 	stb	zero,118(sp)
 8008df0:	1d000017 	ldw	r20,0(r3)
 8008df4:	1d800104 	addi	r22,r3,4
 8008df8:	a0021c26 	beq	r20,zero,800966c <___vfiprintf_internal_r+0x1234>
 8008dfc:	a009883a 	mov	r4,r20
 8008e00:	48020016 	blt	r9,zero,8009604 <___vfiprintf_internal_r+0x11cc>
 8008e04:	480d883a 	mov	r6,r9
 8008e08:	000b883a 	mov	r5,zero
 8008e0c:	da002a15 	stw	r8,168(sp)
 8008e10:	da402b15 	stw	r9,172(sp)
 8008e14:	80067cc0 	call	80067cc <memchr>
 8008e18:	da002a17 	ldw	r8,168(sp)
 8008e1c:	da402b17 	ldw	r9,172(sp)
 8008e20:	10022226 	beq	r2,zero,80096ac <___vfiprintf_internal_r+0x1274>
 8008e24:	1527c83a 	sub	r19,r2,r20
 8008e28:	4cc1c916 	blt	r9,r19,8009550 <___vfiprintf_internal_r+0x1118>
 8008e2c:	db801d83 	ldbu	r14,118(sp)
 8008e30:	dd802215 	stw	r22,136(sp)
 8008e34:	0013883a 	mov	r9,zero
 8008e38:	003e7906 	br	8008820 <___vfiprintf_internal_r+0x3e8>
 8008e3c:	ad401014 	ori	r21,r21,64
 8008e40:	8005883a 	mov	r2,r16
 8008e44:	80c00007 	ldb	r3,0(r16)
 8008e48:	003dd906 	br	80085b0 <___vfiprintf_internal_r+0x178>
 8008e4c:	80c00007 	ldb	r3,0(r16)
 8008e50:	8005883a 	mov	r2,r16
 8008e54:	1b01e326 	beq	r3,r12,80095e4 <___vfiprintf_internal_r+0x11ac>
 8008e58:	ad400414 	ori	r21,r21,16
 8008e5c:	003dd406 	br	80085b0 <___vfiprintf_internal_r+0x178>
 8008e60:	d9002217 	ldw	r4,136(sp)
 8008e64:	00800c04 	movi	r2,48
 8008e68:	d8801d05 	stb	r2,116(sp)
 8008e6c:	25800017 	ldw	r22,0(r4)
 8008e70:	00801e04 	movi	r2,120
 8008e74:	d8801d45 	stb	r2,117(sp)
 8008e78:	008200b4 	movhi	r2,2050
 8008e7c:	21000104 	addi	r4,r4,4
 8008e80:	10a69b04 	addi	r2,r2,-26004
 8008e84:	d9002215 	stw	r4,136(sp)
 8008e88:	d8802615 	stw	r2,152(sp)
 8008e8c:	001b883a 	mov	r13,zero
 8008e90:	ad400094 	ori	r21,r21,2
 8008e94:	00800084 	movi	r2,2
 8008e98:	b009883a 	mov	r4,r22
 8008e9c:	003e4406 	br	80087b0 <___vfiprintf_internal_r+0x378>
 8008ea0:	ad400814 	ori	r21,r21,32
 8008ea4:	8005883a 	mov	r2,r16
 8008ea8:	80c00007 	ldb	r3,0(r16)
 8008eac:	003dc006 	br	80085b0 <___vfiprintf_internal_r+0x178>
 8008eb0:	008200b4 	movhi	r2,2050
 8008eb4:	10a69b04 	addi	r2,r2,-26004
 8008eb8:	d8802615 	stw	r2,152(sp)
 8008ebc:	d9c01d85 	stb	r7,118(sp)
 8008ec0:	a880080c 	andi	r2,r21,32
 8008ec4:	103fb91e 	bne	r2,zero,8008dac <___vfiprintf_internal_r+0x974>
 8008ec8:	a880040c 	andi	r2,r21,16
 8008ecc:	10010f1e 	bne	r2,zero,800930c <___vfiprintf_internal_r+0xed4>
 8008ed0:	a880100c 	andi	r2,r21,64
 8008ed4:	10010d26 	beq	r2,zero,800930c <___vfiprintf_internal_r+0xed4>
 8008ed8:	d9002217 	ldw	r4,136(sp)
 8008edc:	001b883a 	mov	r13,zero
 8008ee0:	2580000b 	ldhu	r22,0(r4)
 8008ee4:	21000104 	addi	r4,r4,4
 8008ee8:	d9002215 	stw	r4,136(sp)
 8008eec:	003fb406 	br	8008dc0 <___vfiprintf_internal_r+0x988>
 8008ef0:	d9002217 	ldw	r4,136(sp)
 8008ef4:	00800044 	movi	r2,1
 8008ef8:	25800017 	ldw	r22,0(r4)
 8008efc:	23400117 	ldw	r13,4(r4)
 8008f00:	21000204 	addi	r4,r4,8
 8008f04:	d9002215 	stw	r4,136(sp)
 8008f08:	b348b03a 	or	r4,r22,r13
 8008f0c:	003e2806 	br	80087b0 <___vfiprintf_internal_r+0x378>
 8008f10:	d9c01d85 	stb	r7,118(sp)
 8008f14:	1801ab26 	beq	r3,zero,80095c4 <___vfiprintf_internal_r+0x118c>
 8008f18:	04400044 	movi	r17,1
 8008f1c:	d8c01005 	stb	r3,64(sp)
 8008f20:	d8001d85 	stb	zero,118(sp)
 8008f24:	8827883a 	mov	r19,r17
 8008f28:	dd001004 	addi	r20,sp,64
 8008f2c:	003f8a06 	br	8008d58 <___vfiprintf_internal_r+0x920>
 8008f30:	d9002017 	ldw	r4,128(sp)
 8008f34:	d9402117 	ldw	r5,132(sp)
 8008f38:	d9801a04 	addi	r6,sp,104
 8008f3c:	d9c02b15 	stw	r7,172(sp)
 8008f40:	dbc02a15 	stw	r15,168(sp)
 8008f44:	80083240 	call	8008324 <__sprint_r.part.0>
 8008f48:	d9c02b17 	ldw	r7,172(sp)
 8008f4c:	dbc02a17 	ldw	r15,168(sp)
 8008f50:	1000631e 	bne	r2,zero,80090e0 <___vfiprintf_internal_r+0xca8>
 8008f54:	d9801b17 	ldw	r6,108(sp)
 8008f58:	d8801c17 	ldw	r2,112(sp)
 8008f5c:	d811883a 	mov	r8,sp
 8008f60:	31400044 	addi	r5,r6,1
 8008f64:	003e4d06 	br	800889c <___vfiprintf_internal_r+0x464>
 8008f68:	d9401b17 	ldw	r5,108(sp)
 8008f6c:	d8801c17 	ldw	r2,112(sp)
 8008f70:	29000044 	addi	r4,r5,1
 8008f74:	d8c01d87 	ldb	r3,118(sp)
 8008f78:	183e6726 	beq	r3,zero,8008918 <___vfiprintf_internal_r+0x4e0>
 8008f7c:	00c00044 	movi	r3,1
 8008f80:	d9401d84 	addi	r5,sp,118
 8008f84:	10c5883a 	add	r2,r2,r3
 8008f88:	41400015 	stw	r5,0(r8)
 8008f8c:	40c00115 	stw	r3,4(r8)
 8008f90:	d8801c15 	stw	r2,112(sp)
 8008f94:	d9001b15 	stw	r4,108(sp)
 8008f98:	014001c4 	movi	r5,7
 8008f9c:	2900ab16 	blt	r5,r4,800924c <___vfiprintf_internal_r+0xe14>
 8008fa0:	200b883a 	mov	r5,r4
 8008fa4:	42000204 	addi	r8,r8,8
 8008fa8:	21000044 	addi	r4,r4,1
 8008fac:	003e5a06 	br	8008918 <___vfiprintf_internal_r+0x4e0>
 8008fb0:	d9002017 	ldw	r4,128(sp)
 8008fb4:	d9402117 	ldw	r5,132(sp)
 8008fb8:	d9801a04 	addi	r6,sp,104
 8008fbc:	d9c02b15 	stw	r7,172(sp)
 8008fc0:	db402a15 	stw	r13,168(sp)
 8008fc4:	80083240 	call	8008324 <__sprint_r.part.0>
 8008fc8:	d9c02b17 	ldw	r7,172(sp)
 8008fcc:	db402a17 	ldw	r13,168(sp)
 8008fd0:	1000431e 	bne	r2,zero,80090e0 <___vfiprintf_internal_r+0xca8>
 8008fd4:	d9401b17 	ldw	r5,108(sp)
 8008fd8:	d8801c17 	ldw	r2,112(sp)
 8008fdc:	d811883a 	mov	r8,sp
 8008fe0:	29000044 	addi	r4,r5,1
 8008fe4:	003e6706 	br	8008984 <___vfiprintf_internal_r+0x54c>
 8008fe8:	10803fcc 	andi	r2,r2,255
 8008fec:	00c00044 	movi	r3,1
 8008ff0:	10fdfa1e 	bne	r2,r3,80087dc <___vfiprintf_internal_r+0x3a4>
 8008ff4:	6800021e 	bne	r13,zero,8009000 <___vfiprintf_internal_r+0xbc8>
 8008ff8:	00800244 	movi	r2,9
 8008ffc:	1580222e 	bgeu	r2,r22,8009088 <___vfiprintf_internal_r+0xc50>
 8009000:	dc802415 	stw	r18,144(sp)
 8009004:	dc002515 	stw	r16,148(sp)
 8009008:	dc401a04 	addi	r17,sp,104
 800900c:	b021883a 	mov	r16,r22
 8009010:	4827883a 	mov	r19,r9
 8009014:	4029883a 	mov	r20,r8
 8009018:	702d883a 	mov	r22,r14
 800901c:	6825883a 	mov	r18,r13
 8009020:	8009883a 	mov	r4,r16
 8009024:	900b883a 	mov	r5,r18
 8009028:	01800284 	movi	r6,10
 800902c:	000f883a 	mov	r7,zero
 8009030:	800a6a00 	call	800a6a0 <__umoddi3>
 8009034:	10800c04 	addi	r2,r2,48
 8009038:	8c7fffc4 	addi	r17,r17,-1
 800903c:	8009883a 	mov	r4,r16
 8009040:	900b883a 	mov	r5,r18
 8009044:	01800284 	movi	r6,10
 8009048:	000f883a 	mov	r7,zero
 800904c:	88800005 	stb	r2,0(r17)
 8009050:	800a0e00 	call	800a0e0 <__udivdi3>
 8009054:	1021883a 	mov	r16,r2
 8009058:	10c4b03a 	or	r2,r2,r3
 800905c:	1825883a 	mov	r18,r3
 8009060:	103fef1e 	bne	r2,zero,8009020 <___vfiprintf_internal_r+0xbe8>
 8009064:	dc802417 	ldw	r18,144(sp)
 8009068:	dc002517 	ldw	r16,148(sp)
 800906c:	a011883a 	mov	r8,r20
 8009070:	9813883a 	mov	r9,r19
 8009074:	b01d883a 	mov	r14,r22
 8009078:	8829883a 	mov	r20,r17
 800907c:	d8c01e17 	ldw	r3,120(sp)
 8009080:	1d27c83a 	sub	r19,r3,r20
 8009084:	003de606 	br	8008820 <___vfiprintf_internal_r+0x3e8>
 8009088:	b5800c04 	addi	r22,r22,48
 800908c:	dd8019c5 	stb	r22,103(sp)
 8009090:	dcc02717 	ldw	r19,156(sp)
 8009094:	dd0019c4 	addi	r20,sp,103
 8009098:	003de106 	br	8008820 <___vfiprintf_internal_r+0x3e8>
 800909c:	d9002017 	ldw	r4,128(sp)
 80090a0:	d9402117 	ldw	r5,132(sp)
 80090a4:	d9801a04 	addi	r6,sp,104
 80090a8:	80083240 	call	8008324 <__sprint_r.part.0>
 80090ac:	10000c1e 	bne	r2,zero,80090e0 <___vfiprintf_internal_r+0xca8>
 80090b0:	d8801c17 	ldw	r2,112(sp)
 80090b4:	8c80010e 	bge	r17,r18,80090bc <___vfiprintf_internal_r+0xc84>
 80090b8:	9023883a 	mov	r17,r18
 80090bc:	d8c02317 	ldw	r3,140(sp)
 80090c0:	1c47883a 	add	r3,r3,r17
 80090c4:	d8c02315 	stw	r3,140(sp)
 80090c8:	103e7e26 	beq	r2,zero,8008ac4 <___vfiprintf_internal_r+0x68c>
 80090cc:	d9002017 	ldw	r4,128(sp)
 80090d0:	d9402117 	ldw	r5,132(sp)
 80090d4:	d9801a04 	addi	r6,sp,104
 80090d8:	80083240 	call	8008324 <__sprint_r.part.0>
 80090dc:	103e7926 	beq	r2,zero,8008ac4 <___vfiprintf_internal_r+0x68c>
 80090e0:	dd402117 	ldw	r21,132(sp)
 80090e4:	a880030b 	ldhu	r2,12(r21)
 80090e8:	1080100c 	andi	r2,r2,64
 80090ec:	103e881e 	bne	r2,zero,8008b10 <___vfiprintf_internal_r+0x6d8>
 80090f0:	d8802317 	ldw	r2,140(sp)
 80090f4:	003e8706 	br	8008b14 <___vfiprintf_internal_r+0x6dc>
 80090f8:	d9402117 	ldw	r5,132(sp)
 80090fc:	b009883a 	mov	r4,r22
 8009100:	d9801a04 	addi	r6,sp,104
 8009104:	80083240 	call	8008324 <__sprint_r.part.0>
 8009108:	103ff51e 	bne	r2,zero,80090e0 <___vfiprintf_internal_r+0xca8>
 800910c:	d9001b17 	ldw	r4,108(sp)
 8009110:	d8801c17 	ldw	r2,112(sp)
 8009114:	d811883a 	mov	r8,sp
 8009118:	21400044 	addi	r5,r4,1
 800911c:	003e4d06 	br	8008a54 <___vfiprintf_internal_r+0x61c>
 8009120:	1000aa1e 	bne	r2,zero,80093cc <___vfiprintf_internal_r+0xf94>
 8009124:	00c00044 	movi	r3,1
 8009128:	9805883a 	mov	r2,r19
 800912c:	dd000015 	stw	r20,0(sp)
 8009130:	dcc00115 	stw	r19,4(sp)
 8009134:	dcc01c15 	stw	r19,112(sp)
 8009138:	d8c01b15 	stw	r3,108(sp)
 800913c:	d811883a 	mov	r8,sp
 8009140:	42000204 	addi	r8,r8,8
 8009144:	aac0010c 	andi	r11,r21,4
 8009148:	583fda26 	beq	r11,zero,80090b4 <___vfiprintf_internal_r+0xc7c>
 800914c:	9467c83a 	sub	r19,r18,r17
 8009150:	04fe3316 	blt	zero,r19,8008a20 <___vfiprintf_internal_r+0x5e8>
 8009154:	003fd706 	br	80090b4 <___vfiprintf_internal_r+0xc7c>
 8009158:	946dc83a 	sub	r22,r18,r17
 800915c:	05bdfd0e 	bge	zero,r22,8008954 <___vfiprintf_internal_r+0x51c>
 8009160:	00c200b4 	movhi	r3,2050
 8009164:	18e6fc04 	addi	r3,r3,-25616
 8009168:	01c00404 	movi	r7,16
 800916c:	d8c02415 	stw	r3,144(sp)
 8009170:	3d81530e 	bge	r7,r22,80096c0 <___vfiprintf_internal_r+0x1288>
 8009174:	8007883a 	mov	r3,r16
 8009178:	034001c4 	movi	r13,7
 800917c:	b021883a 	mov	r16,r22
 8009180:	da402515 	stw	r9,148(sp)
 8009184:	182d883a 	mov	r22,r3
 8009188:	00000506 	br	80091a0 <___vfiprintf_internal_r+0xd68>
 800918c:	29800084 	addi	r6,r5,2
 8009190:	42000204 	addi	r8,r8,8
 8009194:	180b883a 	mov	r5,r3
 8009198:	843ffc04 	addi	r16,r16,-16
 800919c:	3c000d0e 	bge	r7,r16,80091d4 <___vfiprintf_internal_r+0xd9c>
 80091a0:	10800404 	addi	r2,r2,16
 80091a4:	28c00044 	addi	r3,r5,1
 80091a8:	45c00015 	stw	r23,0(r8)
 80091ac:	41c00115 	stw	r7,4(r8)
 80091b0:	d8801c15 	stw	r2,112(sp)
 80091b4:	d8c01b15 	stw	r3,108(sp)
 80091b8:	68fff40e 	bge	r13,r3,800918c <___vfiprintf_internal_r+0xd54>
 80091bc:	1000151e 	bne	r2,zero,8009214 <___vfiprintf_internal_r+0xddc>
 80091c0:	843ffc04 	addi	r16,r16,-16
 80091c4:	01800044 	movi	r6,1
 80091c8:	000b883a 	mov	r5,zero
 80091cc:	d811883a 	mov	r8,sp
 80091d0:	3c3ff316 	blt	r7,r16,80091a0 <___vfiprintf_internal_r+0xd68>
 80091d4:	da402517 	ldw	r9,148(sp)
 80091d8:	b007883a 	mov	r3,r22
 80091dc:	802d883a 	mov	r22,r16
 80091e0:	1821883a 	mov	r16,r3
 80091e4:	d8c02417 	ldw	r3,144(sp)
 80091e8:	1585883a 	add	r2,r2,r22
 80091ec:	45800115 	stw	r22,4(r8)
 80091f0:	40c00015 	stw	r3,0(r8)
 80091f4:	d8801c15 	stw	r2,112(sp)
 80091f8:	d9801b15 	stw	r6,108(sp)
 80091fc:	00c001c4 	movi	r3,7
 8009200:	19806d16 	blt	r3,r6,80093b8 <___vfiprintf_internal_r+0xf80>
 8009204:	42000204 	addi	r8,r8,8
 8009208:	31000044 	addi	r4,r6,1
 800920c:	300b883a 	mov	r5,r6
 8009210:	003dd006 	br	8008954 <___vfiprintf_internal_r+0x51c>
 8009214:	d9002017 	ldw	r4,128(sp)
 8009218:	d9402117 	ldw	r5,132(sp)
 800921c:	d9801a04 	addi	r6,sp,104
 8009220:	d9c02b15 	stw	r7,172(sp)
 8009224:	db402a15 	stw	r13,168(sp)
 8009228:	80083240 	call	8008324 <__sprint_r.part.0>
 800922c:	d9c02b17 	ldw	r7,172(sp)
 8009230:	db402a17 	ldw	r13,168(sp)
 8009234:	103faa1e 	bne	r2,zero,80090e0 <___vfiprintf_internal_r+0xca8>
 8009238:	d9401b17 	ldw	r5,108(sp)
 800923c:	d8801c17 	ldw	r2,112(sp)
 8009240:	d811883a 	mov	r8,sp
 8009244:	29800044 	addi	r6,r5,1
 8009248:	003fd306 	br	8009198 <___vfiprintf_internal_r+0xd60>
 800924c:	1000401e 	bne	r2,zero,8009350 <___vfiprintf_internal_r+0xf18>
 8009250:	68003b26 	beq	r13,zero,8009340 <___vfiprintf_internal_r+0xf08>
 8009254:	d9001d04 	addi	r4,sp,116
 8009258:	00800084 	movi	r2,2
 800925c:	d9000015 	stw	r4,0(sp)
 8009260:	d8800115 	stw	r2,4(sp)
 8009264:	1809883a 	mov	r4,r3
 8009268:	d811883a 	mov	r8,sp
 800926c:	003db406 	br	8008940 <___vfiprintf_internal_r+0x508>
 8009270:	1000451e 	bne	r2,zero,8009388 <___vfiprintf_internal_r+0xf50>
 8009274:	01000044 	movi	r4,1
 8009278:	000b883a 	mov	r5,zero
 800927c:	d811883a 	mov	r8,sp
 8009280:	003db206 	br	800894c <___vfiprintf_internal_r+0x514>
 8009284:	10803fcc 	andi	r2,r2,255
 8009288:	1000071e 	bne	r2,zero,80092a8 <___vfiprintf_internal_r+0xe70>
 800928c:	a880004c 	andi	r2,r21,1
 8009290:	10000526 	beq	r2,zero,80092a8 <___vfiprintf_internal_r+0xe70>
 8009294:	00800c04 	movi	r2,48
 8009298:	d88019c5 	stb	r2,103(sp)
 800929c:	dcc02717 	ldw	r19,156(sp)
 80092a0:	dd0019c4 	addi	r20,sp,103
 80092a4:	003d5e06 	br	8008820 <___vfiprintf_internal_r+0x3e8>
 80092a8:	dd001a04 	addi	r20,sp,104
 80092ac:	003d5c06 	br	8008820 <___vfiprintf_internal_r+0x3e8>
 80092b0:	1000971e 	bne	r2,zero,8009510 <___vfiprintf_internal_r+0x10d8>
 80092b4:	d8c01d87 	ldb	r3,118(sp)
 80092b8:	18005826 	beq	r3,zero,800941c <___vfiprintf_internal_r+0xfe4>
 80092bc:	00800044 	movi	r2,1
 80092c0:	d8c01d84 	addi	r3,sp,118
 80092c4:	1009883a 	mov	r4,r2
 80092c8:	d8c00015 	stw	r3,0(sp)
 80092cc:	d8800115 	stw	r2,4(sp)
 80092d0:	d811883a 	mov	r8,sp
 80092d4:	003f3206 	br	8008fa0 <___vfiprintf_internal_r+0xb68>
 80092d8:	8023883a 	mov	r17,r16
 80092dc:	003ca706 	br	800857c <___vfiprintf_internal_r+0x144>
 80092e0:	d9002017 	ldw	r4,128(sp)
 80092e4:	d9402117 	ldw	r5,132(sp)
 80092e8:	d9801a04 	addi	r6,sp,104
 80092ec:	80083240 	call	8008324 <__sprint_r.part.0>
 80092f0:	103f7b1e 	bne	r2,zero,80090e0 <___vfiprintf_internal_r+0xca8>
 80092f4:	d8801c17 	ldw	r2,112(sp)
 80092f8:	d811883a 	mov	r8,sp
 80092fc:	003f9106 	br	8009144 <___vfiprintf_internal_r+0xd0c>
 8009300:	00800084 	movi	r2,2
 8009304:	b348b03a 	or	r4,r22,r13
 8009308:	003d2906 	br	80087b0 <___vfiprintf_internal_r+0x378>
 800930c:	d8802217 	ldw	r2,136(sp)
 8009310:	001b883a 	mov	r13,zero
 8009314:	15800017 	ldw	r22,0(r2)
 8009318:	10800104 	addi	r2,r2,4
 800931c:	d8802215 	stw	r2,136(sp)
 8009320:	003ea706 	br	8008dc0 <___vfiprintf_internal_r+0x988>
 8009324:	d9002017 	ldw	r4,128(sp)
 8009328:	d9402117 	ldw	r5,132(sp)
 800932c:	d9801a04 	addi	r6,sp,104
 8009330:	80083240 	call	8008324 <__sprint_r.part.0>
 8009334:	103f6a1e 	bne	r2,zero,80090e0 <___vfiprintf_internal_r+0xca8>
 8009338:	d811883a 	mov	r8,sp
 800933c:	003cff06 	br	800873c <___vfiprintf_internal_r+0x304>
 8009340:	000b883a 	mov	r5,zero
 8009344:	1809883a 	mov	r4,r3
 8009348:	d811883a 	mov	r8,sp
 800934c:	003d7f06 	br	800894c <___vfiprintf_internal_r+0x514>
 8009350:	d9002017 	ldw	r4,128(sp)
 8009354:	d9402117 	ldw	r5,132(sp)
 8009358:	d9801a04 	addi	r6,sp,104
 800935c:	da402b15 	stw	r9,172(sp)
 8009360:	db402a15 	stw	r13,168(sp)
 8009364:	80083240 	call	8008324 <__sprint_r.part.0>
 8009368:	da402b17 	ldw	r9,172(sp)
 800936c:	db402a17 	ldw	r13,168(sp)
 8009370:	103f5b1e 	bne	r2,zero,80090e0 <___vfiprintf_internal_r+0xca8>
 8009374:	d9401b17 	ldw	r5,108(sp)
 8009378:	d8801c17 	ldw	r2,112(sp)
 800937c:	d811883a 	mov	r8,sp
 8009380:	29000044 	addi	r4,r5,1
 8009384:	003d6406 	br	8008918 <___vfiprintf_internal_r+0x4e0>
 8009388:	d9002017 	ldw	r4,128(sp)
 800938c:	d9402117 	ldw	r5,132(sp)
 8009390:	d9801a04 	addi	r6,sp,104
 8009394:	da402b15 	stw	r9,172(sp)
 8009398:	80083240 	call	8008324 <__sprint_r.part.0>
 800939c:	da402b17 	ldw	r9,172(sp)
 80093a0:	103f4f1e 	bne	r2,zero,80090e0 <___vfiprintf_internal_r+0xca8>
 80093a4:	d9401b17 	ldw	r5,108(sp)
 80093a8:	d8801c17 	ldw	r2,112(sp)
 80093ac:	d811883a 	mov	r8,sp
 80093b0:	29000044 	addi	r4,r5,1
 80093b4:	003d6506 	br	800894c <___vfiprintf_internal_r+0x514>
 80093b8:	10009a1e 	bne	r2,zero,8009624 <___vfiprintf_internal_r+0x11ec>
 80093bc:	01000044 	movi	r4,1
 80093c0:	000b883a 	mov	r5,zero
 80093c4:	d811883a 	mov	r8,sp
 80093c8:	003d6206 	br	8008954 <___vfiprintf_internal_r+0x51c>
 80093cc:	d9002017 	ldw	r4,128(sp)
 80093d0:	d9402117 	ldw	r5,132(sp)
 80093d4:	d9801a04 	addi	r6,sp,104
 80093d8:	80083240 	call	8008324 <__sprint_r.part.0>
 80093dc:	103f401e 	bne	r2,zero,80090e0 <___vfiprintf_internal_r+0xca8>
 80093e0:	d9001b17 	ldw	r4,108(sp)
 80093e4:	d8801c17 	ldw	r2,112(sp)
 80093e8:	d811883a 	mov	r8,sp
 80093ec:	21000044 	addi	r4,r4,1
 80093f0:	003d7d06 	br	80089e8 <___vfiprintf_internal_r+0x5b0>
 80093f4:	05adc83a 	sub	r22,zero,r22
 80093f8:	b004c03a 	cmpne	r2,r22,zero
 80093fc:	035bc83a 	sub	r13,zero,r13
 8009400:	689bc83a 	sub	r13,r13,r2
 8009404:	03800b44 	movi	r14,45
 8009408:	db801d85 	stb	r14,118(sp)
 800940c:	4827883a 	mov	r19,r9
 8009410:	00800044 	movi	r2,1
 8009414:	b348b03a 	or	r4,r22,r13
 8009418:	003ce806 	br	80087bc <___vfiprintf_internal_r+0x384>
 800941c:	000b883a 	mov	r5,zero
 8009420:	01000044 	movi	r4,1
 8009424:	d811883a 	mov	r8,sp
 8009428:	683d4826 	beq	r13,zero,800894c <___vfiprintf_internal_r+0x514>
 800942c:	00800084 	movi	r2,2
 8009430:	d8c01d04 	addi	r3,sp,116
 8009434:	d8c00015 	stw	r3,0(sp)
 8009438:	d8800115 	stw	r2,4(sp)
 800943c:	003d4006 	br	8008940 <___vfiprintf_internal_r+0x508>
 8009440:	00800084 	movi	r2,2
 8009444:	003cda06 	br	80087b0 <___vfiprintf_internal_r+0x378>
 8009448:	a880100c 	andi	r2,r21,64
 800944c:	10004226 	beq	r2,zero,8009558 <___vfiprintf_internal_r+0x1120>
 8009450:	d8802217 	ldw	r2,136(sp)
 8009454:	001b883a 	mov	r13,zero
 8009458:	1580000b 	ldhu	r22,0(r2)
 800945c:	10800104 	addi	r2,r2,4
 8009460:	d8802215 	stw	r2,136(sp)
 8009464:	b009883a 	mov	r4,r22
 8009468:	0005883a 	mov	r2,zero
 800946c:	003cd006 	br	80087b0 <___vfiprintf_internal_r+0x378>
 8009470:	80c00007 	ldb	r3,0(r16)
 8009474:	8005883a 	mov	r2,r16
 8009478:	003c4d06 	br	80085b0 <___vfiprintf_internal_r+0x178>
 800947c:	a880100c 	andi	r2,r21,64
 8009480:	10004426 	beq	r2,zero,8009594 <___vfiprintf_internal_r+0x115c>
 8009484:	d8c02217 	ldw	r3,136(sp)
 8009488:	001b883a 	mov	r13,zero
 800948c:	00800044 	movi	r2,1
 8009490:	1d80000b 	ldhu	r22,0(r3)
 8009494:	18c00104 	addi	r3,r3,4
 8009498:	d8c02215 	stw	r3,136(sp)
 800949c:	b009883a 	mov	r4,r22
 80094a0:	003cc306 	br	80087b0 <___vfiprintf_internal_r+0x378>
 80094a4:	a880040c 	andi	r2,r21,16
 80094a8:	1000091e 	bne	r2,zero,80094d0 <___vfiprintf_internal_r+0x1098>
 80094ac:	aac0100c 	andi	r11,r21,64
 80094b0:	58000726 	beq	r11,zero,80094d0 <___vfiprintf_internal_r+0x1098>
 80094b4:	d8c02217 	ldw	r3,136(sp)
 80094b8:	d9002317 	ldw	r4,140(sp)
 80094bc:	18800017 	ldw	r2,0(r3)
 80094c0:	18c00104 	addi	r3,r3,4
 80094c4:	d8c02215 	stw	r3,136(sp)
 80094c8:	1100000d 	sth	r4,0(r2)
 80094cc:	003c0e06 	br	8008508 <___vfiprintf_internal_r+0xd0>
 80094d0:	d8c02217 	ldw	r3,136(sp)
 80094d4:	d9002317 	ldw	r4,140(sp)
 80094d8:	18800017 	ldw	r2,0(r3)
 80094dc:	18c00104 	addi	r3,r3,4
 80094e0:	d8c02215 	stw	r3,136(sp)
 80094e4:	11000015 	stw	r4,0(r2)
 80094e8:	003c0706 	br	8008508 <___vfiprintf_internal_r+0xd0>
 80094ec:	a880100c 	andi	r2,r21,64
 80094f0:	10002126 	beq	r2,zero,8009578 <___vfiprintf_internal_r+0x1140>
 80094f4:	1d80000f 	ldh	r22,0(r3)
 80094f8:	d8c02217 	ldw	r3,136(sp)
 80094fc:	b01bd7fa 	srai	r13,r22,31
 8009500:	18c00104 	addi	r3,r3,4
 8009504:	d8c02215 	stw	r3,136(sp)
 8009508:	6805883a 	mov	r2,r13
 800950c:	003dc406 	br	8008c20 <___vfiprintf_internal_r+0x7e8>
 8009510:	d9002017 	ldw	r4,128(sp)
 8009514:	d9402117 	ldw	r5,132(sp)
 8009518:	d9801a04 	addi	r6,sp,104
 800951c:	da402b15 	stw	r9,172(sp)
 8009520:	db402a15 	stw	r13,168(sp)
 8009524:	80083240 	call	8008324 <__sprint_r.part.0>
 8009528:	da402b17 	ldw	r9,172(sp)
 800952c:	db402a17 	ldw	r13,168(sp)
 8009530:	103eeb1e 	bne	r2,zero,80090e0 <___vfiprintf_internal_r+0xca8>
 8009534:	d9401b17 	ldw	r5,108(sp)
 8009538:	d8801c17 	ldw	r2,112(sp)
 800953c:	d811883a 	mov	r8,sp
 8009540:	29000044 	addi	r4,r5,1
 8009544:	003e8b06 	br	8008f74 <___vfiprintf_internal_r+0xb3c>
 8009548:	9023883a 	mov	r17,r18
 800954c:	003d5a06 	br	8008ab8 <___vfiprintf_internal_r+0x680>
 8009550:	4827883a 	mov	r19,r9
 8009554:	003e3506 	br	8008e2c <___vfiprintf_internal_r+0x9f4>
 8009558:	d8c02217 	ldw	r3,136(sp)
 800955c:	001b883a 	mov	r13,zero
 8009560:	0005883a 	mov	r2,zero
 8009564:	1d800017 	ldw	r22,0(r3)
 8009568:	18c00104 	addi	r3,r3,4
 800956c:	d8c02215 	stw	r3,136(sp)
 8009570:	b009883a 	mov	r4,r22
 8009574:	003c8e06 	br	80087b0 <___vfiprintf_internal_r+0x378>
 8009578:	1d800017 	ldw	r22,0(r3)
 800957c:	d9002217 	ldw	r4,136(sp)
 8009580:	b01bd7fa 	srai	r13,r22,31
 8009584:	21000104 	addi	r4,r4,4
 8009588:	d9002215 	stw	r4,136(sp)
 800958c:	6805883a 	mov	r2,r13
 8009590:	003da306 	br	8008c20 <___vfiprintf_internal_r+0x7e8>
 8009594:	d9002217 	ldw	r4,136(sp)
 8009598:	001b883a 	mov	r13,zero
 800959c:	00800044 	movi	r2,1
 80095a0:	25800017 	ldw	r22,0(r4)
 80095a4:	21000104 	addi	r4,r4,4
 80095a8:	d9002215 	stw	r4,136(sp)
 80095ac:	b009883a 	mov	r4,r22
 80095b0:	003c7f06 	br	80087b0 <___vfiprintf_internal_r+0x378>
 80095b4:	00c200b4 	movhi	r3,2050
 80095b8:	18e6fc04 	addi	r3,r3,-25616
 80095bc:	d8c02415 	stw	r3,144(sp)
 80095c0:	003cff06 	br	80089c0 <___vfiprintf_internal_r+0x588>
 80095c4:	d8801c17 	ldw	r2,112(sp)
 80095c8:	dd402117 	ldw	r21,132(sp)
 80095cc:	103ec526 	beq	r2,zero,80090e4 <___vfiprintf_internal_r+0xcac>
 80095d0:	d9002017 	ldw	r4,128(sp)
 80095d4:	a80b883a 	mov	r5,r21
 80095d8:	d9801a04 	addi	r6,sp,104
 80095dc:	80083240 	call	8008324 <__sprint_r.part.0>
 80095e0:	003ec006 	br	80090e4 <___vfiprintf_internal_r+0xcac>
 80095e4:	80800044 	addi	r2,r16,1
 80095e8:	ad400814 	ori	r21,r21,32
 80095ec:	80c00047 	ldb	r3,1(r16)
 80095f0:	003bef06 	br	80085b0 <___vfiprintf_internal_r+0x178>
 80095f4:	04a5c83a 	sub	r18,zero,r18
 80095f8:	8005883a 	mov	r2,r16
 80095fc:	d8c02215 	stw	r3,136(sp)
 8009600:	003d5306 	br	8008b50 <___vfiprintf_internal_r+0x718>
 8009604:	da002a15 	stw	r8,168(sp)
 8009608:	80019600 	call	8001960 <strlen>
 800960c:	1027883a 	mov	r19,r2
 8009610:	db801d83 	ldbu	r14,118(sp)
 8009614:	dd802215 	stw	r22,136(sp)
 8009618:	0013883a 	mov	r9,zero
 800961c:	da002a17 	ldw	r8,168(sp)
 8009620:	003c7f06 	br	8008820 <___vfiprintf_internal_r+0x3e8>
 8009624:	d9002017 	ldw	r4,128(sp)
 8009628:	d9402117 	ldw	r5,132(sp)
 800962c:	d9801a04 	addi	r6,sp,104
 8009630:	da402b15 	stw	r9,172(sp)
 8009634:	80083240 	call	8008324 <__sprint_r.part.0>
 8009638:	da402b17 	ldw	r9,172(sp)
 800963c:	103ea81e 	bne	r2,zero,80090e0 <___vfiprintf_internal_r+0xca8>
 8009640:	d9401b17 	ldw	r5,108(sp)
 8009644:	d8801c17 	ldw	r2,112(sp)
 8009648:	d811883a 	mov	r8,sp
 800964c:	29000044 	addi	r4,r5,1
 8009650:	003cc006 	br	8008954 <___vfiprintf_internal_r+0x51c>
 8009654:	d9401b17 	ldw	r5,108(sp)
 8009658:	010200b4 	movhi	r4,2050
 800965c:	21270004 	addi	r4,r4,-25600
 8009660:	d9002415 	stw	r4,144(sp)
 8009664:	29400044 	addi	r5,r5,1
 8009668:	003c9f06 	br	80088e8 <___vfiprintf_internal_r+0x4b0>
 800966c:	00800184 	movi	r2,6
 8009670:	1240012e 	bgeu	r2,r9,8009678 <___vfiprintf_internal_r+0x1240>
 8009674:	1013883a 	mov	r9,r2
 8009678:	4827883a 	mov	r19,r9
 800967c:	4823883a 	mov	r17,r9
 8009680:	48001116 	blt	r9,zero,80096c8 <___vfiprintf_internal_r+0x1290>
 8009684:	050200b4 	movhi	r20,2050
 8009688:	dd802215 	stw	r22,136(sp)
 800968c:	a526a004 	addi	r20,r20,-25984
 8009690:	003db106 	br	8008d58 <___vfiprintf_internal_r+0x920>
 8009694:	d9401b17 	ldw	r5,108(sp)
 8009698:	010200b4 	movhi	r4,2050
 800969c:	21270004 	addi	r4,r4,-25600
 80096a0:	d9002415 	stw	r4,144(sp)
 80096a4:	29400044 	addi	r5,r5,1
 80096a8:	003cf906 	br	8008a90 <___vfiprintf_internal_r+0x658>
 80096ac:	4827883a 	mov	r19,r9
 80096b0:	db801d83 	ldbu	r14,118(sp)
 80096b4:	dd802215 	stw	r22,136(sp)
 80096b8:	0013883a 	mov	r9,zero
 80096bc:	003c5806 	br	8008820 <___vfiprintf_internal_r+0x3e8>
 80096c0:	200d883a 	mov	r6,r4
 80096c4:	003ec706 	br	80091e4 <___vfiprintf_internal_r+0xdac>
 80096c8:	0023883a 	mov	r17,zero
 80096cc:	003fed06 	br	8009684 <___vfiprintf_internal_r+0x124c>
 80096d0:	d9002217 	ldw	r4,136(sp)
 80096d4:	22400017 	ldw	r9,0(r4)
 80096d8:	20c00104 	addi	r3,r4,4
 80096dc:	d8c02215 	stw	r3,136(sp)
 80096e0:	483fc20e 	bge	r9,zero,80095ec <___vfiprintf_internal_r+0x11b4>
 80096e4:	027fffc4 	movi	r9,-1
 80096e8:	80c00047 	ldb	r3,1(r16)
 80096ec:	003bb006 	br	80085b0 <___vfiprintf_internal_r+0x178>
 80096f0:	8c80010e 	bge	r17,r18,80096f8 <___vfiprintf_internal_r+0x12c0>
 80096f4:	9023883a 	mov	r17,r18
 80096f8:	d8802317 	ldw	r2,140(sp)
 80096fc:	1445883a 	add	r2,r2,r17
 8009700:	d8802315 	stw	r2,140(sp)
 8009704:	003cef06 	br	8008ac4 <___vfiprintf_internal_r+0x68c>

08009708 <__vfiprintf_internal>:
 8009708:	2007883a 	mov	r3,r4
 800970c:	010200b4 	movhi	r4,2050
 8009710:	21113b04 	addi	r4,r4,17644
 8009714:	21000017 	ldw	r4,0(r4)
 8009718:	2805883a 	mov	r2,r5
 800971c:	300f883a 	mov	r7,r6
 8009720:	180b883a 	mov	r5,r3
 8009724:	100d883a 	mov	r6,r2
 8009728:	80084381 	jmpi	8008438 <___vfiprintf_internal_r>

0800972c <__sbprintf>:
 800972c:	2880030b 	ldhu	r2,12(r5)
 8009730:	2ac01917 	ldw	r11,100(r5)
 8009734:	2a80038b 	ldhu	r10,14(r5)
 8009738:	2a400717 	ldw	r9,28(r5)
 800973c:	2a000917 	ldw	r8,36(r5)
 8009740:	defee204 	addi	sp,sp,-1144
 8009744:	00c10004 	movi	r3,1024
 8009748:	dc011a15 	stw	r16,1128(sp)
 800974c:	10bfff4c 	andi	r2,r2,65533
 8009750:	2821883a 	mov	r16,r5
 8009754:	d8cb883a 	add	r5,sp,r3
 8009758:	dc811c15 	stw	r18,1136(sp)
 800975c:	dc411b15 	stw	r17,1132(sp)
 8009760:	dfc11d15 	stw	ra,1140(sp)
 8009764:	2025883a 	mov	r18,r4
 8009768:	d881030d 	sth	r2,1036(sp)
 800976c:	dac11915 	stw	r11,1124(sp)
 8009770:	da81038d 	sth	r10,1038(sp)
 8009774:	da410715 	stw	r9,1052(sp)
 8009778:	da010915 	stw	r8,1060(sp)
 800977c:	dec10015 	stw	sp,1024(sp)
 8009780:	dec10415 	stw	sp,1040(sp)
 8009784:	d8c10215 	stw	r3,1032(sp)
 8009788:	d8c10515 	stw	r3,1044(sp)
 800978c:	d8010615 	stw	zero,1048(sp)
 8009790:	80084380 	call	8008438 <___vfiprintf_internal_r>
 8009794:	1023883a 	mov	r17,r2
 8009798:	10000416 	blt	r2,zero,80097ac <__sbprintf+0x80>
 800979c:	9009883a 	mov	r4,r18
 80097a0:	d9410004 	addi	r5,sp,1024
 80097a4:	80056ac0 	call	80056ac <_fflush_r>
 80097a8:	10000d1e 	bne	r2,zero,80097e0 <__sbprintf+0xb4>
 80097ac:	d8c1030b 	ldhu	r3,1036(sp)
 80097b0:	18c0100c 	andi	r3,r3,64
 80097b4:	18000326 	beq	r3,zero,80097c4 <__sbprintf+0x98>
 80097b8:	8080030b 	ldhu	r2,12(r16)
 80097bc:	10801014 	ori	r2,r2,64
 80097c0:	8080030d 	sth	r2,12(r16)
 80097c4:	8805883a 	mov	r2,r17
 80097c8:	dfc11d17 	ldw	ra,1140(sp)
 80097cc:	dc811c17 	ldw	r18,1136(sp)
 80097d0:	dc411b17 	ldw	r17,1132(sp)
 80097d4:	dc011a17 	ldw	r16,1128(sp)
 80097d8:	dec11e04 	addi	sp,sp,1144
 80097dc:	f800283a 	ret
 80097e0:	047fffc4 	movi	r17,-1
 80097e4:	003ff106 	br	80097ac <__sbprintf+0x80>

080097e8 <_write_r>:
 80097e8:	defffd04 	addi	sp,sp,-12
 80097ec:	dc000015 	stw	r16,0(sp)
 80097f0:	040200f4 	movhi	r16,2051
 80097f4:	dc400115 	stw	r17,4(sp)
 80097f8:	843b2d04 	addi	r16,r16,-4940
 80097fc:	2023883a 	mov	r17,r4
 8009800:	2809883a 	mov	r4,r5
 8009804:	300b883a 	mov	r5,r6
 8009808:	380d883a 	mov	r6,r7
 800980c:	dfc00215 	stw	ra,8(sp)
 8009810:	80000015 	stw	zero,0(r16)
 8009814:	800dc240 	call	800dc24 <write>
 8009818:	00ffffc4 	movi	r3,-1
 800981c:	10c00526 	beq	r2,r3,8009834 <_write_r+0x4c>
 8009820:	dfc00217 	ldw	ra,8(sp)
 8009824:	dc400117 	ldw	r17,4(sp)
 8009828:	dc000017 	ldw	r16,0(sp)
 800982c:	dec00304 	addi	sp,sp,12
 8009830:	f800283a 	ret
 8009834:	80c00017 	ldw	r3,0(r16)
 8009838:	183ff926 	beq	r3,zero,8009820 <_write_r+0x38>
 800983c:	88c00015 	stw	r3,0(r17)
 8009840:	003ff706 	br	8009820 <_write_r+0x38>

08009844 <_close_r>:
 8009844:	defffd04 	addi	sp,sp,-12
 8009848:	dc000015 	stw	r16,0(sp)
 800984c:	040200f4 	movhi	r16,2051
 8009850:	dc400115 	stw	r17,4(sp)
 8009854:	843b2d04 	addi	r16,r16,-4940
 8009858:	2023883a 	mov	r17,r4
 800985c:	2809883a 	mov	r4,r5
 8009860:	dfc00215 	stw	ra,8(sp)
 8009864:	80000015 	stw	zero,0(r16)
 8009868:	800d3ac0 	call	800d3ac <close>
 800986c:	00ffffc4 	movi	r3,-1
 8009870:	10c00526 	beq	r2,r3,8009888 <_close_r+0x44>
 8009874:	dfc00217 	ldw	ra,8(sp)
 8009878:	dc400117 	ldw	r17,4(sp)
 800987c:	dc000017 	ldw	r16,0(sp)
 8009880:	dec00304 	addi	sp,sp,12
 8009884:	f800283a 	ret
 8009888:	80c00017 	ldw	r3,0(r16)
 800988c:	183ff926 	beq	r3,zero,8009874 <_close_r+0x30>
 8009890:	88c00015 	stw	r3,0(r17)
 8009894:	003ff706 	br	8009874 <_close_r+0x30>

08009898 <_calloc_r>:
 8009898:	298b383a 	mul	r5,r5,r6
 800989c:	defffe04 	addi	sp,sp,-8
 80098a0:	dc000015 	stw	r16,0(sp)
 80098a4:	dfc00115 	stw	ra,4(sp)
 80098a8:	8000f9c0 	call	8000f9c <_malloc_r>
 80098ac:	1021883a 	mov	r16,r2
 80098b0:	10002826 	beq	r2,zero,8009954 <_calloc_r+0xbc>
 80098b4:	11bfff17 	ldw	r6,-4(r2)
 80098b8:	00bfff04 	movi	r2,-4
 80098bc:	00c00904 	movi	r3,36
 80098c0:	308c703a 	and	r6,r6,r2
 80098c4:	308d883a 	add	r6,r6,r2
 80098c8:	19801436 	bltu	r3,r6,800991c <_calloc_r+0x84>
 80098cc:	008004c4 	movi	r2,19
 80098d0:	11800936 	bltu	r2,r6,80098f8 <_calloc_r+0x60>
 80098d4:	8005883a 	mov	r2,r16
 80098d8:	10000015 	stw	zero,0(r2)
 80098dc:	10000115 	stw	zero,4(r2)
 80098e0:	10000215 	stw	zero,8(r2)
 80098e4:	8005883a 	mov	r2,r16
 80098e8:	dfc00117 	ldw	ra,4(sp)
 80098ec:	dc000017 	ldw	r16,0(sp)
 80098f0:	dec00204 	addi	sp,sp,8
 80098f4:	f800283a 	ret
 80098f8:	80000015 	stw	zero,0(r16)
 80098fc:	80000115 	stw	zero,4(r16)
 8009900:	008006c4 	movi	r2,27
 8009904:	11800d2e 	bgeu	r2,r6,800993c <_calloc_r+0xa4>
 8009908:	80000215 	stw	zero,8(r16)
 800990c:	80000315 	stw	zero,12(r16)
 8009910:	30c00c26 	beq	r6,r3,8009944 <_calloc_r+0xac>
 8009914:	80800404 	addi	r2,r16,16
 8009918:	003fef06 	br	80098d8 <_calloc_r+0x40>
 800991c:	8009883a 	mov	r4,r16
 8009920:	000b883a 	mov	r5,zero
 8009924:	8006b480 	call	8006b48 <memset>
 8009928:	8005883a 	mov	r2,r16
 800992c:	dfc00117 	ldw	ra,4(sp)
 8009930:	dc000017 	ldw	r16,0(sp)
 8009934:	dec00204 	addi	sp,sp,8
 8009938:	f800283a 	ret
 800993c:	80800204 	addi	r2,r16,8
 8009940:	003fe506 	br	80098d8 <_calloc_r+0x40>
 8009944:	80000415 	stw	zero,16(r16)
 8009948:	80800604 	addi	r2,r16,24
 800994c:	80000515 	stw	zero,20(r16)
 8009950:	003fe106 	br	80098d8 <_calloc_r+0x40>
 8009954:	0005883a 	mov	r2,zero
 8009958:	003fe306 	br	80098e8 <_calloc_r+0x50>

0800995c <_fclose_r>:
 800995c:	28003926 	beq	r5,zero,8009a44 <_fclose_r+0xe8>
 8009960:	defffc04 	addi	sp,sp,-16
 8009964:	dc400115 	stw	r17,4(sp)
 8009968:	dc000015 	stw	r16,0(sp)
 800996c:	dfc00315 	stw	ra,12(sp)
 8009970:	dc800215 	stw	r18,8(sp)
 8009974:	2023883a 	mov	r17,r4
 8009978:	2821883a 	mov	r16,r5
 800997c:	20000226 	beq	r4,zero,8009988 <_fclose_r+0x2c>
 8009980:	20800e17 	ldw	r2,56(r4)
 8009984:	10002726 	beq	r2,zero,8009a24 <_fclose_r+0xc8>
 8009988:	8080030f 	ldh	r2,12(r16)
 800998c:	1000071e 	bne	r2,zero,80099ac <_fclose_r+0x50>
 8009990:	0005883a 	mov	r2,zero
 8009994:	dfc00317 	ldw	ra,12(sp)
 8009998:	dc800217 	ldw	r18,8(sp)
 800999c:	dc400117 	ldw	r17,4(sp)
 80099a0:	dc000017 	ldw	r16,0(sp)
 80099a4:	dec00404 	addi	sp,sp,16
 80099a8:	f800283a 	ret
 80099ac:	8809883a 	mov	r4,r17
 80099b0:	800b883a 	mov	r5,r16
 80099b4:	80054a40 	call	80054a4 <__sflush_r>
 80099b8:	1025883a 	mov	r18,r2
 80099bc:	80800b17 	ldw	r2,44(r16)
 80099c0:	10000426 	beq	r2,zero,80099d4 <_fclose_r+0x78>
 80099c4:	81400717 	ldw	r5,28(r16)
 80099c8:	8809883a 	mov	r4,r17
 80099cc:	103ee83a 	callr	r2
 80099d0:	10001616 	blt	r2,zero,8009a2c <_fclose_r+0xd0>
 80099d4:	8080030b 	ldhu	r2,12(r16)
 80099d8:	1080200c 	andi	r2,r2,128
 80099dc:	1000151e 	bne	r2,zero,8009a34 <_fclose_r+0xd8>
 80099e0:	81400c17 	ldw	r5,48(r16)
 80099e4:	28000526 	beq	r5,zero,80099fc <_fclose_r+0xa0>
 80099e8:	80801004 	addi	r2,r16,64
 80099ec:	28800226 	beq	r5,r2,80099f8 <_fclose_r+0x9c>
 80099f0:	8809883a 	mov	r4,r17
 80099f4:	8005bfc0 	call	8005bfc <_free_r>
 80099f8:	80000c15 	stw	zero,48(r16)
 80099fc:	81401117 	ldw	r5,68(r16)
 8009a00:	28000326 	beq	r5,zero,8009a10 <_fclose_r+0xb4>
 8009a04:	8809883a 	mov	r4,r17
 8009a08:	8005bfc0 	call	8005bfc <_free_r>
 8009a0c:	80001115 	stw	zero,68(r16)
 8009a10:	8005a980 	call	8005a98 <__sfp_lock_acquire>
 8009a14:	8000030d 	sth	zero,12(r16)
 8009a18:	8005a9c0 	call	8005a9c <__sfp_lock_release>
 8009a1c:	9005883a 	mov	r2,r18
 8009a20:	003fdc06 	br	8009994 <_fclose_r+0x38>
 8009a24:	8005a880 	call	8005a88 <__sinit>
 8009a28:	003fd706 	br	8009988 <_fclose_r+0x2c>
 8009a2c:	04bfffc4 	movi	r18,-1
 8009a30:	003fe806 	br	80099d4 <_fclose_r+0x78>
 8009a34:	81400417 	ldw	r5,16(r16)
 8009a38:	8809883a 	mov	r4,r17
 8009a3c:	8005bfc0 	call	8005bfc <_free_r>
 8009a40:	003fe706 	br	80099e0 <_fclose_r+0x84>
 8009a44:	0005883a 	mov	r2,zero
 8009a48:	f800283a 	ret

08009a4c <fclose>:
 8009a4c:	008200b4 	movhi	r2,2050
 8009a50:	10913b04 	addi	r2,r2,17644
 8009a54:	200b883a 	mov	r5,r4
 8009a58:	11000017 	ldw	r4,0(r2)
 8009a5c:	800995c1 	jmpi	800995c <_fclose_r>

08009a60 <_fputwc_r>:
 8009a60:	3080030b 	ldhu	r2,12(r6)
 8009a64:	defff804 	addi	sp,sp,-32
 8009a68:	dcc00415 	stw	r19,16(sp)
 8009a6c:	dc800315 	stw	r18,12(sp)
 8009a70:	dc000115 	stw	r16,4(sp)
 8009a74:	dfc00715 	stw	ra,28(sp)
 8009a78:	dd400615 	stw	r21,24(sp)
 8009a7c:	dd000515 	stw	r20,20(sp)
 8009a80:	dc400215 	stw	r17,8(sp)
 8009a84:	10c8000c 	andi	r3,r2,8192
 8009a88:	3021883a 	mov	r16,r6
 8009a8c:	2027883a 	mov	r19,r4
 8009a90:	2825883a 	mov	r18,r5
 8009a94:	1800051e 	bne	r3,zero,8009aac <_fputwc_r+0x4c>
 8009a98:	30c01917 	ldw	r3,100(r6)
 8009a9c:	10880014 	ori	r2,r2,8192
 8009aa0:	3080030d 	sth	r2,12(r6)
 8009aa4:	18880014 	ori	r2,r3,8192
 8009aa8:	30801915 	stw	r2,100(r6)
 8009aac:	80065bc0 	call	80065bc <__locale_mb_cur_max>
 8009ab0:	00c00044 	movi	r3,1
 8009ab4:	10c03e26 	beq	r2,r3,8009bb0 <_fputwc_r+0x150>
 8009ab8:	9809883a 	mov	r4,r19
 8009abc:	d80b883a 	mov	r5,sp
 8009ac0:	900d883a 	mov	r6,r18
 8009ac4:	81c01704 	addi	r7,r16,92
 8009ac8:	8009ef80 	call	8009ef8 <_wcrtomb_r>
 8009acc:	1029883a 	mov	r20,r2
 8009ad0:	00bfffc4 	movi	r2,-1
 8009ad4:	a0802026 	beq	r20,r2,8009b58 <_fputwc_r+0xf8>
 8009ad8:	d9400003 	ldbu	r5,0(sp)
 8009adc:	a0001c26 	beq	r20,zero,8009b50 <_fputwc_r+0xf0>
 8009ae0:	0023883a 	mov	r17,zero
 8009ae4:	05400284 	movi	r21,10
 8009ae8:	00000906 	br	8009b10 <_fputwc_r+0xb0>
 8009aec:	80800017 	ldw	r2,0(r16)
 8009af0:	11400005 	stb	r5,0(r2)
 8009af4:	80c00017 	ldw	r3,0(r16)
 8009af8:	18c00044 	addi	r3,r3,1
 8009afc:	80c00015 	stw	r3,0(r16)
 8009b00:	8c400044 	addi	r17,r17,1
 8009b04:	dc45883a 	add	r2,sp,r17
 8009b08:	8d00112e 	bgeu	r17,r20,8009b50 <_fputwc_r+0xf0>
 8009b0c:	11400003 	ldbu	r5,0(r2)
 8009b10:	80c00217 	ldw	r3,8(r16)
 8009b14:	18ffffc4 	addi	r3,r3,-1
 8009b18:	80c00215 	stw	r3,8(r16)
 8009b1c:	183ff30e 	bge	r3,zero,8009aec <_fputwc_r+0x8c>
 8009b20:	80800617 	ldw	r2,24(r16)
 8009b24:	18801916 	blt	r3,r2,8009b8c <_fputwc_r+0x12c>
 8009b28:	80800017 	ldw	r2,0(r16)
 8009b2c:	11400005 	stb	r5,0(r2)
 8009b30:	80800017 	ldw	r2,0(r16)
 8009b34:	10c00003 	ldbu	r3,0(r2)
 8009b38:	10800044 	addi	r2,r2,1
 8009b3c:	1d402326 	beq	r3,r21,8009bcc <_fputwc_r+0x16c>
 8009b40:	80800015 	stw	r2,0(r16)
 8009b44:	8c400044 	addi	r17,r17,1
 8009b48:	dc45883a 	add	r2,sp,r17
 8009b4c:	8d3fef36 	bltu	r17,r20,8009b0c <_fputwc_r+0xac>
 8009b50:	9005883a 	mov	r2,r18
 8009b54:	00000406 	br	8009b68 <_fputwc_r+0x108>
 8009b58:	80c0030b 	ldhu	r3,12(r16)
 8009b5c:	a005883a 	mov	r2,r20
 8009b60:	18c01014 	ori	r3,r3,64
 8009b64:	80c0030d 	sth	r3,12(r16)
 8009b68:	dfc00717 	ldw	ra,28(sp)
 8009b6c:	dd400617 	ldw	r21,24(sp)
 8009b70:	dd000517 	ldw	r20,20(sp)
 8009b74:	dcc00417 	ldw	r19,16(sp)
 8009b78:	dc800317 	ldw	r18,12(sp)
 8009b7c:	dc400217 	ldw	r17,8(sp)
 8009b80:	dc000117 	ldw	r16,4(sp)
 8009b84:	dec00804 	addi	sp,sp,32
 8009b88:	f800283a 	ret
 8009b8c:	9809883a 	mov	r4,r19
 8009b90:	29403fcc 	andi	r5,r5,255
 8009b94:	800d883a 	mov	r6,r16
 8009b98:	8009da40 	call	8009da4 <__swbuf_r>
 8009b9c:	10bfffe0 	cmpeqi	r2,r2,-1
 8009ba0:	10803fcc 	andi	r2,r2,255
 8009ba4:	103fd626 	beq	r2,zero,8009b00 <_fputwc_r+0xa0>
 8009ba8:	00bfffc4 	movi	r2,-1
 8009bac:	003fee06 	br	8009b68 <_fputwc_r+0x108>
 8009bb0:	90ffffc4 	addi	r3,r18,-1
 8009bb4:	01003f84 	movi	r4,254
 8009bb8:	20ffbf36 	bltu	r4,r3,8009ab8 <_fputwc_r+0x58>
 8009bbc:	900b883a 	mov	r5,r18
 8009bc0:	dc800005 	stb	r18,0(sp)
 8009bc4:	1029883a 	mov	r20,r2
 8009bc8:	003fc506 	br	8009ae0 <_fputwc_r+0x80>
 8009bcc:	9809883a 	mov	r4,r19
 8009bd0:	a80b883a 	mov	r5,r21
 8009bd4:	800d883a 	mov	r6,r16
 8009bd8:	8009da40 	call	8009da4 <__swbuf_r>
 8009bdc:	10bfffe0 	cmpeqi	r2,r2,-1
 8009be0:	003fef06 	br	8009ba0 <_fputwc_r+0x140>

08009be4 <fputwc>:
 8009be4:	008200b4 	movhi	r2,2050
 8009be8:	defffc04 	addi	sp,sp,-16
 8009bec:	10913b04 	addi	r2,r2,17644
 8009bf0:	dc000115 	stw	r16,4(sp)
 8009bf4:	14000017 	ldw	r16,0(r2)
 8009bf8:	dc400215 	stw	r17,8(sp)
 8009bfc:	dfc00315 	stw	ra,12(sp)
 8009c00:	2023883a 	mov	r17,r4
 8009c04:	280d883a 	mov	r6,r5
 8009c08:	80000626 	beq	r16,zero,8009c24 <fputwc+0x40>
 8009c0c:	80800e17 	ldw	r2,56(r16)
 8009c10:	1000041e 	bne	r2,zero,8009c24 <fputwc+0x40>
 8009c14:	8009883a 	mov	r4,r16
 8009c18:	d9400015 	stw	r5,0(sp)
 8009c1c:	8005a880 	call	8005a88 <__sinit>
 8009c20:	d9800017 	ldw	r6,0(sp)
 8009c24:	8009883a 	mov	r4,r16
 8009c28:	880b883a 	mov	r5,r17
 8009c2c:	dfc00317 	ldw	ra,12(sp)
 8009c30:	dc400217 	ldw	r17,8(sp)
 8009c34:	dc000117 	ldw	r16,4(sp)
 8009c38:	dec00404 	addi	sp,sp,16
 8009c3c:	8009a601 	jmpi	8009a60 <_fputwc_r>

08009c40 <_fstat_r>:
 8009c40:	defffd04 	addi	sp,sp,-12
 8009c44:	dc000015 	stw	r16,0(sp)
 8009c48:	040200f4 	movhi	r16,2051
 8009c4c:	dc400115 	stw	r17,4(sp)
 8009c50:	843b2d04 	addi	r16,r16,-4940
 8009c54:	2023883a 	mov	r17,r4
 8009c58:	2809883a 	mov	r4,r5
 8009c5c:	300b883a 	mov	r5,r6
 8009c60:	dfc00215 	stw	ra,8(sp)
 8009c64:	80000015 	stw	zero,0(r16)
 8009c68:	800d4f80 	call	800d4f8 <fstat>
 8009c6c:	00ffffc4 	movi	r3,-1
 8009c70:	10c00526 	beq	r2,r3,8009c88 <_fstat_r+0x48>
 8009c74:	dfc00217 	ldw	ra,8(sp)
 8009c78:	dc400117 	ldw	r17,4(sp)
 8009c7c:	dc000017 	ldw	r16,0(sp)
 8009c80:	dec00304 	addi	sp,sp,12
 8009c84:	f800283a 	ret
 8009c88:	80c00017 	ldw	r3,0(r16)
 8009c8c:	183ff926 	beq	r3,zero,8009c74 <_fstat_r+0x34>
 8009c90:	88c00015 	stw	r3,0(r17)
 8009c94:	003ff706 	br	8009c74 <_fstat_r+0x34>

08009c98 <_isatty_r>:
 8009c98:	defffd04 	addi	sp,sp,-12
 8009c9c:	dc000015 	stw	r16,0(sp)
 8009ca0:	040200f4 	movhi	r16,2051
 8009ca4:	dc400115 	stw	r17,4(sp)
 8009ca8:	843b2d04 	addi	r16,r16,-4940
 8009cac:	2023883a 	mov	r17,r4
 8009cb0:	2809883a 	mov	r4,r5
 8009cb4:	dfc00215 	stw	ra,8(sp)
 8009cb8:	80000015 	stw	zero,0(r16)
 8009cbc:	800d5f80 	call	800d5f8 <isatty>
 8009cc0:	00ffffc4 	movi	r3,-1
 8009cc4:	10c00526 	beq	r2,r3,8009cdc <_isatty_r+0x44>
 8009cc8:	dfc00217 	ldw	ra,8(sp)
 8009ccc:	dc400117 	ldw	r17,4(sp)
 8009cd0:	dc000017 	ldw	r16,0(sp)
 8009cd4:	dec00304 	addi	sp,sp,12
 8009cd8:	f800283a 	ret
 8009cdc:	80c00017 	ldw	r3,0(r16)
 8009ce0:	183ff926 	beq	r3,zero,8009cc8 <_isatty_r+0x30>
 8009ce4:	88c00015 	stw	r3,0(r17)
 8009ce8:	003ff706 	br	8009cc8 <_isatty_r+0x30>

08009cec <_lseek_r>:
 8009cec:	defffd04 	addi	sp,sp,-12
 8009cf0:	dc000015 	stw	r16,0(sp)
 8009cf4:	040200f4 	movhi	r16,2051
 8009cf8:	dc400115 	stw	r17,4(sp)
 8009cfc:	843b2d04 	addi	r16,r16,-4940
 8009d00:	2023883a 	mov	r17,r4
 8009d04:	2809883a 	mov	r4,r5
 8009d08:	300b883a 	mov	r5,r6
 8009d0c:	380d883a 	mov	r6,r7
 8009d10:	dfc00215 	stw	ra,8(sp)
 8009d14:	80000015 	stw	zero,0(r16)
 8009d18:	800d7d00 	call	800d7d0 <lseek>
 8009d1c:	00ffffc4 	movi	r3,-1
 8009d20:	10c00526 	beq	r2,r3,8009d38 <_lseek_r+0x4c>
 8009d24:	dfc00217 	ldw	ra,8(sp)
 8009d28:	dc400117 	ldw	r17,4(sp)
 8009d2c:	dc000017 	ldw	r16,0(sp)
 8009d30:	dec00304 	addi	sp,sp,12
 8009d34:	f800283a 	ret
 8009d38:	80c00017 	ldw	r3,0(r16)
 8009d3c:	183ff926 	beq	r3,zero,8009d24 <_lseek_r+0x38>
 8009d40:	88c00015 	stw	r3,0(r17)
 8009d44:	003ff706 	br	8009d24 <_lseek_r+0x38>

08009d48 <_read_r>:
 8009d48:	defffd04 	addi	sp,sp,-12
 8009d4c:	dc000015 	stw	r16,0(sp)
 8009d50:	040200f4 	movhi	r16,2051
 8009d54:	dc400115 	stw	r17,4(sp)
 8009d58:	843b2d04 	addi	r16,r16,-4940
 8009d5c:	2023883a 	mov	r17,r4
 8009d60:	2809883a 	mov	r4,r5
 8009d64:	300b883a 	mov	r5,r6
 8009d68:	380d883a 	mov	r6,r7
 8009d6c:	dfc00215 	stw	ra,8(sp)
 8009d70:	80000015 	stw	zero,0(r16)
 8009d74:	800d9c80 	call	800d9c8 <read>
 8009d78:	00ffffc4 	movi	r3,-1
 8009d7c:	10c00526 	beq	r2,r3,8009d94 <_read_r+0x4c>
 8009d80:	dfc00217 	ldw	ra,8(sp)
 8009d84:	dc400117 	ldw	r17,4(sp)
 8009d88:	dc000017 	ldw	r16,0(sp)
 8009d8c:	dec00304 	addi	sp,sp,12
 8009d90:	f800283a 	ret
 8009d94:	80c00017 	ldw	r3,0(r16)
 8009d98:	183ff926 	beq	r3,zero,8009d80 <_read_r+0x38>
 8009d9c:	88c00015 	stw	r3,0(r17)
 8009da0:	003ff706 	br	8009d80 <_read_r+0x38>

08009da4 <__swbuf_r>:
 8009da4:	defffc04 	addi	sp,sp,-16
 8009da8:	dc800215 	stw	r18,8(sp)
 8009dac:	dc400115 	stw	r17,4(sp)
 8009db0:	dc000015 	stw	r16,0(sp)
 8009db4:	dfc00315 	stw	ra,12(sp)
 8009db8:	2025883a 	mov	r18,r4
 8009dbc:	2823883a 	mov	r17,r5
 8009dc0:	3021883a 	mov	r16,r6
 8009dc4:	20000226 	beq	r4,zero,8009dd0 <__swbuf_r+0x2c>
 8009dc8:	20800e17 	ldw	r2,56(r4)
 8009dcc:	10004126 	beq	r2,zero,8009ed4 <__swbuf_r+0x130>
 8009dd0:	80c00617 	ldw	r3,24(r16)
 8009dd4:	8180030b 	ldhu	r6,12(r16)
 8009dd8:	80c00215 	stw	r3,8(r16)
 8009ddc:	30c0020c 	andi	r3,r6,8
 8009de0:	18003526 	beq	r3,zero,8009eb8 <__swbuf_r+0x114>
 8009de4:	80c00417 	ldw	r3,16(r16)
 8009de8:	18003326 	beq	r3,zero,8009eb8 <__swbuf_r+0x114>
 8009dec:	3088000c 	andi	r2,r6,8192
 8009df0:	8c403fcc 	andi	r17,r17,255
 8009df4:	10001726 	beq	r2,zero,8009e54 <__swbuf_r+0xb0>
 8009df8:	80800017 	ldw	r2,0(r16)
 8009dfc:	81000517 	ldw	r4,20(r16)
 8009e00:	10c7c83a 	sub	r3,r2,r3
 8009e04:	19001d0e 	bge	r3,r4,8009e7c <__swbuf_r+0xd8>
 8009e08:	18c00044 	addi	r3,r3,1
 8009e0c:	81400217 	ldw	r5,8(r16)
 8009e10:	11000044 	addi	r4,r2,1
 8009e14:	81000015 	stw	r4,0(r16)
 8009e18:	297fffc4 	addi	r5,r5,-1
 8009e1c:	81400215 	stw	r5,8(r16)
 8009e20:	14400005 	stb	r17,0(r2)
 8009e24:	80800517 	ldw	r2,20(r16)
 8009e28:	10c01d26 	beq	r2,r3,8009ea0 <__swbuf_r+0xfc>
 8009e2c:	8080030b 	ldhu	r2,12(r16)
 8009e30:	1080004c 	andi	r2,r2,1
 8009e34:	1000181e 	bne	r2,zero,8009e98 <__swbuf_r+0xf4>
 8009e38:	8805883a 	mov	r2,r17
 8009e3c:	dfc00317 	ldw	ra,12(sp)
 8009e40:	dc800217 	ldw	r18,8(sp)
 8009e44:	dc400117 	ldw	r17,4(sp)
 8009e48:	dc000017 	ldw	r16,0(sp)
 8009e4c:	dec00404 	addi	sp,sp,16
 8009e50:	f800283a 	ret
 8009e54:	81001917 	ldw	r4,100(r16)
 8009e58:	00b7ffc4 	movi	r2,-8193
 8009e5c:	31880014 	ori	r6,r6,8192
 8009e60:	2084703a 	and	r2,r4,r2
 8009e64:	80801915 	stw	r2,100(r16)
 8009e68:	80800017 	ldw	r2,0(r16)
 8009e6c:	81000517 	ldw	r4,20(r16)
 8009e70:	8180030d 	sth	r6,12(r16)
 8009e74:	10c7c83a 	sub	r3,r2,r3
 8009e78:	193fe316 	blt	r3,r4,8009e08 <__swbuf_r+0x64>
 8009e7c:	9009883a 	mov	r4,r18
 8009e80:	800b883a 	mov	r5,r16
 8009e84:	80056ac0 	call	80056ac <_fflush_r>
 8009e88:	1000091e 	bne	r2,zero,8009eb0 <__swbuf_r+0x10c>
 8009e8c:	80800017 	ldw	r2,0(r16)
 8009e90:	00c00044 	movi	r3,1
 8009e94:	003fdd06 	br	8009e0c <__swbuf_r+0x68>
 8009e98:	00800284 	movi	r2,10
 8009e9c:	88bfe61e 	bne	r17,r2,8009e38 <__swbuf_r+0x94>
 8009ea0:	9009883a 	mov	r4,r18
 8009ea4:	800b883a 	mov	r5,r16
 8009ea8:	80056ac0 	call	80056ac <_fflush_r>
 8009eac:	103fe226 	beq	r2,zero,8009e38 <__swbuf_r+0x94>
 8009eb0:	00bfffc4 	movi	r2,-1
 8009eb4:	003fe106 	br	8009e3c <__swbuf_r+0x98>
 8009eb8:	9009883a 	mov	r4,r18
 8009ebc:	800b883a 	mov	r5,r16
 8009ec0:	8003a280 	call	8003a28 <__swsetup_r>
 8009ec4:	103ffa1e 	bne	r2,zero,8009eb0 <__swbuf_r+0x10c>
 8009ec8:	8180030b 	ldhu	r6,12(r16)
 8009ecc:	80c00417 	ldw	r3,16(r16)
 8009ed0:	003fc606 	br	8009dec <__swbuf_r+0x48>
 8009ed4:	8005a880 	call	8005a88 <__sinit>
 8009ed8:	003fbd06 	br	8009dd0 <__swbuf_r+0x2c>

08009edc <__swbuf>:
 8009edc:	00c200b4 	movhi	r3,2050
 8009ee0:	18d13b04 	addi	r3,r3,17644
 8009ee4:	2005883a 	mov	r2,r4
 8009ee8:	19000017 	ldw	r4,0(r3)
 8009eec:	280d883a 	mov	r6,r5
 8009ef0:	100b883a 	mov	r5,r2
 8009ef4:	8009da41 	jmpi	8009da4 <__swbuf_r>

08009ef8 <_wcrtomb_r>:
 8009ef8:	defff604 	addi	sp,sp,-40
 8009efc:	008200b4 	movhi	r2,2050
 8009f00:	dc800815 	stw	r18,32(sp)
 8009f04:	dc400715 	stw	r17,28(sp)
 8009f08:	dc000615 	stw	r16,24(sp)
 8009f0c:	10913d04 	addi	r2,r2,17652
 8009f10:	dfc00915 	stw	ra,36(sp)
 8009f14:	2021883a 	mov	r16,r4
 8009f18:	3823883a 	mov	r17,r7
 8009f1c:	14800017 	ldw	r18,0(r2)
 8009f20:	28001426 	beq	r5,zero,8009f74 <_wcrtomb_r+0x7c>
 8009f24:	d9400415 	stw	r5,16(sp)
 8009f28:	d9800515 	stw	r6,20(sp)
 8009f2c:	80065b00 	call	80065b0 <__locale_charset>
 8009f30:	d9400417 	ldw	r5,16(sp)
 8009f34:	d9800517 	ldw	r6,20(sp)
 8009f38:	8009883a 	mov	r4,r16
 8009f3c:	dc400015 	stw	r17,0(sp)
 8009f40:	100f883a 	mov	r7,r2
 8009f44:	903ee83a 	callr	r18
 8009f48:	00ffffc4 	movi	r3,-1
 8009f4c:	10c0031e 	bne	r2,r3,8009f5c <_wcrtomb_r+0x64>
 8009f50:	88000015 	stw	zero,0(r17)
 8009f54:	00c02284 	movi	r3,138
 8009f58:	80c00015 	stw	r3,0(r16)
 8009f5c:	dfc00917 	ldw	ra,36(sp)
 8009f60:	dc800817 	ldw	r18,32(sp)
 8009f64:	dc400717 	ldw	r17,28(sp)
 8009f68:	dc000617 	ldw	r16,24(sp)
 8009f6c:	dec00a04 	addi	sp,sp,40
 8009f70:	f800283a 	ret
 8009f74:	80065b00 	call	80065b0 <__locale_charset>
 8009f78:	8009883a 	mov	r4,r16
 8009f7c:	dc400015 	stw	r17,0(sp)
 8009f80:	d9400104 	addi	r5,sp,4
 8009f84:	000d883a 	mov	r6,zero
 8009f88:	100f883a 	mov	r7,r2
 8009f8c:	903ee83a 	callr	r18
 8009f90:	003fed06 	br	8009f48 <_wcrtomb_r+0x50>

08009f94 <wcrtomb>:
 8009f94:	defff604 	addi	sp,sp,-40
 8009f98:	008200b4 	movhi	r2,2050
 8009f9c:	dc800615 	stw	r18,24(sp)
 8009fa0:	dc400515 	stw	r17,20(sp)
 8009fa4:	dc000415 	stw	r16,16(sp)
 8009fa8:	10913b04 	addi	r2,r2,17644
 8009fac:	dfc00915 	stw	ra,36(sp)
 8009fb0:	dd000815 	stw	r20,32(sp)
 8009fb4:	dcc00715 	stw	r19,28(sp)
 8009fb8:	2021883a 	mov	r16,r4
 8009fbc:	3025883a 	mov	r18,r6
 8009fc0:	14400017 	ldw	r17,0(r2)
 8009fc4:	20001826 	beq	r4,zero,800a028 <wcrtomb+0x94>
 8009fc8:	008200b4 	movhi	r2,2050
 8009fcc:	10913d04 	addi	r2,r2,17652
 8009fd0:	15000017 	ldw	r20,0(r2)
 8009fd4:	2827883a 	mov	r19,r5
 8009fd8:	80065b00 	call	80065b0 <__locale_charset>
 8009fdc:	8809883a 	mov	r4,r17
 8009fe0:	dc800015 	stw	r18,0(sp)
 8009fe4:	800b883a 	mov	r5,r16
 8009fe8:	980d883a 	mov	r6,r19
 8009fec:	100f883a 	mov	r7,r2
 8009ff0:	a03ee83a 	callr	r20
 8009ff4:	00ffffc4 	movi	r3,-1
 8009ff8:	10c0031e 	bne	r2,r3,800a008 <wcrtomb+0x74>
 8009ffc:	90000015 	stw	zero,0(r18)
 800a000:	00c02284 	movi	r3,138
 800a004:	88c00015 	stw	r3,0(r17)
 800a008:	dfc00917 	ldw	ra,36(sp)
 800a00c:	dd000817 	ldw	r20,32(sp)
 800a010:	dcc00717 	ldw	r19,28(sp)
 800a014:	dc800617 	ldw	r18,24(sp)
 800a018:	dc400517 	ldw	r17,20(sp)
 800a01c:	dc000417 	ldw	r16,16(sp)
 800a020:	dec00a04 	addi	sp,sp,40
 800a024:	f800283a 	ret
 800a028:	008200b4 	movhi	r2,2050
 800a02c:	10913d04 	addi	r2,r2,17652
 800a030:	14000017 	ldw	r16,0(r2)
 800a034:	80065b00 	call	80065b0 <__locale_charset>
 800a038:	8809883a 	mov	r4,r17
 800a03c:	dc800015 	stw	r18,0(sp)
 800a040:	d9400104 	addi	r5,sp,4
 800a044:	000d883a 	mov	r6,zero
 800a048:	100f883a 	mov	r7,r2
 800a04c:	803ee83a 	callr	r16
 800a050:	003fe806 	br	8009ff4 <wcrtomb+0x60>

0800a054 <__ascii_wctomb>:
 800a054:	28000526 	beq	r5,zero,800a06c <__ascii_wctomb+0x18>
 800a058:	00803fc4 	movi	r2,255
 800a05c:	11800536 	bltu	r2,r6,800a074 <__ascii_wctomb+0x20>
 800a060:	29800005 	stb	r6,0(r5)
 800a064:	00800044 	movi	r2,1
 800a068:	f800283a 	ret
 800a06c:	0005883a 	mov	r2,zero
 800a070:	f800283a 	ret
 800a074:	00802284 	movi	r2,138
 800a078:	20800015 	stw	r2,0(r4)
 800a07c:	00bfffc4 	movi	r2,-1
 800a080:	f800283a 	ret

0800a084 <_wctomb_r>:
 800a084:	008200b4 	movhi	r2,2050
 800a088:	defff904 	addi	sp,sp,-28
 800a08c:	10913d04 	addi	r2,r2,17652
 800a090:	dfc00615 	stw	ra,24(sp)
 800a094:	dc400515 	stw	r17,20(sp)
 800a098:	dc000415 	stw	r16,16(sp)
 800a09c:	3823883a 	mov	r17,r7
 800a0a0:	14000017 	ldw	r16,0(r2)
 800a0a4:	d9000115 	stw	r4,4(sp)
 800a0a8:	d9400215 	stw	r5,8(sp)
 800a0ac:	d9800315 	stw	r6,12(sp)
 800a0b0:	80065b00 	call	80065b0 <__locale_charset>
 800a0b4:	d9000117 	ldw	r4,4(sp)
 800a0b8:	d9400217 	ldw	r5,8(sp)
 800a0bc:	d9800317 	ldw	r6,12(sp)
 800a0c0:	dc400015 	stw	r17,0(sp)
 800a0c4:	100f883a 	mov	r7,r2
 800a0c8:	803ee83a 	callr	r16
 800a0cc:	dfc00617 	ldw	ra,24(sp)
 800a0d0:	dc400517 	ldw	r17,20(sp)
 800a0d4:	dc000417 	ldw	r16,16(sp)
 800a0d8:	dec00704 	addi	sp,sp,28
 800a0dc:	f800283a 	ret

0800a0e0 <__udivdi3>:
 800a0e0:	defff504 	addi	sp,sp,-44
 800a0e4:	dcc00415 	stw	r19,16(sp)
 800a0e8:	dc000115 	stw	r16,4(sp)
 800a0ec:	dfc00a15 	stw	ra,40(sp)
 800a0f0:	df000915 	stw	fp,36(sp)
 800a0f4:	ddc00815 	stw	r23,32(sp)
 800a0f8:	dd800715 	stw	r22,28(sp)
 800a0fc:	dd400615 	stw	r21,24(sp)
 800a100:	dd000515 	stw	r20,20(sp)
 800a104:	dc800315 	stw	r18,12(sp)
 800a108:	dc400215 	stw	r17,8(sp)
 800a10c:	2027883a 	mov	r19,r4
 800a110:	2821883a 	mov	r16,r5
 800a114:	3800421e 	bne	r7,zero,800a220 <__udivdi3+0x140>
 800a118:	3025883a 	mov	r18,r6
 800a11c:	2023883a 	mov	r17,r4
 800a120:	2980542e 	bgeu	r5,r6,800a274 <__udivdi3+0x194>
 800a124:	00bfffd4 	movui	r2,65535
 800a128:	282d883a 	mov	r22,r5
 800a12c:	1180a836 	bltu	r2,r6,800a3d0 <__udivdi3+0x2f0>
 800a130:	00803fc4 	movi	r2,255
 800a134:	1181422e 	bgeu	r2,r6,800a640 <__udivdi3+0x560>
 800a138:	00800204 	movi	r2,8
 800a13c:	1007883a 	mov	r3,r2
 800a140:	3084d83a 	srl	r2,r6,r2
 800a144:	010200b4 	movhi	r4,2050
 800a148:	21270404 	addi	r4,r4,-25584
 800a14c:	2085883a 	add	r2,r4,r2
 800a150:	10800003 	ldbu	r2,0(r2)
 800a154:	10c7883a 	add	r3,r2,r3
 800a158:	00800804 	movi	r2,32
 800a15c:	10c5c83a 	sub	r2,r2,r3
 800a160:	10000526 	beq	r2,zero,800a178 <__udivdi3+0x98>
 800a164:	80a0983a 	sll	r16,r16,r2
 800a168:	98c6d83a 	srl	r3,r19,r3
 800a16c:	30a4983a 	sll	r18,r6,r2
 800a170:	98a2983a 	sll	r17,r19,r2
 800a174:	80ecb03a 	or	r22,r16,r3
 800a178:	902ad43a 	srli	r21,r18,16
 800a17c:	b009883a 	mov	r4,r22
 800a180:	953fffcc 	andi	r20,r18,65535
 800a184:	a80b883a 	mov	r5,r21
 800a188:	800ad540 	call	800ad54 <__umodsi3>
 800a18c:	b009883a 	mov	r4,r22
 800a190:	a80b883a 	mov	r5,r21
 800a194:	1027883a 	mov	r19,r2
 800a198:	800ad4c0 	call	800ad4c <__udivsi3>
 800a19c:	1021883a 	mov	r16,r2
 800a1a0:	8806d43a 	srli	r3,r17,16
 800a1a4:	9804943a 	slli	r2,r19,16
 800a1a8:	8527383a 	mul	r19,r16,r20
 800a1ac:	10c4b03a 	or	r2,r2,r3
 800a1b0:	14c0052e 	bgeu	r2,r19,800a1c8 <__udivdi3+0xe8>
 800a1b4:	1485883a 	add	r2,r2,r18
 800a1b8:	80ffffc4 	addi	r3,r16,-1
 800a1bc:	14800136 	bltu	r2,r18,800a1c4 <__udivdi3+0xe4>
 800a1c0:	14c13436 	bltu	r2,r19,800a694 <__udivdi3+0x5b4>
 800a1c4:	1821883a 	mov	r16,r3
 800a1c8:	14e7c83a 	sub	r19,r2,r19
 800a1cc:	9809883a 	mov	r4,r19
 800a1d0:	a80b883a 	mov	r5,r21
 800a1d4:	800ad540 	call	800ad54 <__umodsi3>
 800a1d8:	102d883a 	mov	r22,r2
 800a1dc:	9809883a 	mov	r4,r19
 800a1e0:	a80b883a 	mov	r5,r21
 800a1e4:	800ad4c0 	call	800ad4c <__udivsi3>
 800a1e8:	b02c943a 	slli	r22,r22,16
 800a1ec:	1529383a 	mul	r20,r2,r20
 800a1f0:	8c7fffcc 	andi	r17,r17,65535
 800a1f4:	b462b03a 	or	r17,r22,r17
 800a1f8:	8d00052e 	bgeu	r17,r20,800a210 <__udivdi3+0x130>
 800a1fc:	8ca3883a 	add	r17,r17,r18
 800a200:	10ffffc4 	addi	r3,r2,-1
 800a204:	8c80f636 	bltu	r17,r18,800a5e0 <__udivdi3+0x500>
 800a208:	8d00f52e 	bgeu	r17,r20,800a5e0 <__udivdi3+0x500>
 800a20c:	10bfff84 	addi	r2,r2,-2
 800a210:	8020943a 	slli	r16,r16,16
 800a214:	0007883a 	mov	r3,zero
 800a218:	1404b03a 	or	r2,r2,r16
 800a21c:	00005b06 	br	800a38c <__udivdi3+0x2ac>
 800a220:	29c05836 	bltu	r5,r7,800a384 <__udivdi3+0x2a4>
 800a224:	00bfffd4 	movui	r2,65535
 800a228:	11c0642e 	bgeu	r2,r7,800a3bc <__udivdi3+0x2dc>
 800a22c:	00804034 	movhi	r2,256
 800a230:	10bfffc4 	addi	r2,r2,-1
 800a234:	11c0f32e 	bgeu	r2,r7,800a604 <__udivdi3+0x524>
 800a238:	00c00604 	movi	r3,24
 800a23c:	180b883a 	mov	r5,r3
 800a240:	38c6d83a 	srl	r3,r7,r3
 800a244:	008200b4 	movhi	r2,2050
 800a248:	10a70404 	addi	r2,r2,-25584
 800a24c:	10c7883a 	add	r3,r2,r3
 800a250:	18c00003 	ldbu	r3,0(r3)
 800a254:	01000804 	movi	r4,32
 800a258:	1947883a 	add	r3,r3,r5
 800a25c:	20e5c83a 	sub	r18,r4,r3
 800a260:	9000661e 	bne	r18,zero,800a3fc <__udivdi3+0x31c>
 800a264:	3c00f936 	bltu	r7,r16,800a64c <__udivdi3+0x56c>
 800a268:	9985403a 	cmpgeu	r2,r19,r6
 800a26c:	0007883a 	mov	r3,zero
 800a270:	00004606 	br	800a38c <__udivdi3+0x2ac>
 800a274:	3000041e 	bne	r6,zero,800a288 <__udivdi3+0x1a8>
 800a278:	01000044 	movi	r4,1
 800a27c:	000b883a 	mov	r5,zero
 800a280:	800ad4c0 	call	800ad4c <__udivsi3>
 800a284:	1025883a 	mov	r18,r2
 800a288:	00bfffd4 	movui	r2,65535
 800a28c:	1480562e 	bgeu	r2,r18,800a3e8 <__udivdi3+0x308>
 800a290:	00804034 	movhi	r2,256
 800a294:	10bfffc4 	addi	r2,r2,-1
 800a298:	1480e32e 	bgeu	r2,r18,800a628 <__udivdi3+0x548>
 800a29c:	00800604 	movi	r2,24
 800a2a0:	1007883a 	mov	r3,r2
 800a2a4:	9084d83a 	srl	r2,r18,r2
 800a2a8:	010200b4 	movhi	r4,2050
 800a2ac:	21270404 	addi	r4,r4,-25584
 800a2b0:	2085883a 	add	r2,r4,r2
 800a2b4:	10800003 	ldbu	r2,0(r2)
 800a2b8:	10c5883a 	add	r2,r2,r3
 800a2bc:	00c00804 	movi	r3,32
 800a2c0:	1887c83a 	sub	r3,r3,r2
 800a2c4:	1800911e 	bne	r3,zero,800a50c <__udivdi3+0x42c>
 800a2c8:	9028d43a 	srli	r20,r18,16
 800a2cc:	84a1c83a 	sub	r16,r16,r18
 800a2d0:	957fffcc 	andi	r21,r18,65535
 800a2d4:	00c00044 	movi	r3,1
 800a2d8:	8009883a 	mov	r4,r16
 800a2dc:	a00b883a 	mov	r5,r20
 800a2e0:	d8c00015 	stw	r3,0(sp)
 800a2e4:	800ad540 	call	800ad54 <__umodsi3>
 800a2e8:	8009883a 	mov	r4,r16
 800a2ec:	a00b883a 	mov	r5,r20
 800a2f0:	1027883a 	mov	r19,r2
 800a2f4:	800ad4c0 	call	800ad4c <__udivsi3>
 800a2f8:	1021883a 	mov	r16,r2
 800a2fc:	880cd43a 	srli	r6,r17,16
 800a300:	9804943a 	slli	r2,r19,16
 800a304:	8567383a 	mul	r19,r16,r21
 800a308:	d8c00017 	ldw	r3,0(sp)
 800a30c:	1188b03a 	or	r4,r2,r6
 800a310:	24c0052e 	bgeu	r4,r19,800a328 <__udivdi3+0x248>
 800a314:	2489883a 	add	r4,r4,r18
 800a318:	80bfffc4 	addi	r2,r16,-1
 800a31c:	24800136 	bltu	r4,r18,800a324 <__udivdi3+0x244>
 800a320:	24c0d936 	bltu	r4,r19,800a688 <__udivdi3+0x5a8>
 800a324:	1021883a 	mov	r16,r2
 800a328:	24e7c83a 	sub	r19,r4,r19
 800a32c:	9809883a 	mov	r4,r19
 800a330:	a00b883a 	mov	r5,r20
 800a334:	d8c00015 	stw	r3,0(sp)
 800a338:	800ad540 	call	800ad54 <__umodsi3>
 800a33c:	102d883a 	mov	r22,r2
 800a340:	9809883a 	mov	r4,r19
 800a344:	a00b883a 	mov	r5,r20
 800a348:	800ad4c0 	call	800ad4c <__udivsi3>
 800a34c:	b02c943a 	slli	r22,r22,16
 800a350:	156b383a 	mul	r21,r2,r21
 800a354:	8c7fffcc 	andi	r17,r17,65535
 800a358:	b462b03a 	or	r17,r22,r17
 800a35c:	d8c00017 	ldw	r3,0(sp)
 800a360:	8d40052e 	bgeu	r17,r21,800a378 <__udivdi3+0x298>
 800a364:	8ca3883a 	add	r17,r17,r18
 800a368:	113fffc4 	addi	r4,r2,-1
 800a36c:	8c809a36 	bltu	r17,r18,800a5d8 <__udivdi3+0x4f8>
 800a370:	8d40992e 	bgeu	r17,r21,800a5d8 <__udivdi3+0x4f8>
 800a374:	10bfff84 	addi	r2,r2,-2
 800a378:	8020943a 	slli	r16,r16,16
 800a37c:	1404b03a 	or	r2,r2,r16
 800a380:	00000206 	br	800a38c <__udivdi3+0x2ac>
 800a384:	0007883a 	mov	r3,zero
 800a388:	0005883a 	mov	r2,zero
 800a38c:	dfc00a17 	ldw	ra,40(sp)
 800a390:	df000917 	ldw	fp,36(sp)
 800a394:	ddc00817 	ldw	r23,32(sp)
 800a398:	dd800717 	ldw	r22,28(sp)
 800a39c:	dd400617 	ldw	r21,24(sp)
 800a3a0:	dd000517 	ldw	r20,20(sp)
 800a3a4:	dcc00417 	ldw	r19,16(sp)
 800a3a8:	dc800317 	ldw	r18,12(sp)
 800a3ac:	dc400217 	ldw	r17,8(sp)
 800a3b0:	dc000117 	ldw	r16,4(sp)
 800a3b4:	dec00b04 	addi	sp,sp,44
 800a3b8:	f800283a 	ret
 800a3bc:	00803fc4 	movi	r2,255
 800a3c0:	11c0932e 	bgeu	r2,r7,800a610 <__udivdi3+0x530>
 800a3c4:	00c00204 	movi	r3,8
 800a3c8:	180b883a 	mov	r5,r3
 800a3cc:	003f9c06 	br	800a240 <__udivdi3+0x160>
 800a3d0:	00804034 	movhi	r2,256
 800a3d4:	10bfffc4 	addi	r2,r2,-1
 800a3d8:	1180902e 	bgeu	r2,r6,800a61c <__udivdi3+0x53c>
 800a3dc:	00800604 	movi	r2,24
 800a3e0:	1007883a 	mov	r3,r2
 800a3e4:	003f5606 	br	800a140 <__udivdi3+0x60>
 800a3e8:	00803fc4 	movi	r2,255
 800a3ec:	1480912e 	bgeu	r2,r18,800a634 <__udivdi3+0x554>
 800a3f0:	00800204 	movi	r2,8
 800a3f4:	1007883a 	mov	r3,r2
 800a3f8:	003faa06 	br	800a2a4 <__udivdi3+0x1c4>
 800a3fc:	30eed83a 	srl	r23,r6,r3
 800a400:	3c8e983a 	sll	r7,r7,r18
 800a404:	80f8d83a 	srl	fp,r16,r3
 800a408:	98c6d83a 	srl	r3,r19,r3
 800a40c:	3deeb03a 	or	r23,r7,r23
 800a410:	b828d43a 	srli	r20,r23,16
 800a414:	84a0983a 	sll	r16,r16,r18
 800a418:	e009883a 	mov	r4,fp
 800a41c:	a00b883a 	mov	r5,r20
 800a420:	80e2b03a 	or	r17,r16,r3
 800a424:	34aa983a 	sll	r21,r6,r18
 800a428:	800ad540 	call	800ad54 <__umodsi3>
 800a42c:	e009883a 	mov	r4,fp
 800a430:	a00b883a 	mov	r5,r20
 800a434:	102d883a 	mov	r22,r2
 800a438:	800ad4c0 	call	800ad4c <__udivsi3>
 800a43c:	1021883a 	mov	r16,r2
 800a440:	bf3fffcc 	andi	fp,r23,65535
 800a444:	b004943a 	slli	r2,r22,16
 800a448:	8808d43a 	srli	r4,r17,16
 800a44c:	872d383a 	mul	r22,r16,fp
 800a450:	1104b03a 	or	r2,r2,r4
 800a454:	1580042e 	bgeu	r2,r22,800a468 <__udivdi3+0x388>
 800a458:	15c5883a 	add	r2,r2,r23
 800a45c:	80ffffc4 	addi	r3,r16,-1
 800a460:	15c0812e 	bgeu	r2,r23,800a668 <__udivdi3+0x588>
 800a464:	1821883a 	mov	r16,r3
 800a468:	15adc83a 	sub	r22,r2,r22
 800a46c:	b009883a 	mov	r4,r22
 800a470:	a00b883a 	mov	r5,r20
 800a474:	800ad540 	call	800ad54 <__umodsi3>
 800a478:	a00b883a 	mov	r5,r20
 800a47c:	b009883a 	mov	r4,r22
 800a480:	d8800015 	stw	r2,0(sp)
 800a484:	800ad4c0 	call	800ad4c <__udivsi3>
 800a488:	d8c00017 	ldw	r3,0(sp)
 800a48c:	170b383a 	mul	r5,r2,fp
 800a490:	8c7fffcc 	andi	r17,r17,65535
 800a494:	1806943a 	slli	r3,r3,16
 800a498:	1c46b03a 	or	r3,r3,r17
 800a49c:	1940042e 	bgeu	r3,r5,800a4b0 <__udivdi3+0x3d0>
 800a4a0:	1dc7883a 	add	r3,r3,r23
 800a4a4:	113fffc4 	addi	r4,r2,-1
 800a4a8:	1dc06b2e 	bgeu	r3,r23,800a658 <__udivdi3+0x578>
 800a4ac:	2005883a 	mov	r2,r4
 800a4b0:	8020943a 	slli	r16,r16,16
 800a4b4:	a9ffffcc 	andi	r7,r21,65535
 800a4b8:	a82ad43a 	srli	r21,r21,16
 800a4bc:	1404b03a 	or	r2,r2,r16
 800a4c0:	113fffcc 	andi	r4,r2,65535
 800a4c4:	100cd43a 	srli	r6,r2,16
 800a4c8:	21d3383a 	mul	r9,r4,r7
 800a4cc:	2549383a 	mul	r4,r4,r21
 800a4d0:	31cf383a 	mul	r7,r6,r7
 800a4d4:	4810d43a 	srli	r8,r9,16
 800a4d8:	1947c83a 	sub	r3,r3,r5
 800a4dc:	3909883a 	add	r4,r7,r4
 800a4e0:	2209883a 	add	r4,r4,r8
 800a4e4:	354d383a 	mul	r6,r6,r21
 800a4e8:	21c0022e 	bgeu	r4,r7,800a4f4 <__udivdi3+0x414>
 800a4ec:	01400074 	movhi	r5,1
 800a4f0:	314d883a 	add	r6,r6,r5
 800a4f4:	202ad43a 	srli	r21,r4,16
 800a4f8:	354d883a 	add	r6,r6,r21
 800a4fc:	19803f36 	bltu	r3,r6,800a5fc <__udivdi3+0x51c>
 800a500:	19803926 	beq	r3,r6,800a5e8 <__udivdi3+0x508>
 800a504:	0007883a 	mov	r3,zero
 800a508:	003fa006 	br	800a38c <__udivdi3+0x2ac>
 800a50c:	90e4983a 	sll	r18,r18,r3
 800a510:	80aad83a 	srl	r21,r16,r2
 800a514:	80e0983a 	sll	r16,r16,r3
 800a518:	9028d43a 	srli	r20,r18,16
 800a51c:	9884d83a 	srl	r2,r19,r2
 800a520:	a809883a 	mov	r4,r21
 800a524:	a00b883a 	mov	r5,r20
 800a528:	80acb03a 	or	r22,r16,r2
 800a52c:	98e2983a 	sll	r17,r19,r3
 800a530:	800ad540 	call	800ad54 <__umodsi3>
 800a534:	a809883a 	mov	r4,r21
 800a538:	a00b883a 	mov	r5,r20
 800a53c:	1021883a 	mov	r16,r2
 800a540:	800ad4c0 	call	800ad4c <__udivsi3>
 800a544:	957fffcc 	andi	r21,r18,65535
 800a548:	8020943a 	slli	r16,r16,16
 800a54c:	b00ad43a 	srli	r5,r22,16
 800a550:	1567383a 	mul	r19,r2,r21
 800a554:	102f883a 	mov	r23,r2
 800a558:	8148b03a 	or	r4,r16,r5
 800a55c:	24c0062e 	bgeu	r4,r19,800a578 <__udivdi3+0x498>
 800a560:	2489883a 	add	r4,r4,r18
 800a564:	10bfffc4 	addi	r2,r2,-1
 800a568:	24804536 	bltu	r4,r18,800a680 <__udivdi3+0x5a0>
 800a56c:	24c0442e 	bgeu	r4,r19,800a680 <__udivdi3+0x5a0>
 800a570:	bdffff84 	addi	r23,r23,-2
 800a574:	2489883a 	add	r4,r4,r18
 800a578:	24e7c83a 	sub	r19,r4,r19
 800a57c:	9809883a 	mov	r4,r19
 800a580:	a00b883a 	mov	r5,r20
 800a584:	800ad540 	call	800ad54 <__umodsi3>
 800a588:	1021883a 	mov	r16,r2
 800a58c:	9809883a 	mov	r4,r19
 800a590:	a00b883a 	mov	r5,r20
 800a594:	800ad4c0 	call	800ad4c <__udivsi3>
 800a598:	8020943a 	slli	r16,r16,16
 800a59c:	1007883a 	mov	r3,r2
 800a5a0:	1545383a 	mul	r2,r2,r21
 800a5a4:	b13fffcc 	andi	r4,r22,65535
 800a5a8:	8108b03a 	or	r4,r16,r4
 800a5ac:	2080062e 	bgeu	r4,r2,800a5c8 <__udivdi3+0x4e8>
 800a5b0:	2489883a 	add	r4,r4,r18
 800a5b4:	197fffc4 	addi	r5,r3,-1
 800a5b8:	24802f36 	bltu	r4,r18,800a678 <__udivdi3+0x598>
 800a5bc:	20802e2e 	bgeu	r4,r2,800a678 <__udivdi3+0x598>
 800a5c0:	18ffff84 	addi	r3,r3,-2
 800a5c4:	2489883a 	add	r4,r4,r18
 800a5c8:	b82e943a 	slli	r23,r23,16
 800a5cc:	20a1c83a 	sub	r16,r4,r2
 800a5d0:	1dc6b03a 	or	r3,r3,r23
 800a5d4:	003f4006 	br	800a2d8 <__udivdi3+0x1f8>
 800a5d8:	2005883a 	mov	r2,r4
 800a5dc:	003f6606 	br	800a378 <__udivdi3+0x298>
 800a5e0:	1805883a 	mov	r2,r3
 800a5e4:	003f0a06 	br	800a210 <__udivdi3+0x130>
 800a5e8:	2006943a 	slli	r3,r4,16
 800a5ec:	9c88983a 	sll	r4,r19,r18
 800a5f0:	4a7fffcc 	andi	r9,r9,65535
 800a5f4:	1a47883a 	add	r3,r3,r9
 800a5f8:	20ffc22e 	bgeu	r4,r3,800a504 <__udivdi3+0x424>
 800a5fc:	10bfffc4 	addi	r2,r2,-1
 800a600:	003fc006 	br	800a504 <__udivdi3+0x424>
 800a604:	00c00404 	movi	r3,16
 800a608:	180b883a 	mov	r5,r3
 800a60c:	003f0c06 	br	800a240 <__udivdi3+0x160>
 800a610:	0007883a 	mov	r3,zero
 800a614:	000b883a 	mov	r5,zero
 800a618:	003f0906 	br	800a240 <__udivdi3+0x160>
 800a61c:	00800404 	movi	r2,16
 800a620:	1007883a 	mov	r3,r2
 800a624:	003ec606 	br	800a140 <__udivdi3+0x60>
 800a628:	00800404 	movi	r2,16
 800a62c:	1007883a 	mov	r3,r2
 800a630:	003f1c06 	br	800a2a4 <__udivdi3+0x1c4>
 800a634:	0005883a 	mov	r2,zero
 800a638:	0007883a 	mov	r3,zero
 800a63c:	003f1906 	br	800a2a4 <__udivdi3+0x1c4>
 800a640:	0005883a 	mov	r2,zero
 800a644:	0007883a 	mov	r3,zero
 800a648:	003ebd06 	br	800a140 <__udivdi3+0x60>
 800a64c:	0007883a 	mov	r3,zero
 800a650:	00800044 	movi	r2,1
 800a654:	003f4d06 	br	800a38c <__udivdi3+0x2ac>
 800a658:	197f942e 	bgeu	r3,r5,800a4ac <__udivdi3+0x3cc>
 800a65c:	10bfff84 	addi	r2,r2,-2
 800a660:	1dc7883a 	add	r3,r3,r23
 800a664:	003f9206 	br	800a4b0 <__udivdi3+0x3d0>
 800a668:	15bf7e2e 	bgeu	r2,r22,800a464 <__udivdi3+0x384>
 800a66c:	843fff84 	addi	r16,r16,-2
 800a670:	15c5883a 	add	r2,r2,r23
 800a674:	003f7c06 	br	800a468 <__udivdi3+0x388>
 800a678:	2807883a 	mov	r3,r5
 800a67c:	003fd206 	br	800a5c8 <__udivdi3+0x4e8>
 800a680:	102f883a 	mov	r23,r2
 800a684:	003fbc06 	br	800a578 <__udivdi3+0x498>
 800a688:	843fff84 	addi	r16,r16,-2
 800a68c:	2489883a 	add	r4,r4,r18
 800a690:	003f2506 	br	800a328 <__udivdi3+0x248>
 800a694:	843fff84 	addi	r16,r16,-2
 800a698:	1485883a 	add	r2,r2,r18
 800a69c:	003eca06 	br	800a1c8 <__udivdi3+0xe8>

0800a6a0 <__umoddi3>:
 800a6a0:	defff404 	addi	sp,sp,-48
 800a6a4:	ddc00915 	stw	r23,36(sp)
 800a6a8:	dc400315 	stw	r17,12(sp)
 800a6ac:	dc000215 	stw	r16,8(sp)
 800a6b0:	dfc00b15 	stw	ra,44(sp)
 800a6b4:	df000a15 	stw	fp,40(sp)
 800a6b8:	dd800815 	stw	r22,32(sp)
 800a6bc:	dd400715 	stw	r21,28(sp)
 800a6c0:	dd000615 	stw	r20,24(sp)
 800a6c4:	dcc00515 	stw	r19,20(sp)
 800a6c8:	dc800415 	stw	r18,16(sp)
 800a6cc:	2021883a 	mov	r16,r4
 800a6d0:	2823883a 	mov	r17,r5
 800a6d4:	282f883a 	mov	r23,r5
 800a6d8:	3800381e 	bne	r7,zero,800a7bc <__umoddi3+0x11c>
 800a6dc:	3027883a 	mov	r19,r6
 800a6e0:	2029883a 	mov	r20,r4
 800a6e4:	29804e2e 	bgeu	r5,r6,800a820 <__umoddi3+0x180>
 800a6e8:	00bfffd4 	movui	r2,65535
 800a6ec:	11809c36 	bltu	r2,r6,800a960 <__umoddi3+0x2c0>
 800a6f0:	00803fc4 	movi	r2,255
 800a6f4:	11813b2e 	bgeu	r2,r6,800abe4 <__umoddi3+0x544>
 800a6f8:	01400204 	movi	r5,8
 800a6fc:	2805883a 	mov	r2,r5
 800a700:	314ad83a 	srl	r5,r6,r5
 800a704:	00c200b4 	movhi	r3,2050
 800a708:	18e70404 	addi	r3,r3,-25584
 800a70c:	194b883a 	add	r5,r3,r5
 800a710:	29000003 	ldbu	r4,0(r5)
 800a714:	2089883a 	add	r4,r4,r2
 800a718:	00800804 	movi	r2,32
 800a71c:	1105c83a 	sub	r2,r2,r4
 800a720:	1000ec26 	beq	r2,zero,800aad4 <__umoddi3+0x434>
 800a724:	88a2983a 	sll	r17,r17,r2
 800a728:	8108d83a 	srl	r4,r16,r4
 800a72c:	30a6983a 	sll	r19,r6,r2
 800a730:	80a8983a 	sll	r20,r16,r2
 800a734:	1025883a 	mov	r18,r2
 800a738:	892eb03a 	or	r23,r17,r4
 800a73c:	982cd43a 	srli	r22,r19,16
 800a740:	b809883a 	mov	r4,r23
 800a744:	9d7fffcc 	andi	r21,r19,65535
 800a748:	b00b883a 	mov	r5,r22
 800a74c:	800ad540 	call	800ad54 <__umodsi3>
 800a750:	b809883a 	mov	r4,r23
 800a754:	b00b883a 	mov	r5,r22
 800a758:	1021883a 	mov	r16,r2
 800a75c:	800ad4c0 	call	800ad4c <__udivsi3>
 800a760:	8020943a 	slli	r16,r16,16
 800a764:	a00cd43a 	srli	r6,r20,16
 800a768:	1545383a 	mul	r2,r2,r21
 800a76c:	8188b03a 	or	r4,r16,r6
 800a770:	2080042e 	bgeu	r4,r2,800a784 <__umoddi3+0xe4>
 800a774:	24c9883a 	add	r4,r4,r19
 800a778:	24c00236 	bltu	r4,r19,800a784 <__umoddi3+0xe4>
 800a77c:	2080012e 	bgeu	r4,r2,800a784 <__umoddi3+0xe4>
 800a780:	24c9883a 	add	r4,r4,r19
 800a784:	20a3c83a 	sub	r17,r4,r2
 800a788:	8809883a 	mov	r4,r17
 800a78c:	b00b883a 	mov	r5,r22
 800a790:	800ad540 	call	800ad54 <__umodsi3>
 800a794:	8809883a 	mov	r4,r17
 800a798:	b00b883a 	mov	r5,r22
 800a79c:	1021883a 	mov	r16,r2
 800a7a0:	800ad4c0 	call	800ad4c <__udivsi3>
 800a7a4:	8006943a 	slli	r3,r16,16
 800a7a8:	1545383a 	mul	r2,r2,r21
 800a7ac:	a13fffcc 	andi	r4,r20,65535
 800a7b0:	1906b03a 	or	r3,r3,r4
 800a7b4:	1880532e 	bgeu	r3,r2,800a904 <__umoddi3+0x264>
 800a7b8:	00004e06 	br	800a8f4 <__umoddi3+0x254>
 800a7bc:	29c05536 	bltu	r5,r7,800a914 <__umoddi3+0x274>
 800a7c0:	00bfffd4 	movui	r2,65535
 800a7c4:	11c0612e 	bgeu	r2,r7,800a94c <__umoddi3+0x2ac>
 800a7c8:	00804034 	movhi	r2,256
 800a7cc:	10bfffc4 	addi	r2,r2,-1
 800a7d0:	11c0f82e 	bgeu	r2,r7,800abb4 <__umoddi3+0x514>
 800a7d4:	01400604 	movi	r5,24
 800a7d8:	282b883a 	mov	r21,r5
 800a7dc:	394ad83a 	srl	r5,r7,r5
 800a7e0:	00c200b4 	movhi	r3,2050
 800a7e4:	18e70404 	addi	r3,r3,-25584
 800a7e8:	194b883a 	add	r5,r3,r5
 800a7ec:	28800003 	ldbu	r2,0(r5)
 800a7f0:	00c00804 	movi	r3,32
 800a7f4:	156b883a 	add	r21,r2,r21
 800a7f8:	1d69c83a 	sub	r20,r3,r21
 800a7fc:	a000631e 	bne	r20,zero,800a98c <__umoddi3+0x2ec>
 800a800:	3c400136 	bltu	r7,r17,800a808 <__umoddi3+0x168>
 800a804:	81810436 	bltu	r16,r6,800ac18 <__umoddi3+0x578>
 800a808:	8185c83a 	sub	r2,r16,r6
 800a80c:	89e3c83a 	sub	r17,r17,r7
 800a810:	8087803a 	cmpltu	r3,r16,r2
 800a814:	88efc83a 	sub	r23,r17,r3
 800a818:	b807883a 	mov	r3,r23
 800a81c:	00003f06 	br	800a91c <__umoddi3+0x27c>
 800a820:	3000041e 	bne	r6,zero,800a834 <__umoddi3+0x194>
 800a824:	01000044 	movi	r4,1
 800a828:	000b883a 	mov	r5,zero
 800a82c:	800ad4c0 	call	800ad4c <__udivsi3>
 800a830:	1027883a 	mov	r19,r2
 800a834:	00bfffd4 	movui	r2,65535
 800a838:	14c04f2e 	bgeu	r2,r19,800a978 <__umoddi3+0x2d8>
 800a83c:	00804034 	movhi	r2,256
 800a840:	10bfffc4 	addi	r2,r2,-1
 800a844:	14c0e42e 	bgeu	r2,r19,800abd8 <__umoddi3+0x538>
 800a848:	00800604 	movi	r2,24
 800a84c:	1007883a 	mov	r3,r2
 800a850:	9884d83a 	srl	r2,r19,r2
 800a854:	010200b4 	movhi	r4,2050
 800a858:	21270404 	addi	r4,r4,-25584
 800a85c:	2085883a 	add	r2,r4,r2
 800a860:	11000003 	ldbu	r4,0(r2)
 800a864:	00800804 	movi	r2,32
 800a868:	20c7883a 	add	r3,r4,r3
 800a86c:	10c5c83a 	sub	r2,r2,r3
 800a870:	10009a1e 	bne	r2,zero,800aadc <__umoddi3+0x43c>
 800a874:	982cd43a 	srli	r22,r19,16
 800a878:	8ce3c83a 	sub	r17,r17,r19
 800a87c:	9c3fffcc 	andi	r16,r19,65535
 800a880:	0025883a 	mov	r18,zero
 800a884:	8809883a 	mov	r4,r17
 800a888:	b00b883a 	mov	r5,r22
 800a88c:	800ad540 	call	800ad54 <__umodsi3>
 800a890:	8809883a 	mov	r4,r17
 800a894:	b00b883a 	mov	r5,r22
 800a898:	102b883a 	mov	r21,r2
 800a89c:	800ad4c0 	call	800ad4c <__udivsi3>
 800a8a0:	a806943a 	slli	r3,r21,16
 800a8a4:	a008d43a 	srli	r4,r20,16
 800a8a8:	1405383a 	mul	r2,r2,r16
 800a8ac:	190cb03a 	or	r6,r3,r4
 800a8b0:	3080032e 	bgeu	r6,r2,800a8c0 <__umoddi3+0x220>
 800a8b4:	34cd883a 	add	r6,r6,r19
 800a8b8:	34c00136 	bltu	r6,r19,800a8c0 <__umoddi3+0x220>
 800a8bc:	3080d436 	bltu	r6,r2,800ac10 <__umoddi3+0x570>
 800a8c0:	30abc83a 	sub	r21,r6,r2
 800a8c4:	a809883a 	mov	r4,r21
 800a8c8:	b00b883a 	mov	r5,r22
 800a8cc:	800ad540 	call	800ad54 <__umodsi3>
 800a8d0:	1023883a 	mov	r17,r2
 800a8d4:	a809883a 	mov	r4,r21
 800a8d8:	b00b883a 	mov	r5,r22
 800a8dc:	800ad4c0 	call	800ad4c <__udivsi3>
 800a8e0:	8822943a 	slli	r17,r17,16
 800a8e4:	1405383a 	mul	r2,r2,r16
 800a8e8:	a13fffcc 	andi	r4,r20,65535
 800a8ec:	8906b03a 	or	r3,r17,r4
 800a8f0:	1880042e 	bgeu	r3,r2,800a904 <__umoddi3+0x264>
 800a8f4:	1cc7883a 	add	r3,r3,r19
 800a8f8:	1cc00236 	bltu	r3,r19,800a904 <__umoddi3+0x264>
 800a8fc:	1880012e 	bgeu	r3,r2,800a904 <__umoddi3+0x264>
 800a900:	1cc7883a 	add	r3,r3,r19
 800a904:	1887c83a 	sub	r3,r3,r2
 800a908:	1c84d83a 	srl	r2,r3,r18
 800a90c:	0007883a 	mov	r3,zero
 800a910:	00000206 	br	800a91c <__umoddi3+0x27c>
 800a914:	2005883a 	mov	r2,r4
 800a918:	2807883a 	mov	r3,r5
 800a91c:	dfc00b17 	ldw	ra,44(sp)
 800a920:	df000a17 	ldw	fp,40(sp)
 800a924:	ddc00917 	ldw	r23,36(sp)
 800a928:	dd800817 	ldw	r22,32(sp)
 800a92c:	dd400717 	ldw	r21,28(sp)
 800a930:	dd000617 	ldw	r20,24(sp)
 800a934:	dcc00517 	ldw	r19,20(sp)
 800a938:	dc800417 	ldw	r18,16(sp)
 800a93c:	dc400317 	ldw	r17,12(sp)
 800a940:	dc000217 	ldw	r16,8(sp)
 800a944:	dec00c04 	addi	sp,sp,48
 800a948:	f800283a 	ret
 800a94c:	00803fc4 	movi	r2,255
 800a950:	11c0952e 	bgeu	r2,r7,800aba8 <__umoddi3+0x508>
 800a954:	01400204 	movi	r5,8
 800a958:	282b883a 	mov	r21,r5
 800a95c:	003f9f06 	br	800a7dc <__umoddi3+0x13c>
 800a960:	00804034 	movhi	r2,256
 800a964:	10bfffc4 	addi	r2,r2,-1
 800a968:	1180952e 	bgeu	r2,r6,800abc0 <__umoddi3+0x520>
 800a96c:	01400604 	movi	r5,24
 800a970:	2805883a 	mov	r2,r5
 800a974:	003f6206 	br	800a700 <__umoddi3+0x60>
 800a978:	00803fc4 	movi	r2,255
 800a97c:	14c0932e 	bgeu	r2,r19,800abcc <__umoddi3+0x52c>
 800a980:	00800204 	movi	r2,8
 800a984:	1007883a 	mov	r3,r2
 800a988:	003fb106 	br	800a850 <__umoddi3+0x1b0>
 800a98c:	3548d83a 	srl	r4,r6,r21
 800a990:	3d0e983a 	sll	r7,r7,r20
 800a994:	8d10983a 	sll	r8,r17,r20
 800a998:	8d6cd83a 	srl	r22,r17,r21
 800a99c:	3922b03a 	or	r17,r7,r4
 800a9a0:	882ed43a 	srli	r23,r17,16
 800a9a4:	8564d83a 	srl	r18,r16,r21
 800a9a8:	b009883a 	mov	r4,r22
 800a9ac:	b80b883a 	mov	r5,r23
 800a9b0:	44a4b03a 	or	r18,r8,r18
 800a9b4:	3526983a 	sll	r19,r6,r20
 800a9b8:	800ad540 	call	800ad54 <__umodsi3>
 800a9bc:	b009883a 	mov	r4,r22
 800a9c0:	b80b883a 	mov	r5,r23
 800a9c4:	1039883a 	mov	fp,r2
 800a9c8:	800ad4c0 	call	800ad4c <__udivsi3>
 800a9cc:	102d883a 	mov	r22,r2
 800a9d0:	8a3fffcc 	andi	r8,r17,65535
 800a9d4:	e004943a 	slli	r2,fp,16
 800a9d8:	900cd43a 	srli	r6,r18,16
 800a9dc:	b239383a 	mul	fp,r22,r8
 800a9e0:	8520983a 	sll	r16,r16,r20
 800a9e4:	118ab03a 	or	r5,r2,r6
 800a9e8:	2f00042e 	bgeu	r5,fp,800a9fc <__umoddi3+0x35c>
 800a9ec:	2c4b883a 	add	r5,r5,r17
 800a9f0:	b0bfffc4 	addi	r2,r22,-1
 800a9f4:	2c40822e 	bgeu	r5,r17,800ac00 <__umoddi3+0x560>
 800a9f8:	102d883a 	mov	r22,r2
 800a9fc:	2f39c83a 	sub	fp,r5,fp
 800aa00:	e009883a 	mov	r4,fp
 800aa04:	b80b883a 	mov	r5,r23
 800aa08:	da000115 	stw	r8,4(sp)
 800aa0c:	800ad540 	call	800ad54 <__umodsi3>
 800aa10:	e009883a 	mov	r4,fp
 800aa14:	b80b883a 	mov	r5,r23
 800aa18:	d8800015 	stw	r2,0(sp)
 800aa1c:	800ad4c0 	call	800ad4c <__udivsi3>
 800aa20:	d9800017 	ldw	r6,0(sp)
 800aa24:	da000117 	ldw	r8,4(sp)
 800aa28:	94bfffcc 	andi	r18,r18,65535
 800aa2c:	300c943a 	slli	r6,r6,16
 800aa30:	1209383a 	mul	r4,r2,r8
 800aa34:	3490b03a 	or	r8,r6,r18
 800aa38:	4100042e 	bgeu	r8,r4,800aa4c <__umoddi3+0x3ac>
 800aa3c:	4451883a 	add	r8,r8,r17
 800aa40:	10ffffc4 	addi	r3,r2,-1
 800aa44:	44406a2e 	bgeu	r8,r17,800abf0 <__umoddi3+0x550>
 800aa48:	1805883a 	mov	r2,r3
 800aa4c:	b012943a 	slli	r9,r22,16
 800aa50:	9abfffcc 	andi	r10,r19,65535
 800aa54:	980ed43a 	srli	r7,r19,16
 800aa58:	124ab03a 	or	r5,r2,r9
 800aa5c:	2a7fffcc 	andi	r9,r5,65535
 800aa60:	280ad43a 	srli	r5,r5,16
 800aa64:	4a8d383a 	mul	r6,r9,r10
 800aa68:	49d3383a 	mul	r9,r9,r7
 800aa6c:	2a95383a 	mul	r10,r5,r10
 800aa70:	3004d43a 	srli	r2,r6,16
 800aa74:	4111c83a 	sub	r8,r8,r4
 800aa78:	5253883a 	add	r9,r10,r9
 800aa7c:	4893883a 	add	r9,r9,r2
 800aa80:	29cb383a 	mul	r5,r5,r7
 800aa84:	4a80022e 	bgeu	r9,r10,800aa90 <__umoddi3+0x3f0>
 800aa88:	00800074 	movhi	r2,1
 800aa8c:	288b883a 	add	r5,r5,r2
 800aa90:	4808d43a 	srli	r4,r9,16
 800aa94:	4812943a 	slli	r9,r9,16
 800aa98:	31bfffcc 	andi	r6,r6,65535
 800aa9c:	290b883a 	add	r5,r5,r4
 800aaa0:	498d883a 	add	r6,r9,r6
 800aaa4:	41403a36 	bltu	r8,r5,800ab90 <__umoddi3+0x4f0>
 800aaa8:	41405d26 	beq	r8,r5,800ac20 <__umoddi3+0x580>
 800aaac:	4149c83a 	sub	r4,r8,r5
 800aab0:	300f883a 	mov	r7,r6
 800aab4:	81cfc83a 	sub	r7,r16,r7
 800aab8:	81c7803a 	cmpltu	r3,r16,r7
 800aabc:	20c7c83a 	sub	r3,r4,r3
 800aac0:	1d44983a 	sll	r2,r3,r21
 800aac4:	3d0ed83a 	srl	r7,r7,r20
 800aac8:	1d06d83a 	srl	r3,r3,r20
 800aacc:	11c4b03a 	or	r2,r2,r7
 800aad0:	003f9206 	br	800a91c <__umoddi3+0x27c>
 800aad4:	0025883a 	mov	r18,zero
 800aad8:	003f1806 	br	800a73c <__umoddi3+0x9c>
 800aadc:	98a6983a 	sll	r19,r19,r2
 800aae0:	88e8d83a 	srl	r20,r17,r3
 800aae4:	80c6d83a 	srl	r3,r16,r3
 800aae8:	982cd43a 	srli	r22,r19,16
 800aaec:	88a2983a 	sll	r17,r17,r2
 800aaf0:	a009883a 	mov	r4,r20
 800aaf4:	b00b883a 	mov	r5,r22
 800aaf8:	88eab03a 	or	r21,r17,r3
 800aafc:	1025883a 	mov	r18,r2
 800ab00:	800ad540 	call	800ad54 <__umodsi3>
 800ab04:	a009883a 	mov	r4,r20
 800ab08:	b00b883a 	mov	r5,r22
 800ab0c:	1023883a 	mov	r17,r2
 800ab10:	800ad4c0 	call	800ad4c <__udivsi3>
 800ab14:	9f3fffcc 	andi	fp,r19,65535
 800ab18:	8822943a 	slli	r17,r17,16
 800ab1c:	a80ad43a 	srli	r5,r21,16
 800ab20:	1705383a 	mul	r2,r2,fp
 800ab24:	84a8983a 	sll	r20,r16,r18
 800ab28:	8948b03a 	or	r4,r17,r5
 800ab2c:	2080042e 	bgeu	r4,r2,800ab40 <__umoddi3+0x4a0>
 800ab30:	24c9883a 	add	r4,r4,r19
 800ab34:	24c00236 	bltu	r4,r19,800ab40 <__umoddi3+0x4a0>
 800ab38:	2080012e 	bgeu	r4,r2,800ab40 <__umoddi3+0x4a0>
 800ab3c:	24c9883a 	add	r4,r4,r19
 800ab40:	20afc83a 	sub	r23,r4,r2
 800ab44:	b809883a 	mov	r4,r23
 800ab48:	b00b883a 	mov	r5,r22
 800ab4c:	800ad540 	call	800ad54 <__umodsi3>
 800ab50:	1023883a 	mov	r17,r2
 800ab54:	b809883a 	mov	r4,r23
 800ab58:	b00b883a 	mov	r5,r22
 800ab5c:	800ad4c0 	call	800ad4c <__udivsi3>
 800ab60:	8822943a 	slli	r17,r17,16
 800ab64:	1705383a 	mul	r2,r2,fp
 800ab68:	a93fffcc 	andi	r4,r21,65535
 800ab6c:	8908b03a 	or	r4,r17,r4
 800ab70:	2080042e 	bgeu	r4,r2,800ab84 <__umoddi3+0x4e4>
 800ab74:	24c9883a 	add	r4,r4,r19
 800ab78:	24c00236 	bltu	r4,r19,800ab84 <__umoddi3+0x4e4>
 800ab7c:	2080012e 	bgeu	r4,r2,800ab84 <__umoddi3+0x4e4>
 800ab80:	24c9883a 	add	r4,r4,r19
 800ab84:	20a3c83a 	sub	r17,r4,r2
 800ab88:	e021883a 	mov	r16,fp
 800ab8c:	003f3d06 	br	800a884 <__umoddi3+0x1e4>
 800ab90:	34cfc83a 	sub	r7,r6,r19
 800ab94:	2c4bc83a 	sub	r5,r5,r17
 800ab98:	31cd803a 	cmpltu	r6,r6,r7
 800ab9c:	298dc83a 	sub	r6,r5,r6
 800aba0:	4189c83a 	sub	r4,r8,r6
 800aba4:	003fc306 	br	800aab4 <__umoddi3+0x414>
 800aba8:	000b883a 	mov	r5,zero
 800abac:	002b883a 	mov	r21,zero
 800abb0:	003f0a06 	br	800a7dc <__umoddi3+0x13c>
 800abb4:	01400404 	movi	r5,16
 800abb8:	282b883a 	mov	r21,r5
 800abbc:	003f0706 	br	800a7dc <__umoddi3+0x13c>
 800abc0:	01400404 	movi	r5,16
 800abc4:	2805883a 	mov	r2,r5
 800abc8:	003ecd06 	br	800a700 <__umoddi3+0x60>
 800abcc:	0005883a 	mov	r2,zero
 800abd0:	0007883a 	mov	r3,zero
 800abd4:	003f1e06 	br	800a850 <__umoddi3+0x1b0>
 800abd8:	00800404 	movi	r2,16
 800abdc:	1007883a 	mov	r3,r2
 800abe0:	003f1b06 	br	800a850 <__umoddi3+0x1b0>
 800abe4:	000b883a 	mov	r5,zero
 800abe8:	0005883a 	mov	r2,zero
 800abec:	003ec406 	br	800a700 <__umoddi3+0x60>
 800abf0:	413f952e 	bgeu	r8,r4,800aa48 <__umoddi3+0x3a8>
 800abf4:	10bfff84 	addi	r2,r2,-2
 800abf8:	4451883a 	add	r8,r8,r17
 800abfc:	003f9306 	br	800aa4c <__umoddi3+0x3ac>
 800ac00:	2f3f7d2e 	bgeu	r5,fp,800a9f8 <__umoddi3+0x358>
 800ac04:	b5bfff84 	addi	r22,r22,-2
 800ac08:	2c4b883a 	add	r5,r5,r17
 800ac0c:	003f7b06 	br	800a9fc <__umoddi3+0x35c>
 800ac10:	34cd883a 	add	r6,r6,r19
 800ac14:	003f2a06 	br	800a8c0 <__umoddi3+0x220>
 800ac18:	8005883a 	mov	r2,r16
 800ac1c:	003efe06 	br	800a818 <__umoddi3+0x178>
 800ac20:	81bfdb36 	bltu	r16,r6,800ab90 <__umoddi3+0x4f0>
 800ac24:	300f883a 	mov	r7,r6
 800ac28:	0009883a 	mov	r4,zero
 800ac2c:	003fa106 	br	800aab4 <__umoddi3+0x414>

0800ac30 <udivmodsi4>:
 800ac30:	2900182e 	bgeu	r5,r4,800ac94 <udivmodsi4+0x64>
 800ac34:	28001716 	blt	r5,zero,800ac94 <udivmodsi4+0x64>
 800ac38:	00800804 	movi	r2,32
 800ac3c:	00c00044 	movi	r3,1
 800ac40:	00000206 	br	800ac4c <udivmodsi4+0x1c>
 800ac44:	10001126 	beq	r2,zero,800ac8c <udivmodsi4+0x5c>
 800ac48:	28000516 	blt	r5,zero,800ac60 <udivmodsi4+0x30>
 800ac4c:	294b883a 	add	r5,r5,r5
 800ac50:	10bfffc4 	addi	r2,r2,-1
 800ac54:	18c7883a 	add	r3,r3,r3
 800ac58:	293ffa36 	bltu	r5,r4,800ac44 <udivmodsi4+0x14>
 800ac5c:	18000b26 	beq	r3,zero,800ac8c <udivmodsi4+0x5c>
 800ac60:	0005883a 	mov	r2,zero
 800ac64:	21400236 	bltu	r4,r5,800ac70 <udivmodsi4+0x40>
 800ac68:	2149c83a 	sub	r4,r4,r5
 800ac6c:	10c4b03a 	or	r2,r2,r3
 800ac70:	1806d07a 	srli	r3,r3,1
 800ac74:	280ad07a 	srli	r5,r5,1
 800ac78:	183ffa1e 	bne	r3,zero,800ac64 <udivmodsi4+0x34>
 800ac7c:	3000011e 	bne	r6,zero,800ac84 <udivmodsi4+0x54>
 800ac80:	f800283a 	ret
 800ac84:	2005883a 	mov	r2,r4
 800ac88:	f800283a 	ret
 800ac8c:	0005883a 	mov	r2,zero
 800ac90:	003ffa06 	br	800ac7c <udivmodsi4+0x4c>
 800ac94:	00c00044 	movi	r3,1
 800ac98:	003ff106 	br	800ac60 <udivmodsi4+0x30>

0800ac9c <__divsi3>:
 800ac9c:	defffe04 	addi	sp,sp,-8
 800aca0:	dfc00115 	stw	ra,4(sp)
 800aca4:	dc000015 	stw	r16,0(sp)
 800aca8:	20000b16 	blt	r4,zero,800acd8 <__divsi3+0x3c>
 800acac:	0021883a 	mov	r16,zero
 800acb0:	28000c16 	blt	r5,zero,800ace4 <__divsi3+0x48>
 800acb4:	000d883a 	mov	r6,zero
 800acb8:	800ac300 	call	800ac30 <udivmodsi4>
 800acbc:	0407c83a 	sub	r3,zero,r16
 800acc0:	1884f03a 	xor	r2,r3,r2
 800acc4:	1405883a 	add	r2,r2,r16
 800acc8:	dfc00117 	ldw	ra,4(sp)
 800accc:	dc000017 	ldw	r16,0(sp)
 800acd0:	dec00204 	addi	sp,sp,8
 800acd4:	f800283a 	ret
 800acd8:	0109c83a 	sub	r4,zero,r4
 800acdc:	04000044 	movi	r16,1
 800ace0:	283ff40e 	bge	r5,zero,800acb4 <__divsi3+0x18>
 800ace4:	014bc83a 	sub	r5,zero,r5
 800ace8:	8400005c 	xori	r16,r16,1
 800acec:	003ff106 	br	800acb4 <__divsi3+0x18>

0800acf0 <__modsi3>:
 800acf0:	defffd04 	addi	sp,sp,-12
 800acf4:	dfc00215 	stw	ra,8(sp)
 800acf8:	dc400115 	stw	r17,4(sp)
 800acfc:	dc000015 	stw	r16,0(sp)
 800ad00:	20000c16 	blt	r4,zero,800ad34 <__modsi3+0x44>
 800ad04:	0023883a 	mov	r17,zero
 800ad08:	0021883a 	mov	r16,zero
 800ad0c:	28000d16 	blt	r5,zero,800ad44 <__modsi3+0x54>
 800ad10:	01800044 	movi	r6,1
 800ad14:	800ac300 	call	800ac30 <udivmodsi4>
 800ad18:	1404f03a 	xor	r2,r2,r16
 800ad1c:	8885883a 	add	r2,r17,r2
 800ad20:	dfc00217 	ldw	ra,8(sp)
 800ad24:	dc400117 	ldw	r17,4(sp)
 800ad28:	dc000017 	ldw	r16,0(sp)
 800ad2c:	dec00304 	addi	sp,sp,12
 800ad30:	f800283a 	ret
 800ad34:	0109c83a 	sub	r4,zero,r4
 800ad38:	04400044 	movi	r17,1
 800ad3c:	043fffc4 	movi	r16,-1
 800ad40:	283ff30e 	bge	r5,zero,800ad10 <__modsi3+0x20>
 800ad44:	014bc83a 	sub	r5,zero,r5
 800ad48:	003ff106 	br	800ad10 <__modsi3+0x20>

0800ad4c <__udivsi3>:
 800ad4c:	000d883a 	mov	r6,zero
 800ad50:	800ac301 	jmpi	800ac30 <udivmodsi4>

0800ad54 <__umodsi3>:
 800ad54:	01800044 	movi	r6,1
 800ad58:	800ac301 	jmpi	800ac30 <udivmodsi4>

0800ad5c <__adddf3>:
 800ad5c:	02000434 	movhi	r8,16
 800ad60:	423fffc4 	addi	r8,r8,-1
 800ad64:	defffb04 	addi	sp,sp,-20
 800ad68:	2a12703a 	and	r9,r5,r8
 800ad6c:	2806d7fa 	srli	r3,r5,31
 800ad70:	3a10703a 	and	r8,r7,r8
 800ad74:	3804d53a 	srli	r2,r7,20
 800ad78:	3014d77a 	srli	r10,r6,29
 800ad7c:	dc000015 	stw	r16,0(sp)
 800ad80:	481290fa 	slli	r9,r9,3
 800ad84:	2820d53a 	srli	r16,r5,20
 800ad88:	401090fa 	slli	r8,r8,3
 800ad8c:	200ad77a 	srli	r5,r4,29
 800ad90:	380ed7fa 	srli	r7,r7,31
 800ad94:	dc800215 	stw	r18,8(sp)
 800ad98:	dc400115 	stw	r17,4(sp)
 800ad9c:	dfc00415 	stw	ra,16(sp)
 800ada0:	dcc00315 	stw	r19,12(sp)
 800ada4:	1c803fcc 	andi	r18,r3,255
 800ada8:	8401ffcc 	andi	r16,r16,2047
 800adac:	494ab03a 	or	r5,r9,r5
 800adb0:	202290fa 	slli	r17,r4,3
 800adb4:	1081ffcc 	andi	r2,r2,2047
 800adb8:	4290b03a 	or	r8,r8,r10
 800adbc:	300c90fa 	slli	r6,r6,3
 800adc0:	91c07026 	beq	r18,r7,800af84 <__adddf3+0x228>
 800adc4:	8087c83a 	sub	r3,r16,r2
 800adc8:	00c0b30e 	bge	zero,r3,800b098 <__adddf3+0x33c>
 800adcc:	10002a1e 	bne	r2,zero,800ae78 <__adddf3+0x11c>
 800add0:	4184b03a 	or	r2,r8,r6
 800add4:	1000991e 	bne	r2,zero,800b03c <__adddf3+0x2e0>
 800add8:	888001cc 	andi	r2,r17,7
 800addc:	10005b26 	beq	r2,zero,800af4c <__adddf3+0x1f0>
 800ade0:	88c003cc 	andi	r3,r17,15
 800ade4:	00800104 	movi	r2,4
 800ade8:	18805826 	beq	r3,r2,800af4c <__adddf3+0x1f0>
 800adec:	89800104 	addi	r6,r17,4
 800adf0:	3463803a 	cmpltu	r17,r6,r17
 800adf4:	2c4b883a 	add	r5,r5,r17
 800adf8:	2880202c 	andhi	r2,r5,128
 800adfc:	9007883a 	mov	r3,r18
 800ae00:	3023883a 	mov	r17,r6
 800ae04:	10005426 	beq	r2,zero,800af58 <__adddf3+0x1fc>
 800ae08:	84000044 	addi	r16,r16,1
 800ae0c:	0081ffc4 	movi	r2,2047
 800ae10:	8080c126 	beq	r16,r2,800b118 <__adddf3+0x3bc>
 800ae14:	013fe034 	movhi	r4,65408
 800ae18:	213fffc4 	addi	r4,r4,-1
 800ae1c:	290a703a 	and	r5,r5,r4
 800ae20:	2804977a 	slli	r2,r5,29
 800ae24:	280a927a 	slli	r5,r5,9
 800ae28:	8822d0fa 	srli	r17,r17,3
 800ae2c:	8401ffcc 	andi	r16,r16,2047
 800ae30:	2808d33a 	srli	r4,r5,12
 800ae34:	1444b03a 	or	r2,r2,r17
 800ae38:	8401ffcc 	andi	r16,r16,2047
 800ae3c:	800a953a 	slli	r5,r16,20
 800ae40:	18c03fcc 	andi	r3,r3,255
 800ae44:	04000434 	movhi	r16,16
 800ae48:	180697fa 	slli	r3,r3,31
 800ae4c:	843fffc4 	addi	r16,r16,-1
 800ae50:	2420703a 	and	r16,r4,r16
 800ae54:	8160b03a 	or	r16,r16,r5
 800ae58:	80c6b03a 	or	r3,r16,r3
 800ae5c:	dfc00417 	ldw	ra,16(sp)
 800ae60:	dcc00317 	ldw	r19,12(sp)
 800ae64:	dc800217 	ldw	r18,8(sp)
 800ae68:	dc400117 	ldw	r17,4(sp)
 800ae6c:	dc000017 	ldw	r16,0(sp)
 800ae70:	dec00504 	addi	sp,sp,20
 800ae74:	f800283a 	ret
 800ae78:	0081ffc4 	movi	r2,2047
 800ae7c:	80bfd626 	beq	r16,r2,800add8 <__adddf3+0x7c>
 800ae80:	42002034 	orhi	r8,r8,128
 800ae84:	00800e04 	movi	r2,56
 800ae88:	10c0a616 	blt	r2,r3,800b124 <__adddf3+0x3c8>
 800ae8c:	008007c4 	movi	r2,31
 800ae90:	10c0c916 	blt	r2,r3,800b1b8 <__adddf3+0x45c>
 800ae94:	00800804 	movi	r2,32
 800ae98:	10c5c83a 	sub	r2,r2,r3
 800ae9c:	408e983a 	sll	r7,r8,r2
 800aea0:	30c8d83a 	srl	r4,r6,r3
 800aea4:	3084983a 	sll	r2,r6,r2
 800aea8:	40c6d83a 	srl	r3,r8,r3
 800aeac:	390cb03a 	or	r6,r7,r4
 800aeb0:	1004c03a 	cmpne	r2,r2,zero
 800aeb4:	308cb03a 	or	r6,r6,r2
 800aeb8:	898dc83a 	sub	r6,r17,r6
 800aebc:	89a3803a 	cmpltu	r17,r17,r6
 800aec0:	28cbc83a 	sub	r5,r5,r3
 800aec4:	2c4bc83a 	sub	r5,r5,r17
 800aec8:	3023883a 	mov	r17,r6
 800aecc:	2880202c 	andhi	r2,r5,128
 800aed0:	10006d26 	beq	r2,zero,800b088 <__adddf3+0x32c>
 800aed4:	04c02034 	movhi	r19,128
 800aed8:	9cffffc4 	addi	r19,r19,-1
 800aedc:	2ce6703a 	and	r19,r5,r19
 800aee0:	98007e26 	beq	r19,zero,800b0dc <__adddf3+0x380>
 800aee4:	9809883a 	mov	r4,r19
 800aee8:	800d2f80 	call	800d2f8 <__clzsi2>
 800aeec:	10fffe04 	addi	r3,r2,-8
 800aef0:	010007c4 	movi	r4,31
 800aef4:	20c07f16 	blt	r4,r3,800b0f4 <__adddf3+0x398>
 800aef8:	01400a04 	movi	r5,40
 800aefc:	2885c83a 	sub	r2,r5,r2
 800af00:	888ad83a 	srl	r5,r17,r2
 800af04:	98e6983a 	sll	r19,r19,r3
 800af08:	88e2983a 	sll	r17,r17,r3
 800af0c:	2ce6b03a 	or	r19,r5,r19
 800af10:	1c007c16 	blt	r3,r16,800b104 <__adddf3+0x3a8>
 800af14:	1c21c83a 	sub	r16,r3,r16
 800af18:	81400044 	addi	r5,r16,1
 800af1c:	00c007c4 	movi	r3,31
 800af20:	19409816 	blt	r3,r5,800b184 <__adddf3+0x428>
 800af24:	1c21c83a 	sub	r16,r3,r16
 800af28:	8c08983a 	sll	r4,r17,r16
 800af2c:	8946d83a 	srl	r3,r17,r5
 800af30:	9c20983a 	sll	r16,r19,r16
 800af34:	2008c03a 	cmpne	r4,r4,zero
 800af38:	994ad83a 	srl	r5,r19,r5
 800af3c:	1c06b03a 	or	r3,r3,r16
 800af40:	1922b03a 	or	r17,r3,r4
 800af44:	0021883a 	mov	r16,zero
 800af48:	003fa306 	br	800add8 <__adddf3+0x7c>
 800af4c:	2880202c 	andhi	r2,r5,128
 800af50:	9007883a 	mov	r3,r18
 800af54:	103fac1e 	bne	r2,zero,800ae08 <__adddf3+0xac>
 800af58:	2804977a 	slli	r2,r5,29
 800af5c:	8822d0fa 	srli	r17,r17,3
 800af60:	0101ffc4 	movi	r4,2047
 800af64:	280ad0fa 	srli	r5,r5,3
 800af68:	1444b03a 	or	r2,r2,r17
 800af6c:	81002c26 	beq	r16,r4,800b020 <__adddf3+0x2c4>
 800af70:	8120703a 	and	r16,r16,r4
 800af74:	01000434 	movhi	r4,16
 800af78:	213fffc4 	addi	r4,r4,-1
 800af7c:	2908703a 	and	r4,r5,r4
 800af80:	003fad06 	br	800ae38 <__adddf3+0xdc>
 800af84:	8089c83a 	sub	r4,r16,r2
 800af88:	01006a0e 	bge	zero,r4,800b134 <__adddf3+0x3d8>
 800af8c:	10003326 	beq	r2,zero,800b05c <__adddf3+0x300>
 800af90:	0081ffc4 	movi	r2,2047
 800af94:	80bf9026 	beq	r16,r2,800add8 <__adddf3+0x7c>
 800af98:	42002034 	orhi	r8,r8,128
 800af9c:	00800e04 	movi	r2,56
 800afa0:	1100b116 	blt	r2,r4,800b268 <__adddf3+0x50c>
 800afa4:	008007c4 	movi	r2,31
 800afa8:	1100e216 	blt	r2,r4,800b334 <__adddf3+0x5d8>
 800afac:	00800804 	movi	r2,32
 800afb0:	1105c83a 	sub	r2,r2,r4
 800afb4:	4092983a 	sll	r9,r8,r2
 800afb8:	310ed83a 	srl	r7,r6,r4
 800afbc:	3084983a 	sll	r2,r6,r2
 800afc0:	4110d83a 	srl	r8,r8,r4
 800afc4:	49ccb03a 	or	r6,r9,r7
 800afc8:	1004c03a 	cmpne	r2,r2,zero
 800afcc:	308cb03a 	or	r6,r6,r2
 800afd0:	344d883a 	add	r6,r6,r17
 800afd4:	3463803a 	cmpltu	r17,r6,r17
 800afd8:	414b883a 	add	r5,r8,r5
 800afdc:	2c4b883a 	add	r5,r5,r17
 800afe0:	3023883a 	mov	r17,r6
 800afe4:	2880202c 	andhi	r2,r5,128
 800afe8:	10002726 	beq	r2,zero,800b088 <__adddf3+0x32c>
 800afec:	84000044 	addi	r16,r16,1
 800aff0:	0081ffc4 	movi	r2,2047
 800aff4:	8080ae26 	beq	r16,r2,800b2b0 <__adddf3+0x554>
 800aff8:	00bfe034 	movhi	r2,65408
 800affc:	10bfffc4 	addi	r2,r2,-1
 800b000:	288a703a 	and	r5,r5,r2
 800b004:	880cd07a 	srli	r6,r17,1
 800b008:	280897fa 	slli	r4,r5,31
 800b00c:	88c0004c 	andi	r3,r17,1
 800b010:	30e2b03a 	or	r17,r6,r3
 800b014:	280ad07a 	srli	r5,r5,1
 800b018:	8922b03a 	or	r17,r17,r4
 800b01c:	003f6e06 	br	800add8 <__adddf3+0x7c>
 800b020:	1148b03a 	or	r4,r2,r5
 800b024:	20003c26 	beq	r4,zero,800b118 <__adddf3+0x3bc>
 800b028:	29000234 	orhi	r4,r5,8
 800b02c:	01400434 	movhi	r5,16
 800b030:	297fffc4 	addi	r5,r5,-1
 800b034:	2148703a 	and	r4,r4,r5
 800b038:	003f7f06 	br	800ae38 <__adddf3+0xdc>
 800b03c:	18ffffc4 	addi	r3,r3,-1
 800b040:	18004d1e 	bne	r3,zero,800b178 <__adddf3+0x41c>
 800b044:	898dc83a 	sub	r6,r17,r6
 800b048:	89a3803a 	cmpltu	r17,r17,r6
 800b04c:	2a0bc83a 	sub	r5,r5,r8
 800b050:	2c4bc83a 	sub	r5,r5,r17
 800b054:	3023883a 	mov	r17,r6
 800b058:	003f9c06 	br	800aecc <__adddf3+0x170>
 800b05c:	4184b03a 	or	r2,r8,r6
 800b060:	103f5d26 	beq	r2,zero,800add8 <__adddf3+0x7c>
 800b064:	213fffc4 	addi	r4,r4,-1
 800b068:	203fd926 	beq	r4,zero,800afd0 <__adddf3+0x274>
 800b06c:	0081ffc4 	movi	r2,2047
 800b070:	80bfca1e 	bne	r16,r2,800af9c <__adddf3+0x240>
 800b074:	003f5806 	br	800add8 <__adddf3+0x7c>
 800b078:	10c8b03a 	or	r4,r2,r3
 800b07c:	20008b26 	beq	r4,zero,800b2ac <__adddf3+0x550>
 800b080:	100b883a 	mov	r5,r2
 800b084:	1823883a 	mov	r17,r3
 800b088:	888001cc 	andi	r2,r17,7
 800b08c:	103f541e 	bne	r2,zero,800ade0 <__adddf3+0x84>
 800b090:	9007883a 	mov	r3,r18
 800b094:	003fb006 	br	800af58 <__adddf3+0x1fc>
 800b098:	1800531e 	bne	r3,zero,800b1e8 <__adddf3+0x48c>
 800b09c:	80800044 	addi	r2,r16,1
 800b0a0:	1081ffcc 	andi	r2,r2,2047
 800b0a4:	00c00044 	movi	r3,1
 800b0a8:	1880990e 	bge	r3,r2,800b310 <__adddf3+0x5b4>
 800b0ac:	8985c83a 	sub	r2,r17,r6
 800b0b0:	8887803a 	cmpltu	r3,r17,r2
 800b0b4:	2a27c83a 	sub	r19,r5,r8
 800b0b8:	98e7c83a 	sub	r19,r19,r3
 800b0bc:	98c0202c 	andhi	r3,r19,128
 800b0c0:	18006226 	beq	r3,zero,800b24c <__adddf3+0x4f0>
 800b0c4:	3463c83a 	sub	r17,r6,r17
 800b0c8:	4151c83a 	sub	r8,r8,r5
 800b0cc:	344d803a 	cmpltu	r6,r6,r17
 800b0d0:	41a7c83a 	sub	r19,r8,r6
 800b0d4:	3825883a 	mov	r18,r7
 800b0d8:	983f821e 	bne	r19,zero,800aee4 <__adddf3+0x188>
 800b0dc:	8809883a 	mov	r4,r17
 800b0e0:	800d2f80 	call	800d2f8 <__clzsi2>
 800b0e4:	10800804 	addi	r2,r2,32
 800b0e8:	10fffe04 	addi	r3,r2,-8
 800b0ec:	010007c4 	movi	r4,31
 800b0f0:	20ff810e 	bge	r4,r3,800aef8 <__adddf3+0x19c>
 800b0f4:	14fff604 	addi	r19,r2,-40
 800b0f8:	8ce6983a 	sll	r19,r17,r19
 800b0fc:	0023883a 	mov	r17,zero
 800b100:	1c3f840e 	bge	r3,r16,800af14 <__adddf3+0x1b8>
 800b104:	017fe034 	movhi	r5,65408
 800b108:	297fffc4 	addi	r5,r5,-1
 800b10c:	80e1c83a 	sub	r16,r16,r3
 800b110:	994a703a 	and	r5,r19,r5
 800b114:	003f3006 	br	800add8 <__adddf3+0x7c>
 800b118:	0009883a 	mov	r4,zero
 800b11c:	0005883a 	mov	r2,zero
 800b120:	003f4506 	br	800ae38 <__adddf3+0xdc>
 800b124:	418cb03a 	or	r6,r8,r6
 800b128:	300cc03a 	cmpne	r6,r6,zero
 800b12c:	0007883a 	mov	r3,zero
 800b130:	003f6106 	br	800aeb8 <__adddf3+0x15c>
 800b134:	2000921e 	bne	r4,zero,800b380 <__adddf3+0x624>
 800b138:	80800044 	addi	r2,r16,1
 800b13c:	11c1ffcc 	andi	r7,r2,2047
 800b140:	01000044 	movi	r4,1
 800b144:	21c0610e 	bge	r4,r7,800b2cc <__adddf3+0x570>
 800b148:	0101ffc4 	movi	r4,2047
 800b14c:	1100a326 	beq	r2,r4,800b3dc <__adddf3+0x680>
 800b150:	344d883a 	add	r6,r6,r17
 800b154:	3463803a 	cmpltu	r17,r6,r17
 800b158:	414b883a 	add	r5,r8,r5
 800b15c:	2c4b883a 	add	r5,r5,r17
 800b160:	282297fa 	slli	r17,r5,31
 800b164:	300cd07a 	srli	r6,r6,1
 800b168:	280ad07a 	srli	r5,r5,1
 800b16c:	1021883a 	mov	r16,r2
 800b170:	89a2b03a 	or	r17,r17,r6
 800b174:	003f1806 	br	800add8 <__adddf3+0x7c>
 800b178:	0081ffc4 	movi	r2,2047
 800b17c:	80bf411e 	bne	r16,r2,800ae84 <__adddf3+0x128>
 800b180:	003f1506 	br	800add8 <__adddf3+0x7c>
 800b184:	80bff844 	addi	r2,r16,-31
 800b188:	00c00804 	movi	r3,32
 800b18c:	9884d83a 	srl	r2,r19,r2
 800b190:	28c04a26 	beq	r5,r3,800b2bc <__adddf3+0x560>
 800b194:	00c00fc4 	movi	r3,63
 800b198:	1c21c83a 	sub	r16,r3,r16
 800b19c:	9c26983a 	sll	r19,r19,r16
 800b1a0:	9c62b03a 	or	r17,r19,r17
 800b1a4:	8822c03a 	cmpne	r17,r17,zero
 800b1a8:	88a2b03a 	or	r17,r17,r2
 800b1ac:	000b883a 	mov	r5,zero
 800b1b0:	0021883a 	mov	r16,zero
 800b1b4:	003fb406 	br	800b088 <__adddf3+0x32c>
 800b1b8:	18bff804 	addi	r2,r3,-32
 800b1bc:	01000804 	movi	r4,32
 800b1c0:	4084d83a 	srl	r2,r8,r2
 800b1c4:	19003f26 	beq	r3,r4,800b2c4 <__adddf3+0x568>
 800b1c8:	01001004 	movi	r4,64
 800b1cc:	20c7c83a 	sub	r3,r4,r3
 800b1d0:	40d0983a 	sll	r8,r8,r3
 800b1d4:	418cb03a 	or	r6,r8,r6
 800b1d8:	300cc03a 	cmpne	r6,r6,zero
 800b1dc:	308cb03a 	or	r6,r6,r2
 800b1e0:	0007883a 	mov	r3,zero
 800b1e4:	003f3406 	br	800aeb8 <__adddf3+0x15c>
 800b1e8:	80002326 	beq	r16,zero,800b278 <__adddf3+0x51c>
 800b1ec:	0101ffc4 	movi	r4,2047
 800b1f0:	11005e26 	beq	r2,r4,800b36c <__adddf3+0x610>
 800b1f4:	00c7c83a 	sub	r3,zero,r3
 800b1f8:	29402034 	orhi	r5,r5,128
 800b1fc:	01000e04 	movi	r4,56
 800b200:	20c07216 	blt	r4,r3,800b3cc <__adddf3+0x670>
 800b204:	010007c4 	movi	r4,31
 800b208:	20c0ce16 	blt	r4,r3,800b544 <__adddf3+0x7e8>
 800b20c:	01000804 	movi	r4,32
 800b210:	20c9c83a 	sub	r4,r4,r3
 800b214:	2914983a 	sll	r10,r5,r4
 800b218:	88d2d83a 	srl	r9,r17,r3
 800b21c:	8908983a 	sll	r4,r17,r4
 800b220:	28c6d83a 	srl	r3,r5,r3
 800b224:	5262b03a 	or	r17,r10,r9
 800b228:	2008c03a 	cmpne	r4,r4,zero
 800b22c:	8922b03a 	or	r17,r17,r4
 800b230:	3463c83a 	sub	r17,r6,r17
 800b234:	40c7c83a 	sub	r3,r8,r3
 800b238:	344d803a 	cmpltu	r6,r6,r17
 800b23c:	198bc83a 	sub	r5,r3,r6
 800b240:	1021883a 	mov	r16,r2
 800b244:	3825883a 	mov	r18,r7
 800b248:	003f2006 	br	800aecc <__adddf3+0x170>
 800b24c:	9886b03a 	or	r3,r19,r2
 800b250:	1800141e 	bne	r3,zero,800b2a4 <__adddf3+0x548>
 800b254:	0007883a 	mov	r3,zero
 800b258:	000b883a 	mov	r5,zero
 800b25c:	0023883a 	mov	r17,zero
 800b260:	0021883a 	mov	r16,zero
 800b264:	003f3c06 	br	800af58 <__adddf3+0x1fc>
 800b268:	418cb03a 	or	r6,r8,r6
 800b26c:	300cc03a 	cmpne	r6,r6,zero
 800b270:	0011883a 	mov	r8,zero
 800b274:	003f5606 	br	800afd0 <__adddf3+0x274>
 800b278:	2c48b03a 	or	r4,r5,r17
 800b27c:	20003b26 	beq	r4,zero,800b36c <__adddf3+0x610>
 800b280:	00c6303a 	nor	r3,zero,r3
 800b284:	1800371e 	bne	r3,zero,800b364 <__adddf3+0x608>
 800b288:	3463c83a 	sub	r17,r6,r17
 800b28c:	414bc83a 	sub	r5,r8,r5
 800b290:	344d803a 	cmpltu	r6,r6,r17
 800b294:	298bc83a 	sub	r5,r5,r6
 800b298:	1021883a 	mov	r16,r2
 800b29c:	3825883a 	mov	r18,r7
 800b2a0:	003f0a06 	br	800aecc <__adddf3+0x170>
 800b2a4:	1023883a 	mov	r17,r2
 800b2a8:	003f0d06 	br	800aee0 <__adddf3+0x184>
 800b2ac:	0007883a 	mov	r3,zero
 800b2b0:	000b883a 	mov	r5,zero
 800b2b4:	0023883a 	mov	r17,zero
 800b2b8:	003f2706 	br	800af58 <__adddf3+0x1fc>
 800b2bc:	0027883a 	mov	r19,zero
 800b2c0:	003fb706 	br	800b1a0 <__adddf3+0x444>
 800b2c4:	0011883a 	mov	r8,zero
 800b2c8:	003fc206 	br	800b1d4 <__adddf3+0x478>
 800b2cc:	2c44b03a 	or	r2,r5,r17
 800b2d0:	8000871e 	bne	r16,zero,800b4f0 <__adddf3+0x794>
 800b2d4:	1000b126 	beq	r2,zero,800b59c <__adddf3+0x840>
 800b2d8:	4184b03a 	or	r2,r8,r6
 800b2dc:	103ebe26 	beq	r2,zero,800add8 <__adddf3+0x7c>
 800b2e0:	3445883a 	add	r2,r6,r17
 800b2e4:	1463803a 	cmpltu	r17,r2,r17
 800b2e8:	414b883a 	add	r5,r8,r5
 800b2ec:	2c4b883a 	add	r5,r5,r17
 800b2f0:	28c0202c 	andhi	r3,r5,128
 800b2f4:	1023883a 	mov	r17,r2
 800b2f8:	183f6326 	beq	r3,zero,800b088 <__adddf3+0x32c>
 800b2fc:	00bfe034 	movhi	r2,65408
 800b300:	10bfffc4 	addi	r2,r2,-1
 800b304:	2021883a 	mov	r16,r4
 800b308:	288a703a 	and	r5,r5,r2
 800b30c:	003eb206 	br	800add8 <__adddf3+0x7c>
 800b310:	2c44b03a 	or	r2,r5,r17
 800b314:	8000251e 	bne	r16,zero,800b3ac <__adddf3+0x650>
 800b318:	10004b1e 	bne	r2,zero,800b448 <__adddf3+0x6ec>
 800b31c:	4184b03a 	or	r2,r8,r6
 800b320:	103fe226 	beq	r2,zero,800b2ac <__adddf3+0x550>
 800b324:	400b883a 	mov	r5,r8
 800b328:	3023883a 	mov	r17,r6
 800b32c:	3825883a 	mov	r18,r7
 800b330:	003ea906 	br	800add8 <__adddf3+0x7c>
 800b334:	20bff804 	addi	r2,r4,-32
 800b338:	01c00804 	movi	r7,32
 800b33c:	4084d83a 	srl	r2,r8,r2
 800b340:	21c07e26 	beq	r4,r7,800b53c <__adddf3+0x7e0>
 800b344:	01c01004 	movi	r7,64
 800b348:	3909c83a 	sub	r4,r7,r4
 800b34c:	4110983a 	sll	r8,r8,r4
 800b350:	418cb03a 	or	r6,r8,r6
 800b354:	300cc03a 	cmpne	r6,r6,zero
 800b358:	308cb03a 	or	r6,r6,r2
 800b35c:	0011883a 	mov	r8,zero
 800b360:	003f1b06 	br	800afd0 <__adddf3+0x274>
 800b364:	0101ffc4 	movi	r4,2047
 800b368:	113fa41e 	bne	r2,r4,800b1fc <__adddf3+0x4a0>
 800b36c:	400b883a 	mov	r5,r8
 800b370:	3023883a 	mov	r17,r6
 800b374:	1021883a 	mov	r16,r2
 800b378:	3825883a 	mov	r18,r7
 800b37c:	003e9606 	br	800add8 <__adddf3+0x7c>
 800b380:	80001a1e 	bne	r16,zero,800b3ec <__adddf3+0x690>
 800b384:	2c4eb03a 	or	r7,r5,r17
 800b388:	38005526 	beq	r7,zero,800b4e0 <__adddf3+0x784>
 800b38c:	0108303a 	nor	r4,zero,r4
 800b390:	2000511e 	bne	r4,zero,800b4d8 <__adddf3+0x77c>
 800b394:	89a3883a 	add	r17,r17,r6
 800b398:	414b883a 	add	r5,r8,r5
 800b39c:	898d803a 	cmpltu	r6,r17,r6
 800b3a0:	298b883a 	add	r5,r5,r6
 800b3a4:	1021883a 	mov	r16,r2
 800b3a8:	003f0e06 	br	800afe4 <__adddf3+0x288>
 800b3ac:	1000341e 	bne	r2,zero,800b480 <__adddf3+0x724>
 800b3b0:	4184b03a 	or	r2,r8,r6
 800b3b4:	10006f26 	beq	r2,zero,800b574 <__adddf3+0x818>
 800b3b8:	400b883a 	mov	r5,r8
 800b3bc:	3023883a 	mov	r17,r6
 800b3c0:	3825883a 	mov	r18,r7
 800b3c4:	0401ffc4 	movi	r16,2047
 800b3c8:	003e8306 	br	800add8 <__adddf3+0x7c>
 800b3cc:	2c62b03a 	or	r17,r5,r17
 800b3d0:	8822c03a 	cmpne	r17,r17,zero
 800b3d4:	0007883a 	mov	r3,zero
 800b3d8:	003f9506 	br	800b230 <__adddf3+0x4d4>
 800b3dc:	1021883a 	mov	r16,r2
 800b3e0:	000b883a 	mov	r5,zero
 800b3e4:	0023883a 	mov	r17,zero
 800b3e8:	003edb06 	br	800af58 <__adddf3+0x1fc>
 800b3ec:	01c1ffc4 	movi	r7,2047
 800b3f0:	11c03b26 	beq	r2,r7,800b4e0 <__adddf3+0x784>
 800b3f4:	0109c83a 	sub	r4,zero,r4
 800b3f8:	29402034 	orhi	r5,r5,128
 800b3fc:	01c00e04 	movi	r7,56
 800b400:	39006216 	blt	r7,r4,800b58c <__adddf3+0x830>
 800b404:	01c007c4 	movi	r7,31
 800b408:	39006b16 	blt	r7,r4,800b5b8 <__adddf3+0x85c>
 800b40c:	01c00804 	movi	r7,32
 800b410:	390fc83a 	sub	r7,r7,r4
 800b414:	29d4983a 	sll	r10,r5,r7
 800b418:	8912d83a 	srl	r9,r17,r4
 800b41c:	89ce983a 	sll	r7,r17,r7
 800b420:	2908d83a 	srl	r4,r5,r4
 800b424:	5262b03a 	or	r17,r10,r9
 800b428:	380ac03a 	cmpne	r5,r7,zero
 800b42c:	8962b03a 	or	r17,r17,r5
 800b430:	89a3883a 	add	r17,r17,r6
 800b434:	2211883a 	add	r8,r4,r8
 800b438:	898d803a 	cmpltu	r6,r17,r6
 800b43c:	418b883a 	add	r5,r8,r6
 800b440:	1021883a 	mov	r16,r2
 800b444:	003ee706 	br	800afe4 <__adddf3+0x288>
 800b448:	4184b03a 	or	r2,r8,r6
 800b44c:	103e6226 	beq	r2,zero,800add8 <__adddf3+0x7c>
 800b450:	8987c83a 	sub	r3,r17,r6
 800b454:	88c9803a 	cmpltu	r4,r17,r3
 800b458:	2a05c83a 	sub	r2,r5,r8
 800b45c:	1105c83a 	sub	r2,r2,r4
 800b460:	1100202c 	andhi	r4,r2,128
 800b464:	203f0426 	beq	r4,zero,800b078 <__adddf3+0x31c>
 800b468:	3463c83a 	sub	r17,r6,r17
 800b46c:	414bc83a 	sub	r5,r8,r5
 800b470:	344d803a 	cmpltu	r6,r6,r17
 800b474:	298bc83a 	sub	r5,r5,r6
 800b478:	3825883a 	mov	r18,r7
 800b47c:	003e5606 	br	800add8 <__adddf3+0x7c>
 800b480:	4184b03a 	or	r2,r8,r6
 800b484:	10002b26 	beq	r2,zero,800b534 <__adddf3+0x7d8>
 800b488:	2804d0fa 	srli	r2,r5,3
 800b48c:	8822d0fa 	srli	r17,r17,3
 800b490:	280a977a 	slli	r5,r5,29
 800b494:	10c0022c 	andhi	r3,r2,8
 800b498:	2c62b03a 	or	r17,r5,r17
 800b49c:	18000826 	beq	r3,zero,800b4c0 <__adddf3+0x764>
 800b4a0:	4008d0fa 	srli	r4,r8,3
 800b4a4:	20c0022c 	andhi	r3,r4,8
 800b4a8:	1800051e 	bne	r3,zero,800b4c0 <__adddf3+0x764>
 800b4ac:	300cd0fa 	srli	r6,r6,3
 800b4b0:	4010977a 	slli	r8,r8,29
 800b4b4:	2005883a 	mov	r2,r4
 800b4b8:	3825883a 	mov	r18,r7
 800b4bc:	41a2b03a 	or	r17,r8,r6
 800b4c0:	880ad77a 	srli	r5,r17,29
 800b4c4:	100490fa 	slli	r2,r2,3
 800b4c8:	882290fa 	slli	r17,r17,3
 800b4cc:	0401ffc4 	movi	r16,2047
 800b4d0:	288ab03a 	or	r5,r5,r2
 800b4d4:	003e4006 	br	800add8 <__adddf3+0x7c>
 800b4d8:	01c1ffc4 	movi	r7,2047
 800b4dc:	11ffc71e 	bne	r2,r7,800b3fc <__adddf3+0x6a0>
 800b4e0:	400b883a 	mov	r5,r8
 800b4e4:	3023883a 	mov	r17,r6
 800b4e8:	1021883a 	mov	r16,r2
 800b4ec:	003e3a06 	br	800add8 <__adddf3+0x7c>
 800b4f0:	10002d26 	beq	r2,zero,800b5a8 <__adddf3+0x84c>
 800b4f4:	4184b03a 	or	r2,r8,r6
 800b4f8:	10000e26 	beq	r2,zero,800b534 <__adddf3+0x7d8>
 800b4fc:	2804d0fa 	srli	r2,r5,3
 800b500:	8822d0fa 	srli	r17,r17,3
 800b504:	280a977a 	slli	r5,r5,29
 800b508:	10c0022c 	andhi	r3,r2,8
 800b50c:	2c62b03a 	or	r17,r5,r17
 800b510:	183feb26 	beq	r3,zero,800b4c0 <__adddf3+0x764>
 800b514:	4008d0fa 	srli	r4,r8,3
 800b518:	20c0022c 	andhi	r3,r4,8
 800b51c:	183fe81e 	bne	r3,zero,800b4c0 <__adddf3+0x764>
 800b520:	300cd0fa 	srli	r6,r6,3
 800b524:	4010977a 	slli	r8,r8,29
 800b528:	2005883a 	mov	r2,r4
 800b52c:	41a2b03a 	or	r17,r8,r6
 800b530:	003fe306 	br	800b4c0 <__adddf3+0x764>
 800b534:	0401ffc4 	movi	r16,2047
 800b538:	003e2706 	br	800add8 <__adddf3+0x7c>
 800b53c:	0011883a 	mov	r8,zero
 800b540:	003f8306 	br	800b350 <__adddf3+0x5f4>
 800b544:	193ff804 	addi	r4,r3,-32
 800b548:	02400804 	movi	r9,32
 800b54c:	2908d83a 	srl	r4,r5,r4
 800b550:	1a402526 	beq	r3,r9,800b5e8 <__adddf3+0x88c>
 800b554:	02401004 	movi	r9,64
 800b558:	48c7c83a 	sub	r3,r9,r3
 800b55c:	28ca983a 	sll	r5,r5,r3
 800b560:	2c62b03a 	or	r17,r5,r17
 800b564:	8822c03a 	cmpne	r17,r17,zero
 800b568:	8922b03a 	or	r17,r17,r4
 800b56c:	0007883a 	mov	r3,zero
 800b570:	003f2f06 	br	800b230 <__adddf3+0x4d4>
 800b574:	01402034 	movhi	r5,128
 800b578:	0007883a 	mov	r3,zero
 800b57c:	297fffc4 	addi	r5,r5,-1
 800b580:	047ffe04 	movi	r17,-8
 800b584:	0401ffc4 	movi	r16,2047
 800b588:	003e7306 	br	800af58 <__adddf3+0x1fc>
 800b58c:	2c62b03a 	or	r17,r5,r17
 800b590:	8822c03a 	cmpne	r17,r17,zero
 800b594:	0009883a 	mov	r4,zero
 800b598:	003fa506 	br	800b430 <__adddf3+0x6d4>
 800b59c:	400b883a 	mov	r5,r8
 800b5a0:	3023883a 	mov	r17,r6
 800b5a4:	003e0c06 	br	800add8 <__adddf3+0x7c>
 800b5a8:	400b883a 	mov	r5,r8
 800b5ac:	3023883a 	mov	r17,r6
 800b5b0:	0401ffc4 	movi	r16,2047
 800b5b4:	003e0806 	br	800add8 <__adddf3+0x7c>
 800b5b8:	21fff804 	addi	r7,r4,-32
 800b5bc:	02400804 	movi	r9,32
 800b5c0:	29ced83a 	srl	r7,r5,r7
 800b5c4:	22400a26 	beq	r4,r9,800b5f0 <__adddf3+0x894>
 800b5c8:	02401004 	movi	r9,64
 800b5cc:	4909c83a 	sub	r4,r9,r4
 800b5d0:	290a983a 	sll	r5,r5,r4
 800b5d4:	2c62b03a 	or	r17,r5,r17
 800b5d8:	8822c03a 	cmpne	r17,r17,zero
 800b5dc:	89e2b03a 	or	r17,r17,r7
 800b5e0:	0009883a 	mov	r4,zero
 800b5e4:	003f9206 	br	800b430 <__adddf3+0x6d4>
 800b5e8:	000b883a 	mov	r5,zero
 800b5ec:	003fdc06 	br	800b560 <__adddf3+0x804>
 800b5f0:	000b883a 	mov	r5,zero
 800b5f4:	003ff706 	br	800b5d4 <__adddf3+0x878>

0800b5f8 <__divdf3>:
 800b5f8:	defff204 	addi	sp,sp,-56
 800b5fc:	dd000815 	stw	r20,32(sp)
 800b600:	2828d53a 	srli	r20,r5,20
 800b604:	dd800a15 	stw	r22,40(sp)
 800b608:	282cd7fa 	srli	r22,r5,31
 800b60c:	dc000415 	stw	r16,16(sp)
 800b610:	04000434 	movhi	r16,16
 800b614:	df000c15 	stw	fp,48(sp)
 800b618:	dcc00715 	stw	r19,28(sp)
 800b61c:	dc800615 	stw	r18,24(sp)
 800b620:	dc400515 	stw	r17,20(sp)
 800b624:	843fffc4 	addi	r16,r16,-1
 800b628:	dfc00d15 	stw	ra,52(sp)
 800b62c:	ddc00b15 	stw	r23,44(sp)
 800b630:	dd400915 	stw	r21,36(sp)
 800b634:	a501ffcc 	andi	r20,r20,2047
 800b638:	2025883a 	mov	r18,r4
 800b63c:	2027883a 	mov	r19,r4
 800b640:	2c22703a 	and	r17,r5,r16
 800b644:	b7003fcc 	andi	fp,r22,255
 800b648:	a0005e26 	beq	r20,zero,800b7c4 <__divdf3+0x1cc>
 800b64c:	0081ffc4 	movi	r2,2047
 800b650:	a0803526 	beq	r20,r2,800b728 <__divdf3+0x130>
 800b654:	8c000434 	orhi	r16,r17,16
 800b658:	2004d77a 	srli	r2,r4,29
 800b65c:	802090fa 	slli	r16,r16,3
 800b660:	202690fa 	slli	r19,r4,3
 800b664:	a53f0044 	addi	r20,r20,-1023
 800b668:	80a2b03a 	or	r17,r16,r2
 800b66c:	0025883a 	mov	r18,zero
 800b670:	0011883a 	mov	r8,zero
 800b674:	380ad53a 	srli	r5,r7,20
 800b678:	382ed7fa 	srli	r23,r7,31
 800b67c:	04000434 	movhi	r16,16
 800b680:	843fffc4 	addi	r16,r16,-1
 800b684:	2941ffcc 	andi	r5,r5,2047
 800b688:	302b883a 	mov	r21,r6
 800b68c:	3c20703a 	and	r16,r7,r16
 800b690:	ba403fcc 	andi	r9,r23,255
 800b694:	28006726 	beq	r5,zero,800b834 <__divdf3+0x23c>
 800b698:	0081ffc4 	movi	r2,2047
 800b69c:	28805f26 	beq	r5,r2,800b81c <__divdf3+0x224>
 800b6a0:	84000434 	orhi	r16,r16,16
 800b6a4:	3004d77a 	srli	r2,r6,29
 800b6a8:	802090fa 	slli	r16,r16,3
 800b6ac:	302a90fa 	slli	r21,r6,3
 800b6b0:	297f0044 	addi	r5,r5,-1023
 800b6b4:	80a0b03a 	or	r16,r16,r2
 800b6b8:	000f883a 	mov	r7,zero
 800b6bc:	3c86b03a 	or	r3,r7,r18
 800b6c0:	180690ba 	slli	r3,r3,2
 800b6c4:	00820074 	movhi	r2,2049
 800b6c8:	10adba04 	addi	r2,r2,-18712
 800b6cc:	1887883a 	add	r3,r3,r2
 800b6d0:	18c00017 	ldw	r3,0(r3)
 800b6d4:	b5c8f03a 	xor	r4,r22,r23
 800b6d8:	200d883a 	mov	r6,r4
 800b6dc:	24803fcc 	andi	r18,r4,255
 800b6e0:	a169c83a 	sub	r20,r20,r5
 800b6e4:	1800683a 	jmp	r3
 800b6e8:	0800b930 	cmpltui	zero,at,740
 800b6ec:	0800b760 	cmpeqi	zero,at,733
 800b6f0:	0800b8f4 	orhi	zero,at,739
 800b6f4:	0800b744 	addi	zero,at,733
 800b6f8:	0800b8f4 	orhi	zero,at,739
 800b6fc:	0800b8c8 	cmpgei	zero,at,739
 800b700:	0800b8f4 	orhi	zero,at,739
 800b704:	0800b744 	addi	zero,at,733
 800b708:	0800b760 	cmpeqi	zero,at,733
 800b70c:	0800b760 	cmpeqi	zero,at,733
 800b710:	0800b8c8 	cmpgei	zero,at,739
 800b714:	0800b744 	addi	zero,at,733
 800b718:	0800b754 	ori	zero,at,733
 800b71c:	0800b754 	ori	zero,at,733
 800b720:	0800b754 	ori	zero,at,733
 800b724:	0800b904 	addi	zero,at,740
 800b728:	8904b03a 	or	r2,r17,r4
 800b72c:	1000631e 	bne	r2,zero,800b8bc <__divdf3+0x2c4>
 800b730:	04800204 	movi	r18,8
 800b734:	0023883a 	mov	r17,zero
 800b738:	0027883a 	mov	r19,zero
 800b73c:	02000084 	movi	r8,2
 800b740:	003fcc06 	br	800b674 <__divdf3+0x7c>
 800b744:	8023883a 	mov	r17,r16
 800b748:	a827883a 	mov	r19,r21
 800b74c:	4839883a 	mov	fp,r9
 800b750:	3811883a 	mov	r8,r7
 800b754:	00800084 	movi	r2,2
 800b758:	40812a1e 	bne	r8,r2,800bc04 <__divdf3+0x60c>
 800b75c:	e025883a 	mov	r18,fp
 800b760:	9180004c 	andi	r6,r18,1
 800b764:	0101ffc4 	movi	r4,2047
 800b768:	000b883a 	mov	r5,zero
 800b76c:	0027883a 	mov	r19,zero
 800b770:	2008953a 	slli	r4,r4,20
 800b774:	30c03fcc 	andi	r3,r6,255
 800b778:	04000434 	movhi	r16,16
 800b77c:	180697fa 	slli	r3,r3,31
 800b780:	843fffc4 	addi	r16,r16,-1
 800b784:	2c20703a 	and	r16,r5,r16
 800b788:	8120b03a 	or	r16,r16,r4
 800b78c:	80c6b03a 	or	r3,r16,r3
 800b790:	9805883a 	mov	r2,r19
 800b794:	dfc00d17 	ldw	ra,52(sp)
 800b798:	df000c17 	ldw	fp,48(sp)
 800b79c:	ddc00b17 	ldw	r23,44(sp)
 800b7a0:	dd800a17 	ldw	r22,40(sp)
 800b7a4:	dd400917 	ldw	r21,36(sp)
 800b7a8:	dd000817 	ldw	r20,32(sp)
 800b7ac:	dcc00717 	ldw	r19,28(sp)
 800b7b0:	dc800617 	ldw	r18,24(sp)
 800b7b4:	dc400517 	ldw	r17,20(sp)
 800b7b8:	dc000417 	ldw	r16,16(sp)
 800b7bc:	dec00e04 	addi	sp,sp,56
 800b7c0:	f800283a 	ret
 800b7c4:	8904b03a 	or	r2,r17,r4
 800b7c8:	10003726 	beq	r2,zero,800b8a8 <__divdf3+0x2b0>
 800b7cc:	88011c26 	beq	r17,zero,800bc40 <__divdf3+0x648>
 800b7d0:	8809883a 	mov	r4,r17
 800b7d4:	d9800315 	stw	r6,12(sp)
 800b7d8:	d9c00115 	stw	r7,4(sp)
 800b7dc:	800d2f80 	call	800d2f8 <__clzsi2>
 800b7e0:	d9800317 	ldw	r6,12(sp)
 800b7e4:	d9c00117 	ldw	r7,4(sp)
 800b7e8:	1007883a 	mov	r3,r2
 800b7ec:	01000a04 	movi	r4,40
 800b7f0:	1cfffe04 	addi	r19,r3,-8
 800b7f4:	20c9c83a 	sub	r4,r4,r3
 800b7f8:	8cca983a 	sll	r5,r17,r19
 800b7fc:	9108d83a 	srl	r4,r18,r4
 800b800:	94e6983a 	sll	r19,r18,r19
 800b804:	2162b03a 	or	r17,r4,r5
 800b808:	053f0344 	movi	r20,-1011
 800b80c:	a0e9c83a 	sub	r20,r20,r3
 800b810:	0025883a 	mov	r18,zero
 800b814:	0011883a 	mov	r8,zero
 800b818:	003f9606 	br	800b674 <__divdf3+0x7c>
 800b81c:	8184b03a 	or	r2,r16,r6
 800b820:	10001f1e 	bne	r2,zero,800b8a0 <__divdf3+0x2a8>
 800b824:	0021883a 	mov	r16,zero
 800b828:	002b883a 	mov	r21,zero
 800b82c:	01c00084 	movi	r7,2
 800b830:	003fa206 	br	800b6bc <__divdf3+0xc4>
 800b834:	8184b03a 	or	r2,r16,r6
 800b838:	10001526 	beq	r2,zero,800b890 <__divdf3+0x298>
 800b83c:	80010c26 	beq	r16,zero,800bc70 <__divdf3+0x678>
 800b840:	8009883a 	mov	r4,r16
 800b844:	d9800315 	stw	r6,12(sp)
 800b848:	da000215 	stw	r8,8(sp)
 800b84c:	da400015 	stw	r9,0(sp)
 800b850:	800d2f80 	call	800d2f8 <__clzsi2>
 800b854:	d9800317 	ldw	r6,12(sp)
 800b858:	da000217 	ldw	r8,8(sp)
 800b85c:	da400017 	ldw	r9,0(sp)
 800b860:	1007883a 	mov	r3,r2
 800b864:	01000a04 	movi	r4,40
 800b868:	1d7ffe04 	addi	r21,r3,-8
 800b86c:	20c9c83a 	sub	r4,r4,r3
 800b870:	8560983a 	sll	r16,r16,r21
 800b874:	3108d83a 	srl	r4,r6,r4
 800b878:	356a983a 	sll	r21,r6,r21
 800b87c:	2420b03a 	or	r16,r4,r16
 800b880:	017f0344 	movi	r5,-1011
 800b884:	28cbc83a 	sub	r5,r5,r3
 800b888:	000f883a 	mov	r7,zero
 800b88c:	003f8b06 	br	800b6bc <__divdf3+0xc4>
 800b890:	0021883a 	mov	r16,zero
 800b894:	002b883a 	mov	r21,zero
 800b898:	01c00044 	movi	r7,1
 800b89c:	003f8706 	br	800b6bc <__divdf3+0xc4>
 800b8a0:	01c000c4 	movi	r7,3
 800b8a4:	003f8506 	br	800b6bc <__divdf3+0xc4>
 800b8a8:	04800104 	movi	r18,4
 800b8ac:	0023883a 	mov	r17,zero
 800b8b0:	0027883a 	mov	r19,zero
 800b8b4:	02000044 	movi	r8,1
 800b8b8:	003f6e06 	br	800b674 <__divdf3+0x7c>
 800b8bc:	04800304 	movi	r18,12
 800b8c0:	020000c4 	movi	r8,3
 800b8c4:	003f6b06 	br	800b674 <__divdf3+0x7c>
 800b8c8:	01400434 	movhi	r5,16
 800b8cc:	000d883a 	mov	r6,zero
 800b8d0:	297fffc4 	addi	r5,r5,-1
 800b8d4:	04ffffc4 	movi	r19,-1
 800b8d8:	0101ffc4 	movi	r4,2047
 800b8dc:	003fa406 	br	800b770 <__divdf3+0x178>
 800b8e0:	043f0084 	movi	r16,-1022
 800b8e4:	8521c83a 	sub	r16,r16,r20
 800b8e8:	00800e04 	movi	r2,56
 800b8ec:	1401200e 	bge	r2,r16,800bd70 <__divdf3+0x778>
 800b8f0:	9180004c 	andi	r6,r18,1
 800b8f4:	0009883a 	mov	r4,zero
 800b8f8:	000b883a 	mov	r5,zero
 800b8fc:	0027883a 	mov	r19,zero
 800b900:	003f9b06 	br	800b770 <__divdf3+0x178>
 800b904:	8880022c 	andhi	r2,r17,8
 800b908:	1000c726 	beq	r2,zero,800bc28 <__divdf3+0x630>
 800b90c:	8080022c 	andhi	r2,r16,8
 800b910:	1000c51e 	bne	r2,zero,800bc28 <__divdf3+0x630>
 800b914:	00800434 	movhi	r2,16
 800b918:	81400234 	orhi	r5,r16,8
 800b91c:	10bfffc4 	addi	r2,r2,-1
 800b920:	b80d883a 	mov	r6,r23
 800b924:	288a703a 	and	r5,r5,r2
 800b928:	a827883a 	mov	r19,r21
 800b92c:	003fea06 	br	800b8d8 <__divdf3+0x2e0>
 800b930:	8440ea36 	bltu	r16,r17,800bcdc <__divdf3+0x6e4>
 800b934:	8c00e826 	beq	r17,r16,800bcd8 <__divdf3+0x6e0>
 800b938:	a53fffc4 	addi	r20,r20,-1
 800b93c:	882d883a 	mov	r22,r17
 800b940:	000d883a 	mov	r6,zero
 800b944:	a804d63a 	srli	r2,r21,24
 800b948:	8020923a 	slli	r16,r16,8
 800b94c:	b009883a 	mov	r4,r22
 800b950:	d9800315 	stw	r6,12(sp)
 800b954:	1420b03a 	or	r16,r2,r16
 800b958:	802ed43a 	srli	r23,r16,16
 800b95c:	873fffcc 	andi	fp,r16,65535
 800b960:	a82a923a 	slli	r21,r21,8
 800b964:	b80b883a 	mov	r5,r23
 800b968:	800ad4c0 	call	800ad4c <__udivsi3>
 800b96c:	b009883a 	mov	r4,r22
 800b970:	b80b883a 	mov	r5,r23
 800b974:	1023883a 	mov	r17,r2
 800b978:	800ad540 	call	800ad54 <__umodsi3>
 800b97c:	1004943a 	slli	r2,r2,16
 800b980:	9808d43a 	srli	r4,r19,16
 800b984:	8f2d383a 	mul	r22,r17,fp
 800b988:	d9800317 	ldw	r6,12(sp)
 800b98c:	1106b03a 	or	r3,r2,r4
 800b990:	1d80062e 	bgeu	r3,r22,800b9ac <__divdf3+0x3b4>
 800b994:	1c07883a 	add	r3,r3,r16
 800b998:	88bfffc4 	addi	r2,r17,-1
 800b99c:	1c00dc36 	bltu	r3,r16,800bd10 <__divdf3+0x718>
 800b9a0:	1d80db2e 	bgeu	r3,r22,800bd10 <__divdf3+0x718>
 800b9a4:	8c7fff84 	addi	r17,r17,-2
 800b9a8:	1c07883a 	add	r3,r3,r16
 800b9ac:	1dadc83a 	sub	r22,r3,r22
 800b9b0:	b009883a 	mov	r4,r22
 800b9b4:	b80b883a 	mov	r5,r23
 800b9b8:	d9800315 	stw	r6,12(sp)
 800b9bc:	800ad4c0 	call	800ad4c <__udivsi3>
 800b9c0:	b009883a 	mov	r4,r22
 800b9c4:	b80b883a 	mov	r5,r23
 800b9c8:	d8800015 	stw	r2,0(sp)
 800b9cc:	800ad540 	call	800ad54 <__umodsi3>
 800b9d0:	da400017 	ldw	r9,0(sp)
 800b9d4:	1004943a 	slli	r2,r2,16
 800b9d8:	9cffffcc 	andi	r19,r19,65535
 800b9dc:	4f07383a 	mul	r3,r9,fp
 800b9e0:	14c8b03a 	or	r4,r2,r19
 800b9e4:	d9800317 	ldw	r6,12(sp)
 800b9e8:	20c0062e 	bgeu	r4,r3,800ba04 <__divdf3+0x40c>
 800b9ec:	2409883a 	add	r4,r4,r16
 800b9f0:	48bfffc4 	addi	r2,r9,-1
 800b9f4:	2400c436 	bltu	r4,r16,800bd08 <__divdf3+0x710>
 800b9f8:	20c0c32e 	bgeu	r4,r3,800bd08 <__divdf3+0x710>
 800b9fc:	4a7fff84 	addi	r9,r9,-2
 800ba00:	2409883a 	add	r4,r4,r16
 800ba04:	8822943a 	slli	r17,r17,16
 800ba08:	a80ed43a 	srli	r7,r21,16
 800ba0c:	aa3fffcc 	andi	r8,r21,65535
 800ba10:	4c62b03a 	or	r17,r9,r17
 800ba14:	8816d43a 	srli	r11,r17,16
 800ba18:	897fffcc 	andi	r5,r17,65535
 800ba1c:	2a15383a 	mul	r10,r5,r8
 800ba20:	5a19383a 	mul	r12,r11,r8
 800ba24:	29cb383a 	mul	r5,r5,r7
 800ba28:	5012d43a 	srli	r9,r10,16
 800ba2c:	20c5c83a 	sub	r2,r4,r3
 800ba30:	614b883a 	add	r5,r12,r5
 800ba34:	2a4b883a 	add	r5,r5,r9
 800ba38:	59c7383a 	mul	r3,r11,r7
 800ba3c:	2b00022e 	bgeu	r5,r12,800ba48 <__divdf3+0x450>
 800ba40:	01000074 	movhi	r4,1
 800ba44:	1907883a 	add	r3,r3,r4
 800ba48:	2808d43a 	srli	r4,r5,16
 800ba4c:	280a943a 	slli	r5,r5,16
 800ba50:	54ffffcc 	andi	r19,r10,65535
 800ba54:	1907883a 	add	r3,r3,r4
 800ba58:	2ccb883a 	add	r5,r5,r19
 800ba5c:	10c09336 	bltu	r2,r3,800bcac <__divdf3+0x6b4>
 800ba60:	10c0ad26 	beq	r2,r3,800bd18 <__divdf3+0x720>
 800ba64:	10c7c83a 	sub	r3,r2,r3
 800ba68:	3167c83a 	sub	r19,r6,r5
 800ba6c:	34ed803a 	cmpltu	r22,r6,r19
 800ba70:	1dadc83a 	sub	r22,r3,r22
 800ba74:	b400b226 	beq	r22,r16,800bd40 <__divdf3+0x748>
 800ba78:	b009883a 	mov	r4,r22
 800ba7c:	b80b883a 	mov	r5,r23
 800ba80:	d9c00115 	stw	r7,4(sp)
 800ba84:	da000215 	stw	r8,8(sp)
 800ba88:	800ad4c0 	call	800ad4c <__udivsi3>
 800ba8c:	b009883a 	mov	r4,r22
 800ba90:	b80b883a 	mov	r5,r23
 800ba94:	d8800315 	stw	r2,12(sp)
 800ba98:	800ad540 	call	800ad54 <__umodsi3>
 800ba9c:	d9800317 	ldw	r6,12(sp)
 800baa0:	1004943a 	slli	r2,r2,16
 800baa4:	9808d43a 	srli	r4,r19,16
 800baa8:	372d383a 	mul	r22,r6,fp
 800baac:	d9c00117 	ldw	r7,4(sp)
 800bab0:	1106b03a 	or	r3,r2,r4
 800bab4:	da000217 	ldw	r8,8(sp)
 800bab8:	1d80062e 	bgeu	r3,r22,800bad4 <__divdf3+0x4dc>
 800babc:	1c07883a 	add	r3,r3,r16
 800bac0:	30bfffc4 	addi	r2,r6,-1
 800bac4:	1c00a036 	bltu	r3,r16,800bd48 <__divdf3+0x750>
 800bac8:	1d809f2e 	bgeu	r3,r22,800bd48 <__divdf3+0x750>
 800bacc:	31bfff84 	addi	r6,r6,-2
 800bad0:	1c07883a 	add	r3,r3,r16
 800bad4:	1dadc83a 	sub	r22,r3,r22
 800bad8:	b009883a 	mov	r4,r22
 800badc:	b80b883a 	mov	r5,r23
 800bae0:	d9800315 	stw	r6,12(sp)
 800bae4:	d9c00115 	stw	r7,4(sp)
 800bae8:	da000215 	stw	r8,8(sp)
 800baec:	800ad4c0 	call	800ad4c <__udivsi3>
 800baf0:	b009883a 	mov	r4,r22
 800baf4:	b80b883a 	mov	r5,r23
 800baf8:	d8800015 	stw	r2,0(sp)
 800bafc:	800ad540 	call	800ad54 <__umodsi3>
 800bb00:	da400017 	ldw	r9,0(sp)
 800bb04:	1004943a 	slli	r2,r2,16
 800bb08:	993fffcc 	andi	r4,r19,65535
 800bb0c:	4f39383a 	mul	fp,r9,fp
 800bb10:	1106b03a 	or	r3,r2,r4
 800bb14:	d9800317 	ldw	r6,12(sp)
 800bb18:	d9c00117 	ldw	r7,4(sp)
 800bb1c:	da000217 	ldw	r8,8(sp)
 800bb20:	1f00062e 	bgeu	r3,fp,800bb3c <__divdf3+0x544>
 800bb24:	1c07883a 	add	r3,r3,r16
 800bb28:	48bfffc4 	addi	r2,r9,-1
 800bb2c:	1c008836 	bltu	r3,r16,800bd50 <__divdf3+0x758>
 800bb30:	1f00872e 	bgeu	r3,fp,800bd50 <__divdf3+0x758>
 800bb34:	4a7fff84 	addi	r9,r9,-2
 800bb38:	1c07883a 	add	r3,r3,r16
 800bb3c:	3008943a 	slli	r4,r6,16
 800bb40:	1f07c83a 	sub	r3,r3,fp
 800bb44:	4926b03a 	or	r19,r9,r4
 800bb48:	993fffcc 	andi	r4,r19,65535
 800bb4c:	980cd43a 	srli	r6,r19,16
 800bb50:	220b383a 	mul	r5,r4,r8
 800bb54:	21c5383a 	mul	r2,r4,r7
 800bb58:	3211383a 	mul	r8,r6,r8
 800bb5c:	2808d43a 	srli	r4,r5,16
 800bb60:	31cf383a 	mul	r7,r6,r7
 800bb64:	4085883a 	add	r2,r8,r2
 800bb68:	1105883a 	add	r2,r2,r4
 800bb6c:	1200022e 	bgeu	r2,r8,800bb78 <__divdf3+0x580>
 800bb70:	01000074 	movhi	r4,1
 800bb74:	390f883a 	add	r7,r7,r4
 800bb78:	1008d43a 	srli	r4,r2,16
 800bb7c:	1004943a 	slli	r2,r2,16
 800bb80:	297fffcc 	andi	r5,r5,65535
 800bb84:	390f883a 	add	r7,r7,r4
 800bb88:	1145883a 	add	r2,r2,r5
 800bb8c:	19c06536 	bltu	r3,r7,800bd24 <__divdf3+0x72c>
 800bb90:	19c09f26 	beq	r3,r7,800be10 <__divdf3+0x818>
 800bb94:	9cc00054 	ori	r19,r19,1
 800bb98:	a100ffc4 	addi	r4,r20,1023
 800bb9c:	013f500e 	bge	zero,r4,800b8e0 <__divdf3+0x2e8>
 800bba0:	988001cc 	andi	r2,r19,7
 800bba4:	10000726 	beq	r2,zero,800bbc4 <__divdf3+0x5cc>
 800bba8:	98c003cc 	andi	r3,r19,15
 800bbac:	00800104 	movi	r2,4
 800bbb0:	18800426 	beq	r3,r2,800bbc4 <__divdf3+0x5cc>
 800bbb4:	9885883a 	add	r2,r19,r2
 800bbb8:	14e1803a 	cmpltu	r16,r2,r19
 800bbbc:	8c23883a 	add	r17,r17,r16
 800bbc0:	1027883a 	mov	r19,r2
 800bbc4:	8880402c 	andhi	r2,r17,256
 800bbc8:	10000426 	beq	r2,zero,800bbdc <__divdf3+0x5e4>
 800bbcc:	00bfc034 	movhi	r2,65280
 800bbd0:	10bfffc4 	addi	r2,r2,-1
 800bbd4:	a1010004 	addi	r4,r20,1024
 800bbd8:	88a2703a 	and	r17,r17,r2
 800bbdc:	0081ff84 	movi	r2,2046
 800bbe0:	113edf16 	blt	r2,r4,800b760 <__divdf3+0x168>
 800bbe4:	9826d0fa 	srli	r19,r19,3
 800bbe8:	8804977a 	slli	r2,r17,29
 800bbec:	8820927a 	slli	r16,r17,9
 800bbf0:	2101ffcc 	andi	r4,r4,2047
 800bbf4:	14e6b03a 	or	r19,r2,r19
 800bbf8:	800ad33a 	srli	r5,r16,12
 800bbfc:	9180004c 	andi	r6,r18,1
 800bc00:	003edb06 	br	800b770 <__divdf3+0x178>
 800bc04:	008000c4 	movi	r2,3
 800bc08:	4080a826 	beq	r8,r2,800beac <__divdf3+0x8b4>
 800bc0c:	00800044 	movi	r2,1
 800bc10:	4080551e 	bne	r8,r2,800bd68 <__divdf3+0x770>
 800bc14:	e00d883a 	mov	r6,fp
 800bc18:	0009883a 	mov	r4,zero
 800bc1c:	000b883a 	mov	r5,zero
 800bc20:	0027883a 	mov	r19,zero
 800bc24:	003ed206 	br	800b770 <__divdf3+0x178>
 800bc28:	00800434 	movhi	r2,16
 800bc2c:	89400234 	orhi	r5,r17,8
 800bc30:	10bfffc4 	addi	r2,r2,-1
 800bc34:	b00d883a 	mov	r6,r22
 800bc38:	288a703a 	and	r5,r5,r2
 800bc3c:	003f2606 	br	800b8d8 <__divdf3+0x2e0>
 800bc40:	d9800315 	stw	r6,12(sp)
 800bc44:	d9c00115 	stw	r7,4(sp)
 800bc48:	800d2f80 	call	800d2f8 <__clzsi2>
 800bc4c:	10c00804 	addi	r3,r2,32
 800bc50:	010009c4 	movi	r4,39
 800bc54:	d9800317 	ldw	r6,12(sp)
 800bc58:	d9c00117 	ldw	r7,4(sp)
 800bc5c:	20fee30e 	bge	r4,r3,800b7ec <__divdf3+0x1f4>
 800bc60:	117ffe04 	addi	r5,r2,-8
 800bc64:	9162983a 	sll	r17,r18,r5
 800bc68:	0027883a 	mov	r19,zero
 800bc6c:	003ee606 	br	800b808 <__divdf3+0x210>
 800bc70:	3009883a 	mov	r4,r6
 800bc74:	d9800315 	stw	r6,12(sp)
 800bc78:	da000215 	stw	r8,8(sp)
 800bc7c:	da400015 	stw	r9,0(sp)
 800bc80:	800d2f80 	call	800d2f8 <__clzsi2>
 800bc84:	10c00804 	addi	r3,r2,32
 800bc88:	010009c4 	movi	r4,39
 800bc8c:	d9800317 	ldw	r6,12(sp)
 800bc90:	da000217 	ldw	r8,8(sp)
 800bc94:	da400017 	ldw	r9,0(sp)
 800bc98:	20fef20e 	bge	r4,r3,800b864 <__divdf3+0x26c>
 800bc9c:	10bffe04 	addi	r2,r2,-8
 800bca0:	a8a0983a 	sll	r16,r21,r2
 800bca4:	002b883a 	mov	r21,zero
 800bca8:	003ef506 	br	800b880 <__divdf3+0x288>
 800bcac:	354d883a 	add	r6,r6,r21
 800bcb0:	3549803a 	cmpltu	r4,r6,r21
 800bcb4:	2409883a 	add	r4,r4,r16
 800bcb8:	2089883a 	add	r4,r4,r2
 800bcbc:	88bfffc4 	addi	r2,r17,-1
 800bcc0:	81000c2e 	bgeu	r16,r4,800bcf4 <__divdf3+0x6fc>
 800bcc4:	20c04436 	bltu	r4,r3,800bdd8 <__divdf3+0x7e0>
 800bcc8:	19006f26 	beq	r3,r4,800be88 <__divdf3+0x890>
 800bccc:	20c7c83a 	sub	r3,r4,r3
 800bcd0:	1023883a 	mov	r17,r2
 800bcd4:	003f6406 	br	800ba68 <__divdf3+0x470>
 800bcd8:	9d7f1736 	bltu	r19,r21,800b938 <__divdf3+0x340>
 800bcdc:	9806d07a 	srli	r3,r19,1
 800bce0:	880497fa 	slli	r2,r17,31
 800bce4:	980c97fa 	slli	r6,r19,31
 800bce8:	882cd07a 	srli	r22,r17,1
 800bcec:	18a6b03a 	or	r19,r3,r2
 800bcf0:	003f1406 	br	800b944 <__divdf3+0x34c>
 800bcf4:	243ff51e 	bne	r4,r16,800bccc <__divdf3+0x6d4>
 800bcf8:	357ff22e 	bgeu	r6,r21,800bcc4 <__divdf3+0x6cc>
 800bcfc:	80c7c83a 	sub	r3,r16,r3
 800bd00:	1023883a 	mov	r17,r2
 800bd04:	003f5806 	br	800ba68 <__divdf3+0x470>
 800bd08:	1013883a 	mov	r9,r2
 800bd0c:	003f3d06 	br	800ba04 <__divdf3+0x40c>
 800bd10:	1023883a 	mov	r17,r2
 800bd14:	003f2506 	br	800b9ac <__divdf3+0x3b4>
 800bd18:	317fe436 	bltu	r6,r5,800bcac <__divdf3+0x6b4>
 800bd1c:	0007883a 	mov	r3,zero
 800bd20:	003f5106 	br	800ba68 <__divdf3+0x470>
 800bd24:	1c07883a 	add	r3,r3,r16
 800bd28:	993fffc4 	addi	r4,r19,-1
 800bd2c:	1c000a2e 	bgeu	r3,r16,800bd58 <__divdf3+0x760>
 800bd30:	2027883a 	mov	r19,r4
 800bd34:	19ff971e 	bne	r3,r7,800bb94 <__divdf3+0x59c>
 800bd38:	a8bf961e 	bne	r21,r2,800bb94 <__divdf3+0x59c>
 800bd3c:	003f9606 	br	800bb98 <__divdf3+0x5a0>
 800bd40:	04ffffc4 	movi	r19,-1
 800bd44:	003f9406 	br	800bb98 <__divdf3+0x5a0>
 800bd48:	100d883a 	mov	r6,r2
 800bd4c:	003f6106 	br	800bad4 <__divdf3+0x4dc>
 800bd50:	1013883a 	mov	r9,r2
 800bd54:	003f7906 	br	800bb3c <__divdf3+0x544>
 800bd58:	19c02636 	bltu	r3,r7,800bdf4 <__divdf3+0x7fc>
 800bd5c:	38c04d26 	beq	r7,r3,800be94 <__divdf3+0x89c>
 800bd60:	2027883a 	mov	r19,r4
 800bd64:	003f8b06 	br	800bb94 <__divdf3+0x59c>
 800bd68:	e025883a 	mov	r18,fp
 800bd6c:	003f8a06 	br	800bb98 <__divdf3+0x5a0>
 800bd70:	008007c4 	movi	r2,31
 800bd74:	14002a16 	blt	r2,r16,800be20 <__divdf3+0x828>
 800bd78:	a5010784 	addi	r20,r20,1054
 800bd7c:	8d04983a 	sll	r2,r17,r20
 800bd80:	9c06d83a 	srl	r3,r19,r16
 800bd84:	9d28983a 	sll	r20,r19,r20
 800bd88:	8c20d83a 	srl	r16,r17,r16
 800bd8c:	1886b03a 	or	r3,r3,r2
 800bd90:	a004c03a 	cmpne	r2,r20,zero
 800bd94:	1884b03a 	or	r2,r3,r2
 800bd98:	10c001cc 	andi	r3,r2,7
 800bd9c:	18000726 	beq	r3,zero,800bdbc <__divdf3+0x7c4>
 800bda0:	110003cc 	andi	r4,r2,15
 800bda4:	00c00104 	movi	r3,4
 800bda8:	20c00426 	beq	r4,r3,800bdbc <__divdf3+0x7c4>
 800bdac:	10c00104 	addi	r3,r2,4
 800bdb0:	1885803a 	cmpltu	r2,r3,r2
 800bdb4:	80a1883a 	add	r16,r16,r2
 800bdb8:	1805883a 	mov	r2,r3
 800bdbc:	80c0202c 	andhi	r3,r16,128
 800bdc0:	18002d26 	beq	r3,zero,800be78 <__divdf3+0x880>
 800bdc4:	9180004c 	andi	r6,r18,1
 800bdc8:	01000044 	movi	r4,1
 800bdcc:	000b883a 	mov	r5,zero
 800bdd0:	0027883a 	mov	r19,zero
 800bdd4:	003e6606 	br	800b770 <__divdf3+0x178>
 800bdd8:	354d883a 	add	r6,r6,r21
 800bddc:	356d803a 	cmpltu	r22,r6,r21
 800bde0:	b42d883a 	add	r22,r22,r16
 800bde4:	b12d883a 	add	r22,r22,r4
 800bde8:	8c7fff84 	addi	r17,r17,-2
 800bdec:	b0c7c83a 	sub	r3,r22,r3
 800bdf0:	003f1d06 	br	800ba68 <__divdf3+0x470>
 800bdf4:	ad4b883a 	add	r5,r21,r21
 800bdf8:	2d6b803a 	cmpltu	r21,r5,r21
 800bdfc:	ac2b883a 	add	r21,r21,r16
 800be00:	1d47883a 	add	r3,r3,r21
 800be04:	993fff84 	addi	r4,r19,-2
 800be08:	282b883a 	mov	r21,r5
 800be0c:	003fc806 	br	800bd30 <__divdf3+0x738>
 800be10:	103fc41e 	bne	r2,zero,800bd24 <__divdf3+0x72c>
 800be14:	002b883a 	mov	r21,zero
 800be18:	a8bf5e1e 	bne	r21,r2,800bb94 <__divdf3+0x59c>
 800be1c:	003f5e06 	br	800bb98 <__divdf3+0x5a0>
 800be20:	00bef884 	movi	r2,-1054
 800be24:	1505c83a 	sub	r2,r2,r20
 800be28:	00c00804 	movi	r3,32
 800be2c:	8884d83a 	srl	r2,r17,r2
 800be30:	80c01c26 	beq	r16,r3,800bea4 <__divdf3+0x8ac>
 800be34:	a0c10f84 	addi	r3,r20,1086
 800be38:	88c6983a 	sll	r3,r17,r3
 800be3c:	1cc6b03a 	or	r3,r3,r19
 800be40:	1806c03a 	cmpne	r3,r3,zero
 800be44:	1884b03a 	or	r2,r3,r2
 800be48:	140001cc 	andi	r16,r2,7
 800be4c:	8000061e 	bne	r16,zero,800be68 <__divdf3+0x870>
 800be50:	000b883a 	mov	r5,zero
 800be54:	1004d0fa 	srli	r2,r2,3
 800be58:	9180004c 	andi	r6,r18,1
 800be5c:	0009883a 	mov	r4,zero
 800be60:	1426b03a 	or	r19,r2,r16
 800be64:	003e4206 	br	800b770 <__divdf3+0x178>
 800be68:	110003cc 	andi	r4,r2,15
 800be6c:	00c00104 	movi	r3,4
 800be70:	0021883a 	mov	r16,zero
 800be74:	20ffcd1e 	bne	r4,r3,800bdac <__divdf3+0x7b4>
 800be78:	800a927a 	slli	r5,r16,9
 800be7c:	8020977a 	slli	r16,r16,29
 800be80:	280ad33a 	srli	r5,r5,12
 800be84:	003ff306 	br	800be54 <__divdf3+0x85c>
 800be88:	317fd336 	bltu	r6,r5,800bdd8 <__divdf3+0x7e0>
 800be8c:	1023883a 	mov	r17,r2
 800be90:	003fa206 	br	800bd1c <__divdf3+0x724>
 800be94:	a8bfd736 	bltu	r21,r2,800bdf4 <__divdf3+0x7fc>
 800be98:	2027883a 	mov	r19,r4
 800be9c:	a8bf3d1e 	bne	r21,r2,800bb94 <__divdf3+0x59c>
 800bea0:	003f3d06 	br	800bb98 <__divdf3+0x5a0>
 800bea4:	0007883a 	mov	r3,zero
 800bea8:	003fe406 	br	800be3c <__divdf3+0x844>
 800beac:	00800434 	movhi	r2,16
 800beb0:	89400234 	orhi	r5,r17,8
 800beb4:	10bfffc4 	addi	r2,r2,-1
 800beb8:	e00d883a 	mov	r6,fp
 800bebc:	288a703a 	and	r5,r5,r2
 800bec0:	003e8506 	br	800b8d8 <__divdf3+0x2e0>

0800bec4 <__eqdf2>:
 800bec4:	2804d53a 	srli	r2,r5,20
 800bec8:	3806d53a 	srli	r3,r7,20
 800becc:	02000434 	movhi	r8,16
 800bed0:	423fffc4 	addi	r8,r8,-1
 800bed4:	1081ffcc 	andi	r2,r2,2047
 800bed8:	0241ffc4 	movi	r9,2047
 800bedc:	2a14703a 	and	r10,r5,r8
 800bee0:	18c1ffcc 	andi	r3,r3,2047
 800bee4:	3a10703a 	and	r8,r7,r8
 800bee8:	280ad7fa 	srli	r5,r5,31
 800beec:	380ed7fa 	srli	r7,r7,31
 800bef0:	12400f26 	beq	r2,r9,800bf30 <__eqdf2+0x6c>
 800bef4:	0241ffc4 	movi	r9,2047
 800bef8:	1a400326 	beq	r3,r9,800bf08 <__eqdf2+0x44>
 800befc:	10c00526 	beq	r2,r3,800bf14 <__eqdf2+0x50>
 800bf00:	00800044 	movi	r2,1
 800bf04:	f800283a 	ret
 800bf08:	4192b03a 	or	r9,r8,r6
 800bf0c:	483ffc1e 	bne	r9,zero,800bf00 <__eqdf2+0x3c>
 800bf10:	10fffb1e 	bne	r2,r3,800bf00 <__eqdf2+0x3c>
 800bf14:	523ffa1e 	bne	r10,r8,800bf00 <__eqdf2+0x3c>
 800bf18:	21bff91e 	bne	r4,r6,800bf00 <__eqdf2+0x3c>
 800bf1c:	29c00826 	beq	r5,r7,800bf40 <__eqdf2+0x7c>
 800bf20:	103ff71e 	bne	r2,zero,800bf00 <__eqdf2+0x3c>
 800bf24:	5104b03a 	or	r2,r10,r4
 800bf28:	1004c03a 	cmpne	r2,r2,zero
 800bf2c:	f800283a 	ret
 800bf30:	5112b03a 	or	r9,r10,r4
 800bf34:	483fef26 	beq	r9,zero,800bef4 <__eqdf2+0x30>
 800bf38:	00800044 	movi	r2,1
 800bf3c:	f800283a 	ret
 800bf40:	0005883a 	mov	r2,zero
 800bf44:	f800283a 	ret

0800bf48 <__gedf2>:
 800bf48:	2804d53a 	srli	r2,r5,20
 800bf4c:	3806d53a 	srli	r3,r7,20
 800bf50:	02000434 	movhi	r8,16
 800bf54:	423fffc4 	addi	r8,r8,-1
 800bf58:	0241ffc4 	movi	r9,2047
 800bf5c:	1081ffcc 	andi	r2,r2,2047
 800bf60:	2a14703a 	and	r10,r5,r8
 800bf64:	1a46703a 	and	r3,r3,r9
 800bf68:	3a10703a 	and	r8,r7,r8
 800bf6c:	280ad7fa 	srli	r5,r5,31
 800bf70:	380ed7fa 	srli	r7,r7,31
 800bf74:	12400b26 	beq	r2,r9,800bfa4 <__gedf2+0x5c>
 800bf78:	1a401626 	beq	r3,r9,800bfd4 <__gedf2+0x8c>
 800bf7c:	10000c1e 	bne	r2,zero,800bfb0 <__gedf2+0x68>
 800bf80:	5112b03a 	or	r9,r10,r4
 800bf84:	4813003a 	cmpeq	r9,r9,zero
 800bf88:	4817883a 	mov	r11,r9
 800bf8c:	18000c1e 	bne	r3,zero,800bfc0 <__gedf2+0x78>
 800bf90:	4198b03a 	or	r12,r8,r6
 800bf94:	60000a1e 	bne	r12,zero,800bfc0 <__gedf2+0x78>
 800bf98:	48001326 	beq	r9,zero,800bfe8 <__gedf2+0xa0>
 800bf9c:	0005883a 	mov	r2,zero
 800bfa0:	f800283a 	ret
 800bfa4:	5112b03a 	or	r9,r10,r4
 800bfa8:	4800191e 	bne	r9,zero,800c010 <__gedf2+0xc8>
 800bfac:	18800926 	beq	r3,r2,800bfd4 <__gedf2+0x8c>
 800bfb0:	18000b1e 	bne	r3,zero,800bfe0 <__gedf2+0x98>
 800bfb4:	4192b03a 	or	r9,r8,r6
 800bfb8:	0017883a 	mov	r11,zero
 800bfbc:	48000a26 	beq	r9,zero,800bfe8 <__gedf2+0xa0>
 800bfc0:	39c03fcc 	andi	r7,r7,255
 800bfc4:	58000726 	beq	r11,zero,800bfe4 <__gedf2+0x9c>
 800bfc8:	3800081e 	bne	r7,zero,800bfec <__gedf2+0xa4>
 800bfcc:	00bfffc4 	movi	r2,-1
 800bfd0:	f800283a 	ret
 800bfd4:	4192b03a 	or	r9,r8,r6
 800bfd8:	48000d1e 	bne	r9,zero,800c010 <__gedf2+0xc8>
 800bfdc:	103fe826 	beq	r2,zero,800bf80 <__gedf2+0x38>
 800bfe0:	39c03fcc 	andi	r7,r7,255
 800bfe4:	29c00326 	beq	r5,r7,800bff4 <__gedf2+0xac>
 800bfe8:	283ff81e 	bne	r5,zero,800bfcc <__gedf2+0x84>
 800bfec:	00800044 	movi	r2,1
 800bff0:	f800283a 	ret
 800bff4:	18bffc16 	blt	r3,r2,800bfe8 <__gedf2+0xa0>
 800bff8:	10c00316 	blt	r2,r3,800c008 <__gedf2+0xc0>
 800bffc:	42bffa36 	bltu	r8,r10,800bfe8 <__gedf2+0xa0>
 800c000:	52000526 	beq	r10,r8,800c018 <__gedf2+0xd0>
 800c004:	523fe52e 	bgeu	r10,r8,800bf9c <__gedf2+0x54>
 800c008:	283ff026 	beq	r5,zero,800bfcc <__gedf2+0x84>
 800c00c:	003ff706 	br	800bfec <__gedf2+0xa4>
 800c010:	00bfff84 	movi	r2,-2
 800c014:	f800283a 	ret
 800c018:	313ff336 	bltu	r6,r4,800bfe8 <__gedf2+0xa0>
 800c01c:	21bfdf2e 	bgeu	r4,r6,800bf9c <__gedf2+0x54>
 800c020:	283fea26 	beq	r5,zero,800bfcc <__gedf2+0x84>
 800c024:	003ff106 	br	800bfec <__gedf2+0xa4>

0800c028 <__ledf2>:
 800c028:	2804d53a 	srli	r2,r5,20
 800c02c:	3810d53a 	srli	r8,r7,20
 800c030:	00c00434 	movhi	r3,16
 800c034:	18ffffc4 	addi	r3,r3,-1
 800c038:	0241ffc4 	movi	r9,2047
 800c03c:	1081ffcc 	andi	r2,r2,2047
 800c040:	28d4703a 	and	r10,r5,r3
 800c044:	4250703a 	and	r8,r8,r9
 800c048:	38c6703a 	and	r3,r7,r3
 800c04c:	280ad7fa 	srli	r5,r5,31
 800c050:	380ed7fa 	srli	r7,r7,31
 800c054:	12400b26 	beq	r2,r9,800c084 <__ledf2+0x5c>
 800c058:	42401926 	beq	r8,r9,800c0c0 <__ledf2+0x98>
 800c05c:	10000c1e 	bne	r2,zero,800c090 <__ledf2+0x68>
 800c060:	5112b03a 	or	r9,r10,r4
 800c064:	4813003a 	cmpeq	r9,r9,zero
 800c068:	4817883a 	mov	r11,r9
 800c06c:	40000f26 	beq	r8,zero,800c0ac <__ledf2+0x84>
 800c070:	39c03fcc 	andi	r7,r7,255
 800c074:	58001826 	beq	r11,zero,800c0d8 <__ledf2+0xb0>
 800c078:	38000a1e 	bne	r7,zero,800c0a4 <__ledf2+0x7c>
 800c07c:	00bfffc4 	movi	r2,-1
 800c080:	f800283a 	ret
 800c084:	5112b03a 	or	r9,r10,r4
 800c088:	48000f1e 	bne	r9,zero,800c0c8 <__ledf2+0xa0>
 800c08c:	40800c26 	beq	r8,r2,800c0c0 <__ledf2+0x98>
 800c090:	4000101e 	bne	r8,zero,800c0d4 <__ledf2+0xac>
 800c094:	1992b03a 	or	r9,r3,r6
 800c098:	0017883a 	mov	r11,zero
 800c09c:	483ff41e 	bne	r9,zero,800c070 <__ledf2+0x48>
 800c0a0:	283ff61e 	bne	r5,zero,800c07c <__ledf2+0x54>
 800c0a4:	00800044 	movi	r2,1
 800c0a8:	f800283a 	ret
 800c0ac:	1998b03a 	or	r12,r3,r6
 800c0b0:	603fef1e 	bne	r12,zero,800c070 <__ledf2+0x48>
 800c0b4:	483ffa26 	beq	r9,zero,800c0a0 <__ledf2+0x78>
 800c0b8:	0005883a 	mov	r2,zero
 800c0bc:	f800283a 	ret
 800c0c0:	1992b03a 	or	r9,r3,r6
 800c0c4:	48000226 	beq	r9,zero,800c0d0 <__ledf2+0xa8>
 800c0c8:	00800084 	movi	r2,2
 800c0cc:	f800283a 	ret
 800c0d0:	103fe326 	beq	r2,zero,800c060 <__ledf2+0x38>
 800c0d4:	39c03fcc 	andi	r7,r7,255
 800c0d8:	29fff11e 	bne	r5,r7,800c0a0 <__ledf2+0x78>
 800c0dc:	40bff016 	blt	r8,r2,800c0a0 <__ledf2+0x78>
 800c0e0:	12000316 	blt	r2,r8,800c0f0 <__ledf2+0xc8>
 800c0e4:	1abfee36 	bltu	r3,r10,800c0a0 <__ledf2+0x78>
 800c0e8:	50c00326 	beq	r10,r3,800c0f8 <__ledf2+0xd0>
 800c0ec:	50fff22e 	bgeu	r10,r3,800c0b8 <__ledf2+0x90>
 800c0f0:	283fe226 	beq	r5,zero,800c07c <__ledf2+0x54>
 800c0f4:	003feb06 	br	800c0a4 <__ledf2+0x7c>
 800c0f8:	313fe936 	bltu	r6,r4,800c0a0 <__ledf2+0x78>
 800c0fc:	21bfee2e 	bgeu	r4,r6,800c0b8 <__ledf2+0x90>
 800c100:	283fde26 	beq	r5,zero,800c07c <__ledf2+0x54>
 800c104:	003fe706 	br	800c0a4 <__ledf2+0x7c>

0800c108 <__muldf3>:
 800c108:	defff204 	addi	sp,sp,-56
 800c10c:	2804d53a 	srli	r2,r5,20
 800c110:	dd800a15 	stw	r22,40(sp)
 800c114:	282cd7fa 	srli	r22,r5,31
 800c118:	dc000415 	stw	r16,16(sp)
 800c11c:	04000434 	movhi	r16,16
 800c120:	df000c15 	stw	fp,48(sp)
 800c124:	dd000815 	stw	r20,32(sp)
 800c128:	dcc00715 	stw	r19,28(sp)
 800c12c:	dc800615 	stw	r18,24(sp)
 800c130:	dc400515 	stw	r17,20(sp)
 800c134:	843fffc4 	addi	r16,r16,-1
 800c138:	dfc00d15 	stw	ra,52(sp)
 800c13c:	ddc00b15 	stw	r23,44(sp)
 800c140:	dd400915 	stw	r21,36(sp)
 800c144:	1501ffcc 	andi	r20,r2,2047
 800c148:	2023883a 	mov	r17,r4
 800c14c:	2025883a 	mov	r18,r4
 800c150:	2c20703a 	and	r16,r5,r16
 800c154:	b027883a 	mov	r19,r22
 800c158:	b7003fcc 	andi	fp,r22,255
 800c15c:	a0005926 	beq	r20,zero,800c2c4 <__muldf3+0x1bc>
 800c160:	0081ffc4 	movi	r2,2047
 800c164:	a0803426 	beq	r20,r2,800c238 <__muldf3+0x130>
 800c168:	84000434 	orhi	r16,r16,16
 800c16c:	2004d77a 	srli	r2,r4,29
 800c170:	802090fa 	slli	r16,r16,3
 800c174:	202490fa 	slli	r18,r4,3
 800c178:	a53f0044 	addi	r20,r20,-1023
 800c17c:	80a0b03a 	or	r16,r16,r2
 800c180:	002b883a 	mov	r21,zero
 800c184:	0015883a 	mov	r10,zero
 800c188:	3812d53a 	srli	r9,r7,20
 800c18c:	3806d7fa 	srli	r3,r7,31
 800c190:	02000434 	movhi	r8,16
 800c194:	423fffc4 	addi	r8,r8,-1
 800c198:	4941ffcc 	andi	r5,r9,2047
 800c19c:	302f883a 	mov	r23,r6
 800c1a0:	3a22703a 	and	r17,r7,r8
 800c1a4:	1ac03fcc 	andi	r11,r3,255
 800c1a8:	28006226 	beq	r5,zero,800c334 <__muldf3+0x22c>
 800c1ac:	0081ffc4 	movi	r2,2047
 800c1b0:	28805a26 	beq	r5,r2,800c31c <__muldf3+0x214>
 800c1b4:	8a000434 	orhi	r8,r17,16
 800c1b8:	3004d77a 	srli	r2,r6,29
 800c1bc:	401090fa 	slli	r8,r8,3
 800c1c0:	302e90fa 	slli	r23,r6,3
 800c1c4:	297f0044 	addi	r5,r5,-1023
 800c1c8:	40a2b03a 	or	r17,r8,r2
 800c1cc:	0013883a 	mov	r9,zero
 800c1d0:	4d4cb03a 	or	r6,r9,r21
 800c1d4:	300c90ba 	slli	r6,r6,2
 800c1d8:	02020074 	movhi	r8,2049
 800c1dc:	42307e04 	addi	r8,r8,-15880
 800c1e0:	320d883a 	add	r6,r6,r8
 800c1e4:	31800017 	ldw	r6,0(r6)
 800c1e8:	a14b883a 	add	r5,r20,r5
 800c1ec:	1dacf03a 	xor	r22,r3,r22
 800c1f0:	2b000044 	addi	r12,r5,1
 800c1f4:	3000683a 	jmp	r6
 800c1f8:	0800c434 	orhi	zero,at,784
 800c1fc:	0800c420 	cmpeqi	zero,at,784
 800c200:	0800c420 	cmpeqi	zero,at,784
 800c204:	0800c40c 	andi	zero,at,784
 800c208:	0800c254 	ori	zero,at,777
 800c20c:	0800c254 	ori	zero,at,777
 800c210:	0800c3f4 	orhi	zero,at,783
 800c214:	0800c40c 	andi	zero,at,784
 800c218:	0800c254 	ori	zero,at,777
 800c21c:	0800c3f4 	orhi	zero,at,783
 800c220:	0800c254 	ori	zero,at,777
 800c224:	0800c40c 	andi	zero,at,784
 800c228:	0800c258 	cmpnei	zero,at,777
 800c22c:	0800c258 	cmpnei	zero,at,777
 800c230:	0800c258 	cmpnei	zero,at,777
 800c234:	0800c630 	cmpltui	zero,at,792
 800c238:	8104b03a 	or	r2,r16,r4
 800c23c:	10006a1e 	bne	r2,zero,800c3e8 <__muldf3+0x2e0>
 800c240:	05400204 	movi	r21,8
 800c244:	0021883a 	mov	r16,zero
 800c248:	0025883a 	mov	r18,zero
 800c24c:	02800084 	movi	r10,2
 800c250:	003fcd06 	br	800c188 <__muldf3+0x80>
 800c254:	b039883a 	mov	fp,r22
 800c258:	00800084 	movi	r2,2
 800c25c:	50804e1e 	bne	r10,r2,800c398 <__muldf3+0x290>
 800c260:	e4c0004c 	andi	r19,fp,1
 800c264:	0101ffc4 	movi	r4,2047
 800c268:	0021883a 	mov	r16,zero
 800c26c:	0025883a 	mov	r18,zero
 800c270:	2008953a 	slli	r4,r4,20
 800c274:	98c03fcc 	andi	r3,r19,255
 800c278:	01400434 	movhi	r5,16
 800c27c:	297fffc4 	addi	r5,r5,-1
 800c280:	180697fa 	slli	r3,r3,31
 800c284:	8160703a 	and	r16,r16,r5
 800c288:	8120b03a 	or	r16,r16,r4
 800c28c:	80c6b03a 	or	r3,r16,r3
 800c290:	9005883a 	mov	r2,r18
 800c294:	dfc00d17 	ldw	ra,52(sp)
 800c298:	df000c17 	ldw	fp,48(sp)
 800c29c:	ddc00b17 	ldw	r23,44(sp)
 800c2a0:	dd800a17 	ldw	r22,40(sp)
 800c2a4:	dd400917 	ldw	r21,36(sp)
 800c2a8:	dd000817 	ldw	r20,32(sp)
 800c2ac:	dcc00717 	ldw	r19,28(sp)
 800c2b0:	dc800617 	ldw	r18,24(sp)
 800c2b4:	dc400517 	ldw	r17,20(sp)
 800c2b8:	dc000417 	ldw	r16,16(sp)
 800c2bc:	dec00e04 	addi	sp,sp,56
 800c2c0:	f800283a 	ret
 800c2c4:	8104b03a 	or	r2,r16,r4
 800c2c8:	10004226 	beq	r2,zero,800c3d4 <__muldf3+0x2cc>
 800c2cc:	8000f926 	beq	r16,zero,800c6b4 <__muldf3+0x5ac>
 800c2d0:	8009883a 	mov	r4,r16
 800c2d4:	d9800315 	stw	r6,12(sp)
 800c2d8:	d9c00015 	stw	r7,0(sp)
 800c2dc:	800d2f80 	call	800d2f8 <__clzsi2>
 800c2e0:	d9800317 	ldw	r6,12(sp)
 800c2e4:	d9c00017 	ldw	r7,0(sp)
 800c2e8:	1007883a 	mov	r3,r2
 800c2ec:	01000a04 	movi	r4,40
 800c2f0:	18bffe04 	addi	r2,r3,-8
 800c2f4:	20c9c83a 	sub	r4,r4,r3
 800c2f8:	80a0983a 	sll	r16,r16,r2
 800c2fc:	8908d83a 	srl	r4,r17,r4
 800c300:	88a4983a 	sll	r18,r17,r2
 800c304:	2420b03a 	or	r16,r4,r16
 800c308:	017f0344 	movi	r5,-1011
 800c30c:	28e9c83a 	sub	r20,r5,r3
 800c310:	002b883a 	mov	r21,zero
 800c314:	0015883a 	mov	r10,zero
 800c318:	003f9b06 	br	800c188 <__muldf3+0x80>
 800c31c:	8984b03a 	or	r2,r17,r6
 800c320:	10002a1e 	bne	r2,zero,800c3cc <__muldf3+0x2c4>
 800c324:	0023883a 	mov	r17,zero
 800c328:	002f883a 	mov	r23,zero
 800c32c:	02400084 	movi	r9,2
 800c330:	003fa706 	br	800c1d0 <__muldf3+0xc8>
 800c334:	8984b03a 	or	r2,r17,r6
 800c338:	10002026 	beq	r2,zero,800c3bc <__muldf3+0x2b4>
 800c33c:	8800cc26 	beq	r17,zero,800c670 <__muldf3+0x568>
 800c340:	8809883a 	mov	r4,r17
 800c344:	d8c00215 	stw	r3,8(sp)
 800c348:	d9800315 	stw	r6,12(sp)
 800c34c:	da800015 	stw	r10,0(sp)
 800c350:	dac00115 	stw	r11,4(sp)
 800c354:	800d2f80 	call	800d2f8 <__clzsi2>
 800c358:	d8c00217 	ldw	r3,8(sp)
 800c35c:	d9800317 	ldw	r6,12(sp)
 800c360:	da800017 	ldw	r10,0(sp)
 800c364:	dac00117 	ldw	r11,4(sp)
 800c368:	1009883a 	mov	r4,r2
 800c36c:	01400a04 	movi	r5,40
 800c370:	25fffe04 	addi	r23,r4,-8
 800c374:	290bc83a 	sub	r5,r5,r4
 800c378:	8dd0983a 	sll	r8,r17,r23
 800c37c:	314ad83a 	srl	r5,r6,r5
 800c380:	35ee983a 	sll	r23,r6,r23
 800c384:	2a22b03a 	or	r17,r5,r8
 800c388:	017f0344 	movi	r5,-1011
 800c38c:	290bc83a 	sub	r5,r5,r4
 800c390:	0013883a 	mov	r9,zero
 800c394:	003f8e06 	br	800c1d0 <__muldf3+0xc8>
 800c398:	008000c4 	movi	r2,3
 800c39c:	50811d26 	beq	r10,r2,800c814 <__muldf3+0x70c>
 800c3a0:	00800044 	movi	r2,1
 800c3a4:	5080e01e 	bne	r10,r2,800c728 <__muldf3+0x620>
 800c3a8:	e0a6703a 	and	r19,fp,r2
 800c3ac:	0009883a 	mov	r4,zero
 800c3b0:	0021883a 	mov	r16,zero
 800c3b4:	0025883a 	mov	r18,zero
 800c3b8:	003fad06 	br	800c270 <__muldf3+0x168>
 800c3bc:	0023883a 	mov	r17,zero
 800c3c0:	002f883a 	mov	r23,zero
 800c3c4:	02400044 	movi	r9,1
 800c3c8:	003f8106 	br	800c1d0 <__muldf3+0xc8>
 800c3cc:	024000c4 	movi	r9,3
 800c3d0:	003f7f06 	br	800c1d0 <__muldf3+0xc8>
 800c3d4:	05400104 	movi	r21,4
 800c3d8:	0021883a 	mov	r16,zero
 800c3dc:	0025883a 	mov	r18,zero
 800c3e0:	02800044 	movi	r10,1
 800c3e4:	003f6806 	br	800c188 <__muldf3+0x80>
 800c3e8:	05400304 	movi	r21,12
 800c3ec:	028000c4 	movi	r10,3
 800c3f0:	003f6506 	br	800c188 <__muldf3+0x80>
 800c3f4:	04000434 	movhi	r16,16
 800c3f8:	0027883a 	mov	r19,zero
 800c3fc:	843fffc4 	addi	r16,r16,-1
 800c400:	04bfffc4 	movi	r18,-1
 800c404:	0101ffc4 	movi	r4,2047
 800c408:	003f9906 	br	800c270 <__muldf3+0x168>
 800c40c:	8821883a 	mov	r16,r17
 800c410:	b825883a 	mov	r18,r23
 800c414:	5839883a 	mov	fp,r11
 800c418:	4815883a 	mov	r10,r9
 800c41c:	003f8e06 	br	800c258 <__muldf3+0x150>
 800c420:	8821883a 	mov	r16,r17
 800c424:	b825883a 	mov	r18,r23
 800c428:	b039883a 	mov	fp,r22
 800c42c:	4815883a 	mov	r10,r9
 800c430:	003f8906 	br	800c258 <__muldf3+0x150>
 800c434:	b80cd43a 	srli	r6,r23,16
 800c438:	9006d43a 	srli	r3,r18,16
 800c43c:	90bfffcc 	andi	r2,r18,65535
 800c440:	bdffffcc 	andi	r23,r23,65535
 800c444:	b891383a 	mul	r8,r23,r2
 800c448:	b8c9383a 	mul	r4,r23,r3
 800c44c:	309b383a 	mul	r13,r6,r2
 800c450:	400ed43a 	srli	r7,r8,16
 800c454:	30df383a 	mul	r15,r6,r3
 800c458:	235b883a 	add	r13,r4,r13
 800c45c:	69db883a 	add	r13,r13,r7
 800c460:	6900022e 	bgeu	r13,r4,800c46c <__muldf3+0x364>
 800c464:	01000074 	movhi	r4,1
 800c468:	791f883a 	add	r15,r15,r4
 800c46c:	8828d43a 	srli	r20,r17,16
 800c470:	8c7fffcc 	andi	r17,r17,65535
 800c474:	888f383a 	mul	r7,r17,r2
 800c478:	88d3383a 	mul	r9,r17,r3
 800c47c:	a0a5383a 	mul	r18,r20,r2
 800c480:	3816d43a 	srli	r11,r7,16
 800c484:	6814943a 	slli	r10,r13,16
 800c488:	4ca5883a 	add	r18,r9,r18
 800c48c:	423fffcc 	andi	r8,r8,65535
 800c490:	92e5883a 	add	r18,r18,r11
 800c494:	6808d43a 	srli	r4,r13,16
 800c498:	5215883a 	add	r10,r10,r8
 800c49c:	a0c7383a 	mul	r3,r20,r3
 800c4a0:	9240022e 	bgeu	r18,r9,800c4ac <__muldf3+0x3a4>
 800c4a4:	00800074 	movhi	r2,1
 800c4a8:	1887883a 	add	r3,r3,r2
 800c4ac:	802ad43a 	srli	r21,r16,16
 800c4b0:	80bfffcc 	andi	r2,r16,65535
 800c4b4:	b893383a 	mul	r9,r23,r2
 800c4b8:	3091383a 	mul	r8,r6,r2
 800c4bc:	bd6f383a 	mul	r23,r23,r21
 800c4c0:	9026943a 	slli	r19,r18,16
 800c4c4:	481ad43a 	srli	r13,r9,16
 800c4c8:	9024d43a 	srli	r18,r18,16
 800c4cc:	39ffffcc 	andi	r7,r7,65535
 800c4d0:	ba11883a 	add	r8,r23,r8
 800c4d4:	99e7883a 	add	r19,r19,r7
 800c4d8:	4351883a 	add	r8,r8,r13
 800c4dc:	1c97883a 	add	r11,r3,r18
 800c4e0:	354d383a 	mul	r6,r6,r21
 800c4e4:	9925883a 	add	r18,r19,r4
 800c4e8:	45c0022e 	bgeu	r8,r23,800c4f4 <__muldf3+0x3ec>
 800c4ec:	00c00074 	movhi	r3,1
 800c4f0:	30cd883a 	add	r6,r6,r3
 800c4f4:	8889383a 	mul	r4,r17,r2
 800c4f8:	8d63383a 	mul	r17,r17,r21
 800c4fc:	a085383a 	mul	r2,r20,r2
 800c500:	200ed43a 	srli	r7,r4,16
 800c504:	401cd43a 	srli	r14,r8,16
 800c508:	401a943a 	slli	r13,r8,16
 800c50c:	8885883a 	add	r2,r17,r2
 800c510:	4a3fffcc 	andi	r8,r9,65535
 800c514:	11c5883a 	add	r2,r2,r7
 800c518:	339d883a 	add	r14,r6,r14
 800c51c:	6a11883a 	add	r8,r13,r8
 800c520:	a561383a 	mul	r16,r20,r21
 800c524:	1440022e 	bgeu	r2,r17,800c530 <__muldf3+0x428>
 800c528:	00c00074 	movhi	r3,1
 800c52c:	80e1883a 	add	r16,r16,r3
 800c530:	1006943a 	slli	r3,r2,16
 800c534:	213fffcc 	andi	r4,r4,65535
 800c538:	93db883a 	add	r13,r18,r15
 800c53c:	1909883a 	add	r4,r3,r4
 800c540:	22c7883a 	add	r3,r4,r11
 800c544:	6cd3803a 	cmpltu	r9,r13,r19
 800c548:	6a09883a 	add	r4,r13,r8
 800c54c:	1a5b883a 	add	r13,r3,r9
 800c550:	2211803a 	cmpltu	r8,r4,r8
 800c554:	734d883a 	add	r6,r14,r13
 800c558:	100ed43a 	srli	r7,r2,16
 800c55c:	6a53803a 	cmpltu	r9,r13,r9
 800c560:	3205883a 	add	r2,r6,r8
 800c564:	1ac7803a 	cmpltu	r3,r3,r11
 800c568:	1211803a 	cmpltu	r8,r2,r8
 800c56c:	48c6b03a 	or	r3,r9,r3
 800c570:	338d803a 	cmpltu	r6,r6,r14
 800c574:	19c7883a 	add	r3,r3,r7
 800c578:	418cb03a 	or	r6,r8,r6
 800c57c:	1987883a 	add	r3,r3,r6
 800c580:	2024927a 	slli	r18,r4,9
 800c584:	1c07883a 	add	r3,r3,r16
 800c588:	1806927a 	slli	r3,r3,9
 800c58c:	1020d5fa 	srli	r16,r2,23
 800c590:	2008d5fa 	srli	r4,r4,23
 800c594:	9294b03a 	or	r10,r18,r10
 800c598:	1004927a 	slli	r2,r2,9
 800c59c:	5024c03a 	cmpne	r18,r10,zero
 800c5a0:	1c20b03a 	or	r16,r3,r16
 800c5a4:	9108b03a 	or	r4,r18,r4
 800c5a8:	80c0402c 	andhi	r3,r16,256
 800c5ac:	20a4b03a 	or	r18,r4,r2
 800c5b0:	18000726 	beq	r3,zero,800c5d0 <__muldf3+0x4c8>
 800c5b4:	9006d07a 	srli	r3,r18,1
 800c5b8:	800897fa 	slli	r4,r16,31
 800c5bc:	9080004c 	andi	r2,r18,1
 800c5c0:	8020d07a 	srli	r16,r16,1
 800c5c4:	10c4b03a 	or	r2,r2,r3
 800c5c8:	1124b03a 	or	r18,r2,r4
 800c5cc:	600b883a 	mov	r5,r12
 800c5d0:	2900ffc4 	addi	r4,r5,1023
 800c5d4:	01004b0e 	bge	zero,r4,800c704 <__muldf3+0x5fc>
 800c5d8:	908001cc 	andi	r2,r18,7
 800c5dc:	10000726 	beq	r2,zero,800c5fc <__muldf3+0x4f4>
 800c5e0:	90c003cc 	andi	r3,r18,15
 800c5e4:	00800104 	movi	r2,4
 800c5e8:	18800426 	beq	r3,r2,800c5fc <__muldf3+0x4f4>
 800c5ec:	9087883a 	add	r3,r18,r2
 800c5f0:	1c85803a 	cmpltu	r2,r3,r18
 800c5f4:	80a1883a 	add	r16,r16,r2
 800c5f8:	1825883a 	mov	r18,r3
 800c5fc:	8080402c 	andhi	r2,r16,256
 800c600:	10000426 	beq	r2,zero,800c614 <__muldf3+0x50c>
 800c604:	00bfc034 	movhi	r2,65280
 800c608:	10bfffc4 	addi	r2,r2,-1
 800c60c:	29010004 	addi	r4,r5,1024
 800c610:	80a0703a 	and	r16,r16,r2
 800c614:	0081ff84 	movi	r2,2046
 800c618:	1100320e 	bge	r2,r4,800c6e4 <__muldf3+0x5dc>
 800c61c:	b4c0004c 	andi	r19,r22,1
 800c620:	0101ffc4 	movi	r4,2047
 800c624:	0021883a 	mov	r16,zero
 800c628:	0025883a 	mov	r18,zero
 800c62c:	003f1006 	br	800c270 <__muldf3+0x168>
 800c630:	8080022c 	andhi	r2,r16,8
 800c634:	10000926 	beq	r2,zero,800c65c <__muldf3+0x554>
 800c638:	8880022c 	andhi	r2,r17,8
 800c63c:	1000071e 	bne	r2,zero,800c65c <__muldf3+0x554>
 800c640:	00800434 	movhi	r2,16
 800c644:	8c000234 	orhi	r16,r17,8
 800c648:	10bfffc4 	addi	r2,r2,-1
 800c64c:	1827883a 	mov	r19,r3
 800c650:	80a0703a 	and	r16,r16,r2
 800c654:	b825883a 	mov	r18,r23
 800c658:	003f6a06 	br	800c404 <__muldf3+0x2fc>
 800c65c:	00800434 	movhi	r2,16
 800c660:	84000234 	orhi	r16,r16,8
 800c664:	10bfffc4 	addi	r2,r2,-1
 800c668:	80a0703a 	and	r16,r16,r2
 800c66c:	003f6506 	br	800c404 <__muldf3+0x2fc>
 800c670:	3009883a 	mov	r4,r6
 800c674:	d8c00215 	stw	r3,8(sp)
 800c678:	d9800315 	stw	r6,12(sp)
 800c67c:	da800015 	stw	r10,0(sp)
 800c680:	dac00115 	stw	r11,4(sp)
 800c684:	800d2f80 	call	800d2f8 <__clzsi2>
 800c688:	11000804 	addi	r4,r2,32
 800c68c:	014009c4 	movi	r5,39
 800c690:	d8c00217 	ldw	r3,8(sp)
 800c694:	d9800317 	ldw	r6,12(sp)
 800c698:	da800017 	ldw	r10,0(sp)
 800c69c:	dac00117 	ldw	r11,4(sp)
 800c6a0:	293f320e 	bge	r5,r4,800c36c <__muldf3+0x264>
 800c6a4:	10bffe04 	addi	r2,r2,-8
 800c6a8:	b8a2983a 	sll	r17,r23,r2
 800c6ac:	002f883a 	mov	r23,zero
 800c6b0:	003f3506 	br	800c388 <__muldf3+0x280>
 800c6b4:	d9800315 	stw	r6,12(sp)
 800c6b8:	d9c00015 	stw	r7,0(sp)
 800c6bc:	800d2f80 	call	800d2f8 <__clzsi2>
 800c6c0:	10c00804 	addi	r3,r2,32
 800c6c4:	010009c4 	movi	r4,39
 800c6c8:	d9800317 	ldw	r6,12(sp)
 800c6cc:	d9c00017 	ldw	r7,0(sp)
 800c6d0:	20ff060e 	bge	r4,r3,800c2ec <__muldf3+0x1e4>
 800c6d4:	10bffe04 	addi	r2,r2,-8
 800c6d8:	88a0983a 	sll	r16,r17,r2
 800c6dc:	0025883a 	mov	r18,zero
 800c6e0:	003f0906 	br	800c308 <__muldf3+0x200>
 800c6e4:	9004d0fa 	srli	r2,r18,3
 800c6e8:	8024977a 	slli	r18,r16,29
 800c6ec:	8020927a 	slli	r16,r16,9
 800c6f0:	2101ffcc 	andi	r4,r4,2047
 800c6f4:	90a4b03a 	or	r18,r18,r2
 800c6f8:	8020d33a 	srli	r16,r16,12
 800c6fc:	b4c0004c 	andi	r19,r22,1
 800c700:	003edb06 	br	800c270 <__muldf3+0x168>
 800c704:	00ff0084 	movi	r3,-1022
 800c708:	1947c83a 	sub	r3,r3,r5
 800c70c:	00800e04 	movi	r2,56
 800c710:	10c0080e 	bge	r2,r3,800c734 <__muldf3+0x62c>
 800c714:	b4c0004c 	andi	r19,r22,1
 800c718:	0009883a 	mov	r4,zero
 800c71c:	0021883a 	mov	r16,zero
 800c720:	0025883a 	mov	r18,zero
 800c724:	003ed206 	br	800c270 <__muldf3+0x168>
 800c728:	600b883a 	mov	r5,r12
 800c72c:	e02d883a 	mov	r22,fp
 800c730:	003fa706 	br	800c5d0 <__muldf3+0x4c8>
 800c734:	008007c4 	movi	r2,31
 800c738:	10c01816 	blt	r2,r3,800c79c <__muldf3+0x694>
 800c73c:	29410784 	addi	r5,r5,1054
 800c740:	8144983a 	sll	r2,r16,r5
 800c744:	90c8d83a 	srl	r4,r18,r3
 800c748:	914a983a 	sll	r5,r18,r5
 800c74c:	80c6d83a 	srl	r3,r16,r3
 800c750:	2088b03a 	or	r4,r4,r2
 800c754:	2804c03a 	cmpne	r2,r5,zero
 800c758:	2084b03a 	or	r2,r4,r2
 800c75c:	110001cc 	andi	r4,r2,7
 800c760:	20000726 	beq	r4,zero,800c780 <__muldf3+0x678>
 800c764:	114003cc 	andi	r5,r2,15
 800c768:	01000104 	movi	r4,4
 800c76c:	29000426 	beq	r5,r4,800c780 <__muldf3+0x678>
 800c770:	11000104 	addi	r4,r2,4
 800c774:	2085803a 	cmpltu	r2,r4,r2
 800c778:	1887883a 	add	r3,r3,r2
 800c77c:	2005883a 	mov	r2,r4
 800c780:	1900202c 	andhi	r4,r3,128
 800c784:	20001826 	beq	r4,zero,800c7e8 <__muldf3+0x6e0>
 800c788:	b4c0004c 	andi	r19,r22,1
 800c78c:	01000044 	movi	r4,1
 800c790:	0021883a 	mov	r16,zero
 800c794:	0025883a 	mov	r18,zero
 800c798:	003eb506 	br	800c270 <__muldf3+0x168>
 800c79c:	00bef884 	movi	r2,-1054
 800c7a0:	1145c83a 	sub	r2,r2,r5
 800c7a4:	8088d83a 	srl	r4,r16,r2
 800c7a8:	00800804 	movi	r2,32
 800c7ac:	18801726 	beq	r3,r2,800c80c <__muldf3+0x704>
 800c7b0:	28810f84 	addi	r2,r5,1086
 800c7b4:	8084983a 	sll	r2,r16,r2
 800c7b8:	1484b03a 	or	r2,r2,r18
 800c7bc:	1004c03a 	cmpne	r2,r2,zero
 800c7c0:	1104b03a 	or	r2,r2,r4
 800c7c4:	10c001cc 	andi	r3,r2,7
 800c7c8:	18000b1e 	bne	r3,zero,800c7f8 <__muldf3+0x6f0>
 800c7cc:	0021883a 	mov	r16,zero
 800c7d0:	1004d0fa 	srli	r2,r2,3
 800c7d4:	b4c0004c 	andi	r19,r22,1
 800c7d8:	0009883a 	mov	r4,zero
 800c7dc:	10e4b03a 	or	r18,r2,r3
 800c7e0:	003ea306 	br	800c270 <__muldf3+0x168>
 800c7e4:	0007883a 	mov	r3,zero
 800c7e8:	1820927a 	slli	r16,r3,9
 800c7ec:	1806977a 	slli	r3,r3,29
 800c7f0:	8020d33a 	srli	r16,r16,12
 800c7f4:	003ff606 	br	800c7d0 <__muldf3+0x6c8>
 800c7f8:	110003cc 	andi	r4,r2,15
 800c7fc:	00c00104 	movi	r3,4
 800c800:	20fff826 	beq	r4,r3,800c7e4 <__muldf3+0x6dc>
 800c804:	0007883a 	mov	r3,zero
 800c808:	003fd906 	br	800c770 <__muldf3+0x668>
 800c80c:	0005883a 	mov	r2,zero
 800c810:	003fe906 	br	800c7b8 <__muldf3+0x6b0>
 800c814:	00800434 	movhi	r2,16
 800c818:	84000234 	orhi	r16,r16,8
 800c81c:	10bfffc4 	addi	r2,r2,-1
 800c820:	e4c0004c 	andi	r19,fp,1
 800c824:	80a0703a 	and	r16,r16,r2
 800c828:	003ef606 	br	800c404 <__muldf3+0x2fc>

0800c82c <__subdf3>:
 800c82c:	00c00434 	movhi	r3,16
 800c830:	18ffffc4 	addi	r3,r3,-1
 800c834:	defffb04 	addi	sp,sp,-20
 800c838:	28d2703a 	and	r9,r5,r3
 800c83c:	3814d53a 	srli	r10,r7,20
 800c840:	38c6703a 	and	r3,r7,r3
 800c844:	3004d77a 	srli	r2,r6,29
 800c848:	dc800215 	stw	r18,8(sp)
 800c84c:	dc000015 	stw	r16,0(sp)
 800c850:	2824d7fa 	srli	r18,r5,31
 800c854:	2820d53a 	srli	r16,r5,20
 800c858:	481290fa 	slli	r9,r9,3
 800c85c:	200ad77a 	srli	r5,r4,29
 800c860:	180690fa 	slli	r3,r3,3
 800c864:	dc400115 	stw	r17,4(sp)
 800c868:	dfc00415 	stw	ra,16(sp)
 800c86c:	202290fa 	slli	r17,r4,3
 800c870:	dcc00315 	stw	r19,12(sp)
 800c874:	5281ffcc 	andi	r10,r10,2047
 800c878:	0101ffc4 	movi	r4,2047
 800c87c:	9011883a 	mov	r8,r18
 800c880:	8401ffcc 	andi	r16,r16,2047
 800c884:	94803fcc 	andi	r18,r18,255
 800c888:	494ab03a 	or	r5,r9,r5
 800c88c:	380ed7fa 	srli	r7,r7,31
 800c890:	1886b03a 	or	r3,r3,r2
 800c894:	300c90fa 	slli	r6,r6,3
 800c898:	51009026 	beq	r10,r4,800cadc <__subdf3+0x2b0>
 800c89c:	39c0005c 	xori	r7,r7,1
 800c8a0:	8285c83a 	sub	r2,r16,r10
 800c8a4:	91c06f26 	beq	r18,r7,800ca64 <__subdf3+0x238>
 800c8a8:	0080b10e 	bge	zero,r2,800cb70 <__subdf3+0x344>
 800c8ac:	50002a1e 	bne	r10,zero,800c958 <__subdf3+0x12c>
 800c8b0:	1988b03a 	or	r4,r3,r6
 800c8b4:	2000941e 	bne	r4,zero,800cb08 <__subdf3+0x2dc>
 800c8b8:	888001cc 	andi	r2,r17,7
 800c8bc:	10005b26 	beq	r2,zero,800ca2c <__subdf3+0x200>
 800c8c0:	88c003cc 	andi	r3,r17,15
 800c8c4:	00800104 	movi	r2,4
 800c8c8:	18805826 	beq	r3,r2,800ca2c <__subdf3+0x200>
 800c8cc:	88c00104 	addi	r3,r17,4
 800c8d0:	1c63803a 	cmpltu	r17,r3,r17
 800c8d4:	2c4b883a 	add	r5,r5,r17
 800c8d8:	2880202c 	andhi	r2,r5,128
 800c8dc:	9200004c 	andi	r8,r18,1
 800c8e0:	1823883a 	mov	r17,r3
 800c8e4:	10005426 	beq	r2,zero,800ca38 <__subdf3+0x20c>
 800c8e8:	84000044 	addi	r16,r16,1
 800c8ec:	0081ffc4 	movi	r2,2047
 800c8f0:	8080bf26 	beq	r16,r2,800cbf0 <__subdf3+0x3c4>
 800c8f4:	013fe034 	movhi	r4,65408
 800c8f8:	213fffc4 	addi	r4,r4,-1
 800c8fc:	290a703a 	and	r5,r5,r4
 800c900:	2804977a 	slli	r2,r5,29
 800c904:	280a927a 	slli	r5,r5,9
 800c908:	8822d0fa 	srli	r17,r17,3
 800c90c:	8401ffcc 	andi	r16,r16,2047
 800c910:	2808d33a 	srli	r4,r5,12
 800c914:	1444b03a 	or	r2,r2,r17
 800c918:	8401ffcc 	andi	r16,r16,2047
 800c91c:	800a953a 	slli	r5,r16,20
 800c920:	40c03fcc 	andi	r3,r8,255
 800c924:	04000434 	movhi	r16,16
 800c928:	180697fa 	slli	r3,r3,31
 800c92c:	843fffc4 	addi	r16,r16,-1
 800c930:	2420703a 	and	r16,r4,r16
 800c934:	8160b03a 	or	r16,r16,r5
 800c938:	80c6b03a 	or	r3,r16,r3
 800c93c:	dfc00417 	ldw	ra,16(sp)
 800c940:	dcc00317 	ldw	r19,12(sp)
 800c944:	dc800217 	ldw	r18,8(sp)
 800c948:	dc400117 	ldw	r17,4(sp)
 800c94c:	dc000017 	ldw	r16,0(sp)
 800c950:	dec00504 	addi	sp,sp,20
 800c954:	f800283a 	ret
 800c958:	0101ffc4 	movi	r4,2047
 800c95c:	813fd626 	beq	r16,r4,800c8b8 <__subdf3+0x8c>
 800c960:	18c02034 	orhi	r3,r3,128
 800c964:	01000e04 	movi	r4,56
 800c968:	2080a416 	blt	r4,r2,800cbfc <__subdf3+0x3d0>
 800c96c:	010007c4 	movi	r4,31
 800c970:	2080c716 	blt	r4,r2,800cc90 <__subdf3+0x464>
 800c974:	01000804 	movi	r4,32
 800c978:	2089c83a 	sub	r4,r4,r2
 800c97c:	1910983a 	sll	r8,r3,r4
 800c980:	308ed83a 	srl	r7,r6,r2
 800c984:	3108983a 	sll	r4,r6,r4
 800c988:	1884d83a 	srl	r2,r3,r2
 800c98c:	41ccb03a 	or	r6,r8,r7
 800c990:	2008c03a 	cmpne	r4,r4,zero
 800c994:	310cb03a 	or	r6,r6,r4
 800c998:	898dc83a 	sub	r6,r17,r6
 800c99c:	89a3803a 	cmpltu	r17,r17,r6
 800c9a0:	288bc83a 	sub	r5,r5,r2
 800c9a4:	2c4bc83a 	sub	r5,r5,r17
 800c9a8:	3023883a 	mov	r17,r6
 800c9ac:	2880202c 	andhi	r2,r5,128
 800c9b0:	10006b26 	beq	r2,zero,800cb60 <__subdf3+0x334>
 800c9b4:	04c02034 	movhi	r19,128
 800c9b8:	9cffffc4 	addi	r19,r19,-1
 800c9bc:	2ce6703a 	and	r19,r5,r19
 800c9c0:	98007c26 	beq	r19,zero,800cbb4 <__subdf3+0x388>
 800c9c4:	9809883a 	mov	r4,r19
 800c9c8:	800d2f80 	call	800d2f8 <__clzsi2>
 800c9cc:	10fffe04 	addi	r3,r2,-8
 800c9d0:	010007c4 	movi	r4,31
 800c9d4:	20c07d16 	blt	r4,r3,800cbcc <__subdf3+0x3a0>
 800c9d8:	01400a04 	movi	r5,40
 800c9dc:	2885c83a 	sub	r2,r5,r2
 800c9e0:	888ad83a 	srl	r5,r17,r2
 800c9e4:	98e6983a 	sll	r19,r19,r3
 800c9e8:	88e2983a 	sll	r17,r17,r3
 800c9ec:	2ce6b03a 	or	r19,r5,r19
 800c9f0:	1c007a16 	blt	r3,r16,800cbdc <__subdf3+0x3b0>
 800c9f4:	1c21c83a 	sub	r16,r3,r16
 800c9f8:	81400044 	addi	r5,r16,1
 800c9fc:	00c007c4 	movi	r3,31
 800ca00:	19409616 	blt	r3,r5,800cc5c <__subdf3+0x430>
 800ca04:	1c21c83a 	sub	r16,r3,r16
 800ca08:	8c08983a 	sll	r4,r17,r16
 800ca0c:	8946d83a 	srl	r3,r17,r5
 800ca10:	9c20983a 	sll	r16,r19,r16
 800ca14:	2008c03a 	cmpne	r4,r4,zero
 800ca18:	994ad83a 	srl	r5,r19,r5
 800ca1c:	1c06b03a 	or	r3,r3,r16
 800ca20:	1922b03a 	or	r17,r3,r4
 800ca24:	0021883a 	mov	r16,zero
 800ca28:	003fa306 	br	800c8b8 <__subdf3+0x8c>
 800ca2c:	2880202c 	andhi	r2,r5,128
 800ca30:	9200004c 	andi	r8,r18,1
 800ca34:	103fac1e 	bne	r2,zero,800c8e8 <__subdf3+0xbc>
 800ca38:	2804977a 	slli	r2,r5,29
 800ca3c:	8822d0fa 	srli	r17,r17,3
 800ca40:	00c1ffc4 	movi	r3,2047
 800ca44:	280ad0fa 	srli	r5,r5,3
 800ca48:	1444b03a 	or	r2,r2,r17
 800ca4c:	80c02726 	beq	r16,r3,800caec <__subdf3+0x2c0>
 800ca50:	01000434 	movhi	r4,16
 800ca54:	213fffc4 	addi	r4,r4,-1
 800ca58:	80e0703a 	and	r16,r16,r3
 800ca5c:	2908703a 	and	r4,r5,r4
 800ca60:	003fad06 	br	800c918 <__subdf3+0xec>
 800ca64:	0080690e 	bge	zero,r2,800cc0c <__subdf3+0x3e0>
 800ca68:	50002f26 	beq	r10,zero,800cb28 <__subdf3+0x2fc>
 800ca6c:	0101ffc4 	movi	r4,2047
 800ca70:	813f9126 	beq	r16,r4,800c8b8 <__subdf3+0x8c>
 800ca74:	18c02034 	orhi	r3,r3,128
 800ca78:	01000e04 	movi	r4,56
 800ca7c:	2080b00e 	bge	r4,r2,800cd40 <__subdf3+0x514>
 800ca80:	198cb03a 	or	r6,r3,r6
 800ca84:	300ec03a 	cmpne	r7,r6,zero
 800ca88:	0005883a 	mov	r2,zero
 800ca8c:	3c4f883a 	add	r7,r7,r17
 800ca90:	3c63803a 	cmpltu	r17,r7,r17
 800ca94:	114b883a 	add	r5,r2,r5
 800ca98:	2c4b883a 	add	r5,r5,r17
 800ca9c:	3823883a 	mov	r17,r7
 800caa0:	2880202c 	andhi	r2,r5,128
 800caa4:	10002e26 	beq	r2,zero,800cb60 <__subdf3+0x334>
 800caa8:	84000044 	addi	r16,r16,1
 800caac:	0081ffc4 	movi	r2,2047
 800cab0:	8080de26 	beq	r16,r2,800ce2c <__subdf3+0x600>
 800cab4:	00bfe034 	movhi	r2,65408
 800cab8:	10bfffc4 	addi	r2,r2,-1
 800cabc:	288a703a 	and	r5,r5,r2
 800cac0:	880cd07a 	srli	r6,r17,1
 800cac4:	280897fa 	slli	r4,r5,31
 800cac8:	88c0004c 	andi	r3,r17,1
 800cacc:	30e2b03a 	or	r17,r6,r3
 800cad0:	280ad07a 	srli	r5,r5,1
 800cad4:	8922b03a 	or	r17,r17,r4
 800cad8:	003f7706 	br	800c8b8 <__subdf3+0x8c>
 800cadc:	1984b03a 	or	r2,r3,r6
 800cae0:	103f6e26 	beq	r2,zero,800c89c <__subdf3+0x70>
 800cae4:	39c03fcc 	andi	r7,r7,255
 800cae8:	003f6d06 	br	800c8a0 <__subdf3+0x74>
 800caec:	1146b03a 	or	r3,r2,r5
 800caf0:	18003f26 	beq	r3,zero,800cbf0 <__subdf3+0x3c4>
 800caf4:	00c00434 	movhi	r3,16
 800caf8:	29000234 	orhi	r4,r5,8
 800cafc:	18ffffc4 	addi	r3,r3,-1
 800cb00:	20c8703a 	and	r4,r4,r3
 800cb04:	003f8406 	br	800c918 <__subdf3+0xec>
 800cb08:	10bfffc4 	addi	r2,r2,-1
 800cb0c:	1000501e 	bne	r2,zero,800cc50 <__subdf3+0x424>
 800cb10:	898fc83a 	sub	r7,r17,r6
 800cb14:	89e3803a 	cmpltu	r17,r17,r7
 800cb18:	28cbc83a 	sub	r5,r5,r3
 800cb1c:	2c4bc83a 	sub	r5,r5,r17
 800cb20:	3823883a 	mov	r17,r7
 800cb24:	003fa106 	br	800c9ac <__subdf3+0x180>
 800cb28:	1988b03a 	or	r4,r3,r6
 800cb2c:	203f6226 	beq	r4,zero,800c8b8 <__subdf3+0x8c>
 800cb30:	10bfffc4 	addi	r2,r2,-1
 800cb34:	10009b1e 	bne	r2,zero,800cda4 <__subdf3+0x578>
 800cb38:	344d883a 	add	r6,r6,r17
 800cb3c:	3463803a 	cmpltu	r17,r6,r17
 800cb40:	194b883a 	add	r5,r3,r5
 800cb44:	2c4b883a 	add	r5,r5,r17
 800cb48:	3023883a 	mov	r17,r6
 800cb4c:	003fd406 	br	800caa0 <__subdf3+0x274>
 800cb50:	1106b03a 	or	r3,r2,r4
 800cb54:	1800b426 	beq	r3,zero,800ce28 <__subdf3+0x5fc>
 800cb58:	100b883a 	mov	r5,r2
 800cb5c:	2023883a 	mov	r17,r4
 800cb60:	888001cc 	andi	r2,r17,7
 800cb64:	103f561e 	bne	r2,zero,800c8c0 <__subdf3+0x94>
 800cb68:	9200004c 	andi	r8,r18,1
 800cb6c:	003fb206 	br	800ca38 <__subdf3+0x20c>
 800cb70:	1000531e 	bne	r2,zero,800ccc0 <__subdf3+0x494>
 800cb74:	80800044 	addi	r2,r16,1
 800cb78:	1081ffcc 	andi	r2,r2,2047
 800cb7c:	01000044 	movi	r4,1
 800cb80:	2080a00e 	bge	r4,r2,800ce04 <__subdf3+0x5d8>
 800cb84:	8985c83a 	sub	r2,r17,r6
 800cb88:	8889803a 	cmpltu	r4,r17,r2
 800cb8c:	28e7c83a 	sub	r19,r5,r3
 800cb90:	9927c83a 	sub	r19,r19,r4
 800cb94:	9900202c 	andhi	r4,r19,128
 800cb98:	20006226 	beq	r4,zero,800cd24 <__subdf3+0x4f8>
 800cb9c:	3463c83a 	sub	r17,r6,r17
 800cba0:	194bc83a 	sub	r5,r3,r5
 800cba4:	344d803a 	cmpltu	r6,r6,r17
 800cba8:	29a7c83a 	sub	r19,r5,r6
 800cbac:	3825883a 	mov	r18,r7
 800cbb0:	983f841e 	bne	r19,zero,800c9c4 <__subdf3+0x198>
 800cbb4:	8809883a 	mov	r4,r17
 800cbb8:	800d2f80 	call	800d2f8 <__clzsi2>
 800cbbc:	10800804 	addi	r2,r2,32
 800cbc0:	10fffe04 	addi	r3,r2,-8
 800cbc4:	010007c4 	movi	r4,31
 800cbc8:	20ff830e 	bge	r4,r3,800c9d8 <__subdf3+0x1ac>
 800cbcc:	14fff604 	addi	r19,r2,-40
 800cbd0:	8ce6983a 	sll	r19,r17,r19
 800cbd4:	0023883a 	mov	r17,zero
 800cbd8:	1c3f860e 	bge	r3,r16,800c9f4 <__subdf3+0x1c8>
 800cbdc:	017fe034 	movhi	r5,65408
 800cbe0:	297fffc4 	addi	r5,r5,-1
 800cbe4:	80e1c83a 	sub	r16,r16,r3
 800cbe8:	994a703a 	and	r5,r19,r5
 800cbec:	003f3206 	br	800c8b8 <__subdf3+0x8c>
 800cbf0:	0009883a 	mov	r4,zero
 800cbf4:	0005883a 	mov	r2,zero
 800cbf8:	003f4706 	br	800c918 <__subdf3+0xec>
 800cbfc:	198cb03a 	or	r6,r3,r6
 800cc00:	300cc03a 	cmpne	r6,r6,zero
 800cc04:	0005883a 	mov	r2,zero
 800cc08:	003f6306 	br	800c998 <__subdf3+0x16c>
 800cc0c:	10009d1e 	bne	r2,zero,800ce84 <__subdf3+0x658>
 800cc10:	81c00044 	addi	r7,r16,1
 800cc14:	3881ffcc 	andi	r2,r7,2047
 800cc18:	02400044 	movi	r9,1
 800cc1c:	4880680e 	bge	r9,r2,800cdc0 <__subdf3+0x594>
 800cc20:	0081ffc4 	movi	r2,2047
 800cc24:	3880ae26 	beq	r7,r2,800cee0 <__subdf3+0x6b4>
 800cc28:	344d883a 	add	r6,r6,r17
 800cc2c:	3463803a 	cmpltu	r17,r6,r17
 800cc30:	194b883a 	add	r5,r3,r5
 800cc34:	2c4b883a 	add	r5,r5,r17
 800cc38:	282297fa 	slli	r17,r5,31
 800cc3c:	300cd07a 	srli	r6,r6,1
 800cc40:	280ad07a 	srli	r5,r5,1
 800cc44:	3821883a 	mov	r16,r7
 800cc48:	89a2b03a 	or	r17,r17,r6
 800cc4c:	003f1a06 	br	800c8b8 <__subdf3+0x8c>
 800cc50:	0101ffc4 	movi	r4,2047
 800cc54:	813f431e 	bne	r16,r4,800c964 <__subdf3+0x138>
 800cc58:	003f1706 	br	800c8b8 <__subdf3+0x8c>
 800cc5c:	80bff844 	addi	r2,r16,-31
 800cc60:	00c00804 	movi	r3,32
 800cc64:	9884d83a 	srl	r2,r19,r2
 800cc68:	28c05126 	beq	r5,r3,800cdb0 <__subdf3+0x584>
 800cc6c:	00c00fc4 	movi	r3,63
 800cc70:	1c21c83a 	sub	r16,r3,r16
 800cc74:	9c26983a 	sll	r19,r19,r16
 800cc78:	9c62b03a 	or	r17,r19,r17
 800cc7c:	8822c03a 	cmpne	r17,r17,zero
 800cc80:	88a2b03a 	or	r17,r17,r2
 800cc84:	000b883a 	mov	r5,zero
 800cc88:	0021883a 	mov	r16,zero
 800cc8c:	003fb406 	br	800cb60 <__subdf3+0x334>
 800cc90:	113ff804 	addi	r4,r2,-32
 800cc94:	01c00804 	movi	r7,32
 800cc98:	1908d83a 	srl	r4,r3,r4
 800cc9c:	11c04626 	beq	r2,r7,800cdb8 <__subdf3+0x58c>
 800cca0:	01c01004 	movi	r7,64
 800cca4:	3885c83a 	sub	r2,r7,r2
 800cca8:	1884983a 	sll	r2,r3,r2
 800ccac:	118cb03a 	or	r6,r2,r6
 800ccb0:	300cc03a 	cmpne	r6,r6,zero
 800ccb4:	310cb03a 	or	r6,r6,r4
 800ccb8:	0005883a 	mov	r2,zero
 800ccbc:	003f3606 	br	800c998 <__subdf3+0x16c>
 800ccc0:	80002b26 	beq	r16,zero,800cd70 <__subdf3+0x544>
 800ccc4:	0101ffc4 	movi	r4,2047
 800ccc8:	51006926 	beq	r10,r4,800ce70 <__subdf3+0x644>
 800cccc:	0085c83a 	sub	r2,zero,r2
 800ccd0:	29402034 	orhi	r5,r5,128
 800ccd4:	01000e04 	movi	r4,56
 800ccd8:	20807d16 	blt	r4,r2,800ced0 <__subdf3+0x6a4>
 800ccdc:	010007c4 	movi	r4,31
 800cce0:	2080d916 	blt	r4,r2,800d048 <__subdf3+0x81c>
 800cce4:	01000804 	movi	r4,32
 800cce8:	2089c83a 	sub	r4,r4,r2
 800ccec:	2912983a 	sll	r9,r5,r4
 800ccf0:	8890d83a 	srl	r8,r17,r2
 800ccf4:	8908983a 	sll	r4,r17,r4
 800ccf8:	2884d83a 	srl	r2,r5,r2
 800ccfc:	4a22b03a 	or	r17,r9,r8
 800cd00:	2008c03a 	cmpne	r4,r4,zero
 800cd04:	8922b03a 	or	r17,r17,r4
 800cd08:	3463c83a 	sub	r17,r6,r17
 800cd0c:	1885c83a 	sub	r2,r3,r2
 800cd10:	344d803a 	cmpltu	r6,r6,r17
 800cd14:	118bc83a 	sub	r5,r2,r6
 800cd18:	5021883a 	mov	r16,r10
 800cd1c:	3825883a 	mov	r18,r7
 800cd20:	003f2206 	br	800c9ac <__subdf3+0x180>
 800cd24:	9886b03a 	or	r3,r19,r2
 800cd28:	18001c1e 	bne	r3,zero,800cd9c <__subdf3+0x570>
 800cd2c:	0011883a 	mov	r8,zero
 800cd30:	000b883a 	mov	r5,zero
 800cd34:	0023883a 	mov	r17,zero
 800cd38:	0021883a 	mov	r16,zero
 800cd3c:	003f3e06 	br	800ca38 <__subdf3+0x20c>
 800cd40:	010007c4 	movi	r4,31
 800cd44:	20803c16 	blt	r4,r2,800ce38 <__subdf3+0x60c>
 800cd48:	01000804 	movi	r4,32
 800cd4c:	2089c83a 	sub	r4,r4,r2
 800cd50:	1912983a 	sll	r9,r3,r4
 800cd54:	308ed83a 	srl	r7,r6,r2
 800cd58:	3108983a 	sll	r4,r6,r4
 800cd5c:	1884d83a 	srl	r2,r3,r2
 800cd60:	49ceb03a 	or	r7,r9,r7
 800cd64:	2008c03a 	cmpne	r4,r4,zero
 800cd68:	390eb03a 	or	r7,r7,r4
 800cd6c:	003f4706 	br	800ca8c <__subdf3+0x260>
 800cd70:	2c48b03a 	or	r4,r5,r17
 800cd74:	20003e26 	beq	r4,zero,800ce70 <__subdf3+0x644>
 800cd78:	0084303a 	nor	r2,zero,r2
 800cd7c:	10003a1e 	bne	r2,zero,800ce68 <__subdf3+0x63c>
 800cd80:	3463c83a 	sub	r17,r6,r17
 800cd84:	194bc83a 	sub	r5,r3,r5
 800cd88:	344d803a 	cmpltu	r6,r6,r17
 800cd8c:	298bc83a 	sub	r5,r5,r6
 800cd90:	5021883a 	mov	r16,r10
 800cd94:	3825883a 	mov	r18,r7
 800cd98:	003f0406 	br	800c9ac <__subdf3+0x180>
 800cd9c:	1023883a 	mov	r17,r2
 800cda0:	003f0706 	br	800c9c0 <__subdf3+0x194>
 800cda4:	0101ffc4 	movi	r4,2047
 800cda8:	813f331e 	bne	r16,r4,800ca78 <__subdf3+0x24c>
 800cdac:	003ec206 	br	800c8b8 <__subdf3+0x8c>
 800cdb0:	0027883a 	mov	r19,zero
 800cdb4:	003fb006 	br	800cc78 <__subdf3+0x44c>
 800cdb8:	0005883a 	mov	r2,zero
 800cdbc:	003fbb06 	br	800ccac <__subdf3+0x480>
 800cdc0:	2c44b03a 	or	r2,r5,r17
 800cdc4:	80008b1e 	bne	r16,zero,800cff4 <__subdf3+0x7c8>
 800cdc8:	1000b526 	beq	r2,zero,800d0a0 <__subdf3+0x874>
 800cdcc:	1984b03a 	or	r2,r3,r6
 800cdd0:	103eb926 	beq	r2,zero,800c8b8 <__subdf3+0x8c>
 800cdd4:	3449883a 	add	r4,r6,r17
 800cdd8:	2463803a 	cmpltu	r17,r4,r17
 800cddc:	194b883a 	add	r5,r3,r5
 800cde0:	2c4b883a 	add	r5,r5,r17
 800cde4:	2880202c 	andhi	r2,r5,128
 800cde8:	2023883a 	mov	r17,r4
 800cdec:	103f5c26 	beq	r2,zero,800cb60 <__subdf3+0x334>
 800cdf0:	00bfe034 	movhi	r2,65408
 800cdf4:	10bfffc4 	addi	r2,r2,-1
 800cdf8:	4821883a 	mov	r16,r9
 800cdfc:	288a703a 	and	r5,r5,r2
 800ce00:	003ead06 	br	800c8b8 <__subdf3+0x8c>
 800ce04:	2c44b03a 	or	r2,r5,r17
 800ce08:	8000291e 	bne	r16,zero,800ceb0 <__subdf3+0x684>
 800ce0c:	10004f1e 	bne	r2,zero,800cf4c <__subdf3+0x720>
 800ce10:	1984b03a 	or	r2,r3,r6
 800ce14:	10000426 	beq	r2,zero,800ce28 <__subdf3+0x5fc>
 800ce18:	180b883a 	mov	r5,r3
 800ce1c:	3023883a 	mov	r17,r6
 800ce20:	3825883a 	mov	r18,r7
 800ce24:	003ea406 	br	800c8b8 <__subdf3+0x8c>
 800ce28:	0011883a 	mov	r8,zero
 800ce2c:	000b883a 	mov	r5,zero
 800ce30:	0023883a 	mov	r17,zero
 800ce34:	003f0006 	br	800ca38 <__subdf3+0x20c>
 800ce38:	11fff804 	addi	r7,r2,-32
 800ce3c:	19c8d83a 	srl	r4,r3,r7
 800ce40:	01c00804 	movi	r7,32
 800ce44:	11c07e26 	beq	r2,r7,800d040 <__subdf3+0x814>
 800ce48:	01c01004 	movi	r7,64
 800ce4c:	3885c83a 	sub	r2,r7,r2
 800ce50:	1884983a 	sll	r2,r3,r2
 800ce54:	118cb03a 	or	r6,r2,r6
 800ce58:	300ec03a 	cmpne	r7,r6,zero
 800ce5c:	390eb03a 	or	r7,r7,r4
 800ce60:	0005883a 	mov	r2,zero
 800ce64:	003f0906 	br	800ca8c <__subdf3+0x260>
 800ce68:	0101ffc4 	movi	r4,2047
 800ce6c:	513f991e 	bne	r10,r4,800ccd4 <__subdf3+0x4a8>
 800ce70:	180b883a 	mov	r5,r3
 800ce74:	3023883a 	mov	r17,r6
 800ce78:	5021883a 	mov	r16,r10
 800ce7c:	3825883a 	mov	r18,r7
 800ce80:	003e8d06 	br	800c8b8 <__subdf3+0x8c>
 800ce84:	80001a1e 	bne	r16,zero,800cef0 <__subdf3+0x6c4>
 800ce88:	2c48b03a 	or	r4,r5,r17
 800ce8c:	20005526 	beq	r4,zero,800cfe4 <__subdf3+0x7b8>
 800ce90:	0084303a 	nor	r2,zero,r2
 800ce94:	1000511e 	bne	r2,zero,800cfdc <__subdf3+0x7b0>
 800ce98:	89a3883a 	add	r17,r17,r6
 800ce9c:	194b883a 	add	r5,r3,r5
 800cea0:	898d803a 	cmpltu	r6,r17,r6
 800cea4:	298b883a 	add	r5,r5,r6
 800cea8:	5021883a 	mov	r16,r10
 800ceac:	003efc06 	br	800caa0 <__subdf3+0x274>
 800ceb0:	1000341e 	bne	r2,zero,800cf84 <__subdf3+0x758>
 800ceb4:	1984b03a 	or	r2,r3,r6
 800ceb8:	10006f26 	beq	r2,zero,800d078 <__subdf3+0x84c>
 800cebc:	180b883a 	mov	r5,r3
 800cec0:	3023883a 	mov	r17,r6
 800cec4:	3825883a 	mov	r18,r7
 800cec8:	0401ffc4 	movi	r16,2047
 800cecc:	003e7a06 	br	800c8b8 <__subdf3+0x8c>
 800ced0:	2c62b03a 	or	r17,r5,r17
 800ced4:	8822c03a 	cmpne	r17,r17,zero
 800ced8:	0005883a 	mov	r2,zero
 800cedc:	003f8a06 	br	800cd08 <__subdf3+0x4dc>
 800cee0:	3821883a 	mov	r16,r7
 800cee4:	000b883a 	mov	r5,zero
 800cee8:	0023883a 	mov	r17,zero
 800ceec:	003ed206 	br	800ca38 <__subdf3+0x20c>
 800cef0:	0101ffc4 	movi	r4,2047
 800cef4:	51003b26 	beq	r10,r4,800cfe4 <__subdf3+0x7b8>
 800cef8:	0085c83a 	sub	r2,zero,r2
 800cefc:	29402034 	orhi	r5,r5,128
 800cf00:	01000e04 	movi	r4,56
 800cf04:	20806216 	blt	r4,r2,800d090 <__subdf3+0x864>
 800cf08:	010007c4 	movi	r4,31
 800cf0c:	20806b16 	blt	r4,r2,800d0bc <__subdf3+0x890>
 800cf10:	01000804 	movi	r4,32
 800cf14:	2089c83a 	sub	r4,r4,r2
 800cf18:	2912983a 	sll	r9,r5,r4
 800cf1c:	888ed83a 	srl	r7,r17,r2
 800cf20:	8908983a 	sll	r4,r17,r4
 800cf24:	2884d83a 	srl	r2,r5,r2
 800cf28:	49e2b03a 	or	r17,r9,r7
 800cf2c:	2008c03a 	cmpne	r4,r4,zero
 800cf30:	8922b03a 	or	r17,r17,r4
 800cf34:	89a3883a 	add	r17,r17,r6
 800cf38:	10c5883a 	add	r2,r2,r3
 800cf3c:	898d803a 	cmpltu	r6,r17,r6
 800cf40:	118b883a 	add	r5,r2,r6
 800cf44:	5021883a 	mov	r16,r10
 800cf48:	003ed506 	br	800caa0 <__subdf3+0x274>
 800cf4c:	1984b03a 	or	r2,r3,r6
 800cf50:	103e5926 	beq	r2,zero,800c8b8 <__subdf3+0x8c>
 800cf54:	8989c83a 	sub	r4,r17,r6
 800cf58:	8911803a 	cmpltu	r8,r17,r4
 800cf5c:	28c5c83a 	sub	r2,r5,r3
 800cf60:	1205c83a 	sub	r2,r2,r8
 800cf64:	1200202c 	andhi	r8,r2,128
 800cf68:	403ef926 	beq	r8,zero,800cb50 <__subdf3+0x324>
 800cf6c:	3463c83a 	sub	r17,r6,r17
 800cf70:	194bc83a 	sub	r5,r3,r5
 800cf74:	344d803a 	cmpltu	r6,r6,r17
 800cf78:	298bc83a 	sub	r5,r5,r6
 800cf7c:	3825883a 	mov	r18,r7
 800cf80:	003e4d06 	br	800c8b8 <__subdf3+0x8c>
 800cf84:	1984b03a 	or	r2,r3,r6
 800cf88:	10002b26 	beq	r2,zero,800d038 <__subdf3+0x80c>
 800cf8c:	2808d0fa 	srli	r4,r5,3
 800cf90:	8822d0fa 	srli	r17,r17,3
 800cf94:	280a977a 	slli	r5,r5,29
 800cf98:	2080022c 	andhi	r2,r4,8
 800cf9c:	2c62b03a 	or	r17,r5,r17
 800cfa0:	10000826 	beq	r2,zero,800cfc4 <__subdf3+0x798>
 800cfa4:	1810d0fa 	srli	r8,r3,3
 800cfa8:	4080022c 	andhi	r2,r8,8
 800cfac:	1000051e 	bne	r2,zero,800cfc4 <__subdf3+0x798>
 800cfb0:	300cd0fa 	srli	r6,r6,3
 800cfb4:	1804977a 	slli	r2,r3,29
 800cfb8:	4009883a 	mov	r4,r8
 800cfbc:	3825883a 	mov	r18,r7
 800cfc0:	11a2b03a 	or	r17,r2,r6
 800cfc4:	880ad77a 	srli	r5,r17,29
 800cfc8:	200890fa 	slli	r4,r4,3
 800cfcc:	882290fa 	slli	r17,r17,3
 800cfd0:	0401ffc4 	movi	r16,2047
 800cfd4:	290ab03a 	or	r5,r5,r4
 800cfd8:	003e3706 	br	800c8b8 <__subdf3+0x8c>
 800cfdc:	0101ffc4 	movi	r4,2047
 800cfe0:	513fc71e 	bne	r10,r4,800cf00 <__subdf3+0x6d4>
 800cfe4:	180b883a 	mov	r5,r3
 800cfe8:	3023883a 	mov	r17,r6
 800cfec:	5021883a 	mov	r16,r10
 800cff0:	003e3106 	br	800c8b8 <__subdf3+0x8c>
 800cff4:	10002d26 	beq	r2,zero,800d0ac <__subdf3+0x880>
 800cff8:	1984b03a 	or	r2,r3,r6
 800cffc:	10000e26 	beq	r2,zero,800d038 <__subdf3+0x80c>
 800d000:	2808d0fa 	srli	r4,r5,3
 800d004:	8822d0fa 	srli	r17,r17,3
 800d008:	280a977a 	slli	r5,r5,29
 800d00c:	2080022c 	andhi	r2,r4,8
 800d010:	2c62b03a 	or	r17,r5,r17
 800d014:	103feb26 	beq	r2,zero,800cfc4 <__subdf3+0x798>
 800d018:	180ed0fa 	srli	r7,r3,3
 800d01c:	3880022c 	andhi	r2,r7,8
 800d020:	103fe81e 	bne	r2,zero,800cfc4 <__subdf3+0x798>
 800d024:	300cd0fa 	srli	r6,r6,3
 800d028:	1804977a 	slli	r2,r3,29
 800d02c:	3809883a 	mov	r4,r7
 800d030:	11a2b03a 	or	r17,r2,r6
 800d034:	003fe306 	br	800cfc4 <__subdf3+0x798>
 800d038:	0401ffc4 	movi	r16,2047
 800d03c:	003e1e06 	br	800c8b8 <__subdf3+0x8c>
 800d040:	0005883a 	mov	r2,zero
 800d044:	003f8306 	br	800ce54 <__subdf3+0x628>
 800d048:	113ff804 	addi	r4,r2,-32
 800d04c:	02000804 	movi	r8,32
 800d050:	2908d83a 	srl	r4,r5,r4
 800d054:	12002526 	beq	r2,r8,800d0ec <__subdf3+0x8c0>
 800d058:	02001004 	movi	r8,64
 800d05c:	4085c83a 	sub	r2,r8,r2
 800d060:	288a983a 	sll	r5,r5,r2
 800d064:	2c62b03a 	or	r17,r5,r17
 800d068:	8822c03a 	cmpne	r17,r17,zero
 800d06c:	8922b03a 	or	r17,r17,r4
 800d070:	0005883a 	mov	r2,zero
 800d074:	003f2406 	br	800cd08 <__subdf3+0x4dc>
 800d078:	01402034 	movhi	r5,128
 800d07c:	0011883a 	mov	r8,zero
 800d080:	297fffc4 	addi	r5,r5,-1
 800d084:	047ffe04 	movi	r17,-8
 800d088:	0401ffc4 	movi	r16,2047
 800d08c:	003e6a06 	br	800ca38 <__subdf3+0x20c>
 800d090:	2c62b03a 	or	r17,r5,r17
 800d094:	8822c03a 	cmpne	r17,r17,zero
 800d098:	0005883a 	mov	r2,zero
 800d09c:	003fa506 	br	800cf34 <__subdf3+0x708>
 800d0a0:	180b883a 	mov	r5,r3
 800d0a4:	3023883a 	mov	r17,r6
 800d0a8:	003e0306 	br	800c8b8 <__subdf3+0x8c>
 800d0ac:	180b883a 	mov	r5,r3
 800d0b0:	3023883a 	mov	r17,r6
 800d0b4:	0401ffc4 	movi	r16,2047
 800d0b8:	003dff06 	br	800c8b8 <__subdf3+0x8c>
 800d0bc:	113ff804 	addi	r4,r2,-32
 800d0c0:	01c00804 	movi	r7,32
 800d0c4:	2908d83a 	srl	r4,r5,r4
 800d0c8:	11c00a26 	beq	r2,r7,800d0f4 <__subdf3+0x8c8>
 800d0cc:	01c01004 	movi	r7,64
 800d0d0:	3885c83a 	sub	r2,r7,r2
 800d0d4:	288a983a 	sll	r5,r5,r2
 800d0d8:	2c62b03a 	or	r17,r5,r17
 800d0dc:	8822c03a 	cmpne	r17,r17,zero
 800d0e0:	8922b03a 	or	r17,r17,r4
 800d0e4:	0005883a 	mov	r2,zero
 800d0e8:	003f9206 	br	800cf34 <__subdf3+0x708>
 800d0ec:	000b883a 	mov	r5,zero
 800d0f0:	003fdc06 	br	800d064 <__subdf3+0x838>
 800d0f4:	000b883a 	mov	r5,zero
 800d0f8:	003ff706 	br	800d0d8 <__subdf3+0x8ac>

0800d0fc <__fixdfsi>:
 800d0fc:	2806d53a 	srli	r3,r5,20
 800d100:	00800434 	movhi	r2,16
 800d104:	10bfffc4 	addi	r2,r2,-1
 800d108:	18c1ffcc 	andi	r3,r3,2047
 800d10c:	0180ff84 	movi	r6,1022
 800d110:	2884703a 	and	r2,r5,r2
 800d114:	280ad7fa 	srli	r5,r5,31
 800d118:	30c0130e 	bge	r6,r3,800d168 <__fixdfsi+0x6c>
 800d11c:	01810744 	movi	r6,1053
 800d120:	30c00d16 	blt	r6,r3,800d158 <__fixdfsi+0x5c>
 800d124:	01810cc4 	movi	r6,1075
 800d128:	30cdc83a 	sub	r6,r6,r3
 800d12c:	01c007c4 	movi	r7,31
 800d130:	10800434 	orhi	r2,r2,16
 800d134:	39800e0e 	bge	r7,r6,800d170 <__fixdfsi+0x74>
 800d138:	010104c4 	movi	r4,1043
 800d13c:	20c7c83a 	sub	r3,r4,r3
 800d140:	10c6d83a 	srl	r3,r2,r3
 800d144:	29403fcc 	andi	r5,r5,255
 800d148:	0145c83a 	sub	r2,zero,r5
 800d14c:	1884f03a 	xor	r2,r3,r2
 800d150:	1145883a 	add	r2,r2,r5
 800d154:	f800283a 	ret
 800d158:	00a00034 	movhi	r2,32768
 800d15c:	10bfffc4 	addi	r2,r2,-1
 800d160:	2885883a 	add	r2,r5,r2
 800d164:	f800283a 	ret
 800d168:	0005883a 	mov	r2,zero
 800d16c:	f800283a 	ret
 800d170:	18fefb44 	addi	r3,r3,-1043
 800d174:	2188d83a 	srl	r4,r4,r6
 800d178:	10c6983a 	sll	r3,r2,r3
 800d17c:	20c6b03a 	or	r3,r4,r3
 800d180:	003ff006 	br	800d144 <__fixdfsi+0x48>

0800d184 <__floatsidf>:
 800d184:	defffd04 	addi	sp,sp,-12
 800d188:	dc400115 	stw	r17,4(sp)
 800d18c:	dfc00215 	stw	ra,8(sp)
 800d190:	dc000015 	stw	r16,0(sp)
 800d194:	2023883a 	mov	r17,r4
 800d198:	20001426 	beq	r4,zero,800d1ec <__floatsidf+0x68>
 800d19c:	2020d7fa 	srli	r16,r4,31
 800d1a0:	80000126 	beq	r16,zero,800d1a8 <__floatsidf+0x24>
 800d1a4:	0123c83a 	sub	r17,zero,r4
 800d1a8:	8809883a 	mov	r4,r17
 800d1ac:	800d2f80 	call	800d2f8 <__clzsi2>
 800d1b0:	01410784 	movi	r5,1054
 800d1b4:	00c00284 	movi	r3,10
 800d1b8:	288bc83a 	sub	r5,r5,r2
 800d1bc:	18801c16 	blt	r3,r2,800d230 <__floatsidf+0xac>
 800d1c0:	00c002c4 	movi	r3,11
 800d1c4:	1887c83a 	sub	r3,r3,r2
 800d1c8:	88c8d83a 	srl	r4,r17,r3
 800d1cc:	00c00434 	movhi	r3,16
 800d1d0:	18ffffc4 	addi	r3,r3,-1
 800d1d4:	10800544 	addi	r2,r2,21
 800d1d8:	20c8703a 	and	r4,r4,r3
 800d1dc:	8884983a 	sll	r2,r17,r2
 800d1e0:	28c1ffcc 	andi	r3,r5,2047
 800d1e4:	800d883a 	mov	r6,r16
 800d1e8:	00000406 	br	800d1fc <__floatsidf+0x78>
 800d1ec:	000d883a 	mov	r6,zero
 800d1f0:	0007883a 	mov	r3,zero
 800d1f4:	0009883a 	mov	r4,zero
 800d1f8:	0005883a 	mov	r2,zero
 800d1fc:	180a953a 	slli	r5,r3,20
 800d200:	31803fcc 	andi	r6,r6,255
 800d204:	00c00434 	movhi	r3,16
 800d208:	300c97fa 	slli	r6,r6,31
 800d20c:	18ffffc4 	addi	r3,r3,-1
 800d210:	20c6703a 	and	r3,r4,r3
 800d214:	1946b03a 	or	r3,r3,r5
 800d218:	1986b03a 	or	r3,r3,r6
 800d21c:	dfc00217 	ldw	ra,8(sp)
 800d220:	dc400117 	ldw	r17,4(sp)
 800d224:	dc000017 	ldw	r16,0(sp)
 800d228:	dec00304 	addi	sp,sp,12
 800d22c:	f800283a 	ret
 800d230:	10fffd44 	addi	r3,r2,-11
 800d234:	88c8983a 	sll	r4,r17,r3
 800d238:	00800434 	movhi	r2,16
 800d23c:	10bfffc4 	addi	r2,r2,-1
 800d240:	2088703a 	and	r4,r4,r2
 800d244:	28c1ffcc 	andi	r3,r5,2047
 800d248:	800d883a 	mov	r6,r16
 800d24c:	0005883a 	mov	r2,zero
 800d250:	003fea06 	br	800d1fc <__floatsidf+0x78>

0800d254 <__floatunsidf>:
 800d254:	defffe04 	addi	sp,sp,-8
 800d258:	dc000015 	stw	r16,0(sp)
 800d25c:	dfc00115 	stw	ra,4(sp)
 800d260:	2021883a 	mov	r16,r4
 800d264:	20001026 	beq	r4,zero,800d2a8 <__floatunsidf+0x54>
 800d268:	800d2f80 	call	800d2f8 <__clzsi2>
 800d26c:	01410784 	movi	r5,1054
 800d270:	100d883a 	mov	r6,r2
 800d274:	288bc83a 	sub	r5,r5,r2
 800d278:	00800284 	movi	r2,10
 800d27c:	11801616 	blt	r2,r6,800d2d8 <__floatunsidf+0x84>
 800d280:	008002c4 	movi	r2,11
 800d284:	1185c83a 	sub	r2,r2,r6
 800d288:	8084d83a 	srl	r2,r16,r2
 800d28c:	00c00434 	movhi	r3,16
 800d290:	31c00544 	addi	r7,r6,21
 800d294:	18ffffc4 	addi	r3,r3,-1
 800d298:	81e0983a 	sll	r16,r16,r7
 800d29c:	10cc703a 	and	r6,r2,r3
 800d2a0:	2941ffcc 	andi	r5,r5,2047
 800d2a4:	00000206 	br	800d2b0 <__floatunsidf+0x5c>
 800d2a8:	000b883a 	mov	r5,zero
 800d2ac:	000d883a 	mov	r6,zero
 800d2b0:	280a953a 	slli	r5,r5,20
 800d2b4:	00c00434 	movhi	r3,16
 800d2b8:	18ffffc4 	addi	r3,r3,-1
 800d2bc:	30c6703a 	and	r3,r6,r3
 800d2c0:	8005883a 	mov	r2,r16
 800d2c4:	1946b03a 	or	r3,r3,r5
 800d2c8:	dfc00117 	ldw	ra,4(sp)
 800d2cc:	dc000017 	ldw	r16,0(sp)
 800d2d0:	dec00204 	addi	sp,sp,8
 800d2d4:	f800283a 	ret
 800d2d8:	31bffd44 	addi	r6,r6,-11
 800d2dc:	818c983a 	sll	r6,r16,r6
 800d2e0:	00800434 	movhi	r2,16
 800d2e4:	10bfffc4 	addi	r2,r2,-1
 800d2e8:	2941ffcc 	andi	r5,r5,2047
 800d2ec:	0021883a 	mov	r16,zero
 800d2f0:	308c703a 	and	r6,r6,r2
 800d2f4:	003fee06 	br	800d2b0 <__floatunsidf+0x5c>

0800d2f8 <__clzsi2>:
 800d2f8:	00bfffd4 	movui	r2,65535
 800d2fc:	11000b36 	bltu	r2,r4,800d32c <__clzsi2+0x34>
 800d300:	00803fc4 	movi	r2,255
 800d304:	1100122e 	bgeu	r2,r4,800d350 <__clzsi2+0x58>
 800d308:	00c00204 	movi	r3,8
 800d30c:	01400604 	movi	r5,24
 800d310:	20c8d83a 	srl	r4,r4,r3
 800d314:	008200b4 	movhi	r2,2050
 800d318:	10a70404 	addi	r2,r2,-25584
 800d31c:	1109883a 	add	r4,r2,r4
 800d320:	20800003 	ldbu	r2,0(r4)
 800d324:	2885c83a 	sub	r2,r5,r2
 800d328:	f800283a 	ret
 800d32c:	00804034 	movhi	r2,256
 800d330:	10bfffc4 	addi	r2,r2,-1
 800d334:	11000336 	bltu	r2,r4,800d344 <__clzsi2+0x4c>
 800d338:	00c00404 	movi	r3,16
 800d33c:	180b883a 	mov	r5,r3
 800d340:	003ff306 	br	800d310 <__clzsi2+0x18>
 800d344:	00c00604 	movi	r3,24
 800d348:	01400204 	movi	r5,8
 800d34c:	003ff006 	br	800d310 <__clzsi2+0x18>
 800d350:	0007883a 	mov	r3,zero
 800d354:	01400804 	movi	r5,32
 800d358:	003fed06 	br	800d310 <__clzsi2+0x18>

0800d35c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d35c:	defffe04 	addi	sp,sp,-8
 800d360:	dfc00115 	stw	ra,4(sp)
 800d364:	df000015 	stw	fp,0(sp)
 800d368:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d36c:	008200b4 	movhi	r2,2050
 800d370:	10914304 	addi	r2,r2,17676
 800d374:	10800017 	ldw	r2,0(r2)
 800d378:	10000526 	beq	r2,zero,800d390 <alt_get_errno+0x34>
 800d37c:	008200b4 	movhi	r2,2050
 800d380:	10914304 	addi	r2,r2,17676
 800d384:	10800017 	ldw	r2,0(r2)
 800d388:	103ee83a 	callr	r2
 800d38c:	00000206 	br	800d398 <alt_get_errno+0x3c>
 800d390:	008200f4 	movhi	r2,2051
 800d394:	10bb2d04 	addi	r2,r2,-4940
}
 800d398:	e037883a 	mov	sp,fp
 800d39c:	dfc00117 	ldw	ra,4(sp)
 800d3a0:	df000017 	ldw	fp,0(sp)
 800d3a4:	dec00204 	addi	sp,sp,8
 800d3a8:	f800283a 	ret

0800d3ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800d3ac:	defffb04 	addi	sp,sp,-20
 800d3b0:	dfc00415 	stw	ra,16(sp)
 800d3b4:	df000315 	stw	fp,12(sp)
 800d3b8:	df000304 	addi	fp,sp,12
 800d3bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800d3c0:	e0bfff17 	ldw	r2,-4(fp)
 800d3c4:	10000616 	blt	r2,zero,800d3e0 <close+0x34>
 800d3c8:	e0bfff17 	ldw	r2,-4(fp)
 800d3cc:	10c00324 	muli	r3,r2,12
 800d3d0:	008200b4 	movhi	r2,2050
 800d3d4:	108c8604 	addi	r2,r2,12824
 800d3d8:	1885883a 	add	r2,r3,r2
 800d3dc:	00000106 	br	800d3e4 <close+0x38>
 800d3e0:	0005883a 	mov	r2,zero
 800d3e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800d3e8:	e0bffd17 	ldw	r2,-12(fp)
 800d3ec:	10001926 	beq	r2,zero,800d454 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800d3f0:	e0bffd17 	ldw	r2,-12(fp)
 800d3f4:	10800017 	ldw	r2,0(r2)
 800d3f8:	10800417 	ldw	r2,16(r2)
 800d3fc:	10000626 	beq	r2,zero,800d418 <close+0x6c>
 800d400:	e0bffd17 	ldw	r2,-12(fp)
 800d404:	10800017 	ldw	r2,0(r2)
 800d408:	10800417 	ldw	r2,16(r2)
 800d40c:	e13ffd17 	ldw	r4,-12(fp)
 800d410:	103ee83a 	callr	r2
 800d414:	00000106 	br	800d41c <close+0x70>
 800d418:	0005883a 	mov	r2,zero
 800d41c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800d420:	e13fff17 	ldw	r4,-4(fp)
 800d424:	800dac40 	call	800dac4 <alt_release_fd>
    if (rval < 0)
 800d428:	e0bffe17 	ldw	r2,-8(fp)
 800d42c:	1000070e 	bge	r2,zero,800d44c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800d430:	800d35c0 	call	800d35c <alt_get_errno>
 800d434:	1007883a 	mov	r3,r2
 800d438:	e0bffe17 	ldw	r2,-8(fp)
 800d43c:	0085c83a 	sub	r2,zero,r2
 800d440:	18800015 	stw	r2,0(r3)
      return -1;
 800d444:	00bfffc4 	movi	r2,-1
 800d448:	00000706 	br	800d468 <close+0xbc>
    }
    return 0;
 800d44c:	0005883a 	mov	r2,zero
 800d450:	00000506 	br	800d468 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d454:	800d35c0 	call	800d35c <alt_get_errno>
 800d458:	1007883a 	mov	r3,r2
 800d45c:	00801444 	movi	r2,81
 800d460:	18800015 	stw	r2,0(r3)
    return -1;
 800d464:	00bfffc4 	movi	r2,-1
  }
}
 800d468:	e037883a 	mov	sp,fp
 800d46c:	dfc00117 	ldw	ra,4(sp)
 800d470:	df000017 	ldw	fp,0(sp)
 800d474:	dec00204 	addi	sp,sp,8
 800d478:	f800283a 	ret

0800d47c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d47c:	defffc04 	addi	sp,sp,-16
 800d480:	df000315 	stw	fp,12(sp)
 800d484:	df000304 	addi	fp,sp,12
 800d488:	e13ffd15 	stw	r4,-12(fp)
 800d48c:	e17ffe15 	stw	r5,-8(fp)
 800d490:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800d494:	e0bfff17 	ldw	r2,-4(fp)
}
 800d498:	e037883a 	mov	sp,fp
 800d49c:	df000017 	ldw	fp,0(sp)
 800d4a0:	dec00104 	addi	sp,sp,4
 800d4a4:	f800283a 	ret

0800d4a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d4a8:	defffe04 	addi	sp,sp,-8
 800d4ac:	dfc00115 	stw	ra,4(sp)
 800d4b0:	df000015 	stw	fp,0(sp)
 800d4b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d4b8:	008200b4 	movhi	r2,2050
 800d4bc:	10914304 	addi	r2,r2,17676
 800d4c0:	10800017 	ldw	r2,0(r2)
 800d4c4:	10000526 	beq	r2,zero,800d4dc <alt_get_errno+0x34>
 800d4c8:	008200b4 	movhi	r2,2050
 800d4cc:	10914304 	addi	r2,r2,17676
 800d4d0:	10800017 	ldw	r2,0(r2)
 800d4d4:	103ee83a 	callr	r2
 800d4d8:	00000206 	br	800d4e4 <alt_get_errno+0x3c>
 800d4dc:	008200f4 	movhi	r2,2051
 800d4e0:	10bb2d04 	addi	r2,r2,-4940
}
 800d4e4:	e037883a 	mov	sp,fp
 800d4e8:	dfc00117 	ldw	ra,4(sp)
 800d4ec:	df000017 	ldw	fp,0(sp)
 800d4f0:	dec00204 	addi	sp,sp,8
 800d4f4:	f800283a 	ret

0800d4f8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800d4f8:	defffb04 	addi	sp,sp,-20
 800d4fc:	dfc00415 	stw	ra,16(sp)
 800d500:	df000315 	stw	fp,12(sp)
 800d504:	df000304 	addi	fp,sp,12
 800d508:	e13ffe15 	stw	r4,-8(fp)
 800d50c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d510:	e0bffe17 	ldw	r2,-8(fp)
 800d514:	10000616 	blt	r2,zero,800d530 <fstat+0x38>
 800d518:	e0bffe17 	ldw	r2,-8(fp)
 800d51c:	10c00324 	muli	r3,r2,12
 800d520:	008200b4 	movhi	r2,2050
 800d524:	108c8604 	addi	r2,r2,12824
 800d528:	1885883a 	add	r2,r3,r2
 800d52c:	00000106 	br	800d534 <fstat+0x3c>
 800d530:	0005883a 	mov	r2,zero
 800d534:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800d538:	e0bffd17 	ldw	r2,-12(fp)
 800d53c:	10001026 	beq	r2,zero,800d580 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800d540:	e0bffd17 	ldw	r2,-12(fp)
 800d544:	10800017 	ldw	r2,0(r2)
 800d548:	10800817 	ldw	r2,32(r2)
 800d54c:	10000726 	beq	r2,zero,800d56c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800d550:	e0bffd17 	ldw	r2,-12(fp)
 800d554:	10800017 	ldw	r2,0(r2)
 800d558:	10800817 	ldw	r2,32(r2)
 800d55c:	e13ffd17 	ldw	r4,-12(fp)
 800d560:	e17fff17 	ldw	r5,-4(fp)
 800d564:	103ee83a 	callr	r2
 800d568:	00000a06 	br	800d594 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800d56c:	e0bfff17 	ldw	r2,-4(fp)
 800d570:	00c80004 	movi	r3,8192
 800d574:	10c00115 	stw	r3,4(r2)
      return 0;
 800d578:	0005883a 	mov	r2,zero
 800d57c:	00000506 	br	800d594 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d580:	800d4a80 	call	800d4a8 <alt_get_errno>
 800d584:	1007883a 	mov	r3,r2
 800d588:	00801444 	movi	r2,81
 800d58c:	18800015 	stw	r2,0(r3)
    return -1;
 800d590:	00bfffc4 	movi	r2,-1
  }
}
 800d594:	e037883a 	mov	sp,fp
 800d598:	dfc00117 	ldw	ra,4(sp)
 800d59c:	df000017 	ldw	fp,0(sp)
 800d5a0:	dec00204 	addi	sp,sp,8
 800d5a4:	f800283a 	ret

0800d5a8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d5a8:	defffe04 	addi	sp,sp,-8
 800d5ac:	dfc00115 	stw	ra,4(sp)
 800d5b0:	df000015 	stw	fp,0(sp)
 800d5b4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d5b8:	008200b4 	movhi	r2,2050
 800d5bc:	10914304 	addi	r2,r2,17676
 800d5c0:	10800017 	ldw	r2,0(r2)
 800d5c4:	10000526 	beq	r2,zero,800d5dc <alt_get_errno+0x34>
 800d5c8:	008200b4 	movhi	r2,2050
 800d5cc:	10914304 	addi	r2,r2,17676
 800d5d0:	10800017 	ldw	r2,0(r2)
 800d5d4:	103ee83a 	callr	r2
 800d5d8:	00000206 	br	800d5e4 <alt_get_errno+0x3c>
 800d5dc:	008200f4 	movhi	r2,2051
 800d5e0:	10bb2d04 	addi	r2,r2,-4940
}
 800d5e4:	e037883a 	mov	sp,fp
 800d5e8:	dfc00117 	ldw	ra,4(sp)
 800d5ec:	df000017 	ldw	fp,0(sp)
 800d5f0:	dec00204 	addi	sp,sp,8
 800d5f4:	f800283a 	ret

0800d5f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800d5f8:	deffed04 	addi	sp,sp,-76
 800d5fc:	dfc01215 	stw	ra,72(sp)
 800d600:	df001115 	stw	fp,68(sp)
 800d604:	df001104 	addi	fp,sp,68
 800d608:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d60c:	e0bfff17 	ldw	r2,-4(fp)
 800d610:	10000616 	blt	r2,zero,800d62c <isatty+0x34>
 800d614:	e0bfff17 	ldw	r2,-4(fp)
 800d618:	10c00324 	muli	r3,r2,12
 800d61c:	008200b4 	movhi	r2,2050
 800d620:	108c8604 	addi	r2,r2,12824
 800d624:	1885883a 	add	r2,r3,r2
 800d628:	00000106 	br	800d630 <isatty+0x38>
 800d62c:	0005883a 	mov	r2,zero
 800d630:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800d634:	e0bfef17 	ldw	r2,-68(fp)
 800d638:	10000e26 	beq	r2,zero,800d674 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800d63c:	e0bfef17 	ldw	r2,-68(fp)
 800d640:	10800017 	ldw	r2,0(r2)
 800d644:	10800817 	ldw	r2,32(r2)
 800d648:	1000021e 	bne	r2,zero,800d654 <isatty+0x5c>
    {
      return 1;
 800d64c:	00800044 	movi	r2,1
 800d650:	00000d06 	br	800d688 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800d654:	e0bff004 	addi	r2,fp,-64
 800d658:	e13fff17 	ldw	r4,-4(fp)
 800d65c:	100b883a 	mov	r5,r2
 800d660:	800d4f80 	call	800d4f8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800d664:	e0bff117 	ldw	r2,-60(fp)
 800d668:	10880020 	cmpeqi	r2,r2,8192
 800d66c:	10803fcc 	andi	r2,r2,255
 800d670:	00000506 	br	800d688 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d674:	800d5a80 	call	800d5a8 <alt_get_errno>
 800d678:	1007883a 	mov	r3,r2
 800d67c:	00801444 	movi	r2,81
 800d680:	18800015 	stw	r2,0(r3)
    return 0;
 800d684:	0005883a 	mov	r2,zero
  }
}
 800d688:	e037883a 	mov	sp,fp
 800d68c:	dfc00117 	ldw	ra,4(sp)
 800d690:	df000017 	ldw	fp,0(sp)
 800d694:	dec00204 	addi	sp,sp,8
 800d698:	f800283a 	ret

0800d69c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800d69c:	defffc04 	addi	sp,sp,-16
 800d6a0:	df000315 	stw	fp,12(sp)
 800d6a4:	df000304 	addi	fp,sp,12
 800d6a8:	e13ffd15 	stw	r4,-12(fp)
 800d6ac:	e17ffe15 	stw	r5,-8(fp)
 800d6b0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800d6b4:	e0fffe17 	ldw	r3,-8(fp)
 800d6b8:	e0bffd17 	ldw	r2,-12(fp)
 800d6bc:	18800c26 	beq	r3,r2,800d6f0 <alt_load_section+0x54>
  {
    while( to != end )
 800d6c0:	00000806 	br	800d6e4 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800d6c4:	e0bffe17 	ldw	r2,-8(fp)
 800d6c8:	10c00104 	addi	r3,r2,4
 800d6cc:	e0fffe15 	stw	r3,-8(fp)
 800d6d0:	e0fffd17 	ldw	r3,-12(fp)
 800d6d4:	19000104 	addi	r4,r3,4
 800d6d8:	e13ffd15 	stw	r4,-12(fp)
 800d6dc:	18c00017 	ldw	r3,0(r3)
 800d6e0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800d6e4:	e0fffe17 	ldw	r3,-8(fp)
 800d6e8:	e0bfff17 	ldw	r2,-4(fp)
 800d6ec:	18bff51e 	bne	r3,r2,800d6c4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 800d6f0:	e037883a 	mov	sp,fp
 800d6f4:	df000017 	ldw	fp,0(sp)
 800d6f8:	dec00104 	addi	sp,sp,4
 800d6fc:	f800283a 	ret

0800d700 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800d700:	defffe04 	addi	sp,sp,-8
 800d704:	dfc00115 	stw	ra,4(sp)
 800d708:	df000015 	stw	fp,0(sp)
 800d70c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800d710:	010200b4 	movhi	r4,2050
 800d714:	21116704 	addi	r4,r4,17820
 800d718:	014200b4 	movhi	r5,2050
 800d71c:	2967a904 	addi	r5,r5,-24924
 800d720:	018200b4 	movhi	r6,2050
 800d724:	31916704 	addi	r6,r6,17820
 800d728:	800d69c0 	call	800d69c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800d72c:	01020034 	movhi	r4,2048
 800d730:	21000804 	addi	r4,r4,32
 800d734:	01420034 	movhi	r5,2048
 800d738:	29400804 	addi	r5,r5,32
 800d73c:	01820034 	movhi	r6,2048
 800d740:	31809104 	addi	r6,r6,580
 800d744:	800d69c0 	call	800d69c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800d748:	010200b4 	movhi	r4,2050
 800d74c:	21264004 	addi	r4,r4,-26368
 800d750:	014200b4 	movhi	r5,2050
 800d754:	29664004 	addi	r5,r5,-26368
 800d758:	018200b4 	movhi	r6,2050
 800d75c:	31a7a904 	addi	r6,r6,-24924
 800d760:	800d69c0 	call	800d69c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800d764:	80185200 	call	8018520 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800d768:	80187a00 	call	80187a0 <alt_icache_flush_all>
}
 800d76c:	e037883a 	mov	sp,fp
 800d770:	dfc00117 	ldw	ra,4(sp)
 800d774:	df000017 	ldw	fp,0(sp)
 800d778:	dec00204 	addi	sp,sp,8
 800d77c:	f800283a 	ret

0800d780 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d780:	defffe04 	addi	sp,sp,-8
 800d784:	dfc00115 	stw	ra,4(sp)
 800d788:	df000015 	stw	fp,0(sp)
 800d78c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d790:	008200b4 	movhi	r2,2050
 800d794:	10914304 	addi	r2,r2,17676
 800d798:	10800017 	ldw	r2,0(r2)
 800d79c:	10000526 	beq	r2,zero,800d7b4 <alt_get_errno+0x34>
 800d7a0:	008200b4 	movhi	r2,2050
 800d7a4:	10914304 	addi	r2,r2,17676
 800d7a8:	10800017 	ldw	r2,0(r2)
 800d7ac:	103ee83a 	callr	r2
 800d7b0:	00000206 	br	800d7bc <alt_get_errno+0x3c>
 800d7b4:	008200f4 	movhi	r2,2051
 800d7b8:	10bb2d04 	addi	r2,r2,-4940
}
 800d7bc:	e037883a 	mov	sp,fp
 800d7c0:	dfc00117 	ldw	ra,4(sp)
 800d7c4:	df000017 	ldw	fp,0(sp)
 800d7c8:	dec00204 	addi	sp,sp,8
 800d7cc:	f800283a 	ret

0800d7d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800d7d0:	defff904 	addi	sp,sp,-28
 800d7d4:	dfc00615 	stw	ra,24(sp)
 800d7d8:	df000515 	stw	fp,20(sp)
 800d7dc:	df000504 	addi	fp,sp,20
 800d7e0:	e13ffd15 	stw	r4,-12(fp)
 800d7e4:	e17ffe15 	stw	r5,-8(fp)
 800d7e8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800d7ec:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d7f0:	e0bffd17 	ldw	r2,-12(fp)
 800d7f4:	10000616 	blt	r2,zero,800d810 <lseek+0x40>
 800d7f8:	e0bffd17 	ldw	r2,-12(fp)
 800d7fc:	10c00324 	muli	r3,r2,12
 800d800:	008200b4 	movhi	r2,2050
 800d804:	108c8604 	addi	r2,r2,12824
 800d808:	1885883a 	add	r2,r3,r2
 800d80c:	00000106 	br	800d814 <lseek+0x44>
 800d810:	0005883a 	mov	r2,zero
 800d814:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800d818:	e0bffc17 	ldw	r2,-16(fp)
 800d81c:	10001026 	beq	r2,zero,800d860 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800d820:	e0bffc17 	ldw	r2,-16(fp)
 800d824:	10800017 	ldw	r2,0(r2)
 800d828:	10800717 	ldw	r2,28(r2)
 800d82c:	10000926 	beq	r2,zero,800d854 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800d830:	e0bffc17 	ldw	r2,-16(fp)
 800d834:	10800017 	ldw	r2,0(r2)
 800d838:	10800717 	ldw	r2,28(r2)
 800d83c:	e13ffc17 	ldw	r4,-16(fp)
 800d840:	e17ffe17 	ldw	r5,-8(fp)
 800d844:	e1bfff17 	ldw	r6,-4(fp)
 800d848:	103ee83a 	callr	r2
 800d84c:	e0bffb15 	stw	r2,-20(fp)
 800d850:	00000506 	br	800d868 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800d854:	00bfde84 	movi	r2,-134
 800d858:	e0bffb15 	stw	r2,-20(fp)
 800d85c:	00000206 	br	800d868 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800d860:	00bfebc4 	movi	r2,-81
 800d864:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800d868:	e0bffb17 	ldw	r2,-20(fp)
 800d86c:	1000070e 	bge	r2,zero,800d88c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800d870:	800d7800 	call	800d780 <alt_get_errno>
 800d874:	1007883a 	mov	r3,r2
 800d878:	e0bffb17 	ldw	r2,-20(fp)
 800d87c:	0085c83a 	sub	r2,zero,r2
 800d880:	18800015 	stw	r2,0(r3)
    rc = -1;
 800d884:	00bfffc4 	movi	r2,-1
 800d888:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800d88c:	e0bffb17 	ldw	r2,-20(fp)
}
 800d890:	e037883a 	mov	sp,fp
 800d894:	dfc00117 	ldw	ra,4(sp)
 800d898:	df000017 	ldw	fp,0(sp)
 800d89c:	dec00204 	addi	sp,sp,8
 800d8a0:	f800283a 	ret

0800d8a4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800d8a4:	defff904 	addi	sp,sp,-28
 800d8a8:	dfc00615 	stw	ra,24(sp)
 800d8ac:	df000515 	stw	fp,20(sp)
 800d8b0:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800d8b4:	0009883a 	mov	r4,zero
 800d8b8:	8015cd40 	call	8015cd4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800d8bc:	800e8940 	call	800e894 <OSInit>
 800d8c0:	01000044 	movi	r4,1
 800d8c4:	80133f40 	call	80133f4 <OSSemCreate>
 800d8c8:	1007883a 	mov	r3,r2
 800d8cc:	008200f4 	movhi	r2,2051
 800d8d0:	10bb3604 	addi	r2,r2,-4904
 800d8d4:	10c00015 	stw	r3,0(r2)
 800d8d8:	01000044 	movi	r4,1
 800d8dc:	80133f40 	call	80133f4 <OSSemCreate>
 800d8e0:	1007883a 	mov	r3,r2
 800d8e4:	008200f4 	movhi	r2,2051
 800d8e8:	10bb3804 	addi	r2,r2,-4896
 800d8ec:	10c00015 	stw	r3,0(r2)
 800d8f0:	008200f4 	movhi	r2,2051
 800d8f4:	10bb3104 	addi	r2,r2,-4924
 800d8f8:	e0bffc15 	stw	r2,-16(fp)
 800d8fc:	00800044 	movi	r2,1
 800d900:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 800d904:	e0bffd0b 	ldhu	r2,-12(fp)
 800d908:	1009883a 	mov	r4,r2
 800d90c:	80133f40 	call	80133f4 <OSSemCreate>
 800d910:	1007883a 	mov	r3,r2
 800d914:	e0bffc17 	ldw	r2,-16(fp)
 800d918:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800d91c:	8015d080 	call	8015d08 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800d920:	010200b4 	movhi	r4,2050
 800d924:	21274704 	addi	r4,r4,-25316
 800d928:	014200b4 	movhi	r5,2050
 800d92c:	29674704 	addi	r5,r5,-25316
 800d930:	018200b4 	movhi	r6,2050
 800d934:	31a74704 	addi	r6,r6,-25316
 800d938:	80188900 	call	8018890 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800d93c:	80186580 	call	8018658 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800d940:	010200b4 	movhi	r4,2050
 800d944:	2121ad04 	addi	r4,r4,-31052
 800d948:	80195540 	call	8019554 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800d94c:	d10a0417 	ldw	r4,10256(gp)
 800d950:	d0ca0517 	ldw	r3,10260(gp)
 800d954:	d08a0617 	ldw	r2,10264(gp)
 800d958:	180b883a 	mov	r5,r3
 800d95c:	100d883a 	mov	r6,r2
 800d960:	80008b00 	call	80008b0 <main>
 800d964:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 800d968:	01000044 	movi	r4,1
 800d96c:	800d3ac0 	call	800d3ac <close>
  exit (result);
 800d970:	e13ffb17 	ldw	r4,-20(fp)
 800d974:	80195680 	call	8019568 <exit>

0800d978 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d978:	defffe04 	addi	sp,sp,-8
 800d97c:	dfc00115 	stw	ra,4(sp)
 800d980:	df000015 	stw	fp,0(sp)
 800d984:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d988:	008200b4 	movhi	r2,2050
 800d98c:	10914304 	addi	r2,r2,17676
 800d990:	10800017 	ldw	r2,0(r2)
 800d994:	10000526 	beq	r2,zero,800d9ac <alt_get_errno+0x34>
 800d998:	008200b4 	movhi	r2,2050
 800d99c:	10914304 	addi	r2,r2,17676
 800d9a0:	10800017 	ldw	r2,0(r2)
 800d9a4:	103ee83a 	callr	r2
 800d9a8:	00000206 	br	800d9b4 <alt_get_errno+0x3c>
 800d9ac:	008200f4 	movhi	r2,2051
 800d9b0:	10bb2d04 	addi	r2,r2,-4940
}
 800d9b4:	e037883a 	mov	sp,fp
 800d9b8:	dfc00117 	ldw	ra,4(sp)
 800d9bc:	df000017 	ldw	fp,0(sp)
 800d9c0:	dec00204 	addi	sp,sp,8
 800d9c4:	f800283a 	ret

0800d9c8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800d9c8:	defff904 	addi	sp,sp,-28
 800d9cc:	dfc00615 	stw	ra,24(sp)
 800d9d0:	df000515 	stw	fp,20(sp)
 800d9d4:	df000504 	addi	fp,sp,20
 800d9d8:	e13ffd15 	stw	r4,-12(fp)
 800d9dc:	e17ffe15 	stw	r5,-8(fp)
 800d9e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d9e4:	e0bffd17 	ldw	r2,-12(fp)
 800d9e8:	10000616 	blt	r2,zero,800da04 <read+0x3c>
 800d9ec:	e0bffd17 	ldw	r2,-12(fp)
 800d9f0:	10c00324 	muli	r3,r2,12
 800d9f4:	008200b4 	movhi	r2,2050
 800d9f8:	108c8604 	addi	r2,r2,12824
 800d9fc:	1885883a 	add	r2,r3,r2
 800da00:	00000106 	br	800da08 <read+0x40>
 800da04:	0005883a 	mov	r2,zero
 800da08:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800da0c:	e0bffb17 	ldw	r2,-20(fp)
 800da10:	10002226 	beq	r2,zero,800da9c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800da14:	e0bffb17 	ldw	r2,-20(fp)
 800da18:	10800217 	ldw	r2,8(r2)
 800da1c:	108000cc 	andi	r2,r2,3
 800da20:	10800060 	cmpeqi	r2,r2,1
 800da24:	1000181e 	bne	r2,zero,800da88 <read+0xc0>
        (fd->dev->read))
 800da28:	e0bffb17 	ldw	r2,-20(fp)
 800da2c:	10800017 	ldw	r2,0(r2)
 800da30:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800da34:	10001426 	beq	r2,zero,800da88 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800da38:	e0bffb17 	ldw	r2,-20(fp)
 800da3c:	10800017 	ldw	r2,0(r2)
 800da40:	10800517 	ldw	r2,20(r2)
 800da44:	e0ffff17 	ldw	r3,-4(fp)
 800da48:	e13ffb17 	ldw	r4,-20(fp)
 800da4c:	e17ffe17 	ldw	r5,-8(fp)
 800da50:	180d883a 	mov	r6,r3
 800da54:	103ee83a 	callr	r2
 800da58:	e0bffc15 	stw	r2,-16(fp)
 800da5c:	e0bffc17 	ldw	r2,-16(fp)
 800da60:	1000070e 	bge	r2,zero,800da80 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800da64:	800d9780 	call	800d978 <alt_get_errno>
 800da68:	1007883a 	mov	r3,r2
 800da6c:	e0bffc17 	ldw	r2,-16(fp)
 800da70:	0085c83a 	sub	r2,zero,r2
 800da74:	18800015 	stw	r2,0(r3)
          return -1;
 800da78:	00bfffc4 	movi	r2,-1
 800da7c:	00000c06 	br	800dab0 <read+0xe8>
        }
        return rval;
 800da80:	e0bffc17 	ldw	r2,-16(fp)
 800da84:	00000a06 	br	800dab0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800da88:	800d9780 	call	800d978 <alt_get_errno>
 800da8c:	1007883a 	mov	r3,r2
 800da90:	00800344 	movi	r2,13
 800da94:	18800015 	stw	r2,0(r3)
 800da98:	00000406 	br	800daac <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800da9c:	800d9780 	call	800d978 <alt_get_errno>
 800daa0:	1007883a 	mov	r3,r2
 800daa4:	00801444 	movi	r2,81
 800daa8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800daac:	00bfffc4 	movi	r2,-1
}
 800dab0:	e037883a 	mov	sp,fp
 800dab4:	dfc00117 	ldw	ra,4(sp)
 800dab8:	df000017 	ldw	fp,0(sp)
 800dabc:	dec00204 	addi	sp,sp,8
 800dac0:	f800283a 	ret

0800dac4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800dac4:	defffe04 	addi	sp,sp,-8
 800dac8:	df000115 	stw	fp,4(sp)
 800dacc:	df000104 	addi	fp,sp,4
 800dad0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800dad4:	e0bfff17 	ldw	r2,-4(fp)
 800dad8:	108000d0 	cmplti	r2,r2,3
 800dadc:	10000d1e 	bne	r2,zero,800db14 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800dae0:	008200b4 	movhi	r2,2050
 800dae4:	108c8604 	addi	r2,r2,12824
 800dae8:	e0ffff17 	ldw	r3,-4(fp)
 800daec:	18c00324 	muli	r3,r3,12
 800daf0:	18c00204 	addi	r3,r3,8
 800daf4:	10c5883a 	add	r2,r2,r3
 800daf8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800dafc:	008200b4 	movhi	r2,2050
 800db00:	108c8604 	addi	r2,r2,12824
 800db04:	e0ffff17 	ldw	r3,-4(fp)
 800db08:	18c00324 	muli	r3,r3,12
 800db0c:	10c5883a 	add	r2,r2,r3
 800db10:	10000015 	stw	zero,0(r2)
  }
}
 800db14:	e037883a 	mov	sp,fp
 800db18:	df000017 	ldw	fp,0(sp)
 800db1c:	dec00104 	addi	sp,sp,4
 800db20:	f800283a 	ret

0800db24 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800db24:	defff904 	addi	sp,sp,-28
 800db28:	df000615 	stw	fp,24(sp)
 800db2c:	df000604 	addi	fp,sp,24
 800db30:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800db34:	0005303a 	rdctl	r2,status
 800db38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800db3c:	e0fffc17 	ldw	r3,-16(fp)
 800db40:	00bfff84 	movi	r2,-2
 800db44:	1884703a 	and	r2,r3,r2
 800db48:	1001703a 	wrctl	status,r2
  
  return context;
 800db4c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800db50:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800db54:	d0a01617 	ldw	r2,-32680(gp)
 800db58:	10c000c4 	addi	r3,r2,3
 800db5c:	00bfff04 	movi	r2,-4
 800db60:	1884703a 	and	r2,r3,r2
 800db64:	d0a01615 	stw	r2,-32680(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800db68:	d0e01617 	ldw	r3,-32680(gp)
 800db6c:	e0bfff17 	ldw	r2,-4(fp)
 800db70:	1887883a 	add	r3,r3,r2
 800db74:	00840034 	movhi	r2,4096
 800db78:	10800004 	addi	r2,r2,0
 800db7c:	10c0062e 	bgeu	r2,r3,800db98 <sbrk+0x74>
 800db80:	e0bffa17 	ldw	r2,-24(fp)
 800db84:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800db88:	e0bffd17 	ldw	r2,-12(fp)
 800db8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800db90:	00bfffc4 	movi	r2,-1
 800db94:	00000b06 	br	800dbc4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800db98:	d0a01617 	ldw	r2,-32680(gp)
 800db9c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800dba0:	d0e01617 	ldw	r3,-32680(gp)
 800dba4:	e0bfff17 	ldw	r2,-4(fp)
 800dba8:	1885883a 	add	r2,r3,r2
 800dbac:	d0a01615 	stw	r2,-32680(gp)
 800dbb0:	e0bffa17 	ldw	r2,-24(fp)
 800dbb4:	e0bffe15 	stw	r2,-8(fp)
 800dbb8:	e0bffe17 	ldw	r2,-8(fp)
 800dbbc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800dbc0:	e0bffb17 	ldw	r2,-20(fp)
} 
 800dbc4:	e037883a 	mov	sp,fp
 800dbc8:	df000017 	ldw	fp,0(sp)
 800dbcc:	dec00104 	addi	sp,sp,4
 800dbd0:	f800283a 	ret

0800dbd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800dbd4:	defffe04 	addi	sp,sp,-8
 800dbd8:	dfc00115 	stw	ra,4(sp)
 800dbdc:	df000015 	stw	fp,0(sp)
 800dbe0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800dbe4:	008200b4 	movhi	r2,2050
 800dbe8:	10914304 	addi	r2,r2,17676
 800dbec:	10800017 	ldw	r2,0(r2)
 800dbf0:	10000526 	beq	r2,zero,800dc08 <alt_get_errno+0x34>
 800dbf4:	008200b4 	movhi	r2,2050
 800dbf8:	10914304 	addi	r2,r2,17676
 800dbfc:	10800017 	ldw	r2,0(r2)
 800dc00:	103ee83a 	callr	r2
 800dc04:	00000206 	br	800dc10 <alt_get_errno+0x3c>
 800dc08:	008200f4 	movhi	r2,2051
 800dc0c:	10bb2d04 	addi	r2,r2,-4940
}
 800dc10:	e037883a 	mov	sp,fp
 800dc14:	dfc00117 	ldw	ra,4(sp)
 800dc18:	df000017 	ldw	fp,0(sp)
 800dc1c:	dec00204 	addi	sp,sp,8
 800dc20:	f800283a 	ret

0800dc24 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800dc24:	defff904 	addi	sp,sp,-28
 800dc28:	dfc00615 	stw	ra,24(sp)
 800dc2c:	df000515 	stw	fp,20(sp)
 800dc30:	df000504 	addi	fp,sp,20
 800dc34:	e13ffd15 	stw	r4,-12(fp)
 800dc38:	e17ffe15 	stw	r5,-8(fp)
 800dc3c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800dc40:	e0bffd17 	ldw	r2,-12(fp)
 800dc44:	10000616 	blt	r2,zero,800dc60 <write+0x3c>
 800dc48:	e0bffd17 	ldw	r2,-12(fp)
 800dc4c:	10c00324 	muli	r3,r2,12
 800dc50:	008200b4 	movhi	r2,2050
 800dc54:	108c8604 	addi	r2,r2,12824
 800dc58:	1885883a 	add	r2,r3,r2
 800dc5c:	00000106 	br	800dc64 <write+0x40>
 800dc60:	0005883a 	mov	r2,zero
 800dc64:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800dc68:	e0bffb17 	ldw	r2,-20(fp)
 800dc6c:	10002126 	beq	r2,zero,800dcf4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800dc70:	e0bffb17 	ldw	r2,-20(fp)
 800dc74:	10800217 	ldw	r2,8(r2)
 800dc78:	108000cc 	andi	r2,r2,3
 800dc7c:	10001826 	beq	r2,zero,800dce0 <write+0xbc>
 800dc80:	e0bffb17 	ldw	r2,-20(fp)
 800dc84:	10800017 	ldw	r2,0(r2)
 800dc88:	10800617 	ldw	r2,24(r2)
 800dc8c:	10001426 	beq	r2,zero,800dce0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800dc90:	e0bffb17 	ldw	r2,-20(fp)
 800dc94:	10800017 	ldw	r2,0(r2)
 800dc98:	10800617 	ldw	r2,24(r2)
 800dc9c:	e0ffff17 	ldw	r3,-4(fp)
 800dca0:	e13ffb17 	ldw	r4,-20(fp)
 800dca4:	e17ffe17 	ldw	r5,-8(fp)
 800dca8:	180d883a 	mov	r6,r3
 800dcac:	103ee83a 	callr	r2
 800dcb0:	e0bffc15 	stw	r2,-16(fp)
 800dcb4:	e0bffc17 	ldw	r2,-16(fp)
 800dcb8:	1000070e 	bge	r2,zero,800dcd8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800dcbc:	800dbd40 	call	800dbd4 <alt_get_errno>
 800dcc0:	1007883a 	mov	r3,r2
 800dcc4:	e0bffc17 	ldw	r2,-16(fp)
 800dcc8:	0085c83a 	sub	r2,zero,r2
 800dccc:	18800015 	stw	r2,0(r3)
        return -1;
 800dcd0:	00bfffc4 	movi	r2,-1
 800dcd4:	00000c06 	br	800dd08 <write+0xe4>
      }
      return rval;
 800dcd8:	e0bffc17 	ldw	r2,-16(fp)
 800dcdc:	00000a06 	br	800dd08 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800dce0:	800dbd40 	call	800dbd4 <alt_get_errno>
 800dce4:	1007883a 	mov	r3,r2
 800dce8:	00800344 	movi	r2,13
 800dcec:	18800015 	stw	r2,0(r3)
 800dcf0:	00000406 	br	800dd04 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800dcf4:	800dbd40 	call	800dbd4 <alt_get_errno>
 800dcf8:	1007883a 	mov	r3,r2
 800dcfc:	00801444 	movi	r2,81
 800dd00:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800dd04:	00bfffc4 	movi	r2,-1
}
 800dd08:	e037883a 	mov	sp,fp
 800dd0c:	dfc00117 	ldw	ra,4(sp)
 800dd10:	df000017 	ldw	fp,0(sp)
 800dd14:	dec00204 	addi	sp,sp,8
 800dd18:	f800283a 	ret

0800dd1c <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 800dd1c:	deffdf04 	addi	sp,sp,-132
 800dd20:	dfc02015 	stw	ra,128(sp)
 800dd24:	df001f15 	stw	fp,124(sp)
 800dd28:	df001f04 	addi	fp,sp,124
 800dd2c:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 800dd30:	e0bfe204 	addi	r2,fp,-120
 800dd34:	01003fc4 	movi	r4,255
 800dd38:	100b883a 	mov	r5,r2
 800dd3c:	80155a80 	call	80155a8 <OSTaskQuery>
 800dd40:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 800dd44:	e0bffe83 	ldbu	r2,-6(fp)
 800dd48:	10803fcc 	andi	r2,r2,255
 800dd4c:	10000126 	beq	r2,zero,800dd54 <__env_lock+0x38>
    return;
 800dd50:	00001d06 	br	800ddc8 <__env_lock+0xac>

  id = tcb.OSTCBPrio;
 800dd54:	e0bfee83 	ldbu	r2,-70(fp)
 800dd58:	10803fcc 	andi	r2,r2,255
 800dd5c:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 800dd60:	d0ca0817 	ldw	r3,10272(gp)
 800dd64:	e0bffd04 	addi	r2,fp,-12
 800dd68:	1809883a 	mov	r4,r3
 800dd6c:	100b883a 	mov	r5,r2
 800dd70:	8013c400 	call	8013c40 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 800dd74:	e0bffe43 	ldbu	r2,-7(fp)
 800dd78:	10803fcc 	andi	r2,r2,255
 800dd7c:	10000726 	beq	r2,zero,800dd9c <__env_lock+0x80>
 800dd80:	d0a01717 	ldw	r2,-32676(gp)
 800dd84:	e0ffe117 	ldw	r3,-124(fp)
 800dd88:	1880041e 	bne	r3,r2,800dd9c <__env_lock+0x80>
  {
    /* we do; just count the recursion */

    locks++;
 800dd8c:	d08a0717 	ldw	r2,10268(gp)
 800dd90:	10800044 	addi	r2,r2,1
 800dd94:	d08a0715 	stw	r2,10268(gp)
 800dd98:	00000a06 	br	800ddc4 <__env_lock+0xa8>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 800dd9c:	d0ca0817 	ldw	r3,10272(gp)
 800dda0:	e0bffe84 	addi	r2,fp,-6
 800dda4:	1809883a 	mov	r4,r3
 800dda8:	000b883a 	mov	r5,zero
 800ddac:	100d883a 	mov	r6,r2
 800ddb0:	801375c0 	call	801375c <OSSemPend>
    locks  = 1;
 800ddb4:	00800044 	movi	r2,1
 800ddb8:	d08a0715 	stw	r2,10268(gp)
    lockid = id;
 800ddbc:	e0bfe117 	ldw	r2,-124(fp)
 800ddc0:	d0a01715 	stw	r2,-32676(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 800ddc4:	0001883a 	nop
}
 800ddc8:	e037883a 	mov	sp,fp
 800ddcc:	dfc00117 	ldw	ra,4(sp)
 800ddd0:	df000017 	ldw	fp,0(sp)
 800ddd4:	dec00204 	addi	sp,sp,8
 800ddd8:	f800283a 	ret

0800dddc <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 800dddc:	defffd04 	addi	sp,sp,-12
 800dde0:	dfc00215 	stw	ra,8(sp)
 800dde4:	df000115 	stw	fp,4(sp)
 800dde8:	df000104 	addi	fp,sp,4
 800ddec:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 800ddf0:	d08a0717 	ldw	r2,10268(gp)
 800ddf4:	1000011e 	bne	r2,zero,800ddfc <__env_unlock+0x20>
    return;
 800ddf8:	00000a06 	br	800de24 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 800ddfc:	d08a0717 	ldw	r2,10268(gp)
 800de00:	10bfffc4 	addi	r2,r2,-1
 800de04:	d08a0715 	stw	r2,10268(gp)
 800de08:	d08a0717 	ldw	r2,10268(gp)
 800de0c:	1000051e 	bne	r2,zero,800de24 <__env_unlock+0x48>
  {
    lockid = -1;
 800de10:	00bfffc4 	movi	r2,-1
 800de14:	d0a01715 	stw	r2,-32676(gp)
    OSSemPost( alt_envsem );
 800de18:	d08a0817 	ldw	r2,10272(gp)
 800de1c:	1009883a 	mov	r4,r2
 800de20:	8013b300 	call	8013b30 <OSSemPost>
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 800de24:	e037883a 	mov	sp,fp
 800de28:	dfc00117 	ldw	ra,4(sp)
 800de2c:	df000017 	ldw	fp,0(sp)
 800de30:	dec00204 	addi	sp,sp,8
 800de34:	f800283a 	ret

0800de38 <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 800de38:	deffdb04 	addi	sp,sp,-148
 800de3c:	dfc02415 	stw	ra,144(sp)
 800de40:	df002315 	stw	fp,140(sp)
 800de44:	df002304 	addi	fp,sp,140
 800de48:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800de4c:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 800de50:	008200f4 	movhi	r2,2051
 800de54:	10bb3944 	addi	r2,r2,-4891
 800de58:	10800003 	ldbu	r2,0(r2)
 800de5c:	10803fcc 	andi	r2,r2,255
 800de60:	10800060 	cmpeqi	r2,r2,1
 800de64:	1000011e 	bne	r2,zero,800de6c <__malloc_lock+0x34>
      return;
 800de68:	00003606 	br	800df44 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 800de6c:	e0bfe204 	addi	r2,fp,-120
 800de70:	01003fc4 	movi	r4,255
 800de74:	100b883a 	mov	r5,r2
 800de78:	80155a80 	call	80155a8 <OSTaskQuery>
 800de7c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 800de80:	e0bffe83 	ldbu	r2,-6(fp)
 800de84:	10803fcc 	andi	r2,r2,255
 800de88:	10000126 	beq	r2,zero,800de90 <__malloc_lock+0x58>
    return;
 800de8c:	00002d06 	br	800df44 <__malloc_lock+0x10c>

  id = tcb.OSTCBPrio;
 800de90:	e0bfee83 	ldbu	r2,-70(fp)
 800de94:	10803fcc 	andi	r2,r2,255
 800de98:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 800de9c:	d0ca0a17 	ldw	r3,10280(gp)
 800dea0:	e0bffd04 	addi	r2,fp,-12
 800dea4:	1809883a 	mov	r4,r3
 800dea8:	100b883a 	mov	r5,r2
 800deac:	8013c400 	call	8013c40 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800deb0:	0005303a 	rdctl	r2,status
 800deb4:	e0bfdf15 	stw	r2,-132(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800deb8:	e0ffdf17 	ldw	r3,-132(fp)
 800debc:	00bfff84 	movi	r2,-2
 800dec0:	1884703a 	and	r2,r3,r2
 800dec4:	1001703a 	wrctl	status,r2
  
  return context;
 800dec8:	e0bfdf17 	ldw	r2,-132(fp)
  
  OS_ENTER_CRITICAL();
 800decc:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 800ded0:	e0bffd0b 	ldhu	r2,-12(fp)
 800ded4:	10bfffcc 	andi	r2,r2,65535
 800ded8:	10000b1e 	bne	r2,zero,800df08 <__malloc_lock+0xd0>
 800dedc:	d0a01817 	ldw	r2,-32672(gp)
 800dee0:	e0ffde17 	ldw	r3,-136(fp)
 800dee4:	1880081e 	bne	r3,r2,800df08 <__malloc_lock+0xd0>
  {
    /* we do; just count the recursion */
    locks++;
 800dee8:	d08a0917 	ldw	r2,10276(gp)
 800deec:	10800044 	addi	r2,r2,1
 800def0:	d08a0915 	stw	r2,10276(gp)
 800def4:	e0bfdd17 	ldw	r2,-140(fp)
 800def8:	e0bfe015 	stw	r2,-128(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800defc:	e0bfe017 	ldw	r2,-128(fp)
 800df00:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 800df04:	00000e06 	br	800df40 <__malloc_lock+0x108>
 800df08:	e0bfdd17 	ldw	r2,-140(fp)
 800df0c:	e0bfe115 	stw	r2,-124(fp)
 800df10:	e0bfe117 	ldw	r2,-124(fp)
 800df14:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 800df18:	d0ca0a17 	ldw	r3,10280(gp)
 800df1c:	e0bffe84 	addi	r2,fp,-6
 800df20:	1809883a 	mov	r4,r3
 800df24:	000b883a 	mov	r5,zero
 800df28:	100d883a 	mov	r6,r2
 800df2c:	801375c0 	call	801375c <OSSemPend>
    locks  = 1;
 800df30:	00800044 	movi	r2,1
 800df34:	d08a0915 	stw	r2,10276(gp)
    lockid = id;
 800df38:	e0bfde17 	ldw	r2,-136(fp)
 800df3c:	d0a01815 	stw	r2,-32672(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 800df40:	0001883a 	nop
}
 800df44:	e037883a 	mov	sp,fp
 800df48:	dfc00117 	ldw	ra,4(sp)
 800df4c:	df000017 	ldw	fp,0(sp)
 800df50:	dec00204 	addi	sp,sp,8
 800df54:	f800283a 	ret

0800df58 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800df58:	defff804 	addi	sp,sp,-32
 800df5c:	dfc00715 	stw	ra,28(sp)
 800df60:	df000615 	stw	fp,24(sp)
 800df64:	df000604 	addi	fp,sp,24
 800df68:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800df6c:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 800df70:	008200f4 	movhi	r2,2051
 800df74:	10bb3944 	addi	r2,r2,-4891
 800df78:	10800003 	ldbu	r2,0(r2)
 800df7c:	10803fcc 	andi	r2,r2,255
 800df80:	10800060 	cmpeqi	r2,r2,1
 800df84:	1000011e 	bne	r2,zero,800df8c <__malloc_unlock+0x34>
      return;
 800df88:	00002206 	br	800e014 <__malloc_unlock+0xbc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800df8c:	0005303a 	rdctl	r2,status
 800df90:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800df94:	e0fffb17 	ldw	r3,-20(fp)
 800df98:	00bfff84 	movi	r2,-2
 800df9c:	1884703a 	and	r2,r3,r2
 800dfa0:	1001703a 	wrctl	status,r2
  
  return context;
 800dfa4:	e0bffb17 	ldw	r2,-20(fp)

  OS_ENTER_CRITICAL();
 800dfa8:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 800dfac:	d08a0917 	ldw	r2,10276(gp)
 800dfb0:	1000051e 	bne	r2,zero,800dfc8 <__malloc_unlock+0x70>
 800dfb4:	e0bffa17 	ldw	r2,-24(fp)
 800dfb8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800dfbc:	e0bffc17 	ldw	r2,-16(fp)
 800dfc0:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 800dfc4:	00001306 	br	800e014 <__malloc_unlock+0xbc>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 800dfc8:	d08a0917 	ldw	r2,10276(gp)
 800dfcc:	10bfffc4 	addi	r2,r2,-1
 800dfd0:	d08a0915 	stw	r2,10276(gp)
 800dfd4:	d08a0917 	ldw	r2,10276(gp)
 800dfd8:	10000a1e 	bne	r2,zero,800e004 <__malloc_unlock+0xac>
  {
    lockid = -1;
 800dfdc:	00bfffc4 	movi	r2,-1
 800dfe0:	d0a01815 	stw	r2,-32672(gp)
 800dfe4:	e0bffa17 	ldw	r2,-24(fp)
 800dfe8:	e0bffd15 	stw	r2,-12(fp)
 800dfec:	e0bffd17 	ldw	r2,-12(fp)
 800dff0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 800dff4:	d08a0a17 	ldw	r2,10280(gp)
 800dff8:	1009883a 	mov	r4,r2
 800dffc:	8013b300 	call	8013b30 <OSSemPost>
 800e000:	00000406 	br	800e014 <__malloc_unlock+0xbc>
 800e004:	e0bffa17 	ldw	r2,-24(fp)
 800e008:	e0bffe15 	stw	r2,-8(fp)
 800e00c:	e0bffe17 	ldw	r2,-8(fp)
 800e010:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 800e014:	e037883a 	mov	sp,fp
 800e018:	dfc00117 	ldw	ra,4(sp)
 800e01c:	df000017 	ldw	fp,0(sp)
 800e020:	dec00204 	addi	sp,sp,8
 800e024:	f800283a 	ret

0800e028 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 800e028:	defff704 	addi	sp,sp,-36
 800e02c:	dfc00815 	stw	ra,32(sp)
 800e030:	df000715 	stw	fp,28(sp)
 800e034:	df000704 	addi	fp,sp,28
 800e038:	e13ffd15 	stw	r4,-12(fp)
 800e03c:	e17ffe15 	stw	r5,-8(fp)
 800e040:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800e044:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 800e048:	e0bfff17 	ldw	r2,-4(fp)
 800e04c:	1000021e 	bne	r2,zero,800e058 <OSEventNameGet+0x30>
        return (0);
 800e050:	0005883a 	mov	r2,zero
 800e054:	00003706 	br	800e134 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 800e058:	e0bffd17 	ldw	r2,-12(fp)
 800e05c:	1000051e 	bne	r2,zero,800e074 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 800e060:	e0bfff17 	ldw	r2,-4(fp)
 800e064:	00c00104 	movi	r3,4
 800e068:	10c00005 	stb	r3,0(r2)
        return (0);
 800e06c:	0005883a 	mov	r2,zero
 800e070:	00003006 	br	800e134 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 800e074:	e0bffe17 	ldw	r2,-8(fp)
 800e078:	1000051e 	bne	r2,zero,800e090 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 800e07c:	e0bfff17 	ldw	r2,-4(fp)
 800e080:	00c00304 	movi	r3,12
 800e084:	10c00005 	stb	r3,0(r2)
        return (0);
 800e088:	0005883a 	mov	r2,zero
 800e08c:	00002906 	br	800e134 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 800e090:	d08a1903 	ldbu	r2,10340(gp)
 800e094:	10803fcc 	andi	r2,r2,255
 800e098:	10000526 	beq	r2,zero,800e0b0 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 800e09c:	e0bfff17 	ldw	r2,-4(fp)
 800e0a0:	00c00444 	movi	r3,17
 800e0a4:	10c00005 	stb	r3,0(r2)
        return (0);
 800e0a8:	0005883a 	mov	r2,zero
 800e0ac:	00002106 	br	800e134 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 800e0b0:	e0bffd17 	ldw	r2,-12(fp)
 800e0b4:	10800003 	ldbu	r2,0(r2)
 800e0b8:	10803fcc 	andi	r2,r2,255
 800e0bc:	10bfffc4 	addi	r2,r2,-1
 800e0c0:	10800128 	cmpgeui	r2,r2,4
 800e0c4:	10000526 	beq	r2,zero,800e0dc <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 800e0c8:	e0bfff17 	ldw	r2,-4(fp)
 800e0cc:	00c00044 	movi	r3,1
 800e0d0:	10c00005 	stb	r3,0(r2)
             return (0);
 800e0d4:	0005883a 	mov	r2,zero
 800e0d8:	00001606 	br	800e134 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 800e0dc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e0e0:	0005303a 	rdctl	r2,status
 800e0e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e0e8:	e0fffb17 	ldw	r3,-20(fp)
 800e0ec:	00bfff84 	movi	r2,-2
 800e0f0:	1884703a 	and	r2,r3,r2
 800e0f4:	1001703a 	wrctl	status,r2
  
  return context;
 800e0f8:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 800e0fc:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 800e100:	e0bffd17 	ldw	r2,-12(fp)
 800e104:	10800384 	addi	r2,r2,14
 800e108:	e13ffe17 	ldw	r4,-8(fp)
 800e10c:	100b883a 	mov	r5,r2
 800e110:	800fa7c0 	call	800fa7c <OS_StrCopy>
 800e114:	e0bffa05 	stb	r2,-24(fp)
 800e118:	e0bff917 	ldw	r2,-28(fp)
 800e11c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e120:	e0bffc17 	ldw	r2,-16(fp)
 800e124:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 800e128:	e0bfff17 	ldw	r2,-4(fp)
 800e12c:	10000005 	stb	zero,0(r2)
    return (len);
 800e130:	e0bffa03 	ldbu	r2,-24(fp)
}
 800e134:	e037883a 	mov	sp,fp
 800e138:	dfc00117 	ldw	ra,4(sp)
 800e13c:	df000017 	ldw	fp,0(sp)
 800e140:	dec00204 	addi	sp,sp,8
 800e144:	f800283a 	ret

0800e148 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 800e148:	defff604 	addi	sp,sp,-40
 800e14c:	dfc00915 	stw	ra,36(sp)
 800e150:	df000815 	stw	fp,32(sp)
 800e154:	df000804 	addi	fp,sp,32
 800e158:	e13ffd15 	stw	r4,-12(fp)
 800e15c:	e17ffe15 	stw	r5,-8(fp)
 800e160:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800e164:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 800e168:	e0bfff17 	ldw	r2,-4(fp)
 800e16c:	1000011e 	bne	r2,zero,800e174 <OSEventNameSet+0x2c>
        return;
 800e170:	00003f06 	br	800e270 <OSEventNameSet+0x128>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 800e174:	e0bffd17 	ldw	r2,-12(fp)
 800e178:	1000041e 	bne	r2,zero,800e18c <OSEventNameSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 800e17c:	e0bfff17 	ldw	r2,-4(fp)
 800e180:	00c00104 	movi	r3,4
 800e184:	10c00005 	stb	r3,0(r2)
        return;
 800e188:	00003906 	br	800e270 <OSEventNameSet+0x128>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 800e18c:	e0bffe17 	ldw	r2,-8(fp)
 800e190:	1000041e 	bne	r2,zero,800e1a4 <OSEventNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
 800e194:	e0bfff17 	ldw	r2,-4(fp)
 800e198:	00c00304 	movi	r3,12
 800e19c:	10c00005 	stb	r3,0(r2)
        return;
 800e1a0:	00003306 	br	800e270 <OSEventNameSet+0x128>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 800e1a4:	d08a1903 	ldbu	r2,10340(gp)
 800e1a8:	10803fcc 	andi	r2,r2,255
 800e1ac:	10000426 	beq	r2,zero,800e1c0 <OSEventNameSet+0x78>
        *perr = OS_ERR_NAME_SET_ISR;
 800e1b0:	e0bfff17 	ldw	r2,-4(fp)
 800e1b4:	00c00484 	movi	r3,18
 800e1b8:	10c00005 	stb	r3,0(r2)
        return;
 800e1bc:	00002c06 	br	800e270 <OSEventNameSet+0x128>
    }
    switch (pevent->OSEventType) {
 800e1c0:	e0bffd17 	ldw	r2,-12(fp)
 800e1c4:	10800003 	ldbu	r2,0(r2)
 800e1c8:	10803fcc 	andi	r2,r2,255
 800e1cc:	10bfffc4 	addi	r2,r2,-1
 800e1d0:	10800128 	cmpgeui	r2,r2,4
 800e1d4:	10000426 	beq	r2,zero,800e1e8 <OSEventNameSet+0xa0>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 800e1d8:	e0bfff17 	ldw	r2,-4(fp)
 800e1dc:	00c00044 	movi	r3,1
 800e1e0:	10c00005 	stb	r3,0(r2)
             return;
 800e1e4:	00002206 	br	800e270 <OSEventNameSet+0x128>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 800e1e8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e1ec:	0005303a 	rdctl	r2,status
 800e1f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e1f4:	e0fffa17 	ldw	r3,-24(fp)
 800e1f8:	00bfff84 	movi	r2,-2
 800e1fc:	1884703a 	and	r2,r3,r2
 800e200:	1001703a 	wrctl	status,r2
  
  return context;
 800e204:	e0bffa17 	ldw	r2,-24(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 800e208:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 800e20c:	e13ffe17 	ldw	r4,-8(fp)
 800e210:	800faf00 	call	800faf0 <OS_StrLen>
 800e214:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 800e218:	e0bff903 	ldbu	r2,-28(fp)
 800e21c:	10800830 	cmpltui	r2,r2,32
 800e220:	1000081e 	bne	r2,zero,800e244 <OSEventNameSet+0xfc>
 800e224:	e0bff817 	ldw	r2,-32(fp)
 800e228:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e22c:	e0bffb17 	ldw	r2,-20(fp)
 800e230:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 800e234:	e0bfff17 	ldw	r2,-4(fp)
 800e238:	00c002c4 	movi	r3,11
 800e23c:	10c00005 	stb	r3,0(r2)
        return;
 800e240:	00000b06 	br	800e270 <OSEventNameSet+0x128>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 800e244:	e0bffd17 	ldw	r2,-12(fp)
 800e248:	10800384 	addi	r2,r2,14
 800e24c:	1009883a 	mov	r4,r2
 800e250:	e17ffe17 	ldw	r5,-8(fp)
 800e254:	800fa7c0 	call	800fa7c <OS_StrCopy>
 800e258:	e0bff817 	ldw	r2,-32(fp)
 800e25c:	e0bffc15 	stw	r2,-16(fp)
 800e260:	e0bffc17 	ldw	r2,-16(fp)
 800e264:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 800e268:	e0bfff17 	ldw	r2,-4(fp)
 800e26c:	10000005 	stb	zero,0(r2)
}
 800e270:	e037883a 	mov	sp,fp
 800e274:	dfc00117 	ldw	ra,4(sp)
 800e278:	df000017 	ldw	fp,0(sp)
 800e27c:	dec00204 	addi	sp,sp,8
 800e280:	f800283a 	ret

0800e284 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 800e284:	deffed04 	addi	sp,sp,-76
 800e288:	dfc01215 	stw	ra,72(sp)
 800e28c:	df001115 	stw	fp,68(sp)
 800e290:	df001104 	addi	fp,sp,68
 800e294:	e13ffc15 	stw	r4,-16(fp)
 800e298:	e17ffd15 	stw	r5,-12(fp)
 800e29c:	e1bffe15 	stw	r6,-8(fp)
 800e2a0:	3805883a 	mov	r2,r7
 800e2a4:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 800e2a8:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 800e2ac:	e0800217 	ldw	r2,8(fp)
 800e2b0:	1000021e 	bne	r2,zero,800e2bc <OSEventPendMulti+0x38>
        return (0);
 800e2b4:	0005883a 	mov	r2,zero
 800e2b8:	00017106 	br	800e880 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 800e2bc:	e0bffc17 	ldw	r2,-16(fp)
 800e2c0:	1000051e 	bne	r2,zero,800e2d8 <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 800e2c4:	e0800217 	ldw	r2,8(fp)
 800e2c8:	00c00104 	movi	r3,4
 800e2cc:	10c00005 	stb	r3,0(r2)
        return (0);
 800e2d0:	0005883a 	mov	r2,zero
 800e2d4:	00016a06 	br	800e880 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 800e2d8:	e0bffd17 	ldw	r2,-12(fp)
 800e2dc:	1000051e 	bne	r2,zero,800e2f4 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 800e2e0:	e0800217 	ldw	r2,8(fp)
 800e2e4:	00c00104 	movi	r3,4
 800e2e8:	10c00005 	stb	r3,0(r2)
        return (0);
 800e2ec:	0005883a 	mov	r2,zero
 800e2f0:	00016306 	br	800e880 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 800e2f4:	e0bffe17 	ldw	r2,-8(fp)
 800e2f8:	1000051e 	bne	r2,zero,800e310 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 800e2fc:	e0800217 	ldw	r2,8(fp)
 800e300:	00c00104 	movi	r3,4
 800e304:	10c00005 	stb	r3,0(r2)
        return (0);
 800e308:	0005883a 	mov	r2,zero
 800e30c:	00015c06 	br	800e880 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 800e310:	e0bffd17 	ldw	r2,-12(fp)
 800e314:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 800e318:	e0bffc17 	ldw	r2,-16(fp)
 800e31c:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 800e320:	e0bfef17 	ldw	r2,-68(fp)
 800e324:	10800017 	ldw	r2,0(r2)
 800e328:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 800e32c:	00001906 	br	800e394 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 800e330:	e0bff017 	ldw	r2,-64(fp)
 800e334:	10800003 	ldbu	r2,0(r2)
 800e338:	10803fcc 	andi	r2,r2,255
 800e33c:	10c000a0 	cmpeqi	r3,r2,2
 800e340:	1800091e 	bne	r3,zero,800e368 <OSEventPendMulti+0xe4>
 800e344:	10c000e0 	cmpeqi	r3,r2,3
 800e348:	1800091e 	bne	r3,zero,800e370 <OSEventPendMulti+0xec>
 800e34c:	10800060 	cmpeqi	r2,r2,1
 800e350:	1000091e 	bne	r2,zero,800e378 <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 800e354:	e0800217 	ldw	r2,8(fp)
 800e358:	00c00044 	movi	r3,1
 800e35c:	10c00005 	stb	r3,0(r2)
                 return (0);
 800e360:	0005883a 	mov	r2,zero
 800e364:	00014606 	br	800e880 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 800e368:	0001883a 	nop
 800e36c:	00000306 	br	800e37c <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 800e370:	0001883a 	nop
 800e374:	00000106 	br	800e37c <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 800e378:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 800e37c:	e0bfef17 	ldw	r2,-68(fp)
 800e380:	10800104 	addi	r2,r2,4
 800e384:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 800e388:	e0bfef17 	ldw	r2,-68(fp)
 800e38c:	10800017 	ldw	r2,0(r2)
 800e390:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 800e394:	e0bff017 	ldw	r2,-64(fp)
 800e398:	103fe51e 	bne	r2,zero,800e330 <OSEventPendMulti+0xac>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 800e39c:	d08a1903 	ldbu	r2,10340(gp)
 800e3a0:	10803fcc 	andi	r2,r2,255
 800e3a4:	10000526 	beq	r2,zero,800e3bc <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 800e3a8:	e0800217 	ldw	r2,8(fp)
 800e3ac:	00c00084 	movi	r3,2
 800e3b0:	10c00005 	stb	r3,0(r2)
        return (0);
 800e3b4:	0005883a 	mov	r2,zero
 800e3b8:	00013106 	br	800e880 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 800e3bc:	d08a0b03 	ldbu	r2,10284(gp)
 800e3c0:	10803fcc 	andi	r2,r2,255
 800e3c4:	10000526 	beq	r2,zero,800e3dc <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 800e3c8:	e0800217 	ldw	r2,8(fp)
 800e3cc:	00c00344 	movi	r3,13
 800e3d0:	10c00005 	stb	r3,0(r2)
        return (0);
 800e3d4:	0005883a 	mov	r2,zero
 800e3d8:	00012906 	br	800e880 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e3dc:	0005303a 	rdctl	r2,status
 800e3e0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e3e4:	e0fff517 	ldw	r3,-44(fp)
 800e3e8:	00bfff84 	movi	r2,-2
 800e3ec:	1884703a 	and	r2,r3,r2
 800e3f0:	1001703a 	wrctl	status,r2
  
  return context;
 800e3f4:	e0bff517 	ldw	r2,-44(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 800e3f8:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 800e3fc:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 800e400:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 800e404:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 800e408:	e0bffc17 	ldw	r2,-16(fp)
 800e40c:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 800e410:	e0bfef17 	ldw	r2,-68(fp)
 800e414:	10800017 	ldw	r2,0(r2)
 800e418:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 800e41c:	00008106 	br	800e624 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 800e420:	e0bff017 	ldw	r2,-64(fp)
 800e424:	10800003 	ldbu	r2,0(r2)
 800e428:	10803fcc 	andi	r2,r2,255
 800e42c:	10c000a0 	cmpeqi	r3,r2,2
 800e430:	18003c1e 	bne	r3,zero,800e524 <OSEventPendMulti+0x2a0>
 800e434:	10c000e0 	cmpeqi	r3,r2,3
 800e438:	1800031e 	bne	r3,zero,800e448 <OSEventPendMulti+0x1c4>
 800e43c:	10800060 	cmpeqi	r2,r2,1
 800e440:	10001e1e 	bne	r2,zero,800e4bc <OSEventPendMulti+0x238>
 800e444:	00006606 	br	800e5e0 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 800e448:	e0bff017 	ldw	r2,-64(fp)
 800e44c:	1080020b 	ldhu	r2,8(r2)
 800e450:	10bfffcc 	andi	r2,r2,65535
 800e454:	10001526 	beq	r2,zero,800e4ac <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 800e458:	e0bff017 	ldw	r2,-64(fp)
 800e45c:	1080020b 	ldhu	r2,8(r2)
 800e460:	10bfffc4 	addi	r2,r2,-1
 800e464:	1007883a 	mov	r3,r2
 800e468:	e0bff017 	ldw	r2,-64(fp)
 800e46c:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 800e470:	e0bffd17 	ldw	r2,-12(fp)
 800e474:	10c00104 	addi	r3,r2,4
 800e478:	e0fffd15 	stw	r3,-12(fp)
 800e47c:	e0fff017 	ldw	r3,-64(fp)
 800e480:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 800e484:	00800044 	movi	r2,1
 800e488:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 800e48c:	e0bffe17 	ldw	r2,-8(fp)
 800e490:	10c00104 	addi	r3,r2,4
 800e494:	e0fffe15 	stw	r3,-8(fp)
 800e498:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 800e49c:	e0bff18b 	ldhu	r2,-58(fp)
 800e4a0:	10800044 	addi	r2,r2,1
 800e4a4:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 800e4a8:	00005806 	br	800e60c <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 800e4ac:	e0bff203 	ldbu	r2,-56(fp)
 800e4b0:	10800054 	ori	r2,r2,1
 800e4b4:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 800e4b8:	00005406 	br	800e60c <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 800e4bc:	e0bff017 	ldw	r2,-64(fp)
 800e4c0:	10800117 	ldw	r2,4(r2)
 800e4c4:	10001326 	beq	r2,zero,800e514 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 800e4c8:	e0bffe17 	ldw	r2,-8(fp)
 800e4cc:	10c00104 	addi	r3,r2,4
 800e4d0:	e0fffe15 	stw	r3,-8(fp)
 800e4d4:	e0fff017 	ldw	r3,-64(fp)
 800e4d8:	18c00117 	ldw	r3,4(r3)
 800e4dc:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 800e4e0:	e0bff017 	ldw	r2,-64(fp)
 800e4e4:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 800e4e8:	e0bffd17 	ldw	r2,-12(fp)
 800e4ec:	10c00104 	addi	r3,r2,4
 800e4f0:	e0fffd15 	stw	r3,-12(fp)
 800e4f4:	e0fff017 	ldw	r3,-64(fp)
 800e4f8:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 800e4fc:	00800044 	movi	r2,1
 800e500:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 800e504:	e0bff18b 	ldhu	r2,-58(fp)
 800e508:	10800044 	addi	r2,r2,1
 800e50c:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 800e510:	00003e06 	br	800e60c <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 800e514:	e0bff203 	ldbu	r2,-56(fp)
 800e518:	10800094 	ori	r2,r2,2
 800e51c:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 800e520:	00003a06 	br	800e60c <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 800e524:	e0bff017 	ldw	r2,-64(fp)
 800e528:	10800117 	ldw	r2,4(r2)
 800e52c:	e0bff415 	stw	r2,-48(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 800e530:	e0bff417 	ldw	r2,-48(fp)
 800e534:	1080058b 	ldhu	r2,22(r2)
 800e538:	10bfffcc 	andi	r2,r2,65535
 800e53c:	10002426 	beq	r2,zero,800e5d0 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 800e540:	e0bffe17 	ldw	r2,-8(fp)
 800e544:	10c00104 	addi	r3,r2,4
 800e548:	e0fffe15 	stw	r3,-8(fp)
 800e54c:	e0fff417 	ldw	r3,-48(fp)
 800e550:	18c00417 	ldw	r3,16(r3)
 800e554:	19400104 	addi	r5,r3,4
 800e558:	e13ff417 	ldw	r4,-48(fp)
 800e55c:	21400415 	stw	r5,16(r4)
 800e560:	18c00017 	ldw	r3,0(r3)
 800e564:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 800e568:	e0bff417 	ldw	r2,-48(fp)
 800e56c:	10c00417 	ldw	r3,16(r2)
 800e570:	e0bff417 	ldw	r2,-48(fp)
 800e574:	10800217 	ldw	r2,8(r2)
 800e578:	1880041e 	bne	r3,r2,800e58c <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 800e57c:	e0bff417 	ldw	r2,-48(fp)
 800e580:	10c00117 	ldw	r3,4(r2)
 800e584:	e0bff417 	ldw	r2,-48(fp)
 800e588:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 800e58c:	e0bff417 	ldw	r2,-48(fp)
 800e590:	1080058b 	ldhu	r2,22(r2)
 800e594:	10bfffc4 	addi	r2,r2,-1
 800e598:	1007883a 	mov	r3,r2
 800e59c:	e0bff417 	ldw	r2,-48(fp)
 800e5a0:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 800e5a4:	e0bffd17 	ldw	r2,-12(fp)
 800e5a8:	10c00104 	addi	r3,r2,4
 800e5ac:	e0fffd15 	stw	r3,-12(fp)
 800e5b0:	e0fff017 	ldw	r3,-64(fp)
 800e5b4:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 800e5b8:	00800044 	movi	r2,1
 800e5bc:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 800e5c0:	e0bff18b 	ldhu	r2,-58(fp)
 800e5c4:	10800044 	addi	r2,r2,1
 800e5c8:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 800e5cc:	00000f06 	br	800e60c <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 800e5d0:	e0bff203 	ldbu	r2,-56(fp)
 800e5d4:	10800114 	ori	r2,r2,4
 800e5d8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 800e5dc:	00000b06 	br	800e60c <OSEventPendMulti+0x388>
 800e5e0:	e0bff317 	ldw	r2,-52(fp)
 800e5e4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e5e8:	e0bff617 	ldw	r2,-40(fp)
 800e5ec:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 800e5f0:	e0bffd17 	ldw	r2,-12(fp)
 800e5f4:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 800e5f8:	e0800217 	ldw	r2,8(fp)
 800e5fc:	00c00044 	movi	r3,1
 800e600:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 800e604:	e0bff18b 	ldhu	r2,-58(fp)
 800e608:	00009d06 	br	800e880 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 800e60c:	e0bfef17 	ldw	r2,-68(fp)
 800e610:	10800104 	addi	r2,r2,4
 800e614:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 800e618:	e0bfef17 	ldw	r2,-68(fp)
 800e61c:	10800017 	ldw	r2,0(r2)
 800e620:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 800e624:	e0bff017 	ldw	r2,-64(fp)
 800e628:	103f7d1e 	bne	r2,zero,800e420 <OSEventPendMulti+0x19c>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 800e62c:	e0bff103 	ldbu	r2,-60(fp)
 800e630:	10800058 	cmpnei	r2,r2,1
 800e634:	10000a1e 	bne	r2,zero,800e660 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 800e638:	e0bffd17 	ldw	r2,-12(fp)
 800e63c:	10000015 	stw	zero,0(r2)
 800e640:	e0bff317 	ldw	r2,-52(fp)
 800e644:	e0bff715 	stw	r2,-36(fp)
 800e648:	e0bff717 	ldw	r2,-36(fp)
 800e64c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 800e650:	e0800217 	ldw	r2,8(fp)
 800e654:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 800e658:	e0bff18b 	ldhu	r2,-58(fp)
 800e65c:	00008806 	br	800e880 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 800e660:	d08a1a17 	ldw	r2,10344(gp)
 800e664:	d0ca1a17 	ldw	r3,10344(gp)
 800e668:	19000c03 	ldbu	r4,48(r3)
 800e66c:	e0fff203 	ldbu	r3,-56(fp)
 800e670:	20c6b03a 	or	r3,r4,r3
 800e674:	1809883a 	mov	r4,r3
 800e678:	00ffe004 	movi	r3,-128
 800e67c:	20c6b03a 	or	r3,r4,r3
 800e680:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 800e684:	d08a1a17 	ldw	r2,10344(gp)
 800e688:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 800e68c:	d08a1a17 	ldw	r2,10344(gp)
 800e690:	e0ffff0b 	ldhu	r3,-4(fp)
 800e694:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 800e698:	e13ffc17 	ldw	r4,-16(fp)
 800e69c:	800f1cc0 	call	800f1cc <OS_EventTaskWaitMulti>
 800e6a0:	e0bff317 	ldw	r2,-52(fp)
 800e6a4:	e0bff815 	stw	r2,-32(fp)
 800e6a8:	e0bff817 	ldw	r2,-32(fp)
 800e6ac:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 800e6b0:	800f9400 	call	800f940 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e6b4:	0005303a 	rdctl	r2,status
 800e6b8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e6bc:	e0fff917 	ldw	r3,-28(fp)
 800e6c0:	00bfff84 	movi	r2,-2
 800e6c4:	1884703a 	and	r2,r3,r2
 800e6c8:	1001703a 	wrctl	status,r2
  
  return context;
 800e6cc:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 800e6d0:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 800e6d4:	d08a1a17 	ldw	r2,10344(gp)
 800e6d8:	10800c43 	ldbu	r2,49(r2)
 800e6dc:	10803fcc 	andi	r2,r2,255
 800e6e0:	10000226 	beq	r2,zero,800e6ec <OSEventPendMulti+0x468>
 800e6e4:	108000a0 	cmpeqi	r2,r2,2
 800e6e8:	10001826 	beq	r2,zero,800e74c <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 800e6ec:	d08a1a17 	ldw	r2,10344(gp)
 800e6f0:	10800717 	ldw	r2,28(r2)
 800e6f4:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 800e6f8:	e0bff017 	ldw	r2,-64(fp)
 800e6fc:	10000b26 	beq	r2,zero,800e72c <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 800e700:	e0bffd17 	ldw	r2,-12(fp)
 800e704:	10c00104 	addi	r3,r2,4
 800e708:	e0fffd15 	stw	r3,-12(fp)
 800e70c:	e0fff017 	ldw	r3,-64(fp)
 800e710:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 800e714:	e0bffd17 	ldw	r2,-12(fp)
 800e718:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 800e71c:	e0bff18b 	ldhu	r2,-58(fp)
 800e720:	10800044 	addi	r2,r2,1
 800e724:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 800e728:	00000d06 	br	800e760 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 800e72c:	d08a1a17 	ldw	r2,10344(gp)
 800e730:	00c00044 	movi	r3,1
 800e734:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 800e738:	d08a1a17 	ldw	r2,10344(gp)
 800e73c:	1009883a 	mov	r4,r2
 800e740:	e17ffc17 	ldw	r5,-16(fp)
 800e744:	800f3cc0 	call	800f3cc <OS_EventTaskRemoveMulti>
             }
			 break;
 800e748:	00000506 	br	800e760 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 800e74c:	d08a1a17 	ldw	r2,10344(gp)
 800e750:	1009883a 	mov	r4,r2
 800e754:	e17ffc17 	ldw	r5,-16(fp)
 800e758:	800f3cc0 	call	800f3cc <OS_EventTaskRemoveMulti>
             break;
 800e75c:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 800e760:	d08a1a17 	ldw	r2,10344(gp)
 800e764:	10800c43 	ldbu	r2,49(r2)
 800e768:	10803fcc 	andi	r2,r2,255
 800e76c:	10000326 	beq	r2,zero,800e77c <OSEventPendMulti+0x4f8>
 800e770:	108000a0 	cmpeqi	r2,r2,2
 800e774:	1000231e 	bne	r2,zero,800e804 <OSEventPendMulti+0x580>
 800e778:	00002a06 	br	800e824 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 800e77c:	e0bff017 	ldw	r2,-64(fp)
 800e780:	10800003 	ldbu	r2,0(r2)
 800e784:	10803fcc 	andi	r2,r2,255
 800e788:	0080100e 	bge	zero,r2,800e7cc <OSEventPendMulti+0x548>
 800e78c:	10c000d0 	cmplti	r3,r2,3
 800e790:	1800071e 	bne	r3,zero,800e7b0 <OSEventPendMulti+0x52c>
 800e794:	108000e0 	cmpeqi	r2,r2,3
 800e798:	10000c26 	beq	r2,zero,800e7cc <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 800e79c:	e0bffe17 	ldw	r2,-8(fp)
 800e7a0:	10c00104 	addi	r3,r2,4
 800e7a4:	e0fffe15 	stw	r3,-8(fp)
 800e7a8:	10000015 	stw	zero,0(r2)
                      break;
 800e7ac:	00001206 	br	800e7f8 <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 800e7b0:	e0bffe17 	ldw	r2,-8(fp)
 800e7b4:	10c00104 	addi	r3,r2,4
 800e7b8:	e0fffe15 	stw	r3,-8(fp)
 800e7bc:	d0ca1a17 	ldw	r3,10344(gp)
 800e7c0:	18c00917 	ldw	r3,36(r3)
 800e7c4:	10c00015 	stw	r3,0(r2)
                      break;
 800e7c8:	00000b06 	br	800e7f8 <OSEventPendMulti+0x574>
 800e7cc:	e0bff317 	ldw	r2,-52(fp)
 800e7d0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e7d4:	e0bffa17 	ldw	r2,-24(fp)
 800e7d8:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 800e7dc:	e0bffd17 	ldw	r2,-12(fp)
 800e7e0:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 800e7e4:	e0800217 	ldw	r2,8(fp)
 800e7e8:	00c00044 	movi	r3,1
 800e7ec:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 800e7f0:	e0bff18b 	ldhu	r2,-58(fp)
 800e7f4:	00002206 	br	800e880 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 800e7f8:	e0800217 	ldw	r2,8(fp)
 800e7fc:	10000005 	stb	zero,0(r2)
             break;
 800e800:	00001006 	br	800e844 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 800e804:	e0bffe17 	ldw	r2,-8(fp)
 800e808:	10c00104 	addi	r3,r2,4
 800e80c:	e0fffe15 	stw	r3,-8(fp)
 800e810:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 800e814:	e0800217 	ldw	r2,8(fp)
 800e818:	00c00384 	movi	r3,14
 800e81c:	10c00005 	stb	r3,0(r2)
             break;
 800e820:	00000806 	br	800e844 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 800e824:	e0bffe17 	ldw	r2,-8(fp)
 800e828:	10c00104 	addi	r3,r2,4
 800e82c:	e0fffe15 	stw	r3,-8(fp)
 800e830:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 800e834:	e0800217 	ldw	r2,8(fp)
 800e838:	00c00284 	movi	r3,10
 800e83c:	10c00005 	stb	r3,0(r2)
             break;
 800e840:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 800e844:	d08a1a17 	ldw	r2,10344(gp)
 800e848:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 800e84c:	d08a1a17 	ldw	r2,10344(gp)
 800e850:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 800e854:	d08a1a17 	ldw	r2,10344(gp)
 800e858:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 800e85c:	d08a1a17 	ldw	r2,10344(gp)
 800e860:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 800e864:	d08a1a17 	ldw	r2,10344(gp)
 800e868:	10000915 	stw	zero,36(r2)
 800e86c:	e0bff317 	ldw	r2,-52(fp)
 800e870:	e0bffb15 	stw	r2,-20(fp)
 800e874:	e0bffb17 	ldw	r2,-20(fp)
 800e878:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 800e87c:	e0bff18b 	ldhu	r2,-58(fp)
}
 800e880:	e037883a 	mov	sp,fp
 800e884:	dfc00117 	ldw	ra,4(sp)
 800e888:	df000017 	ldw	fp,0(sp)
 800e88c:	dec00204 	addi	sp,sp,8
 800e890:	f800283a 	ret

0800e894 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 800e894:	defffe04 	addi	sp,sp,-8
 800e898:	dfc00115 	stw	ra,4(sp)
 800e89c:	df000015 	stw	fp,0(sp)
 800e8a0:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 800e8a4:	80191a80 	call	80191a8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 800e8a8:	800f6080 	call	800f608 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 800e8ac:	800f64c0 	call	800f64c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 800e8b0:	800f7ac0 	call	800f7ac <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 800e8b4:	800f52c0 	call	800f52c <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 800e8b8:	801171c0 	call	801171c <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 800e8bc:	80120640 	call	8012064 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 800e8c0:	80132980 	call	8013298 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 800e8c4:	800f6b40 	call	800f6b4 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 800e8c8:	800f7300 	call	800f730 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 800e8cc:	80191c40 	call	80191c4 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 800e8d0:	80100080 	call	8010008 <OSDebugInit>
#endif
}
 800e8d4:	e037883a 	mov	sp,fp
 800e8d8:	dfc00117 	ldw	ra,4(sp)
 800e8dc:	df000017 	ldw	fp,0(sp)
 800e8e0:	dec00204 	addi	sp,sp,8
 800e8e4:	f800283a 	ret

0800e8e8 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 800e8e8:	defffc04 	addi	sp,sp,-16
 800e8ec:	df000315 	stw	fp,12(sp)
 800e8f0:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 800e8f4:	e03ffd15 	stw	zero,-12(fp)
#endif

    if (OSRunning == OS_TRUE) {
 800e8f8:	d08a0b43 	ldbu	r2,10285(gp)
 800e8fc:	10803fcc 	andi	r2,r2,255
 800e900:	10800058 	cmpnei	r2,r2,1
 800e904:	1000131e 	bne	r2,zero,800e954 <OSIntEnter+0x6c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e908:	0005303a 	rdctl	r2,status
 800e90c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e910:	e0fffe17 	ldw	r3,-8(fp)
 800e914:	00bfff84 	movi	r2,-2
 800e918:	1884703a 	and	r2,r3,r2
 800e91c:	1001703a 	wrctl	status,r2
  
  return context;
 800e920:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 800e924:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting < 255u) {
 800e928:	d08a1903 	ldbu	r2,10340(gp)
 800e92c:	10803fcc 	andi	r2,r2,255
 800e930:	10803fe0 	cmpeqi	r2,r2,255
 800e934:	1000031e 	bne	r2,zero,800e944 <OSIntEnter+0x5c>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 800e938:	d08a1903 	ldbu	r2,10340(gp)
 800e93c:	10800044 	addi	r2,r2,1
 800e940:	d08a1905 	stb	r2,10340(gp)
 800e944:	e0bffd17 	ldw	r2,-12(fp)
 800e948:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e94c:	e0bfff17 	ldw	r2,-4(fp)
 800e950:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
    }
}
 800e954:	e037883a 	mov	sp,fp
 800e958:	df000017 	ldw	fp,0(sp)
 800e95c:	dec00104 	addi	sp,sp,4
 800e960:	f800283a 	ret

0800e964 <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 800e964:	defffb04 	addi	sp,sp,-20
 800e968:	dfc00415 	stw	ra,16(sp)
 800e96c:	df000315 	stw	fp,12(sp)
 800e970:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 800e974:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 800e978:	d08a0b43 	ldbu	r2,10285(gp)
 800e97c:	10803fcc 	andi	r2,r2,255
 800e980:	10800058 	cmpnei	r2,r2,1
 800e984:	10002f1e 	bne	r2,zero,800ea44 <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e988:	0005303a 	rdctl	r2,status
 800e98c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e990:	e0fffe17 	ldw	r3,-8(fp)
 800e994:	00bfff84 	movi	r2,-2
 800e998:	1884703a 	and	r2,r3,r2
 800e99c:	1001703a 	wrctl	status,r2
  
  return context;
 800e9a0:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 800e9a4:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 800e9a8:	d08a1903 	ldbu	r2,10340(gp)
 800e9ac:	10803fcc 	andi	r2,r2,255
 800e9b0:	10000326 	beq	r2,zero,800e9c0 <OSIntExit+0x5c>
            OSIntNesting--;
 800e9b4:	d08a1903 	ldbu	r2,10340(gp)
 800e9b8:	10bfffc4 	addi	r2,r2,-1
 800e9bc:	d08a1905 	stb	r2,10340(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 800e9c0:	d08a1903 	ldbu	r2,10340(gp)
 800e9c4:	10803fcc 	andi	r2,r2,255
 800e9c8:	10001a1e 	bne	r2,zero,800ea34 <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 800e9cc:	d08a0b03 	ldbu	r2,10284(gp)
 800e9d0:	10803fcc 	andi	r2,r2,255
 800e9d4:	1000171e 	bne	r2,zero,800ea34 <OSIntExit+0xd0>
                OS_SchedNew();
 800e9d8:	800fa0c0 	call	800fa0c <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 800e9dc:	d0ca0d03 	ldbu	r3,10292(gp)
 800e9e0:	d08a0d43 	ldbu	r2,10293(gp)
 800e9e4:	18c03fcc 	andi	r3,r3,255
 800e9e8:	10803fcc 	andi	r2,r2,255
 800e9ec:	18801126 	beq	r3,r2,800ea34 <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 800e9f0:	d08a0d03 	ldbu	r2,10292(gp)
 800e9f4:	10c03fcc 	andi	r3,r2,255
 800e9f8:	008200f4 	movhi	r2,2051
 800e9fc:	1099cf04 	addi	r2,r2,26428
 800ea00:	18c7883a 	add	r3,r3,r3
 800ea04:	18c7883a 	add	r3,r3,r3
 800ea08:	10c5883a 	add	r2,r2,r3
 800ea0c:	10800017 	ldw	r2,0(r2)
 800ea10:	d08a1515 	stw	r2,10324(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 800ea14:	d08a1517 	ldw	r2,10324(gp)
 800ea18:	10c00e17 	ldw	r3,56(r2)
 800ea1c:	18c00044 	addi	r3,r3,1
 800ea20:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 800ea24:	d08a1017 	ldw	r2,10304(gp)
 800ea28:	10800044 	addi	r2,r2,1
 800ea2c:	d08a1015 	stw	r2,10304(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 800ea30:	8018ee80 	call	8018ee8 <OSCtxSw>
 800ea34:	e0bffd17 	ldw	r2,-12(fp)
 800ea38:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ea3c:	e0bfff17 	ldw	r2,-4(fp)
 800ea40:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 800ea44:	e037883a 	mov	sp,fp
 800ea48:	dfc00117 	ldw	ra,4(sp)
 800ea4c:	df000017 	ldw	fp,0(sp)
 800ea50:	dec00204 	addi	sp,sp,8
 800ea54:	f800283a 	ret

0800ea58 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 800ea58:	defffc04 	addi	sp,sp,-16
 800ea5c:	df000315 	stw	fp,12(sp)
 800ea60:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800ea64:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 800ea68:	d08a0b43 	ldbu	r2,10285(gp)
 800ea6c:	10803fcc 	andi	r2,r2,255
 800ea70:	10800058 	cmpnei	r2,r2,1
 800ea74:	1000161e 	bne	r2,zero,800ead0 <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ea78:	0005303a 	rdctl	r2,status
 800ea7c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ea80:	e0fffe17 	ldw	r3,-8(fp)
 800ea84:	00bfff84 	movi	r2,-2
 800ea88:	1884703a 	and	r2,r3,r2
 800ea8c:	1001703a 	wrctl	status,r2
  
  return context;
 800ea90:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 800ea94:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 800ea98:	d08a1903 	ldbu	r2,10340(gp)
 800ea9c:	10803fcc 	andi	r2,r2,255
 800eaa0:	1000071e 	bne	r2,zero,800eac0 <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 800eaa4:	d08a0b03 	ldbu	r2,10284(gp)
 800eaa8:	10803fcc 	andi	r2,r2,255
 800eaac:	10803fe0 	cmpeqi	r2,r2,255
 800eab0:	1000031e 	bne	r2,zero,800eac0 <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 800eab4:	d08a0b03 	ldbu	r2,10284(gp)
 800eab8:	10800044 	addi	r2,r2,1
 800eabc:	d08a0b05 	stb	r2,10284(gp)
 800eac0:	e0bffd17 	ldw	r2,-12(fp)
 800eac4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eac8:	e0bfff17 	ldw	r2,-4(fp)
 800eacc:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 800ead0:	e037883a 	mov	sp,fp
 800ead4:	df000017 	ldw	fp,0(sp)
 800ead8:	dec00104 	addi	sp,sp,4
 800eadc:	f800283a 	ret

0800eae0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 800eae0:	defff804 	addi	sp,sp,-32
 800eae4:	dfc00715 	stw	ra,28(sp)
 800eae8:	df000615 	stw	fp,24(sp)
 800eaec:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 800eaf0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 800eaf4:	d08a0b43 	ldbu	r2,10285(gp)
 800eaf8:	10803fcc 	andi	r2,r2,255
 800eafc:	10800058 	cmpnei	r2,r2,1
 800eb00:	1000281e 	bne	r2,zero,800eba4 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800eb04:	0005303a 	rdctl	r2,status
 800eb08:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eb0c:	e0fffb17 	ldw	r3,-20(fp)
 800eb10:	00bfff84 	movi	r2,-2
 800eb14:	1884703a 	and	r2,r3,r2
 800eb18:	1001703a 	wrctl	status,r2
  
  return context;
 800eb1c:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
 800eb20:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 800eb24:	d08a0b03 	ldbu	r2,10284(gp)
 800eb28:	10803fcc 	andi	r2,r2,255
 800eb2c:	10001926 	beq	r2,zero,800eb94 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 800eb30:	d08a0b03 	ldbu	r2,10284(gp)
 800eb34:	10bfffc4 	addi	r2,r2,-1
 800eb38:	d08a0b05 	stb	r2,10284(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 800eb3c:	d08a0b03 	ldbu	r2,10284(gp)
 800eb40:	10803fcc 	andi	r2,r2,255
 800eb44:	10000e1e 	bne	r2,zero,800eb80 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 800eb48:	d08a1903 	ldbu	r2,10340(gp)
 800eb4c:	10803fcc 	andi	r2,r2,255
 800eb50:	1000061e 	bne	r2,zero,800eb6c <OSSchedUnlock+0x8c>
 800eb54:	e0bffa17 	ldw	r2,-24(fp)
 800eb58:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eb5c:	e0bffc17 	ldw	r2,-16(fp)
 800eb60:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 800eb64:	800f9400 	call	800f940 <OS_Sched>
 800eb68:	00000e06 	br	800eba4 <OSSchedUnlock+0xc4>
 800eb6c:	e0bffa17 	ldw	r2,-24(fp)
 800eb70:	e0bffd15 	stw	r2,-12(fp)
 800eb74:	e0bffd17 	ldw	r2,-12(fp)
 800eb78:	1001703a 	wrctl	status,r2
 800eb7c:	00000906 	br	800eba4 <OSSchedUnlock+0xc4>
 800eb80:	e0bffa17 	ldw	r2,-24(fp)
 800eb84:	e0bffe15 	stw	r2,-8(fp)
 800eb88:	e0bffe17 	ldw	r2,-8(fp)
 800eb8c:	1001703a 	wrctl	status,r2
 800eb90:	00000406 	br	800eba4 <OSSchedUnlock+0xc4>
 800eb94:	e0bffa17 	ldw	r2,-24(fp)
 800eb98:	e0bfff15 	stw	r2,-4(fp)
 800eb9c:	e0bfff17 	ldw	r2,-4(fp)
 800eba0:	1001703a 	wrctl	status,r2
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 800eba4:	e037883a 	mov	sp,fp
 800eba8:	dfc00117 	ldw	ra,4(sp)
 800ebac:	df000017 	ldw	fp,0(sp)
 800ebb0:	dec00204 	addi	sp,sp,8
 800ebb4:	f800283a 	ret

0800ebb8 <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 800ebb8:	defffe04 	addi	sp,sp,-8
 800ebbc:	dfc00115 	stw	ra,4(sp)
 800ebc0:	df000015 	stw	fp,0(sp)
 800ebc4:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 800ebc8:	d08a0b43 	ldbu	r2,10285(gp)
 800ebcc:	10803fcc 	andi	r2,r2,255
 800ebd0:	10000f1e 	bne	r2,zero,800ec10 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 800ebd4:	800fa0c0 	call	800fa0c <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 800ebd8:	d08a0d03 	ldbu	r2,10292(gp)
 800ebdc:	d08a0d45 	stb	r2,10293(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 800ebe0:	d08a0d03 	ldbu	r2,10292(gp)
 800ebe4:	10c03fcc 	andi	r3,r2,255
 800ebe8:	008200f4 	movhi	r2,2051
 800ebec:	1099cf04 	addi	r2,r2,26428
 800ebf0:	18c7883a 	add	r3,r3,r3
 800ebf4:	18c7883a 	add	r3,r3,r3
 800ebf8:	10c5883a 	add	r2,r2,r3
 800ebfc:	10800017 	ldw	r2,0(r2)
 800ec00:	d08a1515 	stw	r2,10324(gp)
        OSTCBCur      = OSTCBHighRdy;
 800ec04:	d08a1517 	ldw	r2,10324(gp)
 800ec08:	d08a1a15 	stw	r2,10344(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 800ec0c:	8018f740 	call	8018f74 <OSStartHighRdy>
    }
}
 800ec10:	e037883a 	mov	sp,fp
 800ec14:	dfc00117 	ldw	ra,4(sp)
 800ec18:	df000017 	ldw	fp,0(sp)
 800ec1c:	dec00204 	addi	sp,sp,8
 800ec20:	f800283a 	ret

0800ec24 <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 800ec24:	defff904 	addi	sp,sp,-28
 800ec28:	dfc00615 	stw	ra,24(sp)
 800ec2c:	df000515 	stw	fp,20(sp)
 800ec30:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800ec34:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 800ec38:	01000084 	movi	r4,2
 800ec3c:	80157400 	call	8015740 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ec40:	0005303a 	rdctl	r2,status
 800ec44:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ec48:	e0fffc17 	ldw	r3,-16(fp)
 800ec4c:	00bfff84 	movi	r2,-2
 800ec50:	1884703a 	and	r2,r3,r2
 800ec54:	1001703a 	wrctl	status,r2
  
  return context;
 800ec58:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 800ec5c:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 800ec60:	d00a0c15 	stw	zero,10288(gp)
 800ec64:	e0bffb17 	ldw	r2,-20(fp)
 800ec68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ec6c:	e0bffd17 	ldw	r2,-12(fp)
 800ec70:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 800ec74:	01001904 	movi	r4,100
 800ec78:	80157400 	call	8015740 <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ec7c:	0005303a 	rdctl	r2,status
 800ec80:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ec84:	e0fffe17 	ldw	r3,-8(fp)
 800ec88:	00bfff84 	movi	r2,-2
 800ec8c:	1884703a 	and	r2,r3,r2
 800ec90:	1001703a 	wrctl	status,r2
  
  return context;
 800ec94:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 800ec98:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 800ec9c:	d08a0c17 	ldw	r2,10288(gp)
 800eca0:	d08a1115 	stw	r2,10308(gp)
    OSStatRdy    = OS_TRUE;
 800eca4:	00800044 	movi	r2,1
 800eca8:	d08a1d05 	stb	r2,10356(gp)
 800ecac:	e0bffb17 	ldw	r2,-20(fp)
 800ecb0:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ecb4:	e0bfff17 	ldw	r2,-4(fp)
 800ecb8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 800ecbc:	e037883a 	mov	sp,fp
 800ecc0:	dfc00117 	ldw	ra,4(sp)
 800ecc4:	df000017 	ldw	fp,0(sp)
 800ecc8:	dec00204 	addi	sp,sp,8
 800eccc:	f800283a 	ret

0800ecd0 <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 800ecd0:	defff704 	addi	sp,sp,-36
 800ecd4:	dfc00815 	stw	ra,32(sp)
 800ecd8:	df000715 	stw	fp,28(sp)
 800ecdc:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 800ece0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 800ece4:	801918c0 	call	801918c <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ece8:	0005303a 	rdctl	r2,status
 800ecec:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ecf0:	e0fffc17 	ldw	r3,-16(fp)
 800ecf4:	00bfff84 	movi	r2,-2
 800ecf8:	1884703a 	and	r2,r3,r2
 800ecfc:	1001703a 	wrctl	status,r2
  
  return context;
 800ed00:	e0bffc17 	ldw	r2,-16(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 800ed04:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 800ed08:	d08a1b17 	ldw	r2,10348(gp)
 800ed0c:	10800044 	addi	r2,r2,1
 800ed10:	d08a1b15 	stw	r2,10348(gp)
 800ed14:	e0bffb17 	ldw	r2,-20(fp)
 800ed18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ed1c:	e0bffd17 	ldw	r2,-12(fp)
 800ed20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 800ed24:	d08a0b43 	ldbu	r2,10285(gp)
 800ed28:	10803fcc 	andi	r2,r2,255
 800ed2c:	10800058 	cmpnei	r2,r2,1
 800ed30:	1000691e 	bne	r2,zero,800eed8 <OSTimeTick+0x208>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 800ed34:	d08a0f03 	ldbu	r2,10300(gp)
 800ed38:	10803fcc 	andi	r2,r2,255
 800ed3c:	10c00060 	cmpeqi	r3,r2,1
 800ed40:	1800061e 	bne	r3,zero,800ed5c <OSTimeTick+0x8c>
 800ed44:	10c000a0 	cmpeqi	r3,r2,2
 800ed48:	1800061e 	bne	r3,zero,800ed64 <OSTimeTick+0x94>
 800ed4c:	10000a1e 	bne	r2,zero,800ed78 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 800ed50:	00800044 	movi	r2,1
 800ed54:	e0bffa05 	stb	r2,-24(fp)
                 break;
 800ed58:	00000b06 	br	800ed88 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 800ed5c:	e03ffa05 	stb	zero,-24(fp)
                 break;
 800ed60:	00000906 	br	800ed88 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 800ed64:	00800044 	movi	r2,1
 800ed68:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 800ed6c:	00800044 	movi	r2,1
 800ed70:	d08a0f05 	stb	r2,10300(gp)
                 break;
 800ed74:	00000406 	br	800ed88 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 800ed78:	00800044 	movi	r2,1
 800ed7c:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 800ed80:	d00a0f05 	stb	zero,10300(gp)
                 break;
 800ed84:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 800ed88:	e0bffa03 	ldbu	r2,-24(fp)
 800ed8c:	1000011e 	bne	r2,zero,800ed94 <OSTimeTick+0xc4>
            return;
 800ed90:	00005106 	br	800eed8 <OSTimeTick+0x208>
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 800ed94:	d08a0e17 	ldw	r2,10296(gp)
 800ed98:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 800ed9c:	00004906 	br	800eec4 <OSTimeTick+0x1f4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800eda0:	0005303a 	rdctl	r2,status
 800eda4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eda8:	e0fffe17 	ldw	r3,-8(fp)
 800edac:	00bfff84 	movi	r2,-2
 800edb0:	1884703a 	and	r2,r3,r2
 800edb4:	1001703a 	wrctl	status,r2
  
  return context;
 800edb8:	e0bffe17 	ldw	r2,-8(fp)
            OS_ENTER_CRITICAL();
 800edbc:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 800edc0:	e0bff917 	ldw	r2,-28(fp)
 800edc4:	10800b8b 	ldhu	r2,46(r2)
 800edc8:	10bfffcc 	andi	r2,r2,65535
 800edcc:	10003626 	beq	r2,zero,800eea8 <OSTimeTick+0x1d8>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 800edd0:	e0bff917 	ldw	r2,-28(fp)
 800edd4:	10800b8b 	ldhu	r2,46(r2)
 800edd8:	10bfffc4 	addi	r2,r2,-1
 800eddc:	1007883a 	mov	r3,r2
 800ede0:	e0bff917 	ldw	r2,-28(fp)
 800ede4:	10c00b8d 	sth	r3,46(r2)
 800ede8:	e0bff917 	ldw	r2,-28(fp)
 800edec:	10800b8b 	ldhu	r2,46(r2)
 800edf0:	10bfffcc 	andi	r2,r2,65535
 800edf4:	10002c1e 	bne	r2,zero,800eea8 <OSTimeTick+0x1d8>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 800edf8:	e0bff917 	ldw	r2,-28(fp)
 800edfc:	10800c03 	ldbu	r2,48(r2)
 800ee00:	10803fcc 	andi	r2,r2,255
 800ee04:	10800dcc 	andi	r2,r2,55
 800ee08:	10000b26 	beq	r2,zero,800ee38 <OSTimeTick+0x168>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 800ee0c:	e0bff917 	ldw	r2,-28(fp)
 800ee10:	10c00c03 	ldbu	r3,48(r2)
 800ee14:	00bff204 	movi	r2,-56
 800ee18:	1884703a 	and	r2,r3,r2
 800ee1c:	1007883a 	mov	r3,r2
 800ee20:	e0bff917 	ldw	r2,-28(fp)
 800ee24:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 800ee28:	e0bff917 	ldw	r2,-28(fp)
 800ee2c:	00c00044 	movi	r3,1
 800ee30:	10c00c45 	stb	r3,49(r2)
 800ee34:	00000206 	br	800ee40 <OSTimeTick+0x170>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 800ee38:	e0bff917 	ldw	r2,-28(fp)
 800ee3c:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 800ee40:	e0bff917 	ldw	r2,-28(fp)
 800ee44:	10800c03 	ldbu	r2,48(r2)
 800ee48:	10803fcc 	andi	r2,r2,255
 800ee4c:	1080020c 	andi	r2,r2,8
 800ee50:	1000151e 	bne	r2,zero,800eea8 <OSTimeTick+0x1d8>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 800ee54:	e0bff917 	ldw	r2,-28(fp)
 800ee58:	10c00d83 	ldbu	r3,54(r2)
 800ee5c:	d08a1703 	ldbu	r2,10332(gp)
 800ee60:	1884b03a 	or	r2,r3,r2
 800ee64:	d08a1705 	stb	r2,10332(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800ee68:	e0bff917 	ldw	r2,-28(fp)
 800ee6c:	10800d03 	ldbu	r2,52(r2)
 800ee70:	10c03fcc 	andi	r3,r2,255
 800ee74:	e0bff917 	ldw	r2,-28(fp)
 800ee78:	10800d03 	ldbu	r2,52(r2)
 800ee7c:	11003fcc 	andi	r4,r2,255
 800ee80:	d08a1744 	addi	r2,gp,10333
 800ee84:	2085883a 	add	r2,r4,r2
 800ee88:	11000003 	ldbu	r4,0(r2)
 800ee8c:	e0bff917 	ldw	r2,-28(fp)
 800ee90:	10800d43 	ldbu	r2,53(r2)
 800ee94:	2084b03a 	or	r2,r4,r2
 800ee98:	1009883a 	mov	r4,r2
 800ee9c:	d08a1744 	addi	r2,gp,10333
 800eea0:	1885883a 	add	r2,r3,r2
 800eea4:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 800eea8:	e0bff917 	ldw	r2,-28(fp)
 800eeac:	10800517 	ldw	r2,20(r2)
 800eeb0:	e0bff915 	stw	r2,-28(fp)
 800eeb4:	e0bffb17 	ldw	r2,-20(fp)
 800eeb8:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eebc:	e0bfff17 	ldw	r2,-4(fp)
 800eec0:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 800eec4:	e0bff917 	ldw	r2,-28(fp)
 800eec8:	10800c83 	ldbu	r2,50(r2)
 800eecc:	10803fcc 	andi	r2,r2,255
 800eed0:	10800518 	cmpnei	r2,r2,20
 800eed4:	103fb21e 	bne	r2,zero,800eda0 <OSTimeTick+0xd0>
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 800eed8:	e037883a 	mov	sp,fp
 800eedc:	dfc00117 	ldw	ra,4(sp)
 800eee0:	df000017 	ldw	fp,0(sp)
 800eee4:	dec00204 	addi	sp,sp,8
 800eee8:	f800283a 	ret

0800eeec <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 800eeec:	deffff04 	addi	sp,sp,-4
 800eef0:	df000015 	stw	fp,0(sp)
 800eef4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 800eef8:	00804784 	movi	r2,286
}
 800eefc:	e037883a 	mov	sp,fp
 800ef00:	df000017 	ldw	fp,0(sp)
 800ef04:	dec00104 	addi	sp,sp,4
 800ef08:	f800283a 	ret

0800ef0c <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 800ef0c:	deffff04 	addi	sp,sp,-4
 800ef10:	df000015 	stw	fp,0(sp)
 800ef14:	d839883a 	mov	fp,sp
}
 800ef18:	e037883a 	mov	sp,fp
 800ef1c:	df000017 	ldw	fp,0(sp)
 800ef20:	dec00104 	addi	sp,sp,4
 800ef24:	f800283a 	ret

0800ef28 <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 800ef28:	defff804 	addi	sp,sp,-32
 800ef2c:	dfc00715 	stw	ra,28(sp)
 800ef30:	df000615 	stw	fp,24(sp)
 800ef34:	df000604 	addi	fp,sp,24
 800ef38:	e13ffc15 	stw	r4,-16(fp)
 800ef3c:	e17ffd15 	stw	r5,-12(fp)
 800ef40:	3007883a 	mov	r3,r6
 800ef44:	3805883a 	mov	r2,r7
 800ef48:	e0fffe05 	stb	r3,-8(fp)
 800ef4c:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 800ef50:	e0bffc17 	ldw	r2,-16(fp)
 800ef54:	10800283 	ldbu	r2,10(r2)
 800ef58:	10c03fcc 	andi	r3,r2,255
 800ef5c:	008200b4 	movhi	r2,2050
 800ef60:	10a74b04 	addi	r2,r2,-25300
 800ef64:	10c5883a 	add	r2,r2,r3
 800ef68:	10800003 	ldbu	r2,0(r2)
 800ef6c:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 800ef70:	e0bffa03 	ldbu	r2,-24(fp)
 800ef74:	e0fffc17 	ldw	r3,-16(fp)
 800ef78:	1885883a 	add	r2,r3,r2
 800ef7c:	10800204 	addi	r2,r2,8
 800ef80:	108000c3 	ldbu	r2,3(r2)
 800ef84:	10c03fcc 	andi	r3,r2,255
 800ef88:	008200b4 	movhi	r2,2050
 800ef8c:	10a74b04 	addi	r2,r2,-25300
 800ef90:	10c5883a 	add	r2,r2,r3
 800ef94:	10800003 	ldbu	r2,0(r2)
 800ef98:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 800ef9c:	e0bffa03 	ldbu	r2,-24(fp)
 800efa0:	100490fa 	slli	r2,r2,3
 800efa4:	1007883a 	mov	r3,r2
 800efa8:	e0bffa43 	ldbu	r2,-23(fp)
 800efac:	1885883a 	add	r2,r3,r2
 800efb0:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 800efb4:	e0fffa83 	ldbu	r3,-22(fp)
 800efb8:	008200f4 	movhi	r2,2051
 800efbc:	1099cf04 	addi	r2,r2,26428
 800efc0:	18c7883a 	add	r3,r3,r3
 800efc4:	18c7883a 	add	r3,r3,r3
 800efc8:	10c5883a 	add	r2,r2,r3
 800efcc:	10800017 	ldw	r2,0(r2)
 800efd0:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 800efd4:	e0bffb17 	ldw	r2,-20(fp)
 800efd8:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 800efdc:	e0bffb17 	ldw	r2,-20(fp)
 800efe0:	e0fffd17 	ldw	r3,-12(fp)
 800efe4:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 800efe8:	e0bffb17 	ldw	r2,-20(fp)
 800efec:	10800c03 	ldbu	r2,48(r2)
 800eff0:	1007883a 	mov	r3,r2
 800eff4:	e0bffe03 	ldbu	r2,-8(fp)
 800eff8:	0084303a 	nor	r2,zero,r2
 800effc:	1884703a 	and	r2,r3,r2
 800f000:	1007883a 	mov	r3,r2
 800f004:	e0bffb17 	ldw	r2,-20(fp)
 800f008:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 800f00c:	e0bffb17 	ldw	r2,-20(fp)
 800f010:	e0ffff03 	ldbu	r3,-4(fp)
 800f014:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 800f018:	e0bffb17 	ldw	r2,-20(fp)
 800f01c:	10800c03 	ldbu	r2,48(r2)
 800f020:	10803fcc 	andi	r2,r2,255
 800f024:	1080020c 	andi	r2,r2,8
 800f028:	1000111e 	bne	r2,zero,800f070 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 800f02c:	e0bffb17 	ldw	r2,-20(fp)
 800f030:	10c00d83 	ldbu	r3,54(r2)
 800f034:	d08a1703 	ldbu	r2,10332(gp)
 800f038:	1884b03a 	or	r2,r3,r2
 800f03c:	d08a1705 	stb	r2,10332(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 800f040:	e0fffa03 	ldbu	r3,-24(fp)
 800f044:	e13ffa03 	ldbu	r4,-24(fp)
 800f048:	d08a1744 	addi	r2,gp,10333
 800f04c:	2085883a 	add	r2,r4,r2
 800f050:	11000003 	ldbu	r4,0(r2)
 800f054:	e0bffb17 	ldw	r2,-20(fp)
 800f058:	10800d43 	ldbu	r2,53(r2)
 800f05c:	2084b03a 	or	r2,r4,r2
 800f060:	1009883a 	mov	r4,r2
 800f064:	d08a1744 	addi	r2,gp,10333
 800f068:	1885883a 	add	r2,r3,r2
 800f06c:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 800f070:	e13ffb17 	ldw	r4,-20(fp)
 800f074:	e17ffc17 	ldw	r5,-16(fp)
 800f078:	800f3180 	call	800f318 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 800f07c:	e0bffb17 	ldw	r2,-20(fp)
 800f080:	10800817 	ldw	r2,32(r2)
 800f084:	10000826 	beq	r2,zero,800f0a8 <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 800f088:	e0bffb17 	ldw	r2,-20(fp)
 800f08c:	10800817 	ldw	r2,32(r2)
 800f090:	e13ffb17 	ldw	r4,-20(fp)
 800f094:	100b883a 	mov	r5,r2
 800f098:	800f3cc0 	call	800f3cc <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 800f09c:	e0bffb17 	ldw	r2,-20(fp)
 800f0a0:	e0fffc17 	ldw	r3,-16(fp)
 800f0a4:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 800f0a8:	e0bffa83 	ldbu	r2,-22(fp)
}
 800f0ac:	e037883a 	mov	sp,fp
 800f0b0:	dfc00117 	ldw	ra,4(sp)
 800f0b4:	df000017 	ldw	fp,0(sp)
 800f0b8:	dec00204 	addi	sp,sp,8
 800f0bc:	f800283a 	ret

0800f0c0 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 800f0c0:	defffd04 	addi	sp,sp,-12
 800f0c4:	df000215 	stw	fp,8(sp)
 800f0c8:	df000204 	addi	fp,sp,8
 800f0cc:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 800f0d0:	d08a1a17 	ldw	r2,10344(gp)
 800f0d4:	e0ffff17 	ldw	r3,-4(fp)
 800f0d8:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 800f0dc:	d08a1a17 	ldw	r2,10344(gp)
 800f0e0:	10800d03 	ldbu	r2,52(r2)
 800f0e4:	10803fcc 	andi	r2,r2,255
 800f0e8:	d0ca1a17 	ldw	r3,10344(gp)
 800f0ec:	18c00d03 	ldbu	r3,52(r3)
 800f0f0:	18c03fcc 	andi	r3,r3,255
 800f0f4:	e13fff17 	ldw	r4,-4(fp)
 800f0f8:	20c7883a 	add	r3,r4,r3
 800f0fc:	18c00204 	addi	r3,r3,8
 800f100:	190000c3 	ldbu	r4,3(r3)
 800f104:	d0ca1a17 	ldw	r3,10344(gp)
 800f108:	18c00d43 	ldbu	r3,53(r3)
 800f10c:	20c6b03a 	or	r3,r4,r3
 800f110:	1809883a 	mov	r4,r3
 800f114:	e0ffff17 	ldw	r3,-4(fp)
 800f118:	1885883a 	add	r2,r3,r2
 800f11c:	10800204 	addi	r2,r2,8
 800f120:	110000c5 	stb	r4,3(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 800f124:	e0bfff17 	ldw	r2,-4(fp)
 800f128:	10c00283 	ldbu	r3,10(r2)
 800f12c:	d08a1a17 	ldw	r2,10344(gp)
 800f130:	10800d83 	ldbu	r2,54(r2)
 800f134:	1884b03a 	or	r2,r3,r2
 800f138:	1007883a 	mov	r3,r2
 800f13c:	e0bfff17 	ldw	r2,-4(fp)
 800f140:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 800f144:	d08a1a17 	ldw	r2,10344(gp)
 800f148:	10800d03 	ldbu	r2,52(r2)
 800f14c:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 800f150:	e0fffe03 	ldbu	r3,-8(fp)
 800f154:	e13ffe03 	ldbu	r4,-8(fp)
 800f158:	d08a1744 	addi	r2,gp,10333
 800f15c:	2085883a 	add	r2,r4,r2
 800f160:	10800003 	ldbu	r2,0(r2)
 800f164:	1009883a 	mov	r4,r2
 800f168:	d08a1a17 	ldw	r2,10344(gp)
 800f16c:	10800d43 	ldbu	r2,53(r2)
 800f170:	0084303a 	nor	r2,zero,r2
 800f174:	2084703a 	and	r2,r4,r2
 800f178:	1009883a 	mov	r4,r2
 800f17c:	d08a1744 	addi	r2,gp,10333
 800f180:	1885883a 	add	r2,r3,r2
 800f184:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 800f188:	e0fffe03 	ldbu	r3,-8(fp)
 800f18c:	d08a1744 	addi	r2,gp,10333
 800f190:	1885883a 	add	r2,r3,r2
 800f194:	10800003 	ldbu	r2,0(r2)
 800f198:	10803fcc 	andi	r2,r2,255
 800f19c:	1000071e 	bne	r2,zero,800f1bc <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 800f1a0:	d08a1a17 	ldw	r2,10344(gp)
 800f1a4:	10800d83 	ldbu	r2,54(r2)
 800f1a8:	0084303a 	nor	r2,zero,r2
 800f1ac:	1007883a 	mov	r3,r2
 800f1b0:	d08a1703 	ldbu	r2,10332(gp)
 800f1b4:	1884703a 	and	r2,r3,r2
 800f1b8:	d08a1705 	stb	r2,10332(gp)
    }
}
 800f1bc:	e037883a 	mov	sp,fp
 800f1c0:	df000017 	ldw	fp,0(sp)
 800f1c4:	dec00104 	addi	sp,sp,4
 800f1c8:	f800283a 	ret

0800f1cc <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 800f1cc:	defffb04 	addi	sp,sp,-20
 800f1d0:	df000415 	stw	fp,16(sp)
 800f1d4:	df000404 	addi	fp,sp,16
 800f1d8:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 800f1dc:	d08a1a17 	ldw	r2,10344(gp)
 800f1e0:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 800f1e4:	d08a1a17 	ldw	r2,10344(gp)
 800f1e8:	e0ffff17 	ldw	r3,-4(fp)
 800f1ec:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 800f1f0:	e0bfff17 	ldw	r2,-4(fp)
 800f1f4:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 800f1f8:	e0bffc17 	ldw	r2,-16(fp)
 800f1fc:	10800017 	ldw	r2,0(r2)
 800f200:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 800f204:	00002006 	br	800f288 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 800f208:	d08a1a17 	ldw	r2,10344(gp)
 800f20c:	10800d03 	ldbu	r2,52(r2)
 800f210:	10803fcc 	andi	r2,r2,255
 800f214:	d0ca1a17 	ldw	r3,10344(gp)
 800f218:	18c00d03 	ldbu	r3,52(r3)
 800f21c:	18c03fcc 	andi	r3,r3,255
 800f220:	e13ffd17 	ldw	r4,-12(fp)
 800f224:	20c7883a 	add	r3,r4,r3
 800f228:	18c00204 	addi	r3,r3,8
 800f22c:	190000c3 	ldbu	r4,3(r3)
 800f230:	d0ca1a17 	ldw	r3,10344(gp)
 800f234:	18c00d43 	ldbu	r3,53(r3)
 800f238:	20c6b03a 	or	r3,r4,r3
 800f23c:	1809883a 	mov	r4,r3
 800f240:	e0fffd17 	ldw	r3,-12(fp)
 800f244:	1885883a 	add	r2,r3,r2
 800f248:	10800204 	addi	r2,r2,8
 800f24c:	110000c5 	stb	r4,3(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 800f250:	e0bffd17 	ldw	r2,-12(fp)
 800f254:	10c00283 	ldbu	r3,10(r2)
 800f258:	d08a1a17 	ldw	r2,10344(gp)
 800f25c:	10800d83 	ldbu	r2,54(r2)
 800f260:	1884b03a 	or	r2,r3,r2
 800f264:	1007883a 	mov	r3,r2
 800f268:	e0bffd17 	ldw	r2,-12(fp)
 800f26c:	10c00285 	stb	r3,10(r2)
        pevents++;
 800f270:	e0bffc17 	ldw	r2,-16(fp)
 800f274:	10800104 	addi	r2,r2,4
 800f278:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 800f27c:	e0bffc17 	ldw	r2,-16(fp)
 800f280:	10800017 	ldw	r2,0(r2)
 800f284:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 800f288:	e0bffd17 	ldw	r2,-12(fp)
 800f28c:	103fde1e 	bne	r2,zero,800f208 <OS_EventTaskWaitMulti+0x3c>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 800f290:	d08a1a17 	ldw	r2,10344(gp)
 800f294:	10800d03 	ldbu	r2,52(r2)
 800f298:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 800f29c:	e0fffe03 	ldbu	r3,-8(fp)
 800f2a0:	e13ffe03 	ldbu	r4,-8(fp)
 800f2a4:	d08a1744 	addi	r2,gp,10333
 800f2a8:	2085883a 	add	r2,r4,r2
 800f2ac:	10800003 	ldbu	r2,0(r2)
 800f2b0:	1009883a 	mov	r4,r2
 800f2b4:	d08a1a17 	ldw	r2,10344(gp)
 800f2b8:	10800d43 	ldbu	r2,53(r2)
 800f2bc:	0084303a 	nor	r2,zero,r2
 800f2c0:	2084703a 	and	r2,r4,r2
 800f2c4:	1009883a 	mov	r4,r2
 800f2c8:	d08a1744 	addi	r2,gp,10333
 800f2cc:	1885883a 	add	r2,r3,r2
 800f2d0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 800f2d4:	e0fffe03 	ldbu	r3,-8(fp)
 800f2d8:	d08a1744 	addi	r2,gp,10333
 800f2dc:	1885883a 	add	r2,r3,r2
 800f2e0:	10800003 	ldbu	r2,0(r2)
 800f2e4:	10803fcc 	andi	r2,r2,255
 800f2e8:	1000071e 	bne	r2,zero,800f308 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 800f2ec:	d08a1a17 	ldw	r2,10344(gp)
 800f2f0:	10800d83 	ldbu	r2,54(r2)
 800f2f4:	0084303a 	nor	r2,zero,r2
 800f2f8:	1007883a 	mov	r3,r2
 800f2fc:	d08a1703 	ldbu	r2,10332(gp)
 800f300:	1884703a 	and	r2,r3,r2
 800f304:	d08a1705 	stb	r2,10332(gp)
    }
}
 800f308:	e037883a 	mov	sp,fp
 800f30c:	df000017 	ldw	fp,0(sp)
 800f310:	dec00104 	addi	sp,sp,4
 800f314:	f800283a 	ret

0800f318 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 800f318:	defffc04 	addi	sp,sp,-16
 800f31c:	df000315 	stw	fp,12(sp)
 800f320:	df000304 	addi	fp,sp,12
 800f324:	e13ffe15 	stw	r4,-8(fp)
 800f328:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 800f32c:	e0bffe17 	ldw	r2,-8(fp)
 800f330:	10800d03 	ldbu	r2,52(r2)
 800f334:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 800f338:	e0bffd03 	ldbu	r2,-12(fp)
 800f33c:	e0fffd03 	ldbu	r3,-12(fp)
 800f340:	e13fff17 	ldw	r4,-4(fp)
 800f344:	20c7883a 	add	r3,r4,r3
 800f348:	18c00204 	addi	r3,r3,8
 800f34c:	18c000c3 	ldbu	r3,3(r3)
 800f350:	1809883a 	mov	r4,r3
 800f354:	e0fffe17 	ldw	r3,-8(fp)
 800f358:	18c00d43 	ldbu	r3,53(r3)
 800f35c:	00c6303a 	nor	r3,zero,r3
 800f360:	20c6703a 	and	r3,r4,r3
 800f364:	1809883a 	mov	r4,r3
 800f368:	e0ffff17 	ldw	r3,-4(fp)
 800f36c:	1885883a 	add	r2,r3,r2
 800f370:	10800204 	addi	r2,r2,8
 800f374:	110000c5 	stb	r4,3(r2)
    if (pevent->OSEventTbl[y] == 0) {
 800f378:	e0bffd03 	ldbu	r2,-12(fp)
 800f37c:	e0ffff17 	ldw	r3,-4(fp)
 800f380:	1885883a 	add	r2,r3,r2
 800f384:	10800204 	addi	r2,r2,8
 800f388:	108000c3 	ldbu	r2,3(r2)
 800f38c:	10803fcc 	andi	r2,r2,255
 800f390:	10000a1e 	bne	r2,zero,800f3bc <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 800f394:	e0bfff17 	ldw	r2,-4(fp)
 800f398:	10800283 	ldbu	r2,10(r2)
 800f39c:	1007883a 	mov	r3,r2
 800f3a0:	e0bffe17 	ldw	r2,-8(fp)
 800f3a4:	10800d83 	ldbu	r2,54(r2)
 800f3a8:	0084303a 	nor	r2,zero,r2
 800f3ac:	1884703a 	and	r2,r3,r2
 800f3b0:	1007883a 	mov	r3,r2
 800f3b4:	e0bfff17 	ldw	r2,-4(fp)
 800f3b8:	10c00285 	stb	r3,10(r2)
    }
}
 800f3bc:	e037883a 	mov	sp,fp
 800f3c0:	df000017 	ldw	fp,0(sp)
 800f3c4:	dec00104 	addi	sp,sp,4
 800f3c8:	f800283a 	ret

0800f3cc <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 800f3cc:	defffa04 	addi	sp,sp,-24
 800f3d0:	df000515 	stw	fp,20(sp)
 800f3d4:	df000504 	addi	fp,sp,20
 800f3d8:	e13ffe15 	stw	r4,-8(fp)
 800f3dc:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 800f3e0:	e0bffe17 	ldw	r2,-8(fp)
 800f3e4:	10800d03 	ldbu	r2,52(r2)
 800f3e8:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 800f3ec:	e0bffe17 	ldw	r2,-8(fp)
 800f3f0:	10800d83 	ldbu	r2,54(r2)
 800f3f4:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 800f3f8:	e0bffe17 	ldw	r2,-8(fp)
 800f3fc:	10800d43 	ldbu	r2,53(r2)
 800f400:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 800f404:	e0bfff17 	ldw	r2,-4(fp)
 800f408:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 800f40c:	e0bffb17 	ldw	r2,-20(fp)
 800f410:	10800017 	ldw	r2,0(r2)
 800f414:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 800f418:	00002506 	br	800f4b0 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 800f41c:	e0bffd03 	ldbu	r2,-12(fp)
 800f420:	e0fffd03 	ldbu	r3,-12(fp)
 800f424:	e13ffc17 	ldw	r4,-16(fp)
 800f428:	20c7883a 	add	r3,r4,r3
 800f42c:	18c00204 	addi	r3,r3,8
 800f430:	18c000c3 	ldbu	r3,3(r3)
 800f434:	1809883a 	mov	r4,r3
 800f438:	e0fffd83 	ldbu	r3,-10(fp)
 800f43c:	00c6303a 	nor	r3,zero,r3
 800f440:	20c6703a 	and	r3,r4,r3
 800f444:	1809883a 	mov	r4,r3
 800f448:	e0fffc17 	ldw	r3,-16(fp)
 800f44c:	1885883a 	add	r2,r3,r2
 800f450:	10800204 	addi	r2,r2,8
 800f454:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y] == 0) {
 800f458:	e0bffd03 	ldbu	r2,-12(fp)
 800f45c:	e0fffc17 	ldw	r3,-16(fp)
 800f460:	1885883a 	add	r2,r3,r2
 800f464:	10800204 	addi	r2,r2,8
 800f468:	108000c3 	ldbu	r2,3(r2)
 800f46c:	10803fcc 	andi	r2,r2,255
 800f470:	1000091e 	bne	r2,zero,800f498 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 800f474:	e0bffc17 	ldw	r2,-16(fp)
 800f478:	10800283 	ldbu	r2,10(r2)
 800f47c:	1007883a 	mov	r3,r2
 800f480:	e0bffd43 	ldbu	r2,-11(fp)
 800f484:	0084303a 	nor	r2,zero,r2
 800f488:	1884703a 	and	r2,r3,r2
 800f48c:	1007883a 	mov	r3,r2
 800f490:	e0bffc17 	ldw	r2,-16(fp)
 800f494:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 800f498:	e0bffb17 	ldw	r2,-20(fp)
 800f49c:	10800104 	addi	r2,r2,4
 800f4a0:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 800f4a4:	e0bffb17 	ldw	r2,-20(fp)
 800f4a8:	10800017 	ldw	r2,0(r2)
 800f4ac:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 800f4b0:	e0bffc17 	ldw	r2,-16(fp)
 800f4b4:	103fd91e 	bne	r2,zero,800f41c <OS_EventTaskRemoveMulti+0x50>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 800f4b8:	e037883a 	mov	sp,fp
 800f4bc:	df000017 	ldw	fp,0(sp)
 800f4c0:	dec00104 	addi	sp,sp,4
 800f4c4:	f800283a 	ret

0800f4c8 <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 800f4c8:	defffc04 	addi	sp,sp,-16
 800f4cc:	df000315 	stw	fp,12(sp)
 800f4d0:	df000304 	addi	fp,sp,12
 800f4d4:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 800f4d8:	e0bfff17 	ldw	r2,-4(fp)
 800f4dc:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 800f4e0:	e0bfff17 	ldw	r2,-4(fp)
 800f4e4:	108002c4 	addi	r2,r2,11
 800f4e8:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 800f4ec:	e03ffe05 	stb	zero,-8(fp)
 800f4f0:	00000706 	br	800f510 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 800f4f4:	e0bffd17 	ldw	r2,-12(fp)
 800f4f8:	10c00044 	addi	r3,r2,1
 800f4fc:	e0fffd15 	stw	r3,-12(fp)
 800f500:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 800f504:	e0bffe03 	ldbu	r2,-8(fp)
 800f508:	10800044 	addi	r2,r2,1
 800f50c:	e0bffe05 	stb	r2,-8(fp)
 800f510:	e0bffe03 	ldbu	r2,-8(fp)
 800f514:	108000f0 	cmpltui	r2,r2,3
 800f518:	103ff61e 	bne	r2,zero,800f4f4 <OS_EventWaitListInit+0x2c>
        *ptbl++ = 0;
    }
}
 800f51c:	e037883a 	mov	sp,fp
 800f520:	df000017 	ldw	fp,0(sp)
 800f524:	dec00104 	addi	sp,sp,4
 800f528:	f800283a 	ret

0800f52c <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 800f52c:	defffb04 	addi	sp,sp,-20
 800f530:	dfc00415 	stw	ra,16(sp)
 800f534:	df000315 	stw	fp,12(sp)
 800f538:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 800f53c:	010200f4 	movhi	r4,2051
 800f540:	2115bb04 	addi	r4,r4,22252
 800f544:	0142d004 	movi	r5,2880
 800f548:	800f88c0 	call	800f88c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 800f54c:	008200f4 	movhi	r2,2051
 800f550:	1095bb04 	addi	r2,r2,22252
 800f554:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 800f558:	008200f4 	movhi	r2,2051
 800f55c:	1095c704 	addi	r2,r2,22300
 800f560:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 800f564:	e03ffd0d 	sth	zero,-12(fp)
 800f568:	00001306 	br	800f5b8 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 800f56c:	e0bffe17 	ldw	r2,-8(fp)
 800f570:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 800f574:	e0bffe17 	ldw	r2,-8(fp)
 800f578:	e0ffff17 	ldw	r3,-4(fp)
 800f57c:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 800f580:	e0bffe17 	ldw	r2,-8(fp)
 800f584:	00c00fc4 	movi	r3,63
 800f588:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 800f58c:	e0bffe17 	ldw	r2,-8(fp)
 800f590:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 800f594:	e0bffe17 	ldw	r2,-8(fp)
 800f598:	10800c04 	addi	r2,r2,48
 800f59c:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 800f5a0:	e0bfff17 	ldw	r2,-4(fp)
 800f5a4:	10800c04 	addi	r2,r2,48
 800f5a8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 800f5ac:	e0bffd0b 	ldhu	r2,-12(fp)
 800f5b0:	10800044 	addi	r2,r2,1
 800f5b4:	e0bffd0d 	sth	r2,-12(fp)
 800f5b8:	e0bffd0b 	ldhu	r2,-12(fp)
 800f5bc:	10800ef0 	cmpltui	r2,r2,59
 800f5c0:	103fea1e 	bne	r2,zero,800f56c <OS_InitEventList+0x40>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 800f5c4:	e0bffe17 	ldw	r2,-8(fp)
 800f5c8:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 800f5cc:	e0bffe17 	ldw	r2,-8(fp)
 800f5d0:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 800f5d4:	e0bffe17 	ldw	r2,-8(fp)
 800f5d8:	00c00fc4 	movi	r3,63
 800f5dc:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 800f5e0:	e0bffe17 	ldw	r2,-8(fp)
 800f5e4:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 800f5e8:	008200f4 	movhi	r2,2051
 800f5ec:	1095bb04 	addi	r2,r2,22252
 800f5f0:	d08a1815 	stw	r2,10336(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 800f5f4:	e037883a 	mov	sp,fp
 800f5f8:	dfc00117 	ldw	ra,4(sp)
 800f5fc:	df000017 	ldw	fp,0(sp)
 800f600:	dec00204 	addi	sp,sp,8
 800f604:	f800283a 	ret

0800f608 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 800f608:	deffff04 	addi	sp,sp,-4
 800f60c:	df000015 	stw	fp,0(sp)
 800f610:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 800f614:	d00a1b15 	stw	zero,10348(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 800f618:	d00a1905 	stb	zero,10340(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 800f61c:	d00a0b05 	stb	zero,10284(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 800f620:	d00a1345 	stb	zero,10317(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 800f624:	d00a0b45 	stb	zero,10285(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 800f628:	d00a1015 	stw	zero,10304(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 800f62c:	d00a0c15 	stw	zero,10288(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 800f630:	d00a1e15 	stw	zero,10360(gp)
    OSIdleCtrMax  = 0L;
 800f634:	d00a1115 	stw	zero,10308(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 800f638:	d00a1d05 	stb	zero,10356(gp)
#endif
}
 800f63c:	e037883a 	mov	sp,fp
 800f640:	df000017 	ldw	fp,0(sp)
 800f644:	dec00104 	addi	sp,sp,4
 800f648:	f800283a 	ret

0800f64c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 800f64c:	defffd04 	addi	sp,sp,-12
 800f650:	df000215 	stw	fp,8(sp)
 800f654:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 800f658:	d00a1705 	stb	zero,10332(gp)
    prdytbl       = &OSRdyTbl[0];
 800f65c:	d08a1744 	addi	r2,gp,10333
 800f660:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 800f664:	e03ffe05 	stb	zero,-8(fp)
 800f668:	00000706 	br	800f688 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 800f66c:	e0bfff17 	ldw	r2,-4(fp)
 800f670:	10c00044 	addi	r3,r2,1
 800f674:	e0ffff15 	stw	r3,-4(fp)
 800f678:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 800f67c:	e0bffe03 	ldbu	r2,-8(fp)
 800f680:	10800044 	addi	r2,r2,1
 800f684:	e0bffe05 	stb	r2,-8(fp)
 800f688:	e0bffe03 	ldbu	r2,-8(fp)
 800f68c:	108000f0 	cmpltui	r2,r2,3
 800f690:	103ff61e 	bne	r2,zero,800f66c <OS_InitRdyList+0x20>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 800f694:	d00a0d45 	stb	zero,10293(gp)
    OSPrioHighRdy = 0;
 800f698:	d00a0d05 	stb	zero,10292(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 800f69c:	d00a1515 	stw	zero,10324(gp)
    OSTCBCur      = (OS_TCB *)0;
 800f6a0:	d00a1a15 	stw	zero,10344(gp)
}
 800f6a4:	e037883a 	mov	sp,fp
 800f6a8:	df000017 	ldw	fp,0(sp)
 800f6ac:	dec00104 	addi	sp,sp,4
 800f6b0:	f800283a 	ret

0800f6b4 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 800f6b4:	defff804 	addi	sp,sp,-32
 800f6b8:	dfc00715 	stw	ra,28(sp)
 800f6bc:	df000615 	stw	fp,24(sp)
 800f6c0:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 800f6c4:	00bfffd4 	movui	r2,65535
 800f6c8:	d8800015 	stw	r2,0(sp)
 800f6cc:	008200f4 	movhi	r2,2051
 800f6d0:	1093bb04 	addi	r2,r2,20204
 800f6d4:	d8800115 	stw	r2,4(sp)
 800f6d8:	00808004 	movi	r2,512
 800f6dc:	d8800215 	stw	r2,8(sp)
 800f6e0:	d8000315 	stw	zero,12(sp)
 800f6e4:	008000c4 	movi	r2,3
 800f6e8:	d8800415 	stw	r2,16(sp)
 800f6ec:	01020074 	movhi	r4,2049
 800f6f0:	213ed104 	addi	r4,r4,-1212
 800f6f4:	000b883a 	mov	r5,zero
 800f6f8:	018200f4 	movhi	r6,2051
 800f6fc:	3195ba04 	addi	r6,r6,22248
 800f700:	01c00504 	movi	r7,20
 800f704:	80145480 	call	8014548 <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 800f708:	01000504 	movi	r4,20
 800f70c:	014200b4 	movhi	r5,2050
 800f710:	29678b04 	addi	r5,r5,-25044
 800f714:	e1bfff04 	addi	r6,fp,-4
 800f718:	8014e140 	call	8014e14 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 800f71c:	e037883a 	mov	sp,fp
 800f720:	dfc00117 	ldw	ra,4(sp)
 800f724:	df000017 	ldw	fp,0(sp)
 800f728:	dec00204 	addi	sp,sp,8
 800f72c:	f800283a 	ret

0800f730 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 800f730:	defff804 	addi	sp,sp,-32
 800f734:	dfc00715 	stw	ra,28(sp)
 800f738:	df000615 	stw	fp,24(sp)
 800f73c:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 800f740:	00bfff94 	movui	r2,65534
 800f744:	d8800015 	stw	r2,0(sp)
 800f748:	008200f4 	movhi	r2,2051
 800f74c:	10914304 	addi	r2,r2,17676
 800f750:	d8800115 	stw	r2,4(sp)
 800f754:	00808004 	movi	r2,512
 800f758:	d8800215 	stw	r2,8(sp)
 800f75c:	d8000315 	stw	zero,12(sp)
 800f760:	008000c4 	movi	r2,3
 800f764:	d8800415 	stw	r2,16(sp)
 800f768:	01020074 	movhi	r4,2049
 800f76c:	213ee804 	addi	r4,r4,-1120
 800f770:	000b883a 	mov	r5,zero
 800f774:	018200f4 	movhi	r6,2051
 800f778:	31934204 	addi	r6,r6,19720
 800f77c:	01c004c4 	movi	r7,19
 800f780:	80145480 	call	8014548 <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 800f784:	010004c4 	movi	r4,19
 800f788:	014200b4 	movhi	r5,2050
 800f78c:	29678f04 	addi	r5,r5,-25028
 800f790:	e1bfff04 	addi	r6,fp,-4
 800f794:	8014e140 	call	8014e14 <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 800f798:	e037883a 	mov	sp,fp
 800f79c:	dfc00117 	ldw	ra,4(sp)
 800f7a0:	df000017 	ldw	fp,0(sp)
 800f7a4:	dec00204 	addi	sp,sp,8
 800f7a8:	f800283a 	ret

0800f7ac <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 800f7ac:	defffb04 	addi	sp,sp,-20
 800f7b0:	dfc00415 	stw	ra,16(sp)
 800f7b4:	df000315 	stw	fp,12(sp)
 800f7b8:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 800f7bc:	010200f4 	movhi	r4,2051
 800f7c0:	21188b04 	addi	r4,r4,25132
 800f7c4:	01414404 	movi	r5,1296
 800f7c8:	800f88c0 	call	800f88c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 800f7cc:	010200f4 	movhi	r4,2051
 800f7d0:	2119cf04 	addi	r4,r4,26428
 800f7d4:	01401504 	movi	r5,84
 800f7d8:	800f88c0 	call	800f88c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 800f7dc:	008200f4 	movhi	r2,2051
 800f7e0:	10988b04 	addi	r2,r2,25132
 800f7e4:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 800f7e8:	008200f4 	movhi	r2,2051
 800f7ec:	1098a604 	addi	r2,r2,25240
 800f7f0:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 800f7f4:	e03ffd05 	stb	zero,-12(fp)
 800f7f8:	00001106 	br	800f840 <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 800f7fc:	e0bffe17 	ldw	r2,-8(fp)
 800f800:	e0ffff17 	ldw	r3,-4(fp)
 800f804:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 800f808:	e0bffe17 	ldw	r2,-8(fp)
 800f80c:	00c00fc4 	movi	r3,63
 800f810:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 800f814:	e0bffe17 	ldw	r2,-8(fp)
 800f818:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 800f81c:	e0bffe17 	ldw	r2,-8(fp)
 800f820:	10801b04 	addi	r2,r2,108
 800f824:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 800f828:	e0bfff17 	ldw	r2,-4(fp)
 800f82c:	10801b04 	addi	r2,r2,108
 800f830:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 800f834:	e0bffd03 	ldbu	r2,-12(fp)
 800f838:	10800044 	addi	r2,r2,1
 800f83c:	e0bffd05 	stb	r2,-12(fp)
 800f840:	e0bffd03 	ldbu	r2,-12(fp)
 800f844:	108002f0 	cmpltui	r2,r2,11
 800f848:	103fec1e 	bne	r2,zero,800f7fc <OS_InitTCBList+0x50>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 800f84c:	e0bffe17 	ldw	r2,-8(fp)
 800f850:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 800f854:	e0bffe17 	ldw	r2,-8(fp)
 800f858:	00c00fc4 	movi	r3,63
 800f85c:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 800f860:	e0bffe17 	ldw	r2,-8(fp)
 800f864:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 800f868:	d00a0e15 	stw	zero,10296(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 800f86c:	008200f4 	movhi	r2,2051
 800f870:	10988b04 	addi	r2,r2,25132
 800f874:	d08a1215 	stw	r2,10312(gp)
}
 800f878:	e037883a 	mov	sp,fp
 800f87c:	dfc00117 	ldw	ra,4(sp)
 800f880:	df000017 	ldw	fp,0(sp)
 800f884:	dec00204 	addi	sp,sp,8
 800f888:	f800283a 	ret

0800f88c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 800f88c:	defffd04 	addi	sp,sp,-12
 800f890:	df000215 	stw	fp,8(sp)
 800f894:	df000204 	addi	fp,sp,8
 800f898:	e13ffe15 	stw	r4,-8(fp)
 800f89c:	2805883a 	mov	r2,r5
 800f8a0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 800f8a4:	00000706 	br	800f8c4 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 800f8a8:	e0bffe17 	ldw	r2,-8(fp)
 800f8ac:	10c00044 	addi	r3,r2,1
 800f8b0:	e0fffe15 	stw	r3,-8(fp)
 800f8b4:	10000005 	stb	zero,0(r2)
        size--;
 800f8b8:	e0bfff0b 	ldhu	r2,-4(fp)
 800f8bc:	10bfffc4 	addi	r2,r2,-1
 800f8c0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 800f8c4:	e0bfff0b 	ldhu	r2,-4(fp)
 800f8c8:	103ff71e 	bne	r2,zero,800f8a8 <OS_MemClr+0x1c>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 800f8cc:	e037883a 	mov	sp,fp
 800f8d0:	df000017 	ldw	fp,0(sp)
 800f8d4:	dec00104 	addi	sp,sp,4
 800f8d8:	f800283a 	ret

0800f8dc <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 800f8dc:	defffc04 	addi	sp,sp,-16
 800f8e0:	df000315 	stw	fp,12(sp)
 800f8e4:	df000304 	addi	fp,sp,12
 800f8e8:	e13ffd15 	stw	r4,-12(fp)
 800f8ec:	e17ffe15 	stw	r5,-8(fp)
 800f8f0:	3005883a 	mov	r2,r6
 800f8f4:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 800f8f8:	00000b06 	br	800f928 <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 800f8fc:	e0bffd17 	ldw	r2,-12(fp)
 800f900:	10c00044 	addi	r3,r2,1
 800f904:	e0fffd15 	stw	r3,-12(fp)
 800f908:	e0fffe17 	ldw	r3,-8(fp)
 800f90c:	19000044 	addi	r4,r3,1
 800f910:	e13ffe15 	stw	r4,-8(fp)
 800f914:	18c00003 	ldbu	r3,0(r3)
 800f918:	10c00005 	stb	r3,0(r2)
        size--;
 800f91c:	e0bfff0b 	ldhu	r2,-4(fp)
 800f920:	10bfffc4 	addi	r2,r2,-1
 800f924:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 800f928:	e0bfff0b 	ldhu	r2,-4(fp)
 800f92c:	103ff31e 	bne	r2,zero,800f8fc <OS_MemCopy+0x20>
        *pdest++ = *psrc++;
        size--;
    }
}
 800f930:	e037883a 	mov	sp,fp
 800f934:	df000017 	ldw	fp,0(sp)
 800f938:	dec00104 	addi	sp,sp,4
 800f93c:	f800283a 	ret

0800f940 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 800f940:	defffb04 	addi	sp,sp,-20
 800f944:	dfc00415 	stw	ra,16(sp)
 800f948:	df000315 	stw	fp,12(sp)
 800f94c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 800f950:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800f954:	0005303a 	rdctl	r2,status
 800f958:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f95c:	e0fffe17 	ldw	r3,-8(fp)
 800f960:	00bfff84 	movi	r2,-2
 800f964:	1884703a 	and	r2,r3,r2
 800f968:	1001703a 	wrctl	status,r2
  
  return context;
 800f96c:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 800f970:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 800f974:	d08a1903 	ldbu	r2,10340(gp)
 800f978:	10803fcc 	andi	r2,r2,255
 800f97c:	10001a1e 	bne	r2,zero,800f9e8 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 800f980:	d08a0b03 	ldbu	r2,10284(gp)
 800f984:	10803fcc 	andi	r2,r2,255
 800f988:	1000171e 	bne	r2,zero,800f9e8 <OS_Sched+0xa8>
            OS_SchedNew();
 800f98c:	800fa0c0 	call	800fa0c <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 800f990:	d0ca0d03 	ldbu	r3,10292(gp)
 800f994:	d08a0d43 	ldbu	r2,10293(gp)
 800f998:	18c03fcc 	andi	r3,r3,255
 800f99c:	10803fcc 	andi	r2,r2,255
 800f9a0:	18801126 	beq	r3,r2,800f9e8 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 800f9a4:	d08a0d03 	ldbu	r2,10292(gp)
 800f9a8:	10c03fcc 	andi	r3,r2,255
 800f9ac:	008200f4 	movhi	r2,2051
 800f9b0:	1099cf04 	addi	r2,r2,26428
 800f9b4:	18c7883a 	add	r3,r3,r3
 800f9b8:	18c7883a 	add	r3,r3,r3
 800f9bc:	10c5883a 	add	r2,r2,r3
 800f9c0:	10800017 	ldw	r2,0(r2)
 800f9c4:	d08a1515 	stw	r2,10324(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 800f9c8:	d08a1517 	ldw	r2,10324(gp)
 800f9cc:	10c00e17 	ldw	r3,56(r2)
 800f9d0:	18c00044 	addi	r3,r3,1
 800f9d4:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 800f9d8:	d08a1017 	ldw	r2,10304(gp)
 800f9dc:	10800044 	addi	r2,r2,1
 800f9e0:	d08a1015 	stw	r2,10304(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 800f9e4:	8018ee80 	call	8018ee8 <OSCtxSw>
 800f9e8:	e0bffd17 	ldw	r2,-12(fp)
 800f9ec:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800f9f0:	e0bfff17 	ldw	r2,-4(fp)
 800f9f4:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 800f9f8:	e037883a 	mov	sp,fp
 800f9fc:	dfc00117 	ldw	ra,4(sp)
 800fa00:	df000017 	ldw	fp,0(sp)
 800fa04:	dec00204 	addi	sp,sp,8
 800fa08:	f800283a 	ret

0800fa0c <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 800fa0c:	defffe04 	addi	sp,sp,-8
 800fa10:	df000115 	stw	fp,4(sp)
 800fa14:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 800fa18:	d08a1703 	ldbu	r2,10332(gp)
 800fa1c:	10c03fcc 	andi	r3,r2,255
 800fa20:	008200b4 	movhi	r2,2050
 800fa24:	10a74b04 	addi	r2,r2,-25300
 800fa28:	10c5883a 	add	r2,r2,r3
 800fa2c:	10800003 	ldbu	r2,0(r2)
 800fa30:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 800fa34:	e0bfff03 	ldbu	r2,-4(fp)
 800fa38:	100490fa 	slli	r2,r2,3
 800fa3c:	1009883a 	mov	r4,r2
 800fa40:	e0ffff03 	ldbu	r3,-4(fp)
 800fa44:	d08a1744 	addi	r2,gp,10333
 800fa48:	1885883a 	add	r2,r3,r2
 800fa4c:	10800003 	ldbu	r2,0(r2)
 800fa50:	10c03fcc 	andi	r3,r2,255
 800fa54:	008200b4 	movhi	r2,2050
 800fa58:	10a74b04 	addi	r2,r2,-25300
 800fa5c:	10c5883a 	add	r2,r2,r3
 800fa60:	10800003 	ldbu	r2,0(r2)
 800fa64:	2085883a 	add	r2,r4,r2
 800fa68:	d08a0d05 	stb	r2,10292(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 800fa6c:	e037883a 	mov	sp,fp
 800fa70:	df000017 	ldw	fp,0(sp)
 800fa74:	dec00104 	addi	sp,sp,4
 800fa78:	f800283a 	ret

0800fa7c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 800fa7c:	defffc04 	addi	sp,sp,-16
 800fa80:	df000315 	stw	fp,12(sp)
 800fa84:	df000304 	addi	fp,sp,12
 800fa88:	e13ffe15 	stw	r4,-8(fp)
 800fa8c:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 800fa90:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 800fa94:	00000b06 	br	800fac4 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 800fa98:	e0bffe17 	ldw	r2,-8(fp)
 800fa9c:	10c00044 	addi	r3,r2,1
 800faa0:	e0fffe15 	stw	r3,-8(fp)
 800faa4:	e0ffff17 	ldw	r3,-4(fp)
 800faa8:	19000044 	addi	r4,r3,1
 800faac:	e13fff15 	stw	r4,-4(fp)
 800fab0:	18c00003 	ldbu	r3,0(r3)
 800fab4:	10c00005 	stb	r3,0(r2)
        len++;
 800fab8:	e0bffd03 	ldbu	r2,-12(fp)
 800fabc:	10800044 	addi	r2,r2,1
 800fac0:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 800fac4:	e0bfff17 	ldw	r2,-4(fp)
 800fac8:	10800003 	ldbu	r2,0(r2)
 800facc:	10803fcc 	andi	r2,r2,255
 800fad0:	103ff11e 	bne	r2,zero,800fa98 <OS_StrCopy+0x1c>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 800fad4:	e0bffe17 	ldw	r2,-8(fp)
 800fad8:	10000005 	stb	zero,0(r2)
    return (len);
 800fadc:	e0bffd03 	ldbu	r2,-12(fp)
}
 800fae0:	e037883a 	mov	sp,fp
 800fae4:	df000017 	ldw	fp,0(sp)
 800fae8:	dec00104 	addi	sp,sp,4
 800faec:	f800283a 	ret

0800faf0 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 800faf0:	defffd04 	addi	sp,sp,-12
 800faf4:	df000215 	stw	fp,8(sp)
 800faf8:	df000204 	addi	fp,sp,8
 800fafc:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 800fb00:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 800fb04:	00000606 	br	800fb20 <OS_StrLen+0x30>
        psrc++;
 800fb08:	e0bfff17 	ldw	r2,-4(fp)
 800fb0c:	10800044 	addi	r2,r2,1
 800fb10:	e0bfff15 	stw	r2,-4(fp)
        len++;
 800fb14:	e0bffe03 	ldbu	r2,-8(fp)
 800fb18:	10800044 	addi	r2,r2,1
 800fb1c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 800fb20:	e0bfff17 	ldw	r2,-4(fp)
 800fb24:	10800003 	ldbu	r2,0(r2)
 800fb28:	10803fcc 	andi	r2,r2,255
 800fb2c:	103ff61e 	bne	r2,zero,800fb08 <OS_StrLen+0x18>
        psrc++;
        len++;
    }
    return (len);
 800fb30:	e0bffe03 	ldbu	r2,-8(fp)
}
 800fb34:	e037883a 	mov	sp,fp
 800fb38:	df000017 	ldw	fp,0(sp)
 800fb3c:	dec00104 	addi	sp,sp,4
 800fb40:	f800283a 	ret

0800fb44 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 800fb44:	defffa04 	addi	sp,sp,-24
 800fb48:	dfc00515 	stw	ra,20(sp)
 800fb4c:	df000415 	stw	fp,16(sp)
 800fb50:	df000404 	addi	fp,sp,16
 800fb54:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800fb58:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fb5c:	0005303a 	rdctl	r2,status
 800fb60:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fb64:	e0fffd17 	ldw	r3,-12(fp)
 800fb68:	00bfff84 	movi	r2,-2
 800fb6c:	1884703a 	and	r2,r3,r2
 800fb70:	1001703a 	wrctl	status,r2
  
  return context;
 800fb74:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 800fb78:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 800fb7c:	d08a0c17 	ldw	r2,10288(gp)
 800fb80:	10800044 	addi	r2,r2,1
 800fb84:	d08a0c15 	stw	r2,10288(gp)
 800fb88:	e0bffc17 	ldw	r2,-16(fp)
 800fb8c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fb90:	e0bffe17 	ldw	r2,-8(fp)
 800fb94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 800fb98:	80191e00 	call	80191e0 <OSTaskIdleHook>
    }
 800fb9c:	003fef06 	br	800fb5c <OS_TaskIdle+0x18>

0800fba0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 800fba0:	defffa04 	addi	sp,sp,-24
 800fba4:	dfc00515 	stw	ra,20(sp)
 800fba8:	df000415 	stw	fp,16(sp)
 800fbac:	df000404 	addi	fp,sp,16
 800fbb0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 800fbb4:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 800fbb8:	00000206 	br	800fbc4 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 800fbbc:	01003204 	movi	r4,200
 800fbc0:	80157400 	call	8015740 <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 800fbc4:	d08a1d03 	ldbu	r2,10356(gp)
 800fbc8:	10803fcc 	andi	r2,r2,255
 800fbcc:	103ffb26 	beq	r2,zero,800fbbc <OS_TaskStat+0x1c>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 800fbd0:	d08a1117 	ldw	r2,10308(gp)
 800fbd4:	1009883a 	mov	r4,r2
 800fbd8:	01401904 	movi	r5,100
 800fbdc:	800ad4c0 	call	800ad4c <__udivsi3>
 800fbe0:	d08a1115 	stw	r2,10308(gp)
    if (OSIdleCtrMax == 0L) {
 800fbe4:	d08a1117 	ldw	r2,10308(gp)
 800fbe8:	1000031e 	bne	r2,zero,800fbf8 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 800fbec:	d00a1305 	stb	zero,10316(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 800fbf0:	01003fc4 	movi	r4,255
 800fbf4:	80153940 	call	8015394 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fbf8:	0005303a 	rdctl	r2,status
 800fbfc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fc00:	e0fffd17 	ldw	r3,-12(fp)
 800fc04:	00bfff84 	movi	r2,-2
 800fc08:	1884703a 	and	r2,r3,r2
 800fc0c:	1001703a 	wrctl	status,r2
  
  return context;
 800fc10:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 800fc14:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 800fc18:	d08a0c17 	ldw	r2,10288(gp)
 800fc1c:	d08a1e15 	stw	r2,10360(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 800fc20:	d00a0c15 	stw	zero,10288(gp)
 800fc24:	e0bffc17 	ldw	r2,-16(fp)
 800fc28:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fc2c:	e0bffe17 	ldw	r2,-8(fp)
 800fc30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 800fc34:	d0ca1e17 	ldw	r3,10360(gp)
 800fc38:	d08a1117 	ldw	r2,10308(gp)
 800fc3c:	1809883a 	mov	r4,r3
 800fc40:	100b883a 	mov	r5,r2
 800fc44:	800ad4c0 	call	800ad4c <__udivsi3>
 800fc48:	1007883a 	mov	r3,r2
 800fc4c:	00801904 	movi	r2,100
 800fc50:	10c5c83a 	sub	r2,r2,r3
 800fc54:	d08a1305 	stb	r2,10316(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 800fc58:	80191700 	call	8019170 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 800fc5c:	800fc6c0 	call	800fc6c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 800fc60:	01001904 	movi	r4,100
 800fc64:	80157400 	call	8015740 <OSTimeDly>
    }
 800fc68:	003fe306 	br	800fbf8 <OS_TaskStat+0x58>

0800fc6c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 800fc6c:	defffa04 	addi	sp,sp,-24
 800fc70:	dfc00515 	stw	ra,20(sp)
 800fc74:	df000415 	stw	fp,16(sp)
 800fc78:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800fc7c:	e03ffc05 	stb	zero,-16(fp)
 800fc80:	00002406 	br	800fd14 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 800fc84:	e0fffc03 	ldbu	r3,-16(fp)
 800fc88:	e0bffe04 	addi	r2,fp,-8
 800fc8c:	1809883a 	mov	r4,r3
 800fc90:	100b883a 	mov	r5,r2
 800fc94:	80151cc0 	call	80151cc <OSTaskStkChk>
 800fc98:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 800fc9c:	e0bffc43 	ldbu	r2,-15(fp)
 800fca0:	1000191e 	bne	r2,zero,800fd08 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 800fca4:	e0fffc03 	ldbu	r3,-16(fp)
 800fca8:	008200f4 	movhi	r2,2051
 800fcac:	1099cf04 	addi	r2,r2,26428
 800fcb0:	18c7883a 	add	r3,r3,r3
 800fcb4:	18c7883a 	add	r3,r3,r3
 800fcb8:	10c5883a 	add	r2,r2,r3
 800fcbc:	10800017 	ldw	r2,0(r2)
 800fcc0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 800fcc4:	e0bffd17 	ldw	r2,-12(fp)
 800fcc8:	10000f26 	beq	r2,zero,800fd08 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 800fccc:	e0bffd17 	ldw	r2,-12(fp)
 800fcd0:	10800060 	cmpeqi	r2,r2,1
 800fcd4:	10000c1e 	bne	r2,zero,800fd08 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 800fcd8:	e0bffd17 	ldw	r2,-12(fp)
 800fcdc:	10c00217 	ldw	r3,8(r2)
 800fce0:	e0bffd17 	ldw	r2,-12(fp)
 800fce4:	10800317 	ldw	r2,12(r2)
 800fce8:	1085883a 	add	r2,r2,r2
 800fcec:	1085883a 	add	r2,r2,r2
 800fcf0:	1887883a 	add	r3,r3,r2
 800fcf4:	e0bffd17 	ldw	r2,-12(fp)
 800fcf8:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 800fcfc:	e0ffff17 	ldw	r3,-4(fp)
 800fd00:	e0bffd17 	ldw	r2,-12(fp)
 800fd04:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 800fd08:	e0bffc03 	ldbu	r2,-16(fp)
 800fd0c:	10800044 	addi	r2,r2,1
 800fd10:	e0bffc05 	stb	r2,-16(fp)
 800fd14:	e0bffc03 	ldbu	r2,-16(fp)
 800fd18:	10800570 	cmpltui	r2,r2,21
 800fd1c:	103fd91e 	bne	r2,zero,800fc84 <OS_TaskStatStkChk+0x18>
#endif
                }
            }
        }
    }
}
 800fd20:	e037883a 	mov	sp,fp
 800fd24:	dfc00117 	ldw	ra,4(sp)
 800fd28:	df000017 	ldw	fp,0(sp)
 800fd2c:	dec00204 	addi	sp,sp,8
 800fd30:	f800283a 	ret

0800fd34 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 800fd34:	defff204 	addi	sp,sp,-56
 800fd38:	dfc00d15 	stw	ra,52(sp)
 800fd3c:	df000c15 	stw	fp,48(sp)
 800fd40:	df000c04 	addi	fp,sp,48
 800fd44:	e17ffc15 	stw	r5,-16(fp)
 800fd48:	e1bffd15 	stw	r6,-12(fp)
 800fd4c:	3807883a 	mov	r3,r7
 800fd50:	e0800417 	ldw	r2,16(fp)
 800fd54:	e13ffb05 	stb	r4,-20(fp)
 800fd58:	e0fffe0d 	sth	r3,-8(fp)
 800fd5c:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 800fd60:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fd64:	0005303a 	rdctl	r2,status
 800fd68:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fd6c:	e0fff617 	ldw	r3,-40(fp)
 800fd70:	00bfff84 	movi	r2,-2
 800fd74:	1884703a 	and	r2,r3,r2
 800fd78:	1001703a 	wrctl	status,r2
  
  return context;
 800fd7c:	e0bff617 	ldw	r2,-40(fp)
#endif



    OS_ENTER_CRITICAL();
 800fd80:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 800fd84:	d08a1217 	ldw	r2,10312(gp)
 800fd88:	e0bff515 	stw	r2,-44(fp)
    if (ptcb != (OS_TCB *)0) {
 800fd8c:	e0bff517 	ldw	r2,-44(fp)
 800fd90:	10009326 	beq	r2,zero,800ffe0 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 800fd94:	e0bff517 	ldw	r2,-44(fp)
 800fd98:	10800517 	ldw	r2,20(r2)
 800fd9c:	d08a1215 	stw	r2,10312(gp)
 800fda0:	e0bff417 	ldw	r2,-48(fp)
 800fda4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800fda8:	e0bff717 	ldw	r2,-36(fp)
 800fdac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 800fdb0:	e0bff517 	ldw	r2,-44(fp)
 800fdb4:	e0fffc17 	ldw	r3,-16(fp)
 800fdb8:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 800fdbc:	e0bff517 	ldw	r2,-44(fp)
 800fdc0:	e0fffb03 	ldbu	r3,-20(fp)
 800fdc4:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 800fdc8:	e0bff517 	ldw	r2,-44(fp)
 800fdcc:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 800fdd0:	e0bff517 	ldw	r2,-44(fp)
 800fdd4:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 800fdd8:	e0bff517 	ldw	r2,-44(fp)
 800fddc:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 800fde0:	e0bff517 	ldw	r2,-44(fp)
 800fde4:	e0c00317 	ldw	r3,12(fp)
 800fde8:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 800fdec:	e0bff517 	ldw	r2,-44(fp)
 800fdf0:	e0c00217 	ldw	r3,8(fp)
 800fdf4:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 800fdf8:	e0bff517 	ldw	r2,-44(fp)
 800fdfc:	e0fffd17 	ldw	r3,-12(fp)
 800fe00:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 800fe04:	e0bff517 	ldw	r2,-44(fp)
 800fe08:	e0ffff0b 	ldhu	r3,-4(fp)
 800fe0c:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 800fe10:	e0bff517 	ldw	r2,-44(fp)
 800fe14:	e0fffe0b 	ldhu	r3,-8(fp)
 800fe18:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 800fe1c:	e0bff517 	ldw	r2,-44(fp)
 800fe20:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 800fe24:	e0bffb03 	ldbu	r2,-20(fp)
 800fe28:	1004d0fa 	srli	r2,r2,3
 800fe2c:	1007883a 	mov	r3,r2
 800fe30:	e0bff517 	ldw	r2,-44(fp)
 800fe34:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 800fe38:	e0bffb03 	ldbu	r2,-20(fp)
 800fe3c:	108001cc 	andi	r2,r2,7
 800fe40:	1007883a 	mov	r3,r2
 800fe44:	e0bff517 	ldw	r2,-44(fp)
 800fe48:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 800fe4c:	e0bff517 	ldw	r2,-44(fp)
 800fe50:	10800d03 	ldbu	r2,52(r2)
 800fe54:	10803fcc 	andi	r2,r2,255
 800fe58:	00c00044 	movi	r3,1
 800fe5c:	1884983a 	sll	r2,r3,r2
 800fe60:	1007883a 	mov	r3,r2
 800fe64:	e0bff517 	ldw	r2,-44(fp)
 800fe68:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 800fe6c:	e0bff517 	ldw	r2,-44(fp)
 800fe70:	10800cc3 	ldbu	r2,51(r2)
 800fe74:	10803fcc 	andi	r2,r2,255
 800fe78:	00c00044 	movi	r3,1
 800fe7c:	1884983a 	sll	r2,r3,r2
 800fe80:	1007883a 	mov	r3,r2
 800fe84:	e0bff517 	ldw	r2,-44(fp)
 800fe88:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 800fe8c:	e0bff517 	ldw	r2,-44(fp)
 800fe90:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 800fe94:	e0bff517 	ldw	r2,-44(fp)
 800fe98:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 800fe9c:	e0bff517 	ldw	r2,-44(fp)
 800fea0:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 800fea4:	e0bff517 	ldw	r2,-44(fp)
 800fea8:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 800feac:	e0bff517 	ldw	r2,-44(fp)
 800feb0:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 800feb4:	e0bff517 	ldw	r2,-44(fp)
 800feb8:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 800febc:	e0bff517 	ldw	r2,-44(fp)
 800fec0:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 800fec4:	e0bff517 	ldw	r2,-44(fp)
 800fec8:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 800fecc:	e0bff517 	ldw	r2,-44(fp)
 800fed0:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 800fed4:	e0bff517 	ldw	r2,-44(fp)
 800fed8:	00c00fc4 	movi	r3,63
 800fedc:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 800fee0:	e0bff517 	ldw	r2,-44(fp)
 800fee4:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 800fee8:	e13ff517 	ldw	r4,-44(fp)
 800feec:	80191fc0 	call	80191fc <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 800fef0:	e13ff517 	ldw	r4,-44(fp)
 800fef4:	80191140 	call	8019114 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800fef8:	0005303a 	rdctl	r2,status
 800fefc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ff00:	e0fff817 	ldw	r3,-32(fp)
 800ff04:	00bfff84 	movi	r2,-2
 800ff08:	1884703a 	and	r2,r3,r2
 800ff0c:	1001703a 	wrctl	status,r2
  
  return context;
 800ff10:	e0bff817 	ldw	r2,-32(fp)

        OS_ENTER_CRITICAL();
 800ff14:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 800ff18:	e0fffb03 	ldbu	r3,-20(fp)
 800ff1c:	008200f4 	movhi	r2,2051
 800ff20:	1099cf04 	addi	r2,r2,26428
 800ff24:	18c7883a 	add	r3,r3,r3
 800ff28:	18c7883a 	add	r3,r3,r3
 800ff2c:	10c5883a 	add	r2,r2,r3
 800ff30:	e0fff517 	ldw	r3,-44(fp)
 800ff34:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 800ff38:	d0ca0e17 	ldw	r3,10296(gp)
 800ff3c:	e0bff517 	ldw	r2,-44(fp)
 800ff40:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 800ff44:	e0bff517 	ldw	r2,-44(fp)
 800ff48:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 800ff4c:	d08a0e17 	ldw	r2,10296(gp)
 800ff50:	10000326 	beq	r2,zero,800ff60 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 800ff54:	d08a0e17 	ldw	r2,10296(gp)
 800ff58:	e0fff517 	ldw	r3,-44(fp)
 800ff5c:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 800ff60:	e0bff517 	ldw	r2,-44(fp)
 800ff64:	d08a0e15 	stw	r2,10296(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 800ff68:	e0bff517 	ldw	r2,-44(fp)
 800ff6c:	10c00d83 	ldbu	r3,54(r2)
 800ff70:	d08a1703 	ldbu	r2,10332(gp)
 800ff74:	1884b03a 	or	r2,r3,r2
 800ff78:	d08a1705 	stb	r2,10332(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 800ff7c:	e0bff517 	ldw	r2,-44(fp)
 800ff80:	10800d03 	ldbu	r2,52(r2)
 800ff84:	10c03fcc 	andi	r3,r2,255
 800ff88:	e0bff517 	ldw	r2,-44(fp)
 800ff8c:	10800d03 	ldbu	r2,52(r2)
 800ff90:	11003fcc 	andi	r4,r2,255
 800ff94:	d08a1744 	addi	r2,gp,10333
 800ff98:	2085883a 	add	r2,r4,r2
 800ff9c:	11000003 	ldbu	r4,0(r2)
 800ffa0:	e0bff517 	ldw	r2,-44(fp)
 800ffa4:	10800d43 	ldbu	r2,53(r2)
 800ffa8:	2084b03a 	or	r2,r4,r2
 800ffac:	1009883a 	mov	r4,r2
 800ffb0:	d08a1744 	addi	r2,gp,10333
 800ffb4:	1885883a 	add	r2,r3,r2
 800ffb8:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 800ffbc:	d08a1343 	ldbu	r2,10317(gp)
 800ffc0:	10800044 	addi	r2,r2,1
 800ffc4:	d08a1345 	stb	r2,10317(gp)
 800ffc8:	e0bff417 	ldw	r2,-48(fp)
 800ffcc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800ffd0:	e0bff917 	ldw	r2,-28(fp)
 800ffd4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 800ffd8:	0005883a 	mov	r2,zero
 800ffdc:	00000506 	br	800fff4 <OS_TCBInit+0x2c0>
 800ffe0:	e0bff417 	ldw	r2,-48(fp)
 800ffe4:	e0bffa15 	stw	r2,-24(fp)
 800ffe8:	e0bffa17 	ldw	r2,-24(fp)
 800ffec:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 800fff0:	00801084 	movi	r2,66
}
 800fff4:	e037883a 	mov	sp,fp
 800fff8:	dfc00117 	ldw	ra,4(sp)
 800fffc:	df000017 	ldw	fp,0(sp)
 8010000:	dec00204 	addi	sp,sp,8
 8010004:	f800283a 	ret

08010008 <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 8010008:	defffe04 	addi	sp,sp,-8
 801000c:	df000115 	stw	fp,4(sp)
 8010010:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 8010014:	d0a01904 	addi	r2,gp,-32668
 8010018:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 801001c:	d0a01a04 	addi	r2,gp,-32664
 8010020:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 8010024:	d0a01b84 	addi	r2,gp,-32658
 8010028:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 801002c:	d0a01c04 	addi	r2,gp,-32656
 8010030:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 8010034:	d0a01b04 	addi	r2,gp,-32660
 8010038:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 801003c:	d0a01c84 	addi	r2,gp,-32654
 8010040:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 8010044:	d0a01d04 	addi	r2,gp,-32652
 8010048:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 801004c:	d0a01d84 	addi	r2,gp,-32650
 8010050:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 8010054:	d0a01e04 	addi	r2,gp,-32648
 8010058:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 801005c:	d0a01e84 	addi	r2,gp,-32646
 8010060:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 8010064:	d0a01f04 	addi	r2,gp,-32644
 8010068:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 801006c:	d0a01f84 	addi	r2,gp,-32642
 8010070:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 8010074:	d0a02004 	addi	r2,gp,-32640
 8010078:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 801007c:	d0a02084 	addi	r2,gp,-32638
 8010080:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 8010084:	d0a02104 	addi	r2,gp,-32636
 8010088:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 801008c:	d0a02184 	addi	r2,gp,-32634
 8010090:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 8010094:	d0a02204 	addi	r2,gp,-32632
 8010098:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 801009c:	d0a02284 	addi	r2,gp,-32630
 80100a0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 80100a4:	d0a02304 	addi	r2,gp,-32628
 80100a8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 80100ac:	d0a02384 	addi	r2,gp,-32626
 80100b0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 80100b4:	d0a02404 	addi	r2,gp,-32624
 80100b8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 80100bc:	d0a02484 	addi	r2,gp,-32622
 80100c0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 80100c4:	d0a02504 	addi	r2,gp,-32620
 80100c8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 80100cc:	d0a02584 	addi	r2,gp,-32618
 80100d0:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 80100d4:	d0a02604 	addi	r2,gp,-32616
 80100d8:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 80100dc:	d0a02684 	addi	r2,gp,-32614
 80100e0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 80100e4:	d0a02704 	addi	r2,gp,-32612
 80100e8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 80100ec:	d0a02784 	addi	r2,gp,-32610
 80100f0:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 80100f4:	d0a02804 	addi	r2,gp,-32608
 80100f8:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 80100fc:	d0a02884 	addi	r2,gp,-32606
 8010100:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 8010104:	d0a02904 	addi	r2,gp,-32604
 8010108:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 801010c:	d0a02984 	addi	r2,gp,-32602
 8010110:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 8010114:	d0a02a04 	addi	r2,gp,-32600
 8010118:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 801011c:	d0a02a84 	addi	r2,gp,-32598
 8010120:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 8010124:	d0a02b04 	addi	r2,gp,-32596
 8010128:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 801012c:	d0a02b84 	addi	r2,gp,-32594
 8010130:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 8010134:	d0a02c04 	addi	r2,gp,-32592
 8010138:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 801013c:	d0a02c84 	addi	r2,gp,-32590
 8010140:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 8010144:	d0a02d04 	addi	r2,gp,-32588
 8010148:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 801014c:	d0a02d84 	addi	r2,gp,-32586
 8010150:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 8010154:	d0a02e04 	addi	r2,gp,-32584
 8010158:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 801015c:	d0a02e84 	addi	r2,gp,-32582
 8010160:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 8010164:	d0a02f04 	addi	r2,gp,-32580
 8010168:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 801016c:	d0a02f84 	addi	r2,gp,-32578
 8010170:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 8010174:	d0a03004 	addi	r2,gp,-32576
 8010178:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 801017c:	d0a03504 	addi	r2,gp,-32556
 8010180:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 8010184:	e037883a 	mov	sp,fp
 8010188:	df000017 	ldw	fp,0(sp)
 801018c:	dec00104 	addi	sp,sp,4
 8010190:	f800283a 	ret

08010194 <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 8010194:	defff204 	addi	sp,sp,-56
 8010198:	df000d15 	stw	fp,52(sp)
 801019c:	df000d04 	addi	fp,sp,52
 80101a0:	e13ffc15 	stw	r4,-16(fp)
 80101a4:	2807883a 	mov	r3,r5
 80101a8:	3005883a 	mov	r2,r6
 80101ac:	e1ffff15 	stw	r7,-4(fp)
 80101b0:	e0fffd0d 	sth	r3,-12(fp)
 80101b4:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 80101b8:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 80101bc:	e0bfff17 	ldw	r2,-4(fp)
 80101c0:	1000021e 	bne	r2,zero,80101cc <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 80101c4:	0005883a 	mov	r2,zero
 80101c8:	0000b006 	br	801048c <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 80101cc:	e0bffc17 	ldw	r2,-16(fp)
 80101d0:	1000051e 	bne	r2,zero,80101e8 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 80101d4:	e0bfff17 	ldw	r2,-4(fp)
 80101d8:	00c01b84 	movi	r3,110
 80101dc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 80101e0:	0005883a 	mov	r2,zero
 80101e4:	0000a906 	br	801048c <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 80101e8:	e0bffc17 	ldw	r2,-16(fp)
 80101ec:	10800003 	ldbu	r2,0(r2)
 80101f0:	10803fcc 	andi	r2,r2,255
 80101f4:	10800160 	cmpeqi	r2,r2,5
 80101f8:	1000051e 	bne	r2,zero,8010210 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 80101fc:	e0bfff17 	ldw	r2,-4(fp)
 8010200:	00c00044 	movi	r3,1
 8010204:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8010208:	0005883a 	mov	r2,zero
 801020c:	00009f06 	br	801048c <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 8010210:	e0fffe03 	ldbu	r3,-8(fp)
 8010214:	00bfe004 	movi	r2,-128
 8010218:	1884703a 	and	r2,r3,r2
 801021c:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 8010220:	e0bff503 	ldbu	r2,-44(fp)
 8010224:	10000626 	beq	r2,zero,8010240 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 8010228:	e0bffe03 	ldbu	r2,-8(fp)
 801022c:	10801fcc 	andi	r2,r2,127
 8010230:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 8010234:	00800044 	movi	r2,1
 8010238:	e0bff385 	stb	r2,-50(fp)
 801023c:	00000106 	br	8010244 <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 8010240:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 8010244:	e0bfff17 	ldw	r2,-4(fp)
 8010248:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801024c:	0005303a 	rdctl	r2,status
 8010250:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010254:	e0fff617 	ldw	r3,-40(fp)
 8010258:	00bfff84 	movi	r2,-2
 801025c:	1884703a 	and	r2,r3,r2
 8010260:	1001703a 	wrctl	status,r2
  
  return context;
 8010264:	e0bff617 	ldw	r2,-40(fp)
    OS_ENTER_CRITICAL();
 8010268:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 801026c:	e0bffe03 	ldbu	r2,-8(fp)
 8010270:	10c00060 	cmpeqi	r3,r2,1
 8010274:	18005f1e 	bne	r3,zero,80103f4 <OSFlagAccept+0x260>
 8010278:	10c00088 	cmpgei	r3,r2,2
 801027c:	1800021e 	bne	r3,zero,8010288 <OSFlagAccept+0xf4>
 8010280:	10003f26 	beq	r2,zero,8010380 <OSFlagAccept+0x1ec>
 8010284:	00007706 	br	8010464 <OSFlagAccept+0x2d0>
 8010288:	10c000a0 	cmpeqi	r3,r2,2
 801028c:	1800031e 	bne	r3,zero,801029c <OSFlagAccept+0x108>
 8010290:	108000e0 	cmpeqi	r2,r2,3
 8010294:	10001e1e 	bne	r2,zero,8010310 <OSFlagAccept+0x17c>
 8010298:	00007206 	br	8010464 <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 801029c:	e0bffc17 	ldw	r2,-16(fp)
 80102a0:	10c0020b 	ldhu	r3,8(r2)
 80102a4:	e0bffd0b 	ldhu	r2,-12(fp)
 80102a8:	1884703a 	and	r2,r3,r2
 80102ac:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 80102b0:	e0fff30b 	ldhu	r3,-52(fp)
 80102b4:	e0bffd0b 	ldhu	r2,-12(fp)
 80102b8:	18800d1e 	bne	r3,r2,80102f0 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 80102bc:	e0bff383 	ldbu	r2,-50(fp)
 80102c0:	10800058 	cmpnei	r2,r2,1
 80102c4:	10000d1e 	bne	r2,zero,80102fc <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 80102c8:	e0bffc17 	ldw	r2,-16(fp)
 80102cc:	1080020b 	ldhu	r2,8(r2)
 80102d0:	1007883a 	mov	r3,r2
 80102d4:	e0bff30b 	ldhu	r2,-52(fp)
 80102d8:	0084303a 	nor	r2,zero,r2
 80102dc:	1884703a 	and	r2,r3,r2
 80102e0:	1007883a 	mov	r3,r2
 80102e4:	e0bffc17 	ldw	r2,-16(fp)
 80102e8:	10c0020d 	sth	r3,8(r2)
 80102ec:	00000306 	br	80102fc <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 80102f0:	e0bfff17 	ldw	r2,-4(fp)
 80102f4:	00c01c04 	movi	r3,112
 80102f8:	10c00005 	stb	r3,0(r2)
 80102fc:	e0bff417 	ldw	r2,-48(fp)
 8010300:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010304:	e0bff717 	ldw	r2,-36(fp)
 8010308:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 801030c:	00005e06 	br	8010488 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 8010310:	e0bffc17 	ldw	r2,-16(fp)
 8010314:	10c0020b 	ldhu	r3,8(r2)
 8010318:	e0bffd0b 	ldhu	r2,-12(fp)
 801031c:	1884703a 	and	r2,r3,r2
 8010320:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 8010324:	e0bff30b 	ldhu	r2,-52(fp)
 8010328:	10000d26 	beq	r2,zero,8010360 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 801032c:	e0bff383 	ldbu	r2,-50(fp)
 8010330:	10800058 	cmpnei	r2,r2,1
 8010334:	10000d1e 	bne	r2,zero,801036c <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 8010338:	e0bffc17 	ldw	r2,-16(fp)
 801033c:	1080020b 	ldhu	r2,8(r2)
 8010340:	1007883a 	mov	r3,r2
 8010344:	e0bff30b 	ldhu	r2,-52(fp)
 8010348:	0084303a 	nor	r2,zero,r2
 801034c:	1884703a 	and	r2,r3,r2
 8010350:	1007883a 	mov	r3,r2
 8010354:	e0bffc17 	ldw	r2,-16(fp)
 8010358:	10c0020d 	sth	r3,8(r2)
 801035c:	00000306 	br	801036c <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 8010360:	e0bfff17 	ldw	r2,-4(fp)
 8010364:	00c01c04 	movi	r3,112
 8010368:	10c00005 	stb	r3,0(r2)
 801036c:	e0bff417 	ldw	r2,-48(fp)
 8010370:	e0bff815 	stw	r2,-32(fp)
 8010374:	e0bff817 	ldw	r2,-32(fp)
 8010378:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 801037c:	00004206 	br	8010488 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 8010380:	e0bffc17 	ldw	r2,-16(fp)
 8010384:	1080020b 	ldhu	r2,8(r2)
 8010388:	0084303a 	nor	r2,zero,r2
 801038c:	1007883a 	mov	r3,r2
 8010390:	e0bffd0b 	ldhu	r2,-12(fp)
 8010394:	1884703a 	and	r2,r3,r2
 8010398:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 801039c:	e0fff30b 	ldhu	r3,-52(fp)
 80103a0:	e0bffd0b 	ldhu	r2,-12(fp)
 80103a4:	18800b1e 	bne	r3,r2,80103d4 <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 80103a8:	e0bff383 	ldbu	r2,-50(fp)
 80103ac:	10800058 	cmpnei	r2,r2,1
 80103b0:	10000b1e 	bne	r2,zero,80103e0 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 80103b4:	e0bffc17 	ldw	r2,-16(fp)
 80103b8:	10c0020b 	ldhu	r3,8(r2)
 80103bc:	e0bff30b 	ldhu	r2,-52(fp)
 80103c0:	1884b03a 	or	r2,r3,r2
 80103c4:	1007883a 	mov	r3,r2
 80103c8:	e0bffc17 	ldw	r2,-16(fp)
 80103cc:	10c0020d 	sth	r3,8(r2)
 80103d0:	00000306 	br	80103e0 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 80103d4:	e0bfff17 	ldw	r2,-4(fp)
 80103d8:	00c01c04 	movi	r3,112
 80103dc:	10c00005 	stb	r3,0(r2)
 80103e0:	e0bff417 	ldw	r2,-48(fp)
 80103e4:	e0bff915 	stw	r2,-28(fp)
 80103e8:	e0bff917 	ldw	r2,-28(fp)
 80103ec:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 80103f0:	00002506 	br	8010488 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 80103f4:	e0bffc17 	ldw	r2,-16(fp)
 80103f8:	1080020b 	ldhu	r2,8(r2)
 80103fc:	0084303a 	nor	r2,zero,r2
 8010400:	1007883a 	mov	r3,r2
 8010404:	e0bffd0b 	ldhu	r2,-12(fp)
 8010408:	1884703a 	and	r2,r3,r2
 801040c:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 8010410:	e0bff30b 	ldhu	r2,-52(fp)
 8010414:	10000b26 	beq	r2,zero,8010444 <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8010418:	e0bff383 	ldbu	r2,-50(fp)
 801041c:	10800058 	cmpnei	r2,r2,1
 8010420:	10000b1e 	bne	r2,zero,8010450 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 8010424:	e0bffc17 	ldw	r2,-16(fp)
 8010428:	10c0020b 	ldhu	r3,8(r2)
 801042c:	e0bff30b 	ldhu	r2,-52(fp)
 8010430:	1884b03a 	or	r2,r3,r2
 8010434:	1007883a 	mov	r3,r2
 8010438:	e0bffc17 	ldw	r2,-16(fp)
 801043c:	10c0020d 	sth	r3,8(r2)
 8010440:	00000306 	br	8010450 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 8010444:	e0bfff17 	ldw	r2,-4(fp)
 8010448:	00c01c04 	movi	r3,112
 801044c:	10c00005 	stb	r3,0(r2)
 8010450:	e0bff417 	ldw	r2,-48(fp)
 8010454:	e0bffa15 	stw	r2,-24(fp)
 8010458:	e0bffa17 	ldw	r2,-24(fp)
 801045c:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 8010460:	00000906 	br	8010488 <OSFlagAccept+0x2f4>
 8010464:	e0bff417 	ldw	r2,-48(fp)
 8010468:	e0bffb15 	stw	r2,-20(fp)
 801046c:	e0bffb17 	ldw	r2,-20(fp)
 8010470:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 8010474:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 8010478:	e0bfff17 	ldw	r2,-4(fp)
 801047c:	00c01bc4 	movi	r3,111
 8010480:	10c00005 	stb	r3,0(r2)
             break;
 8010484:	0001883a 	nop
    }
    return (flags_rdy);
 8010488:	e0bff30b 	ldhu	r2,-52(fp)
}
 801048c:	e037883a 	mov	sp,fp
 8010490:	df000017 	ldw	fp,0(sp)
 8010494:	dec00104 	addi	sp,sp,4
 8010498:	f800283a 	ret

0801049c <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 801049c:	defff804 	addi	sp,sp,-32
 80104a0:	df000715 	stw	fp,28(sp)
 80104a4:	df000704 	addi	fp,sp,28
 80104a8:	2005883a 	mov	r2,r4
 80104ac:	e17fff15 	stw	r5,-4(fp)
 80104b0:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 80104b4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 80104b8:	e0bfff17 	ldw	r2,-4(fp)
 80104bc:	1000021e 	bne	r2,zero,80104c8 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 80104c0:	0005883a 	mov	r2,zero
 80104c4:	00003b06 	br	80105b4 <OSFlagCreate+0x118>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 80104c8:	008200f4 	movhi	r2,2051
 80104cc:	10bb4704 	addi	r2,r2,-4836
 80104d0:	10800003 	ldbu	r2,0(r2)
 80104d4:	10803fcc 	andi	r2,r2,255
 80104d8:	10000526 	beq	r2,zero,80104f0 <OSFlagCreate+0x54>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 80104dc:	e0bfff17 	ldw	r2,-4(fp)
 80104e0:	00c00404 	movi	r3,16
 80104e4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 80104e8:	0005883a 	mov	r2,zero
 80104ec:	00003106 	br	80105b4 <OSFlagCreate+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80104f0:	0005303a 	rdctl	r2,status
 80104f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80104f8:	e0fffb17 	ldw	r3,-20(fp)
 80104fc:	00bfff84 	movi	r2,-2
 8010500:	1884703a 	and	r2,r3,r2
 8010504:	1001703a 	wrctl	status,r2
  
  return context;
 8010508:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 801050c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 8010510:	008200f4 	movhi	r2,2051
 8010514:	10bb4a04 	addi	r2,r2,-4824
 8010518:	10800017 	ldw	r2,0(r2)
 801051c:	e0bffa15 	stw	r2,-24(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 8010520:	e0bffa17 	ldw	r2,-24(fp)
 8010524:	10001b26 	beq	r2,zero,8010594 <OSFlagCreate+0xf8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 8010528:	008200f4 	movhi	r2,2051
 801052c:	10bb4a04 	addi	r2,r2,-4824
 8010530:	10800017 	ldw	r2,0(r2)
 8010534:	10c00117 	ldw	r3,4(r2)
 8010538:	008200f4 	movhi	r2,2051
 801053c:	10bb4a04 	addi	r2,r2,-4824
 8010540:	10c00015 	stw	r3,0(r2)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 8010544:	e0bffa17 	ldw	r2,-24(fp)
 8010548:	00c00144 	movi	r3,5
 801054c:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 8010550:	e0bffa17 	ldw	r2,-24(fp)
 8010554:	e0fffe0b 	ldhu	r3,-8(fp)
 8010558:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 801055c:	e0bffa17 	ldw	r2,-24(fp)
 8010560:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 8010564:	e0bffa17 	ldw	r2,-24(fp)
 8010568:	00c00fc4 	movi	r3,63
 801056c:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 8010570:	e0bffa17 	ldw	r2,-24(fp)
 8010574:	100002c5 	stb	zero,11(r2)
 8010578:	e0bff917 	ldw	r2,-28(fp)
 801057c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010580:	e0bffc17 	ldw	r2,-16(fp)
 8010584:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 8010588:	e0bfff17 	ldw	r2,-4(fp)
 801058c:	10000005 	stb	zero,0(r2)
 8010590:	00000706 	br	80105b0 <OSFlagCreate+0x114>
 8010594:	e0bff917 	ldw	r2,-28(fp)
 8010598:	e0bffd15 	stw	r2,-12(fp)
 801059c:	e0bffd17 	ldw	r2,-12(fp)
 80105a0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 80105a4:	e0bfff17 	ldw	r2,-4(fp)
 80105a8:	00c01c84 	movi	r3,114
 80105ac:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 80105b0:	e0bffa17 	ldw	r2,-24(fp)
}
 80105b4:	e037883a 	mov	sp,fp
 80105b8:	df000017 	ldw	fp,0(sp)
 80105bc:	dec00104 	addi	sp,sp,4
 80105c0:	f800283a 	ret

080105c4 <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 80105c4:	defff204 	addi	sp,sp,-56
 80105c8:	dfc00d15 	stw	ra,52(sp)
 80105cc:	df000c15 	stw	fp,48(sp)
 80105d0:	df000c04 	addi	fp,sp,48
 80105d4:	e13ffd15 	stw	r4,-12(fp)
 80105d8:	2805883a 	mov	r2,r5
 80105dc:	e1bfff15 	stw	r6,-4(fp)
 80105e0:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 80105e4:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 80105e8:	e0bfff17 	ldw	r2,-4(fp)
 80105ec:	1000021e 	bne	r2,zero,80105f8 <OSFlagDel+0x34>
        return (pgrp);
 80105f0:	e0bffd17 	ldw	r2,-12(fp)
 80105f4:	00008a06 	br	8010820 <OSFlagDel+0x25c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 80105f8:	e0bffd17 	ldw	r2,-12(fp)
 80105fc:	1000051e 	bne	r2,zero,8010614 <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8010600:	e0bfff17 	ldw	r2,-4(fp)
 8010604:	00c01b84 	movi	r3,110
 8010608:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 801060c:	e0bffd17 	ldw	r2,-12(fp)
 8010610:	00008306 	br	8010820 <OSFlagDel+0x25c>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 8010614:	008200f4 	movhi	r2,2051
 8010618:	10bb4704 	addi	r2,r2,-4836
 801061c:	10800003 	ldbu	r2,0(r2)
 8010620:	10803fcc 	andi	r2,r2,255
 8010624:	10000526 	beq	r2,zero,801063c <OSFlagDel+0x78>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 8010628:	e0bfff17 	ldw	r2,-4(fp)
 801062c:	00c003c4 	movi	r3,15
 8010630:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 8010634:	e0bffd17 	ldw	r2,-12(fp)
 8010638:	00007906 	br	8010820 <OSFlagDel+0x25c>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 801063c:	e0bffd17 	ldw	r2,-12(fp)
 8010640:	10800003 	ldbu	r2,0(r2)
 8010644:	10803fcc 	andi	r2,r2,255
 8010648:	10800160 	cmpeqi	r2,r2,5
 801064c:	1000051e 	bne	r2,zero,8010664 <OSFlagDel+0xa0>
        *perr = OS_ERR_EVENT_TYPE;
 8010650:	e0bfff17 	ldw	r2,-4(fp)
 8010654:	00c00044 	movi	r3,1
 8010658:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 801065c:	e0bffd17 	ldw	r2,-12(fp)
 8010660:	00006f06 	br	8010820 <OSFlagDel+0x25c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010664:	0005303a 	rdctl	r2,status
 8010668:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801066c:	e0fff817 	ldw	r3,-32(fp)
 8010670:	00bfff84 	movi	r2,-2
 8010674:	1884703a 	and	r2,r3,r2
 8010678:	1001703a 	wrctl	status,r2
  
  return context;
 801067c:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 8010680:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 8010684:	e0bffd17 	ldw	r2,-12(fp)
 8010688:	10800117 	ldw	r2,4(r2)
 801068c:	10000326 	beq	r2,zero,801069c <OSFlagDel+0xd8>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 8010690:	00800044 	movi	r2,1
 8010694:	e0bff405 	stb	r2,-48(fp)
 8010698:	00000106 	br	80106a0 <OSFlagDel+0xdc>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 801069c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 80106a0:	e0bffe03 	ldbu	r2,-8(fp)
 80106a4:	10000326 	beq	r2,zero,80106b4 <OSFlagDel+0xf0>
 80106a8:	10800060 	cmpeqi	r2,r2,1
 80106ac:	1000271e 	bne	r2,zero,801074c <OSFlagDel+0x188>
 80106b0:	00005006 	br	80107f4 <OSFlagDel+0x230>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 80106b4:	e0bff403 	ldbu	r2,-48(fp)
 80106b8:	10001a1e 	bne	r2,zero,8010724 <OSFlagDel+0x160>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 80106bc:	e0bffd17 	ldw	r2,-12(fp)
 80106c0:	00c00fc4 	movi	r3,63
 80106c4:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 80106c8:	e0bffd17 	ldw	r2,-12(fp)
 80106cc:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80106d0:	e0bffd17 	ldw	r2,-12(fp)
 80106d4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 80106d8:	008200f4 	movhi	r2,2051
 80106dc:	10bb4a04 	addi	r2,r2,-4824
 80106e0:	10c00017 	ldw	r3,0(r2)
 80106e4:	e0bffd17 	ldw	r2,-12(fp)
 80106e8:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 80106ec:	e0bffd17 	ldw	r2,-12(fp)
 80106f0:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 80106f4:	008200f4 	movhi	r2,2051
 80106f8:	10bb4a04 	addi	r2,r2,-4824
 80106fc:	e0fffd17 	ldw	r3,-12(fp)
 8010700:	10c00015 	stw	r3,0(r2)
 8010704:	e0bff717 	ldw	r2,-36(fp)
 8010708:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801070c:	e0bff917 	ldw	r2,-28(fp)
 8010710:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 8010714:	e0bfff17 	ldw	r2,-4(fp)
 8010718:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 801071c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 8010720:	00003e06 	br	801081c <OSFlagDel+0x258>
 8010724:	e0bff717 	ldw	r2,-36(fp)
 8010728:	e0bffa15 	stw	r2,-24(fp)
 801072c:	e0bffa17 	ldw	r2,-24(fp)
 8010730:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 8010734:	e0bfff17 	ldw	r2,-4(fp)
 8010738:	00c01244 	movi	r3,73
 801073c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 8010740:	e0bffd17 	ldw	r2,-12(fp)
 8010744:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 8010748:	00003406 	br	801081c <OSFlagDel+0x258>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 801074c:	e0bffd17 	ldw	r2,-12(fp)
 8010750:	10800117 	ldw	r2,4(r2)
 8010754:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 8010758:	00000606 	br	8010774 <OSFlagDel+0x1b0>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 801075c:	e13ff517 	ldw	r4,-44(fp)
 8010760:	000b883a 	mov	r5,zero
 8010764:	80118000 	call	8011800 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 8010768:	e0bff517 	ldw	r2,-44(fp)
 801076c:	10800017 	ldw	r2,0(r2)
 8010770:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 8010774:	e0bff517 	ldw	r2,-44(fp)
 8010778:	103ff81e 	bne	r2,zero,801075c <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 801077c:	e0bffd17 	ldw	r2,-12(fp)
 8010780:	00c00fc4 	movi	r3,63
 8010784:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 8010788:	e0bffd17 	ldw	r2,-12(fp)
 801078c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 8010790:	e0bffd17 	ldw	r2,-12(fp)
 8010794:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 8010798:	008200f4 	movhi	r2,2051
 801079c:	10bb4a04 	addi	r2,r2,-4824
 80107a0:	10c00017 	ldw	r3,0(r2)
 80107a4:	e0bffd17 	ldw	r2,-12(fp)
 80107a8:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 80107ac:	e0bffd17 	ldw	r2,-12(fp)
 80107b0:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 80107b4:	008200f4 	movhi	r2,2051
 80107b8:	10bb4a04 	addi	r2,r2,-4824
 80107bc:	e0fffd17 	ldw	r3,-12(fp)
 80107c0:	10c00015 	stw	r3,0(r2)
 80107c4:	e0bff717 	ldw	r2,-36(fp)
 80107c8:	e0bffb15 	stw	r2,-20(fp)
 80107cc:	e0bffb17 	ldw	r2,-20(fp)
 80107d0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 80107d4:	e0bff403 	ldbu	r2,-48(fp)
 80107d8:	10800058 	cmpnei	r2,r2,1
 80107dc:	1000011e 	bne	r2,zero,80107e4 <OSFlagDel+0x220>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 80107e0:	800f9400 	call	800f940 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 80107e4:	e0bfff17 	ldw	r2,-4(fp)
 80107e8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 80107ec:	e03ff615 	stw	zero,-40(fp)
             break;
 80107f0:	00000a06 	br	801081c <OSFlagDel+0x258>
 80107f4:	e0bff717 	ldw	r2,-36(fp)
 80107f8:	e0bffc15 	stw	r2,-16(fp)
 80107fc:	e0bffc17 	ldw	r2,-16(fp)
 8010800:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 8010804:	e0bfff17 	ldw	r2,-4(fp)
 8010808:	00c001c4 	movi	r3,7
 801080c:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 8010810:	e0bffd17 	ldw	r2,-12(fp)
 8010814:	e0bff615 	stw	r2,-40(fp)
             break;
 8010818:	0001883a 	nop
    }
    return (pgrp_return);
 801081c:	e0bff617 	ldw	r2,-40(fp)
}
 8010820:	e037883a 	mov	sp,fp
 8010824:	dfc00117 	ldw	ra,4(sp)
 8010828:	df000017 	ldw	fp,0(sp)
 801082c:	dec00204 	addi	sp,sp,8
 8010830:	f800283a 	ret

08010834 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 8010834:	defff604 	addi	sp,sp,-40
 8010838:	dfc00915 	stw	ra,36(sp)
 801083c:	df000815 	stw	fp,32(sp)
 8010840:	df000804 	addi	fp,sp,32
 8010844:	e13ffd15 	stw	r4,-12(fp)
 8010848:	e17ffe15 	stw	r5,-8(fp)
 801084c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8010850:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8010854:	e0bfff17 	ldw	r2,-4(fp)
 8010858:	1000021e 	bne	r2,zero,8010864 <OSFlagNameGet+0x30>
        return (0);
 801085c:	0005883a 	mov	r2,zero
 8010860:	00003b06 	br	8010950 <OSFlagNameGet+0x11c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 8010864:	e0bffd17 	ldw	r2,-12(fp)
 8010868:	1000051e 	bne	r2,zero,8010880 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 801086c:	e0bfff17 	ldw	r2,-4(fp)
 8010870:	00c01b84 	movi	r3,110
 8010874:	10c00005 	stb	r3,0(r2)
        return (0);
 8010878:	0005883a 	mov	r2,zero
 801087c:	00003406 	br	8010950 <OSFlagNameGet+0x11c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8010880:	e0bffe17 	ldw	r2,-8(fp)
 8010884:	1000051e 	bne	r2,zero,801089c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 8010888:	e0bfff17 	ldw	r2,-4(fp)
 801088c:	00c00304 	movi	r3,12
 8010890:	10c00005 	stb	r3,0(r2)
        return (0);
 8010894:	0005883a 	mov	r2,zero
 8010898:	00002d06 	br	8010950 <OSFlagNameGet+0x11c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 801089c:	008200f4 	movhi	r2,2051
 80108a0:	10bb4704 	addi	r2,r2,-4836
 80108a4:	10800003 	ldbu	r2,0(r2)
 80108a8:	10803fcc 	andi	r2,r2,255
 80108ac:	10000526 	beq	r2,zero,80108c4 <OSFlagNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
 80108b0:	e0bfff17 	ldw	r2,-4(fp)
 80108b4:	00c00444 	movi	r3,17
 80108b8:	10c00005 	stb	r3,0(r2)
        return (0);
 80108bc:	0005883a 	mov	r2,zero
 80108c0:	00002306 	br	8010950 <OSFlagNameGet+0x11c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80108c4:	0005303a 	rdctl	r2,status
 80108c8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80108cc:	e0fffa17 	ldw	r3,-24(fp)
 80108d0:	00bfff84 	movi	r2,-2
 80108d4:	1884703a 	and	r2,r3,r2
 80108d8:	1001703a 	wrctl	status,r2
  
  return context;
 80108dc:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 80108e0:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 80108e4:	e0bffd17 	ldw	r2,-12(fp)
 80108e8:	10800003 	ldbu	r2,0(r2)
 80108ec:	10803fcc 	andi	r2,r2,255
 80108f0:	10800160 	cmpeqi	r2,r2,5
 80108f4:	1000091e 	bne	r2,zero,801091c <OSFlagNameGet+0xe8>
 80108f8:	e0bff817 	ldw	r2,-32(fp)
 80108fc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010900:	e0bffb17 	ldw	r2,-20(fp)
 8010904:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 8010908:	e0bfff17 	ldw	r2,-4(fp)
 801090c:	00c00044 	movi	r3,1
 8010910:	10c00005 	stb	r3,0(r2)
        return (0);
 8010914:	0005883a 	mov	r2,zero
 8010918:	00000d06 	br	8010950 <OSFlagNameGet+0x11c>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 801091c:	e0bffd17 	ldw	r2,-12(fp)
 8010920:	10800284 	addi	r2,r2,10
 8010924:	e13ffe17 	ldw	r4,-8(fp)
 8010928:	100b883a 	mov	r5,r2
 801092c:	800fa7c0 	call	800fa7c <OS_StrCopy>
 8010930:	e0bff905 	stb	r2,-28(fp)
 8010934:	e0bff817 	ldw	r2,-32(fp)
 8010938:	e0bffc15 	stw	r2,-16(fp)
 801093c:	e0bffc17 	ldw	r2,-16(fp)
 8010940:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8010944:	e0bfff17 	ldw	r2,-4(fp)
 8010948:	10000005 	stb	zero,0(r2)
    return (len);
 801094c:	e0bff903 	ldbu	r2,-28(fp)
}
 8010950:	e037883a 	mov	sp,fp
 8010954:	dfc00117 	ldw	ra,4(sp)
 8010958:	df000017 	ldw	fp,0(sp)
 801095c:	dec00204 	addi	sp,sp,8
 8010960:	f800283a 	ret

08010964 <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 8010964:	defff504 	addi	sp,sp,-44
 8010968:	dfc00a15 	stw	ra,40(sp)
 801096c:	df000915 	stw	fp,36(sp)
 8010970:	df000904 	addi	fp,sp,36
 8010974:	e13ffd15 	stw	r4,-12(fp)
 8010978:	e17ffe15 	stw	r5,-8(fp)
 801097c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8010980:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8010984:	e0bfff17 	ldw	r2,-4(fp)
 8010988:	1000011e 	bne	r2,zero,8010990 <OSFlagNameSet+0x2c>
        return;
 801098c:	00004406 	br	8010aa0 <OSFlagNameSet+0x13c>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 8010990:	e0bffd17 	ldw	r2,-12(fp)
 8010994:	1000041e 	bne	r2,zero,80109a8 <OSFlagNameSet+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8010998:	e0bfff17 	ldw	r2,-4(fp)
 801099c:	00c01b84 	movi	r3,110
 80109a0:	10c00005 	stb	r3,0(r2)
        return;
 80109a4:	00003e06 	br	8010aa0 <OSFlagNameSet+0x13c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 80109a8:	e0bffe17 	ldw	r2,-8(fp)
 80109ac:	1000041e 	bne	r2,zero,80109c0 <OSFlagNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
 80109b0:	e0bfff17 	ldw	r2,-4(fp)
 80109b4:	00c00304 	movi	r3,12
 80109b8:	10c00005 	stb	r3,0(r2)
        return;
 80109bc:	00003806 	br	8010aa0 <OSFlagNameSet+0x13c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 80109c0:	008200f4 	movhi	r2,2051
 80109c4:	10bb4704 	addi	r2,r2,-4836
 80109c8:	10800003 	ldbu	r2,0(r2)
 80109cc:	10803fcc 	andi	r2,r2,255
 80109d0:	10000426 	beq	r2,zero,80109e4 <OSFlagNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
 80109d4:	e0bfff17 	ldw	r2,-4(fp)
 80109d8:	00c00484 	movi	r3,18
 80109dc:	10c00005 	stb	r3,0(r2)
        return;
 80109e0:	00002f06 	br	8010aa0 <OSFlagNameSet+0x13c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80109e4:	0005303a 	rdctl	r2,status
 80109e8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80109ec:	e0fff917 	ldw	r3,-28(fp)
 80109f0:	00bfff84 	movi	r2,-2
 80109f4:	1884703a 	and	r2,r3,r2
 80109f8:	1001703a 	wrctl	status,r2
  
  return context;
 80109fc:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 8010a00:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 8010a04:	e0bffd17 	ldw	r2,-12(fp)
 8010a08:	10800003 	ldbu	r2,0(r2)
 8010a0c:	10803fcc 	andi	r2,r2,255
 8010a10:	10800160 	cmpeqi	r2,r2,5
 8010a14:	1000081e 	bne	r2,zero,8010a38 <OSFlagNameSet+0xd4>
 8010a18:	e0bff717 	ldw	r2,-36(fp)
 8010a1c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010a20:	e0bffa17 	ldw	r2,-24(fp)
 8010a24:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 8010a28:	e0bfff17 	ldw	r2,-4(fp)
 8010a2c:	00c00044 	movi	r3,1
 8010a30:	10c00005 	stb	r3,0(r2)
        return;
 8010a34:	00001a06 	br	8010aa0 <OSFlagNameSet+0x13c>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 8010a38:	e13ffe17 	ldw	r4,-8(fp)
 8010a3c:	800faf00 	call	800faf0 <OS_StrLen>
 8010a40:	e0bff805 	stb	r2,-32(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 8010a44:	e0bff803 	ldbu	r2,-32(fp)
 8010a48:	10800830 	cmpltui	r2,r2,32
 8010a4c:	1000081e 	bne	r2,zero,8010a70 <OSFlagNameSet+0x10c>
 8010a50:	e0bff717 	ldw	r2,-36(fp)
 8010a54:	e0bffb15 	stw	r2,-20(fp)
 8010a58:	e0bffb17 	ldw	r2,-20(fp)
 8010a5c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 8010a60:	e0bfff17 	ldw	r2,-4(fp)
 8010a64:	00c01cc4 	movi	r3,115
 8010a68:	10c00005 	stb	r3,0(r2)
        return;
 8010a6c:	00000c06 	br	8010aa0 <OSFlagNameSet+0x13c>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 8010a70:	e0bffd17 	ldw	r2,-12(fp)
 8010a74:	10800284 	addi	r2,r2,10
 8010a78:	1009883a 	mov	r4,r2
 8010a7c:	e17ffe17 	ldw	r5,-8(fp)
 8010a80:	800fa7c0 	call	800fa7c <OS_StrCopy>
 8010a84:	e0bff717 	ldw	r2,-36(fp)
 8010a88:	e0bffc15 	stw	r2,-16(fp)
 8010a8c:	e0bffc17 	ldw	r2,-16(fp)
 8010a90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8010a94:	e0bfff17 	ldw	r2,-4(fp)
 8010a98:	10000005 	stb	zero,0(r2)
    return;
 8010a9c:	0001883a 	nop
}
 8010aa0:	e037883a 	mov	sp,fp
 8010aa4:	dfc00117 	ldw	ra,4(sp)
 8010aa8:	df000017 	ldw	fp,0(sp)
 8010aac:	dec00204 	addi	sp,sp,8
 8010ab0:	f800283a 	ret

08010ab4 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 8010ab4:	deffe204 	addi	sp,sp,-120
 8010ab8:	dfc01d15 	stw	ra,116(sp)
 8010abc:	df001c15 	stw	fp,112(sp)
 8010ac0:	df001c04 	addi	fp,sp,112
 8010ac4:	e13ffc15 	stw	r4,-16(fp)
 8010ac8:	2809883a 	mov	r4,r5
 8010acc:	3007883a 	mov	r3,r6
 8010ad0:	3805883a 	mov	r2,r7
 8010ad4:	e13ffd0d 	sth	r4,-12(fp)
 8010ad8:	e0fffe05 	stb	r3,-8(fp)
 8010adc:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 8010ae0:	e03fe615 	stw	zero,-104(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8010ae4:	e0800217 	ldw	r2,8(fp)
 8010ae8:	1000021e 	bne	r2,zero,8010af4 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 8010aec:	0005883a 	mov	r2,zero
 8010af0:	00016706 	br	8011090 <OSFlagPend+0x5dc>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 8010af4:	e0bffc17 	ldw	r2,-16(fp)
 8010af8:	1000051e 	bne	r2,zero,8010b10 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8010afc:	e0800217 	ldw	r2,8(fp)
 8010b00:	00c01b84 	movi	r3,110
 8010b04:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8010b08:	0005883a 	mov	r2,zero
 8010b0c:	00016006 	br	8011090 <OSFlagPend+0x5dc>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 8010b10:	008200f4 	movhi	r2,2051
 8010b14:	10bb4704 	addi	r2,r2,-4836
 8010b18:	10800003 	ldbu	r2,0(r2)
 8010b1c:	10803fcc 	andi	r2,r2,255
 8010b20:	10000526 	beq	r2,zero,8010b38 <OSFlagPend+0x84>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 8010b24:	e0800217 	ldw	r2,8(fp)
 8010b28:	00c00084 	movi	r3,2
 8010b2c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8010b30:	0005883a 	mov	r2,zero
 8010b34:	00015606 	br	8011090 <OSFlagPend+0x5dc>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 8010b38:	008200f4 	movhi	r2,2051
 8010b3c:	10bb3904 	addi	r2,r2,-4892
 8010b40:	10800003 	ldbu	r2,0(r2)
 8010b44:	10803fcc 	andi	r2,r2,255
 8010b48:	10000526 	beq	r2,zero,8010b60 <OSFlagPend+0xac>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 8010b4c:	e0800217 	ldw	r2,8(fp)
 8010b50:	00c00344 	movi	r3,13
 8010b54:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8010b58:	0005883a 	mov	r2,zero
 8010b5c:	00014c06 	br	8011090 <OSFlagPend+0x5dc>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 8010b60:	e0bffc17 	ldw	r2,-16(fp)
 8010b64:	10800003 	ldbu	r2,0(r2)
 8010b68:	10803fcc 	andi	r2,r2,255
 8010b6c:	10800160 	cmpeqi	r2,r2,5
 8010b70:	1000051e 	bne	r2,zero,8010b88 <OSFlagPend+0xd4>
        *perr = OS_ERR_EVENT_TYPE;
 8010b74:	e0800217 	ldw	r2,8(fp)
 8010b78:	00c00044 	movi	r3,1
 8010b7c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8010b80:	0005883a 	mov	r2,zero
 8010b84:	00014206 	br	8011090 <OSFlagPend+0x5dc>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 8010b88:	e0fffe03 	ldbu	r3,-8(fp)
 8010b8c:	00bfe004 	movi	r2,-128
 8010b90:	1884703a 	and	r2,r3,r2
 8010b94:	e0bfe705 	stb	r2,-100(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 8010b98:	e0bfe703 	ldbu	r2,-100(fp)
 8010b9c:	10000626 	beq	r2,zero,8010bb8 <OSFlagPend+0x104>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 8010ba0:	e0bffe03 	ldbu	r2,-8(fp)
 8010ba4:	10801fcc 	andi	r2,r2,127
 8010ba8:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 8010bac:	00800044 	movi	r2,1
 8010bb0:	e0bfe505 	stb	r2,-108(fp)
 8010bb4:	00000106 	br	8010bbc <OSFlagPend+0x108>
    } else {
        consume    = OS_FALSE;
 8010bb8:	e03fe505 	stb	zero,-108(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010bbc:	0005303a 	rdctl	r2,status
 8010bc0:	e0bfe915 	stw	r2,-92(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010bc4:	e0ffe917 	ldw	r3,-92(fp)
 8010bc8:	00bfff84 	movi	r2,-2
 8010bcc:	1884703a 	and	r2,r3,r2
 8010bd0:	1001703a 	wrctl	status,r2
  
  return context;
 8010bd4:	e0bfe917 	ldw	r2,-92(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 8010bd8:	e0bfe615 	stw	r2,-104(fp)
    switch (wait_type) {
 8010bdc:	e0bffe03 	ldbu	r2,-8(fp)
 8010be0:	10c00060 	cmpeqi	r3,r2,1
 8010be4:	1800921e 	bne	r3,zero,8010e30 <OSFlagPend+0x37c>
 8010be8:	10c00088 	cmpgei	r3,r2,2
 8010bec:	1800021e 	bne	r3,zero,8010bf8 <OSFlagPend+0x144>
 8010bf0:	10006126 	beq	r2,zero,8010d78 <OSFlagPend+0x2c4>
 8010bf4:	0000bb06 	br	8010ee4 <OSFlagPend+0x430>
 8010bf8:	10c000a0 	cmpeqi	r3,r2,2
 8010bfc:	1800031e 	bne	r3,zero,8010c0c <OSFlagPend+0x158>
 8010c00:	108000e0 	cmpeqi	r2,r2,3
 8010c04:	10002f1e 	bne	r2,zero,8010cc4 <OSFlagPend+0x210>
 8010c08:	0000b606 	br	8010ee4 <OSFlagPend+0x430>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 8010c0c:	e0bffc17 	ldw	r2,-16(fp)
 8010c10:	10c0020b 	ldhu	r3,8(r2)
 8010c14:	e0bffd0b 	ldhu	r2,-12(fp)
 8010c18:	1884703a 	and	r2,r3,r2
 8010c1c:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8010c20:	e0ffe78b 	ldhu	r3,-98(fp)
 8010c24:	e0bffd0b 	ldhu	r2,-12(fp)
 8010c28:	1880191e 	bne	r3,r2,8010c90 <OSFlagPend+0x1dc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8010c2c:	e0bfe503 	ldbu	r2,-108(fp)
 8010c30:	10800058 	cmpnei	r2,r2,1
 8010c34:	1000091e 	bne	r2,zero,8010c5c <OSFlagPend+0x1a8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 8010c38:	e0bffc17 	ldw	r2,-16(fp)
 8010c3c:	1080020b 	ldhu	r2,8(r2)
 8010c40:	1007883a 	mov	r3,r2
 8010c44:	e0bfe78b 	ldhu	r2,-98(fp)
 8010c48:	0084303a 	nor	r2,zero,r2
 8010c4c:	1884703a 	and	r2,r3,r2
 8010c50:	1007883a 	mov	r3,r2
 8010c54:	e0bffc17 	ldw	r2,-16(fp)
 8010c58:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8010c5c:	008200f4 	movhi	r2,2051
 8010c60:	10bb4804 	addi	r2,r2,-4832
 8010c64:	10800017 	ldw	r2,0(r2)
 8010c68:	e0ffe78b 	ldhu	r3,-98(fp)
 8010c6c:	10c00b0d 	sth	r3,44(r2)
 8010c70:	e0bfe617 	ldw	r2,-104(fp)
 8010c74:	e0bfea15 	stw	r2,-88(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010c78:	e0bfea17 	ldw	r2,-88(fp)
 8010c7c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8010c80:	e0800217 	ldw	r2,8(fp)
 8010c84:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8010c88:	e0bfe78b 	ldhu	r2,-98(fp)
 8010c8c:	00010006 	br	8011090 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8010c90:	e1bffd0b 	ldhu	r6,-12(fp)
 8010c94:	e0fffe03 	ldbu	r3,-8(fp)
 8010c98:	e0bfff0b 	ldhu	r2,-4(fp)
 8010c9c:	e17ff704 	addi	r5,fp,-36
 8010ca0:	d8800015 	stw	r2,0(sp)
 8010ca4:	e13ffc17 	ldw	r4,-16(fp)
 8010ca8:	180f883a 	mov	r7,r3
 8010cac:	80115580 	call	8011558 <OS_FlagBlock>
 8010cb0:	e0bfe617 	ldw	r2,-104(fp)
 8010cb4:	e0bfeb15 	stw	r2,-84(fp)
 8010cb8:	e0bfeb17 	ldw	r2,-84(fp)
 8010cbc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 8010cc0:	00009206 	br	8010f0c <OSFlagPend+0x458>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 8010cc4:	e0bffc17 	ldw	r2,-16(fp)
 8010cc8:	10c0020b 	ldhu	r3,8(r2)
 8010ccc:	e0bffd0b 	ldhu	r2,-12(fp)
 8010cd0:	1884703a 	and	r2,r3,r2
 8010cd4:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 8010cd8:	e0bfe78b 	ldhu	r2,-98(fp)
 8010cdc:	10001926 	beq	r2,zero,8010d44 <OSFlagPend+0x290>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8010ce0:	e0bfe503 	ldbu	r2,-108(fp)
 8010ce4:	10800058 	cmpnei	r2,r2,1
 8010ce8:	1000091e 	bne	r2,zero,8010d10 <OSFlagPend+0x25c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 8010cec:	e0bffc17 	ldw	r2,-16(fp)
 8010cf0:	1080020b 	ldhu	r2,8(r2)
 8010cf4:	1007883a 	mov	r3,r2
 8010cf8:	e0bfe78b 	ldhu	r2,-98(fp)
 8010cfc:	0084303a 	nor	r2,zero,r2
 8010d00:	1884703a 	and	r2,r3,r2
 8010d04:	1007883a 	mov	r3,r2
 8010d08:	e0bffc17 	ldw	r2,-16(fp)
 8010d0c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8010d10:	008200f4 	movhi	r2,2051
 8010d14:	10bb4804 	addi	r2,r2,-4832
 8010d18:	10800017 	ldw	r2,0(r2)
 8010d1c:	e0ffe78b 	ldhu	r3,-98(fp)
 8010d20:	10c00b0d 	sth	r3,44(r2)
 8010d24:	e0bfe617 	ldw	r2,-104(fp)
 8010d28:	e0bfec15 	stw	r2,-80(fp)
 8010d2c:	e0bfec17 	ldw	r2,-80(fp)
 8010d30:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8010d34:	e0800217 	ldw	r2,8(fp)
 8010d38:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8010d3c:	e0bfe78b 	ldhu	r2,-98(fp)
 8010d40:	0000d306 	br	8011090 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8010d44:	e1bffd0b 	ldhu	r6,-12(fp)
 8010d48:	e0fffe03 	ldbu	r3,-8(fp)
 8010d4c:	e0bfff0b 	ldhu	r2,-4(fp)
 8010d50:	e17ff704 	addi	r5,fp,-36
 8010d54:	d8800015 	stw	r2,0(sp)
 8010d58:	e13ffc17 	ldw	r4,-16(fp)
 8010d5c:	180f883a 	mov	r7,r3
 8010d60:	80115580 	call	8011558 <OS_FlagBlock>
 8010d64:	e0bfe617 	ldw	r2,-104(fp)
 8010d68:	e0bfed15 	stw	r2,-76(fp)
 8010d6c:	e0bfed17 	ldw	r2,-76(fp)
 8010d70:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 8010d74:	00006506 	br	8010f0c <OSFlagPend+0x458>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 8010d78:	e0bffc17 	ldw	r2,-16(fp)
 8010d7c:	1080020b 	ldhu	r2,8(r2)
 8010d80:	0084303a 	nor	r2,zero,r2
 8010d84:	1007883a 	mov	r3,r2
 8010d88:	e0bffd0b 	ldhu	r2,-12(fp)
 8010d8c:	1884703a 	and	r2,r3,r2
 8010d90:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 8010d94:	e0ffe78b 	ldhu	r3,-98(fp)
 8010d98:	e0bffd0b 	ldhu	r2,-12(fp)
 8010d9c:	1880171e 	bne	r3,r2,8010dfc <OSFlagPend+0x348>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8010da0:	e0bfe503 	ldbu	r2,-108(fp)
 8010da4:	10800058 	cmpnei	r2,r2,1
 8010da8:	1000071e 	bne	r2,zero,8010dc8 <OSFlagPend+0x314>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 8010dac:	e0bffc17 	ldw	r2,-16(fp)
 8010db0:	10c0020b 	ldhu	r3,8(r2)
 8010db4:	e0bfe78b 	ldhu	r2,-98(fp)
 8010db8:	1884b03a 	or	r2,r3,r2
 8010dbc:	1007883a 	mov	r3,r2
 8010dc0:	e0bffc17 	ldw	r2,-16(fp)
 8010dc4:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8010dc8:	008200f4 	movhi	r2,2051
 8010dcc:	10bb4804 	addi	r2,r2,-4832
 8010dd0:	10800017 	ldw	r2,0(r2)
 8010dd4:	e0ffe78b 	ldhu	r3,-98(fp)
 8010dd8:	10c00b0d 	sth	r3,44(r2)
 8010ddc:	e0bfe617 	ldw	r2,-104(fp)
 8010de0:	e0bfee15 	stw	r2,-72(fp)
 8010de4:	e0bfee17 	ldw	r2,-72(fp)
 8010de8:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8010dec:	e0800217 	ldw	r2,8(fp)
 8010df0:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8010df4:	e0bfe78b 	ldhu	r2,-98(fp)
 8010df8:	0000a506 	br	8011090 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8010dfc:	e1bffd0b 	ldhu	r6,-12(fp)
 8010e00:	e0fffe03 	ldbu	r3,-8(fp)
 8010e04:	e0bfff0b 	ldhu	r2,-4(fp)
 8010e08:	e17ff704 	addi	r5,fp,-36
 8010e0c:	d8800015 	stw	r2,0(sp)
 8010e10:	e13ffc17 	ldw	r4,-16(fp)
 8010e14:	180f883a 	mov	r7,r3
 8010e18:	80115580 	call	8011558 <OS_FlagBlock>
 8010e1c:	e0bfe617 	ldw	r2,-104(fp)
 8010e20:	e0bfef15 	stw	r2,-68(fp)
 8010e24:	e0bfef17 	ldw	r2,-68(fp)
 8010e28:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 8010e2c:	00003706 	br	8010f0c <OSFlagPend+0x458>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 8010e30:	e0bffc17 	ldw	r2,-16(fp)
 8010e34:	1080020b 	ldhu	r2,8(r2)
 8010e38:	0084303a 	nor	r2,zero,r2
 8010e3c:	1007883a 	mov	r3,r2
 8010e40:	e0bffd0b 	ldhu	r2,-12(fp)
 8010e44:	1884703a 	and	r2,r3,r2
 8010e48:	e0bfe78d 	sth	r2,-98(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 8010e4c:	e0bfe78b 	ldhu	r2,-98(fp)
 8010e50:	10001726 	beq	r2,zero,8010eb0 <OSFlagPend+0x3fc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 8010e54:	e0bfe503 	ldbu	r2,-108(fp)
 8010e58:	10800058 	cmpnei	r2,r2,1
 8010e5c:	1000071e 	bne	r2,zero,8010e7c <OSFlagPend+0x3c8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 8010e60:	e0bffc17 	ldw	r2,-16(fp)
 8010e64:	10c0020b 	ldhu	r3,8(r2)
 8010e68:	e0bfe78b 	ldhu	r2,-98(fp)
 8010e6c:	1884b03a 	or	r2,r3,r2
 8010e70:	1007883a 	mov	r3,r2
 8010e74:	e0bffc17 	ldw	r2,-16(fp)
 8010e78:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 8010e7c:	008200f4 	movhi	r2,2051
 8010e80:	10bb4804 	addi	r2,r2,-4832
 8010e84:	10800017 	ldw	r2,0(r2)
 8010e88:	e0ffe78b 	ldhu	r3,-98(fp)
 8010e8c:	10c00b0d 	sth	r3,44(r2)
 8010e90:	e0bfe617 	ldw	r2,-104(fp)
 8010e94:	e0bff015 	stw	r2,-64(fp)
 8010e98:	e0bff017 	ldw	r2,-64(fp)
 8010e9c:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 8010ea0:	e0800217 	ldw	r2,8(fp)
 8010ea4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 8010ea8:	e0bfe78b 	ldhu	r2,-98(fp)
 8010eac:	00007806 	br	8011090 <OSFlagPend+0x5dc>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 8010eb0:	e1bffd0b 	ldhu	r6,-12(fp)
 8010eb4:	e0fffe03 	ldbu	r3,-8(fp)
 8010eb8:	e0bfff0b 	ldhu	r2,-4(fp)
 8010ebc:	e17ff704 	addi	r5,fp,-36
 8010ec0:	d8800015 	stw	r2,0(sp)
 8010ec4:	e13ffc17 	ldw	r4,-16(fp)
 8010ec8:	180f883a 	mov	r7,r3
 8010ecc:	80115580 	call	8011558 <OS_FlagBlock>
 8010ed0:	e0bfe617 	ldw	r2,-104(fp)
 8010ed4:	e0bff115 	stw	r2,-60(fp)
 8010ed8:	e0bff117 	ldw	r2,-60(fp)
 8010edc:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 8010ee0:	00000a06 	br	8010f0c <OSFlagPend+0x458>
 8010ee4:	e0bfe617 	ldw	r2,-104(fp)
 8010ee8:	e0bff215 	stw	r2,-56(fp)
 8010eec:	e0bff217 	ldw	r2,-56(fp)
 8010ef0:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 8010ef4:	e03fe78d 	sth	zero,-98(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 8010ef8:	e0800217 	ldw	r2,8(fp)
 8010efc:	00c01bc4 	movi	r3,111
 8010f00:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 8010f04:	e0bfe78b 	ldhu	r2,-98(fp)
 8010f08:	00006106 	br	8011090 <OSFlagPend+0x5dc>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 8010f0c:	800f9400 	call	800f940 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8010f10:	0005303a 	rdctl	r2,status
 8010f14:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010f18:	e0fff317 	ldw	r3,-52(fp)
 8010f1c:	00bfff84 	movi	r2,-2
 8010f20:	1884703a 	and	r2,r3,r2
 8010f24:	1001703a 	wrctl	status,r2
  
  return context;
 8010f28:	e0bff317 	ldw	r2,-52(fp)
    OS_ENTER_CRITICAL();
 8010f2c:	e0bfe615 	stw	r2,-104(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 8010f30:	008200f4 	movhi	r2,2051
 8010f34:	10bb4804 	addi	r2,r2,-4832
 8010f38:	10800017 	ldw	r2,0(r2)
 8010f3c:	10800c43 	ldbu	r2,49(r2)
 8010f40:	10803fcc 	andi	r2,r2,255
 8010f44:	10002226 	beq	r2,zero,8010fd0 <OSFlagPend+0x51c>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 8010f48:	008200f4 	movhi	r2,2051
 8010f4c:	10bb4804 	addi	r2,r2,-4832
 8010f50:	10800017 	ldw	r2,0(r2)
 8010f54:	10800c43 	ldbu	r2,49(r2)
 8010f58:	e0bfe805 	stb	r2,-96(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8010f5c:	008200f4 	movhi	r2,2051
 8010f60:	10bb4804 	addi	r2,r2,-4832
 8010f64:	10800017 	ldw	r2,0(r2)
 8010f68:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 8010f6c:	e0bff704 	addi	r2,fp,-36
 8010f70:	1009883a 	mov	r4,r2
 8010f74:	80119100 	call	8011910 <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 8010f78:	008200f4 	movhi	r2,2051
 8010f7c:	10bb4804 	addi	r2,r2,-4832
 8010f80:	10800017 	ldw	r2,0(r2)
 8010f84:	10000c05 	stb	zero,48(r2)
 8010f88:	e0bfe617 	ldw	r2,-104(fp)
 8010f8c:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8010f90:	e0bff417 	ldw	r2,-48(fp)
 8010f94:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 8010f98:	e03fe78d 	sth	zero,-98(fp)
        switch (pend_stat) {
 8010f9c:	e0bfe803 	ldbu	r2,-96(fp)
 8010fa0:	108000a0 	cmpeqi	r2,r2,2
 8010fa4:	10000426 	beq	r2,zero,8010fb8 <OSFlagPend+0x504>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 8010fa8:	e0800217 	ldw	r2,8(fp)
 8010fac:	00c00384 	movi	r3,14
 8010fb0:	10c00005 	stb	r3,0(r2)
                 break;
 8010fb4:	00000406 	br	8010fc8 <OSFlagPend+0x514>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 8010fb8:	e0800217 	ldw	r2,8(fp)
 8010fbc:	00c00284 	movi	r3,10
 8010fc0:	10c00005 	stb	r3,0(r2)
                 break;
 8010fc4:	0001883a 	nop
        }
        return (flags_rdy);
 8010fc8:	e0bfe78b 	ldhu	r2,-98(fp)
 8010fcc:	00003006 	br	8011090 <OSFlagPend+0x5dc>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 8010fd0:	008200f4 	movhi	r2,2051
 8010fd4:	10bb4804 	addi	r2,r2,-4832
 8010fd8:	10800017 	ldw	r2,0(r2)
 8010fdc:	10800b0b 	ldhu	r2,44(r2)
 8010fe0:	e0bfe78d 	sth	r2,-98(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 8010fe4:	e0bfe503 	ldbu	r2,-108(fp)
 8010fe8:	10800058 	cmpnei	r2,r2,1
 8010fec:	1000211e 	bne	r2,zero,8011074 <OSFlagPend+0x5c0>
        switch (wait_type) {
 8010ff0:	e0bffe03 	ldbu	r2,-8(fp)
 8010ff4:	10001616 	blt	r2,zero,8011050 <OSFlagPend+0x59c>
 8010ff8:	10c00090 	cmplti	r3,r2,2
 8010ffc:	18000c1e 	bne	r3,zero,8011030 <OSFlagPend+0x57c>
 8011000:	10800108 	cmpgei	r2,r2,4
 8011004:	1000121e 	bne	r2,zero,8011050 <OSFlagPend+0x59c>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 8011008:	e0bffc17 	ldw	r2,-16(fp)
 801100c:	1080020b 	ldhu	r2,8(r2)
 8011010:	1007883a 	mov	r3,r2
 8011014:	e0bfe78b 	ldhu	r2,-98(fp)
 8011018:	0084303a 	nor	r2,zero,r2
 801101c:	1884703a 	and	r2,r3,r2
 8011020:	1007883a 	mov	r3,r2
 8011024:	e0bffc17 	ldw	r2,-16(fp)
 8011028:	10c0020d 	sth	r3,8(r2)
                 break;
 801102c:	00001106 	br	8011074 <OSFlagPend+0x5c0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 8011030:	e0bffc17 	ldw	r2,-16(fp)
 8011034:	10c0020b 	ldhu	r3,8(r2)
 8011038:	e0bfe78b 	ldhu	r2,-98(fp)
 801103c:	1884b03a 	or	r2,r3,r2
 8011040:	1007883a 	mov	r3,r2
 8011044:	e0bffc17 	ldw	r2,-16(fp)
 8011048:	10c0020d 	sth	r3,8(r2)
                 break;
 801104c:	00000906 	br	8011074 <OSFlagPend+0x5c0>
 8011050:	e0bfe617 	ldw	r2,-104(fp)
 8011054:	e0bff515 	stw	r2,-44(fp)
 8011058:	e0bff517 	ldw	r2,-44(fp)
 801105c:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 8011060:	e0800217 	ldw	r2,8(fp)
 8011064:	00c01bc4 	movi	r3,111
 8011068:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 801106c:	0005883a 	mov	r2,zero
 8011070:	00000706 	br	8011090 <OSFlagPend+0x5dc>
 8011074:	e0bfe617 	ldw	r2,-104(fp)
 8011078:	e0bff615 	stw	r2,-40(fp)
 801107c:	e0bff617 	ldw	r2,-40(fp)
 8011080:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 8011084:	e0800217 	ldw	r2,8(fp)
 8011088:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 801108c:	e0bfe78b 	ldhu	r2,-98(fp)
}
 8011090:	e037883a 	mov	sp,fp
 8011094:	dfc00117 	ldw	ra,4(sp)
 8011098:	df000017 	ldw	fp,0(sp)
 801109c:	dec00204 	addi	sp,sp,8
 80110a0:	f800283a 	ret

080110a4 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 80110a4:	defffb04 	addi	sp,sp,-20
 80110a8:	df000415 	stw	fp,16(sp)
 80110ac:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 80110b0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80110b4:	0005303a 	rdctl	r2,status
 80110b8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80110bc:	e0fffe17 	ldw	r3,-8(fp)
 80110c0:	00bfff84 	movi	r2,-2
 80110c4:	1884703a 	and	r2,r3,r2
 80110c8:	1001703a 	wrctl	status,r2
  
  return context;
 80110cc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 80110d0:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 80110d4:	008200f4 	movhi	r2,2051
 80110d8:	10bb4804 	addi	r2,r2,-4832
 80110dc:	10800017 	ldw	r2,0(r2)
 80110e0:	10800b0b 	ldhu	r2,44(r2)
 80110e4:	e0bffd0d 	sth	r2,-12(fp)
 80110e8:	e0bffc17 	ldw	r2,-16(fp)
 80110ec:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80110f0:	e0bfff17 	ldw	r2,-4(fp)
 80110f4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 80110f8:	e0bffd0b 	ldhu	r2,-12(fp)
}
 80110fc:	e037883a 	mov	sp,fp
 8011100:	df000017 	ldw	fp,0(sp)
 8011104:	dec00104 	addi	sp,sp,4
 8011108:	f800283a 	ret

0801110c <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 801110c:	deffef04 	addi	sp,sp,-68
 8011110:	dfc01015 	stw	ra,64(sp)
 8011114:	df000f15 	stw	fp,60(sp)
 8011118:	df000f04 	addi	fp,sp,60
 801111c:	e13ffc15 	stw	r4,-16(fp)
 8011120:	2807883a 	mov	r3,r5
 8011124:	3005883a 	mov	r2,r6
 8011128:	e1ffff15 	stw	r7,-4(fp)
 801112c:	e0fffd0d 	sth	r3,-12(fp)
 8011130:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 8011134:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 8011138:	e0bfff17 	ldw	r2,-4(fp)
 801113c:	1000021e 	bne	r2,zero,8011148 <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 8011140:	0005883a 	mov	r2,zero
 8011144:	0000ce06 	br	8011480 <OSFlagPost+0x374>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 8011148:	e0bffc17 	ldw	r2,-16(fp)
 801114c:	1000051e 	bne	r2,zero,8011164 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 8011150:	e0bfff17 	ldw	r2,-4(fp)
 8011154:	00c01b84 	movi	r3,110
 8011158:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 801115c:	0005883a 	mov	r2,zero
 8011160:	0000c706 	br	8011480 <OSFlagPost+0x374>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 8011164:	e0bffc17 	ldw	r2,-16(fp)
 8011168:	10800003 	ldbu	r2,0(r2)
 801116c:	10803fcc 	andi	r2,r2,255
 8011170:	10800160 	cmpeqi	r2,r2,5
 8011174:	1000051e 	bne	r2,zero,801118c <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 8011178:	e0bfff17 	ldw	r2,-4(fp)
 801117c:	00c00044 	movi	r3,1
 8011180:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 8011184:	0005883a 	mov	r2,zero
 8011188:	0000bd06 	br	8011480 <OSFlagPost+0x374>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801118c:	0005303a 	rdctl	r2,status
 8011190:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011194:	e0fff617 	ldw	r3,-40(fp)
 8011198:	00bfff84 	movi	r2,-2
 801119c:	1884703a 	and	r2,r3,r2
 80111a0:	1001703a 	wrctl	status,r2
  
  return context;
 80111a4:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 80111a8:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 80111ac:	e0bffe03 	ldbu	r2,-8(fp)
 80111b0:	10000326 	beq	r2,zero,80111c0 <OSFlagPost+0xb4>
 80111b4:	10800060 	cmpeqi	r2,r2,1
 80111b8:	10000b1e 	bne	r2,zero,80111e8 <OSFlagPost+0xdc>
 80111bc:	00001206 	br	8011208 <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 80111c0:	e0bffc17 	ldw	r2,-16(fp)
 80111c4:	1080020b 	ldhu	r2,8(r2)
 80111c8:	1007883a 	mov	r3,r2
 80111cc:	e0bffd0b 	ldhu	r2,-12(fp)
 80111d0:	0084303a 	nor	r2,zero,r2
 80111d4:	1884703a 	and	r2,r3,r2
 80111d8:	1007883a 	mov	r3,r2
 80111dc:	e0bffc17 	ldw	r2,-16(fp)
 80111e0:	10c0020d 	sth	r3,8(r2)
             break;
 80111e4:	00001106 	br	801122c <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 80111e8:	e0bffc17 	ldw	r2,-16(fp)
 80111ec:	10c0020b 	ldhu	r3,8(r2)
 80111f0:	e0bffd0b 	ldhu	r2,-12(fp)
 80111f4:	1884b03a 	or	r2,r3,r2
 80111f8:	1007883a 	mov	r3,r2
 80111fc:	e0bffc17 	ldw	r2,-16(fp)
 8011200:	10c0020d 	sth	r3,8(r2)
             break;
 8011204:	00000906 	br	801122c <OSFlagPost+0x120>
 8011208:	e0bff317 	ldw	r2,-52(fp)
 801120c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011210:	e0bff717 	ldw	r2,-36(fp)
 8011214:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 8011218:	e0bfff17 	ldw	r2,-4(fp)
 801121c:	00c01c44 	movi	r3,113
 8011220:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 8011224:	0005883a 	mov	r2,zero
 8011228:	00009506 	br	8011480 <OSFlagPost+0x374>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 801122c:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 8011230:	e0bffc17 	ldw	r2,-16(fp)
 8011234:	10800117 	ldw	r2,4(r2)
 8011238:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 801123c:	00007406 	br	8011410 <OSFlagPost+0x304>
        switch (pnode->OSFlagNodeWaitType) {
 8011240:	e0bff117 	ldw	r2,-60(fp)
 8011244:	10800483 	ldbu	r2,18(r2)
 8011248:	10803fcc 	andi	r2,r2,255
 801124c:	10c00060 	cmpeqi	r3,r2,1
 8011250:	18004d1e 	bne	r3,zero,8011388 <OSFlagPost+0x27c>
 8011254:	10c00088 	cmpgei	r3,r2,2
 8011258:	1800021e 	bne	r3,zero,8011264 <OSFlagPost+0x158>
 801125c:	10003126 	beq	r2,zero,8011324 <OSFlagPost+0x218>
 8011260:	00005f06 	br	80113e0 <OSFlagPost+0x2d4>
 8011264:	10c000a0 	cmpeqi	r3,r2,2
 8011268:	1800031e 	bne	r3,zero,8011278 <OSFlagPost+0x16c>
 801126c:	108000e0 	cmpeqi	r2,r2,3
 8011270:	1000181e 	bne	r2,zero,80112d4 <OSFlagPost+0x1c8>
 8011274:	00005a06 	br	80113e0 <OSFlagPost+0x2d4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 8011278:	e0bffc17 	ldw	r2,-16(fp)
 801127c:	10c0020b 	ldhu	r3,8(r2)
 8011280:	e0bff117 	ldw	r2,-60(fp)
 8011284:	1080040b 	ldhu	r2,16(r2)
 8011288:	1884703a 	and	r2,r3,r2
 801128c:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 8011290:	e0bff117 	ldw	r2,-60(fp)
 8011294:	1080040b 	ldhu	r2,16(r2)
 8011298:	10ffffcc 	andi	r3,r2,65535
 801129c:	e0bff40b 	ldhu	r2,-48(fp)
 80112a0:	18800b1e 	bne	r3,r2,80112d0 <OSFlagPost+0x1c4>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 80112a4:	e0bff40b 	ldhu	r2,-48(fp)
 80112a8:	e13ff117 	ldw	r4,-60(fp)
 80112ac:	100b883a 	mov	r5,r2
 80112b0:	80118000 	call	8011800 <OS_FlagTaskRdy>
 80112b4:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
 80112b8:	e0bff483 	ldbu	r2,-46(fp)
 80112bc:	10800058 	cmpnei	r2,r2,1
 80112c0:	1000031e 	bne	r2,zero,80112d0 <OSFlagPost+0x1c4>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 80112c4:	00800044 	movi	r2,1
 80112c8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 80112cc:	00004d06 	br	8011404 <OSFlagPost+0x2f8>
 80112d0:	00004c06 	br	8011404 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 80112d4:	e0bffc17 	ldw	r2,-16(fp)
 80112d8:	10c0020b 	ldhu	r3,8(r2)
 80112dc:	e0bff117 	ldw	r2,-60(fp)
 80112e0:	1080040b 	ldhu	r2,16(r2)
 80112e4:	1884703a 	and	r2,r3,r2
 80112e8:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 80112ec:	e0bff40b 	ldhu	r2,-48(fp)
 80112f0:	10000b26 	beq	r2,zero,8011320 <OSFlagPost+0x214>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 80112f4:	e0bff40b 	ldhu	r2,-48(fp)
 80112f8:	e13ff117 	ldw	r4,-60(fp)
 80112fc:	100b883a 	mov	r5,r2
 8011300:	80118000 	call	8011800 <OS_FlagTaskRdy>
 8011304:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
 8011308:	e0bff483 	ldbu	r2,-46(fp)
 801130c:	10800058 	cmpnei	r2,r2,1
 8011310:	1000031e 	bne	r2,zero,8011320 <OSFlagPost+0x214>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8011314:	00800044 	movi	r2,1
 8011318:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 801131c:	00003906 	br	8011404 <OSFlagPost+0x2f8>
 8011320:	00003806 	br	8011404 <OSFlagPost+0x2f8>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 8011324:	e0bffc17 	ldw	r2,-16(fp)
 8011328:	1080020b 	ldhu	r2,8(r2)
 801132c:	0084303a 	nor	r2,zero,r2
 8011330:	1007883a 	mov	r3,r2
 8011334:	e0bff117 	ldw	r2,-60(fp)
 8011338:	1080040b 	ldhu	r2,16(r2)
 801133c:	1884703a 	and	r2,r3,r2
 8011340:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 8011344:	e0bff117 	ldw	r2,-60(fp)
 8011348:	1080040b 	ldhu	r2,16(r2)
 801134c:	10ffffcc 	andi	r3,r2,65535
 8011350:	e0bff40b 	ldhu	r2,-48(fp)
 8011354:	18800b1e 	bne	r3,r2,8011384 <OSFlagPost+0x278>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 8011358:	e0bff40b 	ldhu	r2,-48(fp)
 801135c:	e13ff117 	ldw	r4,-60(fp)
 8011360:	100b883a 	mov	r5,r2
 8011364:	80118000 	call	8011800 <OS_FlagTaskRdy>
 8011368:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
 801136c:	e0bff483 	ldbu	r2,-46(fp)
 8011370:	10800058 	cmpnei	r2,r2,1
 8011374:	1000031e 	bne	r2,zero,8011384 <OSFlagPost+0x278>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 8011378:	00800044 	movi	r2,1
 801137c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 8011380:	00002006 	br	8011404 <OSFlagPost+0x2f8>
 8011384:	00001f06 	br	8011404 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 8011388:	e0bffc17 	ldw	r2,-16(fp)
 801138c:	1080020b 	ldhu	r2,8(r2)
 8011390:	0084303a 	nor	r2,zero,r2
 8011394:	1007883a 	mov	r3,r2
 8011398:	e0bff117 	ldw	r2,-60(fp)
 801139c:	1080040b 	ldhu	r2,16(r2)
 80113a0:	1884703a 	and	r2,r3,r2
 80113a4:	e0bff40d 	sth	r2,-48(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 80113a8:	e0bff40b 	ldhu	r2,-48(fp)
 80113ac:	10000b26 	beq	r2,zero,80113dc <OSFlagPost+0x2d0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 80113b0:	e0bff40b 	ldhu	r2,-48(fp)
 80113b4:	e13ff117 	ldw	r4,-60(fp)
 80113b8:	100b883a 	mov	r5,r2
 80113bc:	80118000 	call	8011800 <OS_FlagTaskRdy>
 80113c0:	e0bff485 	stb	r2,-46(fp)
                     if (rdy == OS_TRUE) {
 80113c4:	e0bff483 	ldbu	r2,-46(fp)
 80113c8:	10800058 	cmpnei	r2,r2,1
 80113cc:	1000031e 	bne	r2,zero,80113dc <OSFlagPost+0x2d0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 80113d0:	00800044 	movi	r2,1
 80113d4:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 80113d8:	00000a06 	br	8011404 <OSFlagPost+0x2f8>
 80113dc:	00000906 	br	8011404 <OSFlagPost+0x2f8>
 80113e0:	e0bff317 	ldw	r2,-52(fp)
 80113e4:	e0bff815 	stw	r2,-32(fp)
 80113e8:	e0bff817 	ldw	r2,-32(fp)
 80113ec:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 80113f0:	e0bfff17 	ldw	r2,-4(fp)
 80113f4:	00c01bc4 	movi	r3,111
 80113f8:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 80113fc:	0005883a 	mov	r2,zero
 8011400:	00001f06 	br	8011480 <OSFlagPost+0x374>
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 8011404:	e0bff117 	ldw	r2,-60(fp)
 8011408:	10800017 	ldw	r2,0(r2)
 801140c:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 8011410:	e0bff117 	ldw	r2,-60(fp)
 8011414:	103f8a1e 	bne	r2,zero,8011240 <OSFlagPost+0x134>
 8011418:	e0bff317 	ldw	r2,-52(fp)
 801141c:	e0bff915 	stw	r2,-28(fp)
 8011420:	e0bff917 	ldw	r2,-28(fp)
 8011424:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 8011428:	e0bff203 	ldbu	r2,-56(fp)
 801142c:	10800058 	cmpnei	r2,r2,1
 8011430:	1000011e 	bne	r2,zero,8011438 <OSFlagPost+0x32c>
        OS_Sched();
 8011434:	800f9400 	call	800f940 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011438:	0005303a 	rdctl	r2,status
 801143c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011440:	e0fffa17 	ldw	r3,-24(fp)
 8011444:	00bfff84 	movi	r2,-2
 8011448:	1884703a 	and	r2,r3,r2
 801144c:	1001703a 	wrctl	status,r2
  
  return context;
 8011450:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 8011454:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 8011458:	e0bffc17 	ldw	r2,-16(fp)
 801145c:	1080020b 	ldhu	r2,8(r2)
 8011460:	e0bff50d 	sth	r2,-44(fp)
 8011464:	e0bff317 	ldw	r2,-52(fp)
 8011468:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801146c:	e0bffb17 	ldw	r2,-20(fp)
 8011470:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 8011474:	e0bfff17 	ldw	r2,-4(fp)
 8011478:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 801147c:	e0bff50b 	ldhu	r2,-44(fp)
}
 8011480:	e037883a 	mov	sp,fp
 8011484:	dfc00117 	ldw	ra,4(sp)
 8011488:	df000017 	ldw	fp,0(sp)
 801148c:	dec00204 	addi	sp,sp,8
 8011490:	f800283a 	ret

08011494 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 8011494:	defff904 	addi	sp,sp,-28
 8011498:	df000615 	stw	fp,24(sp)
 801149c:	df000604 	addi	fp,sp,24
 80114a0:	e13ffe15 	stw	r4,-8(fp)
 80114a4:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 80114a8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 80114ac:	e0bfff17 	ldw	r2,-4(fp)
 80114b0:	1000021e 	bne	r2,zero,80114bc <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 80114b4:	0005883a 	mov	r2,zero
 80114b8:	00002306 	br	8011548 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 80114bc:	e0bffe17 	ldw	r2,-8(fp)
 80114c0:	1000051e 	bne	r2,zero,80114d8 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 80114c4:	e0bfff17 	ldw	r2,-4(fp)
 80114c8:	00c01b84 	movi	r3,110
 80114cc:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 80114d0:	0005883a 	mov	r2,zero
 80114d4:	00001c06 	br	8011548 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 80114d8:	e0bffe17 	ldw	r2,-8(fp)
 80114dc:	10800003 	ldbu	r2,0(r2)
 80114e0:	10803fcc 	andi	r2,r2,255
 80114e4:	10800160 	cmpeqi	r2,r2,5
 80114e8:	1000051e 	bne	r2,zero,8011500 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 80114ec:	e0bfff17 	ldw	r2,-4(fp)
 80114f0:	00c00044 	movi	r3,1
 80114f4:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 80114f8:	0005883a 	mov	r2,zero
 80114fc:	00001206 	br	8011548 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011500:	0005303a 	rdctl	r2,status
 8011504:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011508:	e0fffc17 	ldw	r3,-16(fp)
 801150c:	00bfff84 	movi	r2,-2
 8011510:	1884703a 	and	r2,r3,r2
 8011514:	1001703a 	wrctl	status,r2
  
  return context;
 8011518:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 801151c:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 8011520:	e0bffe17 	ldw	r2,-8(fp)
 8011524:	1080020b 	ldhu	r2,8(r2)
 8011528:	e0bffb0d 	sth	r2,-20(fp)
 801152c:	e0bffa17 	ldw	r2,-24(fp)
 8011530:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011534:	e0bffd17 	ldw	r2,-12(fp)
 8011538:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 801153c:	e0bfff17 	ldw	r2,-4(fp)
 8011540:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 8011544:	e0bffb0b 	ldhu	r2,-20(fp)
}
 8011548:	e037883a 	mov	sp,fp
 801154c:	df000017 	ldw	fp,0(sp)
 8011550:	dec00104 	addi	sp,sp,4
 8011554:	f800283a 	ret

08011558 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 8011558:	defff804 	addi	sp,sp,-32
 801155c:	df000715 	stw	fp,28(sp)
 8011560:	df000704 	addi	fp,sp,28
 8011564:	e13ffb15 	stw	r4,-20(fp)
 8011568:	e17ffc15 	stw	r5,-16(fp)
 801156c:	3009883a 	mov	r4,r6
 8011570:	3807883a 	mov	r3,r7
 8011574:	e0800117 	ldw	r2,4(fp)
 8011578:	e13ffd0d 	sth	r4,-12(fp)
 801157c:	e0fffe05 	stb	r3,-8(fp)
 8011580:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 8011584:	008200f4 	movhi	r2,2051
 8011588:	10bb4804 	addi	r2,r2,-4832
 801158c:	10c00017 	ldw	r3,0(r2)
 8011590:	008200f4 	movhi	r2,2051
 8011594:	10bb4804 	addi	r2,r2,-4832
 8011598:	10800017 	ldw	r2,0(r2)
 801159c:	10800c03 	ldbu	r2,48(r2)
 80115a0:	10800814 	ori	r2,r2,32
 80115a4:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 80115a8:	008200f4 	movhi	r2,2051
 80115ac:	10bb4804 	addi	r2,r2,-4832
 80115b0:	10800017 	ldw	r2,0(r2)
 80115b4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 80115b8:	008200f4 	movhi	r2,2051
 80115bc:	10bb4804 	addi	r2,r2,-4832
 80115c0:	10800017 	ldw	r2,0(r2)
 80115c4:	e0ffff0b 	ldhu	r3,-4(fp)
 80115c8:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 80115cc:	008200f4 	movhi	r2,2051
 80115d0:	10bb4804 	addi	r2,r2,-4832
 80115d4:	10800017 	ldw	r2,0(r2)
 80115d8:	e0fffc17 	ldw	r3,-16(fp)
 80115dc:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 80115e0:	e0bffc17 	ldw	r2,-16(fp)
 80115e4:	e0fffd0b 	ldhu	r3,-12(fp)
 80115e8:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 80115ec:	e0bffc17 	ldw	r2,-16(fp)
 80115f0:	e0fffe03 	ldbu	r3,-8(fp)
 80115f4:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 80115f8:	008200f4 	movhi	r2,2051
 80115fc:	10bb4804 	addi	r2,r2,-4832
 8011600:	10c00017 	ldw	r3,0(r2)
 8011604:	e0bffc17 	ldw	r2,-16(fp)
 8011608:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 801160c:	e0bffb17 	ldw	r2,-20(fp)
 8011610:	10c00117 	ldw	r3,4(r2)
 8011614:	e0bffc17 	ldw	r2,-16(fp)
 8011618:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 801161c:	e0bffc17 	ldw	r2,-16(fp)
 8011620:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 8011624:	e0bffc17 	ldw	r2,-16(fp)
 8011628:	e0fffb17 	ldw	r3,-20(fp)
 801162c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 8011630:	e0bffb17 	ldw	r2,-20(fp)
 8011634:	10800117 	ldw	r2,4(r2)
 8011638:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 801163c:	e0bff917 	ldw	r2,-28(fp)
 8011640:	10000326 	beq	r2,zero,8011650 <OS_FlagBlock+0xf8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 8011644:	e0bff917 	ldw	r2,-28(fp)
 8011648:	e0fffc17 	ldw	r3,-16(fp)
 801164c:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 8011650:	e0bffb17 	ldw	r2,-20(fp)
 8011654:	e0fffc17 	ldw	r3,-16(fp)
 8011658:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 801165c:	008200f4 	movhi	r2,2051
 8011660:	10bb4804 	addi	r2,r2,-4832
 8011664:	10800017 	ldw	r2,0(r2)
 8011668:	10800d03 	ldbu	r2,52(r2)
 801166c:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 8011670:	e0fffa03 	ldbu	r3,-24(fp)
 8011674:	e13ffa03 	ldbu	r4,-24(fp)
 8011678:	008200f4 	movhi	r2,2051
 801167c:	10bb4544 	addi	r2,r2,-4843
 8011680:	1105883a 	add	r2,r2,r4
 8011684:	10800003 	ldbu	r2,0(r2)
 8011688:	1009883a 	mov	r4,r2
 801168c:	008200f4 	movhi	r2,2051
 8011690:	10bb4804 	addi	r2,r2,-4832
 8011694:	10800017 	ldw	r2,0(r2)
 8011698:	10800d43 	ldbu	r2,53(r2)
 801169c:	0084303a 	nor	r2,zero,r2
 80116a0:	2084703a 	and	r2,r4,r2
 80116a4:	1009883a 	mov	r4,r2
 80116a8:	008200f4 	movhi	r2,2051
 80116ac:	10bb4544 	addi	r2,r2,-4843
 80116b0:	10c5883a 	add	r2,r2,r3
 80116b4:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 80116b8:	e0fffa03 	ldbu	r3,-24(fp)
 80116bc:	008200f4 	movhi	r2,2051
 80116c0:	10bb4544 	addi	r2,r2,-4843
 80116c4:	10c5883a 	add	r2,r2,r3
 80116c8:	10800003 	ldbu	r2,0(r2)
 80116cc:	10803fcc 	andi	r2,r2,255
 80116d0:	10000e1e 	bne	r2,zero,801170c <OS_FlagBlock+0x1b4>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 80116d4:	008200f4 	movhi	r2,2051
 80116d8:	10bb4804 	addi	r2,r2,-4832
 80116dc:	10800017 	ldw	r2,0(r2)
 80116e0:	10800d83 	ldbu	r2,54(r2)
 80116e4:	0084303a 	nor	r2,zero,r2
 80116e8:	1007883a 	mov	r3,r2
 80116ec:	008200f4 	movhi	r2,2051
 80116f0:	10bb4504 	addi	r2,r2,-4844
 80116f4:	10800003 	ldbu	r2,0(r2)
 80116f8:	1884703a 	and	r2,r3,r2
 80116fc:	1007883a 	mov	r3,r2
 8011700:	008200f4 	movhi	r2,2051
 8011704:	10bb4504 	addi	r2,r2,-4844
 8011708:	10c00005 	stb	r3,0(r2)
    }
}
 801170c:	e037883a 	mov	sp,fp
 8011710:	df000017 	ldw	fp,0(sp)
 8011714:	dec00104 	addi	sp,sp,4
 8011718:	f800283a 	ret

0801171c <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 801171c:	defffb04 	addi	sp,sp,-20
 8011720:	dfc00415 	stw	ra,16(sp)
 8011724:	df000315 	stw	fp,12(sp)
 8011728:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 801172c:	010200f4 	movhi	r4,2051
 8011730:	210d5b04 	addi	r4,r4,13676
 8011734:	0140dc04 	movi	r5,880
 8011738:	800f88c0 	call	800f88c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 801173c:	008200f4 	movhi	r2,2051
 8011740:	108d5b04 	addi	r2,r2,13676
 8011744:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 8011748:	008200f4 	movhi	r2,2051
 801174c:	108d6604 	addi	r2,r2,13720
 8011750:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 8011754:	e03ffd0d 	sth	zero,-12(fp)
 8011758:	00001306 	br	80117a8 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 801175c:	e0bffe17 	ldw	r2,-8(fp)
 8011760:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 8011764:	e0bffe17 	ldw	r2,-8(fp)
 8011768:	e0ffff17 	ldw	r3,-4(fp)
 801176c:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 8011770:	e0bffe17 	ldw	r2,-8(fp)
 8011774:	00c00fc4 	movi	r3,63
 8011778:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 801177c:	e0bffe17 	ldw	r2,-8(fp)
 8011780:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 8011784:	e0bffe17 	ldw	r2,-8(fp)
 8011788:	10800b04 	addi	r2,r2,44
 801178c:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 8011790:	e0bfff17 	ldw	r2,-4(fp)
 8011794:	10800b04 	addi	r2,r2,44
 8011798:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 801179c:	e0bffd0b 	ldhu	r2,-12(fp)
 80117a0:	10800044 	addi	r2,r2,1
 80117a4:	e0bffd0d 	sth	r2,-12(fp)
 80117a8:	e0bffd0b 	ldhu	r2,-12(fp)
 80117ac:	108004f0 	cmpltui	r2,r2,19
 80117b0:	103fea1e 	bne	r2,zero,801175c <OS_FlagInit+0x40>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 80117b4:	e0bffe17 	ldw	r2,-8(fp)
 80117b8:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 80117bc:	e0bffe17 	ldw	r2,-8(fp)
 80117c0:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 80117c4:	e0bffe17 	ldw	r2,-8(fp)
 80117c8:	00c00fc4 	movi	r3,63
 80117cc:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 80117d0:	e0bffe17 	ldw	r2,-8(fp)
 80117d4:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 80117d8:	008200f4 	movhi	r2,2051
 80117dc:	10bb4a04 	addi	r2,r2,-4824
 80117e0:	00c200f4 	movhi	r3,2051
 80117e4:	18cd5b04 	addi	r3,r3,13676
 80117e8:	10c00015 	stw	r3,0(r2)
#endif
}
 80117ec:	e037883a 	mov	sp,fp
 80117f0:	dfc00117 	ldw	ra,4(sp)
 80117f4:	df000017 	ldw	fp,0(sp)
 80117f8:	dec00204 	addi	sp,sp,8
 80117fc:	f800283a 	ret

08011800 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 8011800:	defffa04 	addi	sp,sp,-24
 8011804:	dfc00515 	stw	ra,20(sp)
 8011808:	df000415 	stw	fp,16(sp)
 801180c:	df000404 	addi	fp,sp,16
 8011810:	e13ffe15 	stw	r4,-8(fp)
 8011814:	2805883a 	mov	r2,r5
 8011818:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 801181c:	e0bffe17 	ldw	r2,-8(fp)
 8011820:	10800217 	ldw	r2,8(r2)
 8011824:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 8011828:	e0bffd17 	ldw	r2,-12(fp)
 801182c:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 8011830:	e0bffd17 	ldw	r2,-12(fp)
 8011834:	e0ffff0b 	ldhu	r3,-4(fp)
 8011838:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 801183c:	e0bffd17 	ldw	r2,-12(fp)
 8011840:	10c00c03 	ldbu	r3,48(r2)
 8011844:	00bff7c4 	movi	r2,-33
 8011848:	1884703a 	and	r2,r3,r2
 801184c:	1007883a 	mov	r3,r2
 8011850:	e0bffd17 	ldw	r2,-12(fp)
 8011854:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 8011858:	e0bffd17 	ldw	r2,-12(fp)
 801185c:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 8011860:	e0bffd17 	ldw	r2,-12(fp)
 8011864:	10800c03 	ldbu	r2,48(r2)
 8011868:	10803fcc 	andi	r2,r2,255
 801186c:	10001f1e 	bne	r2,zero,80118ec <OS_FlagTaskRdy+0xec>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 8011870:	e0bffd17 	ldw	r2,-12(fp)
 8011874:	10c00d83 	ldbu	r3,54(r2)
 8011878:	008200f4 	movhi	r2,2051
 801187c:	10bb4504 	addi	r2,r2,-4844
 8011880:	10800003 	ldbu	r2,0(r2)
 8011884:	1884b03a 	or	r2,r3,r2
 8011888:	1007883a 	mov	r3,r2
 801188c:	008200f4 	movhi	r2,2051
 8011890:	10bb4504 	addi	r2,r2,-4844
 8011894:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8011898:	e0bffd17 	ldw	r2,-12(fp)
 801189c:	10800d03 	ldbu	r2,52(r2)
 80118a0:	10c03fcc 	andi	r3,r2,255
 80118a4:	e0bffd17 	ldw	r2,-12(fp)
 80118a8:	10800d03 	ldbu	r2,52(r2)
 80118ac:	11003fcc 	andi	r4,r2,255
 80118b0:	008200f4 	movhi	r2,2051
 80118b4:	10bb4544 	addi	r2,r2,-4843
 80118b8:	1105883a 	add	r2,r2,r4
 80118bc:	11000003 	ldbu	r4,0(r2)
 80118c0:	e0bffd17 	ldw	r2,-12(fp)
 80118c4:	10800d43 	ldbu	r2,53(r2)
 80118c8:	2084b03a 	or	r2,r4,r2
 80118cc:	1009883a 	mov	r4,r2
 80118d0:	008200f4 	movhi	r2,2051
 80118d4:	10bb4544 	addi	r2,r2,-4843
 80118d8:	10c5883a 	add	r2,r2,r3
 80118dc:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 80118e0:	00800044 	movi	r2,1
 80118e4:	e0bffc05 	stb	r2,-16(fp)
 80118e8:	00000106 	br	80118f0 <OS_FlagTaskRdy+0xf0>
    } else {
        sched                   = OS_FALSE;
 80118ec:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 80118f0:	e13ffe17 	ldw	r4,-8(fp)
 80118f4:	80119100 	call	8011910 <OS_FlagUnlink>
    return (sched);
 80118f8:	e0bffc03 	ldbu	r2,-16(fp)
}
 80118fc:	e037883a 	mov	sp,fp
 8011900:	dfc00117 	ldw	ra,4(sp)
 8011904:	df000017 	ldw	fp,0(sp)
 8011908:	dec00204 	addi	sp,sp,8
 801190c:	f800283a 	ret

08011910 <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 8011910:	defffa04 	addi	sp,sp,-24
 8011914:	df000515 	stw	fp,20(sp)
 8011918:	df000504 	addi	fp,sp,20
 801191c:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 8011920:	e0bfff17 	ldw	r2,-4(fp)
 8011924:	10800117 	ldw	r2,4(r2)
 8011928:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 801192c:	e0bfff17 	ldw	r2,-4(fp)
 8011930:	10800017 	ldw	r2,0(r2)
 8011934:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 8011938:	e0bffb17 	ldw	r2,-20(fp)
 801193c:	10000b1e 	bne	r2,zero,801196c <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 8011940:	e0bfff17 	ldw	r2,-4(fp)
 8011944:	10800317 	ldw	r2,12(r2)
 8011948:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 801194c:	e0bffd17 	ldw	r2,-12(fp)
 8011950:	e0fffc17 	ldw	r3,-16(fp)
 8011954:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 8011958:	e0bffc17 	ldw	r2,-16(fp)
 801195c:	10000b26 	beq	r2,zero,801198c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 8011960:	e0bffc17 	ldw	r2,-16(fp)
 8011964:	10000115 	stw	zero,4(r2)
 8011968:	00000806 	br	801198c <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 801196c:	e0bffb17 	ldw	r2,-20(fp)
 8011970:	e0fffc17 	ldw	r3,-16(fp)
 8011974:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 8011978:	e0bffc17 	ldw	r2,-16(fp)
 801197c:	10000326 	beq	r2,zero,801198c <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 8011980:	e0bffc17 	ldw	r2,-16(fp)
 8011984:	e0fffb17 	ldw	r3,-20(fp)
 8011988:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 801198c:	e0bfff17 	ldw	r2,-4(fp)
 8011990:	10800217 	ldw	r2,8(r2)
 8011994:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 8011998:	e0bffe17 	ldw	r2,-8(fp)
 801199c:	10000a15 	stw	zero,40(r2)
#endif
}
 80119a0:	e037883a 	mov	sp,fp
 80119a4:	df000017 	ldw	fp,0(sp)
 80119a8:	dec00104 	addi	sp,sp,4
 80119ac:	f800283a 	ret

080119b0 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 80119b0:	defff404 	addi	sp,sp,-48
 80119b4:	df000b15 	stw	fp,44(sp)
 80119b8:	df000b04 	addi	fp,sp,44
 80119bc:	e13ffc15 	stw	r4,-16(fp)
 80119c0:	e17ffd15 	stw	r5,-12(fp)
 80119c4:	e1bffe15 	stw	r6,-8(fp)
 80119c8:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 80119cc:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 80119d0:	e0bfff17 	ldw	r2,-4(fp)
 80119d4:	1000021e 	bne	r2,zero,80119e0 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 80119d8:	0005883a 	mov	r2,zero
 80119dc:	00006d06 	br	8011b94 <OSMemCreate+0x1e4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 80119e0:	e0bffc17 	ldw	r2,-16(fp)
 80119e4:	1000051e 	bne	r2,zero,80119fc <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 80119e8:	e0bfff17 	ldw	r2,-4(fp)
 80119ec:	00c01884 	movi	r3,98
 80119f0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 80119f4:	0005883a 	mov	r2,zero
 80119f8:	00006606 	br	8011b94 <OSMemCreate+0x1e4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 80119fc:	e0bffc17 	ldw	r2,-16(fp)
 8011a00:	108000cc 	andi	r2,r2,3
 8011a04:	10000526 	beq	r2,zero,8011a1c <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 8011a08:	e0bfff17 	ldw	r2,-4(fp)
 8011a0c:	00c01884 	movi	r3,98
 8011a10:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8011a14:	0005883a 	mov	r2,zero
 8011a18:	00005e06 	br	8011b94 <OSMemCreate+0x1e4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 8011a1c:	e0bffd17 	ldw	r2,-12(fp)
 8011a20:	108000a8 	cmpgeui	r2,r2,2
 8011a24:	1000051e 	bne	r2,zero,8011a3c <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 8011a28:	e0bfff17 	ldw	r2,-4(fp)
 8011a2c:	00c016c4 	movi	r3,91
 8011a30:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8011a34:	0005883a 	mov	r2,zero
 8011a38:	00005606 	br	8011b94 <OSMemCreate+0x1e4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 8011a3c:	e0bffe17 	ldw	r2,-8(fp)
 8011a40:	10800128 	cmpgeui	r2,r2,4
 8011a44:	1000051e 	bne	r2,zero,8011a5c <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 8011a48:	e0bfff17 	ldw	r2,-4(fp)
 8011a4c:	00c01704 	movi	r3,92
 8011a50:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8011a54:	0005883a 	mov	r2,zero
 8011a58:	00004e06 	br	8011b94 <OSMemCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011a5c:	0005303a 	rdctl	r2,status
 8011a60:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011a64:	e0fffa17 	ldw	r3,-24(fp)
 8011a68:	00bfff84 	movi	r2,-2
 8011a6c:	1884703a 	and	r2,r3,r2
 8011a70:	1001703a 	wrctl	status,r2
  
  return context;
 8011a74:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8011a78:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 8011a7c:	008200f4 	movhi	r2,2051
 8011a80:	10bb4204 	addi	r2,r2,-4856
 8011a84:	10800017 	ldw	r2,0(r2)
 8011a88:	e0bff915 	stw	r2,-28(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 8011a8c:	008200f4 	movhi	r2,2051
 8011a90:	10bb4204 	addi	r2,r2,-4856
 8011a94:	10800017 	ldw	r2,0(r2)
 8011a98:	10000726 	beq	r2,zero,8011ab8 <OSMemCreate+0x108>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 8011a9c:	008200f4 	movhi	r2,2051
 8011aa0:	10bb4204 	addi	r2,r2,-4856
 8011aa4:	10800017 	ldw	r2,0(r2)
 8011aa8:	10c00117 	ldw	r3,4(r2)
 8011aac:	008200f4 	movhi	r2,2051
 8011ab0:	10bb4204 	addi	r2,r2,-4856
 8011ab4:	10c00015 	stw	r3,0(r2)
 8011ab8:	e0bff817 	ldw	r2,-32(fp)
 8011abc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011ac0:	e0bffb17 	ldw	r2,-20(fp)
 8011ac4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 8011ac8:	e0bff917 	ldw	r2,-28(fp)
 8011acc:	1000051e 	bne	r2,zero,8011ae4 <OSMemCreate+0x134>
        *perr = OS_ERR_MEM_INVALID_PART;
 8011ad0:	e0bfff17 	ldw	r2,-4(fp)
 8011ad4:	00c01684 	movi	r3,90
 8011ad8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 8011adc:	0005883a 	mov	r2,zero
 8011ae0:	00002c06 	br	8011b94 <OSMemCreate+0x1e4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 8011ae4:	e0bffc17 	ldw	r2,-16(fp)
 8011ae8:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 8011aec:	e0fffc17 	ldw	r3,-16(fp)
 8011af0:	e0bffe17 	ldw	r2,-8(fp)
 8011af4:	1885883a 	add	r2,r3,r2
 8011af8:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 8011afc:	e03ff715 	stw	zero,-36(fp)
 8011b00:	00000c06 	br	8011b34 <OSMemCreate+0x184>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 8011b04:	e0bff617 	ldw	r2,-40(fp)
 8011b08:	e0fff517 	ldw	r3,-44(fp)
 8011b0c:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 8011b10:	e0bff517 	ldw	r2,-44(fp)
 8011b14:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 8011b18:	e0fff517 	ldw	r3,-44(fp)
 8011b1c:	e0bffe17 	ldw	r2,-8(fp)
 8011b20:	1885883a 	add	r2,r3,r2
 8011b24:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 8011b28:	e0bff717 	ldw	r2,-36(fp)
 8011b2c:	10800044 	addi	r2,r2,1
 8011b30:	e0bff715 	stw	r2,-36(fp)
 8011b34:	e0bffd17 	ldw	r2,-12(fp)
 8011b38:	10bfffc4 	addi	r2,r2,-1
 8011b3c:	e0fff717 	ldw	r3,-36(fp)
 8011b40:	18bff036 	bltu	r3,r2,8011b04 <OSMemCreate+0x154>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 8011b44:	e0bff617 	ldw	r2,-40(fp)
 8011b48:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 8011b4c:	e0bff917 	ldw	r2,-28(fp)
 8011b50:	e0fffc17 	ldw	r3,-16(fp)
 8011b54:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 8011b58:	e0bff917 	ldw	r2,-28(fp)
 8011b5c:	e0fffc17 	ldw	r3,-16(fp)
 8011b60:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 8011b64:	e0bff917 	ldw	r2,-28(fp)
 8011b68:	e0fffd17 	ldw	r3,-12(fp)
 8011b6c:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 8011b70:	e0bff917 	ldw	r2,-28(fp)
 8011b74:	e0fffd17 	ldw	r3,-12(fp)
 8011b78:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 8011b7c:	e0bff917 	ldw	r2,-28(fp)
 8011b80:	e0fffe17 	ldw	r3,-8(fp)
 8011b84:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 8011b88:	e0bfff17 	ldw	r2,-4(fp)
 8011b8c:	10000005 	stb	zero,0(r2)
    return (pmem);
 8011b90:	e0bff917 	ldw	r2,-28(fp)
}
 8011b94:	e037883a 	mov	sp,fp
 8011b98:	df000017 	ldw	fp,0(sp)
 8011b9c:	dec00104 	addi	sp,sp,4
 8011ba0:	f800283a 	ret

08011ba4 <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 8011ba4:	defff804 	addi	sp,sp,-32
 8011ba8:	df000715 	stw	fp,28(sp)
 8011bac:	df000704 	addi	fp,sp,28
 8011bb0:	e13ffe15 	stw	r4,-8(fp)
 8011bb4:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8011bb8:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 8011bbc:	e0bfff17 	ldw	r2,-4(fp)
 8011bc0:	1000021e 	bne	r2,zero,8011bcc <OSMemGet+0x28>
        return ((void *)0);
 8011bc4:	0005883a 	mov	r2,zero
 8011bc8:	00002e06 	br	8011c84 <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 8011bcc:	e0bffe17 	ldw	r2,-8(fp)
 8011bd0:	1000051e 	bne	r2,zero,8011be8 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 8011bd4:	e0bfff17 	ldw	r2,-4(fp)
 8011bd8:	00c01804 	movi	r3,96
 8011bdc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8011be0:	0005883a 	mov	r2,zero
 8011be4:	00002706 	br	8011c84 <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011be8:	0005303a 	rdctl	r2,status
 8011bec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011bf0:	e0fffb17 	ldw	r3,-20(fp)
 8011bf4:	00bfff84 	movi	r2,-2
 8011bf8:	1884703a 	and	r2,r3,r2
 8011bfc:	1001703a 	wrctl	status,r2
  
  return context;
 8011c00:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8011c04:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 8011c08:	e0bffe17 	ldw	r2,-8(fp)
 8011c0c:	10800417 	ldw	r2,16(r2)
 8011c10:	10001426 	beq	r2,zero,8011c64 <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 8011c14:	e0bffe17 	ldw	r2,-8(fp)
 8011c18:	10800117 	ldw	r2,4(r2)
 8011c1c:	e0bffa15 	stw	r2,-24(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 8011c20:	e0bffa17 	ldw	r2,-24(fp)
 8011c24:	10c00017 	ldw	r3,0(r2)
 8011c28:	e0bffe17 	ldw	r2,-8(fp)
 8011c2c:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 8011c30:	e0bffe17 	ldw	r2,-8(fp)
 8011c34:	10800417 	ldw	r2,16(r2)
 8011c38:	10ffffc4 	addi	r3,r2,-1
 8011c3c:	e0bffe17 	ldw	r2,-8(fp)
 8011c40:	10c00415 	stw	r3,16(r2)
 8011c44:	e0bff917 	ldw	r2,-28(fp)
 8011c48:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011c4c:	e0bffc17 	ldw	r2,-16(fp)
 8011c50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 8011c54:	e0bfff17 	ldw	r2,-4(fp)
 8011c58:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 8011c5c:	e0bffa17 	ldw	r2,-24(fp)
 8011c60:	00000806 	br	8011c84 <OSMemGet+0xe0>
 8011c64:	e0bff917 	ldw	r2,-28(fp)
 8011c68:	e0bffd15 	stw	r2,-12(fp)
 8011c6c:	e0bffd17 	ldw	r2,-12(fp)
 8011c70:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 8011c74:	e0bfff17 	ldw	r2,-4(fp)
 8011c78:	00c01744 	movi	r3,93
 8011c7c:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 8011c80:	0005883a 	mov	r2,zero
}
 8011c84:	e037883a 	mov	sp,fp
 8011c88:	df000017 	ldw	fp,0(sp)
 8011c8c:	dec00104 	addi	sp,sp,4
 8011c90:	f800283a 	ret

08011c94 <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 8011c94:	defff704 	addi	sp,sp,-36
 8011c98:	dfc00815 	stw	ra,32(sp)
 8011c9c:	df000715 	stw	fp,28(sp)
 8011ca0:	df000704 	addi	fp,sp,28
 8011ca4:	e13ffd15 	stw	r4,-12(fp)
 8011ca8:	e17ffe15 	stw	r5,-8(fp)
 8011cac:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8011cb0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8011cb4:	e0bfff17 	ldw	r2,-4(fp)
 8011cb8:	1000021e 	bne	r2,zero,8011cc4 <OSMemNameGet+0x30>
        return (0);
 8011cbc:	0005883a 	mov	r2,zero
 8011cc0:	00002d06 	br	8011d78 <OSMemNameGet+0xe4>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 8011cc4:	e0bffd17 	ldw	r2,-12(fp)
 8011cc8:	1000051e 	bne	r2,zero,8011ce0 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 8011ccc:	e0bfff17 	ldw	r2,-4(fp)
 8011cd0:	00c01804 	movi	r3,96
 8011cd4:	10c00005 	stb	r3,0(r2)
        return (0);
 8011cd8:	0005883a 	mov	r2,zero
 8011cdc:	00002606 	br	8011d78 <OSMemNameGet+0xe4>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8011ce0:	e0bffe17 	ldw	r2,-8(fp)
 8011ce4:	1000051e 	bne	r2,zero,8011cfc <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 8011ce8:	e0bfff17 	ldw	r2,-4(fp)
 8011cec:	00c00304 	movi	r3,12
 8011cf0:	10c00005 	stb	r3,0(r2)
        return (0);
 8011cf4:	0005883a 	mov	r2,zero
 8011cf8:	00001f06 	br	8011d78 <OSMemNameGet+0xe4>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8011cfc:	008200f4 	movhi	r2,2051
 8011d00:	10bb4704 	addi	r2,r2,-4836
 8011d04:	10800003 	ldbu	r2,0(r2)
 8011d08:	10803fcc 	andi	r2,r2,255
 8011d0c:	10000526 	beq	r2,zero,8011d24 <OSMemNameGet+0x90>
        *perr = OS_ERR_NAME_GET_ISR;
 8011d10:	e0bfff17 	ldw	r2,-4(fp)
 8011d14:	00c00444 	movi	r3,17
 8011d18:	10c00005 	stb	r3,0(r2)
        return (0);
 8011d1c:	0005883a 	mov	r2,zero
 8011d20:	00001506 	br	8011d78 <OSMemNameGet+0xe4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011d24:	0005303a 	rdctl	r2,status
 8011d28:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011d2c:	e0fffb17 	ldw	r3,-20(fp)
 8011d30:	00bfff84 	movi	r2,-2
 8011d34:	1884703a 	and	r2,r3,r2
 8011d38:	1001703a 	wrctl	status,r2
  
  return context;
 8011d3c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 8011d40:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 8011d44:	e0bffd17 	ldw	r2,-12(fp)
 8011d48:	10800504 	addi	r2,r2,20
 8011d4c:	e13ffe17 	ldw	r4,-8(fp)
 8011d50:	100b883a 	mov	r5,r2
 8011d54:	800fa7c0 	call	800fa7c <OS_StrCopy>
 8011d58:	e0bffa05 	stb	r2,-24(fp)
 8011d5c:	e0bff917 	ldw	r2,-28(fp)
 8011d60:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011d64:	e0bffc17 	ldw	r2,-16(fp)
 8011d68:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8011d6c:	e0bfff17 	ldw	r2,-4(fp)
 8011d70:	10000005 	stb	zero,0(r2)
    return (len);
 8011d74:	e0bffa03 	ldbu	r2,-24(fp)
}
 8011d78:	e037883a 	mov	sp,fp
 8011d7c:	dfc00117 	ldw	ra,4(sp)
 8011d80:	df000017 	ldw	fp,0(sp)
 8011d84:	dec00204 	addi	sp,sp,8
 8011d88:	f800283a 	ret

08011d8c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 8011d8c:	defff604 	addi	sp,sp,-40
 8011d90:	dfc00915 	stw	ra,36(sp)
 8011d94:	df000815 	stw	fp,32(sp)
 8011d98:	df000804 	addi	fp,sp,32
 8011d9c:	e13ffd15 	stw	r4,-12(fp)
 8011da0:	e17ffe15 	stw	r5,-8(fp)
 8011da4:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8011da8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8011dac:	e0bfff17 	ldw	r2,-4(fp)
 8011db0:	1000011e 	bne	r2,zero,8011db8 <OSMemNameSet+0x2c>
        return;
 8011db4:	00003606 	br	8011e90 <OSMemNameSet+0x104>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 8011db8:	e0bffd17 	ldw	r2,-12(fp)
 8011dbc:	1000041e 	bne	r2,zero,8011dd0 <OSMemNameSet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 8011dc0:	e0bfff17 	ldw	r2,-4(fp)
 8011dc4:	00c01804 	movi	r3,96
 8011dc8:	10c00005 	stb	r3,0(r2)
        return;
 8011dcc:	00003006 	br	8011e90 <OSMemNameSet+0x104>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 8011dd0:	e0bffe17 	ldw	r2,-8(fp)
 8011dd4:	1000041e 	bne	r2,zero,8011de8 <OSMemNameSet+0x5c>
        *perr = OS_ERR_PNAME_NULL;
 8011dd8:	e0bfff17 	ldw	r2,-4(fp)
 8011ddc:	00c00304 	movi	r3,12
 8011de0:	10c00005 	stb	r3,0(r2)
        return;
 8011de4:	00002a06 	br	8011e90 <OSMemNameSet+0x104>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 8011de8:	008200f4 	movhi	r2,2051
 8011dec:	10bb4704 	addi	r2,r2,-4836
 8011df0:	10800003 	ldbu	r2,0(r2)
 8011df4:	10803fcc 	andi	r2,r2,255
 8011df8:	10000426 	beq	r2,zero,8011e0c <OSMemNameSet+0x80>
        *perr = OS_ERR_NAME_SET_ISR;
 8011dfc:	e0bfff17 	ldw	r2,-4(fp)
 8011e00:	00c00484 	movi	r3,18
 8011e04:	10c00005 	stb	r3,0(r2)
        return;
 8011e08:	00002106 	br	8011e90 <OSMemNameSet+0x104>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011e0c:	0005303a 	rdctl	r2,status
 8011e10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011e14:	e0fffa17 	ldw	r3,-24(fp)
 8011e18:	00bfff84 	movi	r2,-2
 8011e1c:	1884703a 	and	r2,r3,r2
 8011e20:	1001703a 	wrctl	status,r2
  
  return context;
 8011e24:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 8011e28:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 8011e2c:	e13ffe17 	ldw	r4,-8(fp)
 8011e30:	800faf00 	call	800faf0 <OS_StrLen>
 8011e34:	e0bff905 	stb	r2,-28(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 8011e38:	e0bff903 	ldbu	r2,-28(fp)
 8011e3c:	10800830 	cmpltui	r2,r2,32
 8011e40:	1000081e 	bne	r2,zero,8011e64 <OSMemNameSet+0xd8>
 8011e44:	e0bff817 	ldw	r2,-32(fp)
 8011e48:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011e4c:	e0bffb17 	ldw	r2,-20(fp)
 8011e50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 8011e54:	e0bfff17 	ldw	r2,-4(fp)
 8011e58:	00c018c4 	movi	r3,99
 8011e5c:	10c00005 	stb	r3,0(r2)
        return;
 8011e60:	00000b06 	br	8011e90 <OSMemNameSet+0x104>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 8011e64:	e0bffd17 	ldw	r2,-12(fp)
 8011e68:	10800504 	addi	r2,r2,20
 8011e6c:	1009883a 	mov	r4,r2
 8011e70:	e17ffe17 	ldw	r5,-8(fp)
 8011e74:	800fa7c0 	call	800fa7c <OS_StrCopy>
 8011e78:	e0bff817 	ldw	r2,-32(fp)
 8011e7c:	e0bffc15 	stw	r2,-16(fp)
 8011e80:	e0bffc17 	ldw	r2,-16(fp)
 8011e84:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8011e88:	e0bfff17 	ldw	r2,-4(fp)
 8011e8c:	10000005 	stb	zero,0(r2)
}
 8011e90:	e037883a 	mov	sp,fp
 8011e94:	dfc00117 	ldw	ra,4(sp)
 8011e98:	df000017 	ldw	fp,0(sp)
 8011e9c:	dec00204 	addi	sp,sp,8
 8011ea0:	f800283a 	ret

08011ea4 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 8011ea4:	defff904 	addi	sp,sp,-28
 8011ea8:	df000615 	stw	fp,24(sp)
 8011eac:	df000604 	addi	fp,sp,24
 8011eb0:	e13ffe15 	stw	r4,-8(fp)
 8011eb4:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8011eb8:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 8011ebc:	e0bffe17 	ldw	r2,-8(fp)
 8011ec0:	1000021e 	bne	r2,zero,8011ecc <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 8011ec4:	00801804 	movi	r2,96
 8011ec8:	00002806 	br	8011f6c <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 8011ecc:	e0bfff17 	ldw	r2,-4(fp)
 8011ed0:	1000021e 	bne	r2,zero,8011edc <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 8011ed4:	008017c4 	movi	r2,95
 8011ed8:	00002406 	br	8011f6c <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011edc:	0005303a 	rdctl	r2,status
 8011ee0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011ee4:	e0fffb17 	ldw	r3,-20(fp)
 8011ee8:	00bfff84 	movi	r2,-2
 8011eec:	1884703a 	and	r2,r3,r2
 8011ef0:	1001703a 	wrctl	status,r2
  
  return context;
 8011ef4:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8011ef8:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 8011efc:	e0bffe17 	ldw	r2,-8(fp)
 8011f00:	10c00417 	ldw	r3,16(r2)
 8011f04:	e0bffe17 	ldw	r2,-8(fp)
 8011f08:	10800317 	ldw	r2,12(r2)
 8011f0c:	18800636 	bltu	r3,r2,8011f28 <OSMemPut+0x84>
 8011f10:	e0bffa17 	ldw	r2,-24(fp)
 8011f14:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8011f18:	e0bffc17 	ldw	r2,-16(fp)
 8011f1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 8011f20:	00801784 	movi	r2,94
 8011f24:	00001106 	br	8011f6c <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 8011f28:	e0bffe17 	ldw	r2,-8(fp)
 8011f2c:	10c00117 	ldw	r3,4(r2)
 8011f30:	e0bfff17 	ldw	r2,-4(fp)
 8011f34:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 8011f38:	e0bffe17 	ldw	r2,-8(fp)
 8011f3c:	e0ffff17 	ldw	r3,-4(fp)
 8011f40:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 8011f44:	e0bffe17 	ldw	r2,-8(fp)
 8011f48:	10800417 	ldw	r2,16(r2)
 8011f4c:	10c00044 	addi	r3,r2,1
 8011f50:	e0bffe17 	ldw	r2,-8(fp)
 8011f54:	10c00415 	stw	r3,16(r2)
 8011f58:	e0bffa17 	ldw	r2,-24(fp)
 8011f5c:	e0bffd15 	stw	r2,-12(fp)
 8011f60:	e0bffd17 	ldw	r2,-12(fp)
 8011f64:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 8011f68:	0005883a 	mov	r2,zero
}
 8011f6c:	e037883a 	mov	sp,fp
 8011f70:	df000017 	ldw	fp,0(sp)
 8011f74:	dec00104 	addi	sp,sp,4
 8011f78:	f800283a 	ret

08011f7c <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 8011f7c:	defffa04 	addi	sp,sp,-24
 8011f80:	df000515 	stw	fp,20(sp)
 8011f84:	df000504 	addi	fp,sp,20
 8011f88:	e13ffe15 	stw	r4,-8(fp)
 8011f8c:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8011f90:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 8011f94:	e0bffe17 	ldw	r2,-8(fp)
 8011f98:	1000021e 	bne	r2,zero,8011fa4 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 8011f9c:	00801804 	movi	r2,96
 8011fa0:	00002c06 	br	8012054 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 8011fa4:	e0bfff17 	ldw	r2,-4(fp)
 8011fa8:	1000021e 	bne	r2,zero,8011fb4 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 8011fac:	00801844 	movi	r2,97
 8011fb0:	00002806 	br	8012054 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8011fb4:	0005303a 	rdctl	r2,status
 8011fb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011fbc:	e0fffc17 	ldw	r3,-16(fp)
 8011fc0:	00bfff84 	movi	r2,-2
 8011fc4:	1884703a 	and	r2,r3,r2
 8011fc8:	1001703a 	wrctl	status,r2
  
  return context;
 8011fcc:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8011fd0:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 8011fd4:	e0bffe17 	ldw	r2,-8(fp)
 8011fd8:	10c00017 	ldw	r3,0(r2)
 8011fdc:	e0bfff17 	ldw	r2,-4(fp)
 8011fe0:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 8011fe4:	e0bffe17 	ldw	r2,-8(fp)
 8011fe8:	10c00117 	ldw	r3,4(r2)
 8011fec:	e0bfff17 	ldw	r2,-4(fp)
 8011ff0:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 8011ff4:	e0bffe17 	ldw	r2,-8(fp)
 8011ff8:	10c00217 	ldw	r3,8(r2)
 8011ffc:	e0bfff17 	ldw	r2,-4(fp)
 8012000:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 8012004:	e0bffe17 	ldw	r2,-8(fp)
 8012008:	10c00317 	ldw	r3,12(r2)
 801200c:	e0bfff17 	ldw	r2,-4(fp)
 8012010:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 8012014:	e0bffe17 	ldw	r2,-8(fp)
 8012018:	10c00417 	ldw	r3,16(r2)
 801201c:	e0bfff17 	ldw	r2,-4(fp)
 8012020:	10c00415 	stw	r3,16(r2)
 8012024:	e0bffb17 	ldw	r2,-20(fp)
 8012028:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801202c:	e0bffd17 	ldw	r2,-12(fp)
 8012030:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 8012034:	e0bfff17 	ldw	r2,-4(fp)
 8012038:	10c00317 	ldw	r3,12(r2)
 801203c:	e0bfff17 	ldw	r2,-4(fp)
 8012040:	10800417 	ldw	r2,16(r2)
 8012044:	1887c83a 	sub	r3,r3,r2
 8012048:	e0bfff17 	ldw	r2,-4(fp)
 801204c:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 8012050:	0005883a 	mov	r2,zero
}
 8012054:	e037883a 	mov	sp,fp
 8012058:	df000017 	ldw	fp,0(sp)
 801205c:	dec00104 	addi	sp,sp,4
 8012060:	f800283a 	ret

08012064 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 8012064:	defffc04 	addi	sp,sp,-16
 8012068:	dfc00315 	stw	ra,12(sp)
 801206c:	df000215 	stw	fp,8(sp)
 8012070:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 8012074:	010200f4 	movhi	r4,2051
 8012078:	210e3704 	addi	r4,r4,14556
 801207c:	01430c04 	movi	r5,3120
 8012080:	800f88c0 	call	800f88c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 8012084:	008200f4 	movhi	r2,2051
 8012088:	108e3704 	addi	r2,r2,14556
 801208c:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 8012090:	e03fff0d 	sth	zero,-4(fp)
 8012094:	00001306 	br	80120e4 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 8012098:	e0bfff0b 	ldhu	r2,-4(fp)
 801209c:	10800044 	addi	r2,r2,1
 80120a0:	10c00d24 	muli	r3,r2,52
 80120a4:	008200f4 	movhi	r2,2051
 80120a8:	108e3704 	addi	r2,r2,14556
 80120ac:	1887883a 	add	r3,r3,r2
 80120b0:	e0bffe17 	ldw	r2,-8(fp)
 80120b4:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 80120b8:	e0bffe17 	ldw	r2,-8(fp)
 80120bc:	00c00fc4 	movi	r3,63
 80120c0:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 80120c4:	e0bffe17 	ldw	r2,-8(fp)
 80120c8:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 80120cc:	e0bffe17 	ldw	r2,-8(fp)
 80120d0:	10800d04 	addi	r2,r2,52
 80120d4:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 80120d8:	e0bfff0b 	ldhu	r2,-4(fp)
 80120dc:	10800044 	addi	r2,r2,1
 80120e0:	e0bfff0d 	sth	r2,-4(fp)
 80120e4:	e0bfff0b 	ldhu	r2,-4(fp)
 80120e8:	10800ef0 	cmpltui	r2,r2,59
 80120ec:	103fea1e 	bne	r2,zero,8012098 <OS_MemInit+0x34>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 80120f0:	e0bffe17 	ldw	r2,-8(fp)
 80120f4:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 80120f8:	e0bffe17 	ldw	r2,-8(fp)
 80120fc:	00c00fc4 	movi	r3,63
 8012100:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 8012104:	e0bffe17 	ldw	r2,-8(fp)
 8012108:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 801210c:	008200f4 	movhi	r2,2051
 8012110:	10bb4204 	addi	r2,r2,-4856
 8012114:	00c200f4 	movhi	r3,2051
 8012118:	18ce3704 	addi	r3,r3,14556
 801211c:	10c00015 	stw	r3,0(r2)
#endif
}
 8012120:	e037883a 	mov	sp,fp
 8012124:	dfc00117 	ldw	ra,4(sp)
 8012128:	df000017 	ldw	fp,0(sp)
 801212c:	dec00204 	addi	sp,sp,8
 8012130:	f800283a 	ret

08012134 <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 8012134:	defff804 	addi	sp,sp,-32
 8012138:	df000715 	stw	fp,28(sp)
 801213c:	df000704 	addi	fp,sp,28
 8012140:	e13ffe15 	stw	r4,-8(fp)
 8012144:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8012148:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 801214c:	e0bfff17 	ldw	r2,-4(fp)
 8012150:	1000021e 	bne	r2,zero,801215c <OSQAccept+0x28>
        return ((void *)0);
 8012154:	0005883a 	mov	r2,zero
 8012158:	00004206 	br	8012264 <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 801215c:	e0bffe17 	ldw	r2,-8(fp)
 8012160:	1000051e 	bne	r2,zero,8012178 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 8012164:	e0bfff17 	ldw	r2,-4(fp)
 8012168:	00c00104 	movi	r3,4
 801216c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8012170:	0005883a 	mov	r2,zero
 8012174:	00003b06 	br	8012264 <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 8012178:	e0bffe17 	ldw	r2,-8(fp)
 801217c:	10800003 	ldbu	r2,0(r2)
 8012180:	10803fcc 	andi	r2,r2,255
 8012184:	108000a0 	cmpeqi	r2,r2,2
 8012188:	1000051e 	bne	r2,zero,80121a0 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 801218c:	e0bfff17 	ldw	r2,-4(fp)
 8012190:	00c00044 	movi	r3,1
 8012194:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8012198:	0005883a 	mov	r2,zero
 801219c:	00003106 	br	8012264 <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80121a0:	0005303a 	rdctl	r2,status
 80121a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80121a8:	e0fffc17 	ldw	r3,-16(fp)
 80121ac:	00bfff84 	movi	r2,-2
 80121b0:	1884703a 	and	r2,r3,r2
 80121b4:	1001703a 	wrctl	status,r2
  
  return context;
 80121b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 80121bc:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 80121c0:	e0bffe17 	ldw	r2,-8(fp)
 80121c4:	10800117 	ldw	r2,4(r2)
 80121c8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 80121cc:	e0bffb17 	ldw	r2,-20(fp)
 80121d0:	1080058b 	ldhu	r2,22(r2)
 80121d4:	10bfffcc 	andi	r2,r2,65535
 80121d8:	10001926 	beq	r2,zero,8012240 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 80121dc:	e0bffb17 	ldw	r2,-20(fp)
 80121e0:	10800417 	ldw	r2,16(r2)
 80121e4:	11000104 	addi	r4,r2,4
 80121e8:	e0fffb17 	ldw	r3,-20(fp)
 80121ec:	19000415 	stw	r4,16(r3)
 80121f0:	10800017 	ldw	r2,0(r2)
 80121f4:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 80121f8:	e0bffb17 	ldw	r2,-20(fp)
 80121fc:	1080058b 	ldhu	r2,22(r2)
 8012200:	10bfffc4 	addi	r2,r2,-1
 8012204:	1007883a 	mov	r3,r2
 8012208:	e0bffb17 	ldw	r2,-20(fp)
 801220c:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 8012210:	e0bffb17 	ldw	r2,-20(fp)
 8012214:	10c00417 	ldw	r3,16(r2)
 8012218:	e0bffb17 	ldw	r2,-20(fp)
 801221c:	10800217 	ldw	r2,8(r2)
 8012220:	1880041e 	bne	r3,r2,8012234 <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 8012224:	e0bffb17 	ldw	r2,-20(fp)
 8012228:	10c00117 	ldw	r3,4(r2)
 801222c:	e0bffb17 	ldw	r2,-20(fp)
 8012230:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 8012234:	e0bfff17 	ldw	r2,-4(fp)
 8012238:	10000005 	stb	zero,0(r2)
 801223c:	00000406 	br	8012250 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 8012240:	e0bfff17 	ldw	r2,-4(fp)
 8012244:	00c007c4 	movi	r3,31
 8012248:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 801224c:	e03ff915 	stw	zero,-28(fp)
 8012250:	e0bffa17 	ldw	r2,-24(fp)
 8012254:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012258:	e0bffd17 	ldw	r2,-12(fp)
 801225c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 8012260:	e0bff917 	ldw	r2,-28(fp)
}
 8012264:	e037883a 	mov	sp,fp
 8012268:	df000017 	ldw	fp,0(sp)
 801226c:	dec00104 	addi	sp,sp,4
 8012270:	f800283a 	ret

08012274 <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 8012274:	defff404 	addi	sp,sp,-48
 8012278:	dfc00b15 	stw	ra,44(sp)
 801227c:	df000a15 	stw	fp,40(sp)
 8012280:	df000a04 	addi	fp,sp,40
 8012284:	e13ffe15 	stw	r4,-8(fp)
 8012288:	2805883a 	mov	r2,r5
 801228c:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8012290:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 8012294:	008200f4 	movhi	r2,2051
 8012298:	10bb4704 	addi	r2,r2,-4836
 801229c:	10800003 	ldbu	r2,0(r2)
 80122a0:	10803fcc 	andi	r2,r2,255
 80122a4:	10000226 	beq	r2,zero,80122b0 <OSQCreate+0x3c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 80122a8:	0005883a 	mov	r2,zero
 80122ac:	00006b06 	br	801245c <OSQCreate+0x1e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80122b0:	0005303a 	rdctl	r2,status
 80122b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80122b8:	e0fff917 	ldw	r3,-28(fp)
 80122bc:	00bfff84 	movi	r2,-2
 80122c0:	1884703a 	and	r2,r3,r2
 80122c4:	1001703a 	wrctl	status,r2
  
  return context;
 80122c8:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 80122cc:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 80122d0:	008200f4 	movhi	r2,2051
 80122d4:	10bb4604 	addi	r2,r2,-4840
 80122d8:	10800017 	ldw	r2,0(r2)
 80122dc:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 80122e0:	008200f4 	movhi	r2,2051
 80122e4:	10bb4604 	addi	r2,r2,-4840
 80122e8:	10800017 	ldw	r2,0(r2)
 80122ec:	10000726 	beq	r2,zero,801230c <OSQCreate+0x98>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 80122f0:	008200f4 	movhi	r2,2051
 80122f4:	10bb4604 	addi	r2,r2,-4840
 80122f8:	10800017 	ldw	r2,0(r2)
 80122fc:	10c00117 	ldw	r3,4(r2)
 8012300:	008200f4 	movhi	r2,2051
 8012304:	10bb4604 	addi	r2,r2,-4840
 8012308:	10c00015 	stw	r3,0(r2)
 801230c:	e0bff717 	ldw	r2,-36(fp)
 8012310:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012314:	e0bffa17 	ldw	r2,-24(fp)
 8012318:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 801231c:	e0bff617 	ldw	r2,-40(fp)
 8012320:	10004d26 	beq	r2,zero,8012458 <OSQCreate+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012324:	0005303a 	rdctl	r2,status
 8012328:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801232c:	e0fffb17 	ldw	r3,-20(fp)
 8012330:	00bfff84 	movi	r2,-2
 8012334:	1884703a 	and	r2,r3,r2
 8012338:	1001703a 	wrctl	status,r2
  
  return context;
 801233c:	e0bffb17 	ldw	r2,-20(fp)
        OS_ENTER_CRITICAL();
 8012340:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 8012344:	008200f4 	movhi	r2,2051
 8012348:	10bb4404 	addi	r2,r2,-4848
 801234c:	10800017 	ldw	r2,0(r2)
 8012350:	e0bff815 	stw	r2,-32(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 8012354:	e0bff817 	ldw	r2,-32(fp)
 8012358:	10003126 	beq	r2,zero,8012420 <OSQCreate+0x1ac>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 801235c:	008200f4 	movhi	r2,2051
 8012360:	10bb4404 	addi	r2,r2,-4848
 8012364:	10800017 	ldw	r2,0(r2)
 8012368:	10c00017 	ldw	r3,0(r2)
 801236c:	008200f4 	movhi	r2,2051
 8012370:	10bb4404 	addi	r2,r2,-4848
 8012374:	10c00015 	stw	r3,0(r2)
 8012378:	e0bff717 	ldw	r2,-36(fp)
 801237c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012380:	e0bffc17 	ldw	r2,-16(fp)
 8012384:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 8012388:	e0bff817 	ldw	r2,-32(fp)
 801238c:	e0fffe17 	ldw	r3,-8(fp)
 8012390:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 8012394:	e0bfff0b 	ldhu	r2,-4(fp)
 8012398:	1085883a 	add	r2,r2,r2
 801239c:	1085883a 	add	r2,r2,r2
 80123a0:	1007883a 	mov	r3,r2
 80123a4:	e0bffe17 	ldw	r2,-8(fp)
 80123a8:	10c7883a 	add	r3,r2,r3
 80123ac:	e0bff817 	ldw	r2,-32(fp)
 80123b0:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 80123b4:	e0bff817 	ldw	r2,-32(fp)
 80123b8:	e0fffe17 	ldw	r3,-8(fp)
 80123bc:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 80123c0:	e0bff817 	ldw	r2,-32(fp)
 80123c4:	e0fffe17 	ldw	r3,-8(fp)
 80123c8:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 80123cc:	e0bff817 	ldw	r2,-32(fp)
 80123d0:	e0ffff0b 	ldhu	r3,-4(fp)
 80123d4:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 80123d8:	e0bff817 	ldw	r2,-32(fp)
 80123dc:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 80123e0:	e0bff617 	ldw	r2,-40(fp)
 80123e4:	00c00084 	movi	r3,2
 80123e8:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 80123ec:	e0bff617 	ldw	r2,-40(fp)
 80123f0:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 80123f4:	e0bff617 	ldw	r2,-40(fp)
 80123f8:	e0fff817 	ldw	r3,-32(fp)
 80123fc:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 8012400:	e0bff617 	ldw	r2,-40(fp)
 8012404:	00c00fc4 	movi	r3,63
 8012408:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 801240c:	e0bff617 	ldw	r2,-40(fp)
 8012410:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 8012414:	e13ff617 	ldw	r4,-40(fp)
 8012418:	800f4c80 	call	800f4c8 <OS_EventWaitListInit>
 801241c:	00000e06 	br	8012458 <OSQCreate+0x1e4>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 8012420:	008200f4 	movhi	r2,2051
 8012424:	10bb4604 	addi	r2,r2,-4840
 8012428:	10c00017 	ldw	r3,0(r2)
 801242c:	e0bff617 	ldw	r2,-40(fp)
 8012430:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 8012434:	008200f4 	movhi	r2,2051
 8012438:	10bb4604 	addi	r2,r2,-4840
 801243c:	e0fff617 	ldw	r3,-40(fp)
 8012440:	10c00015 	stw	r3,0(r2)
 8012444:	e0bff717 	ldw	r2,-36(fp)
 8012448:	e0bffd15 	stw	r2,-12(fp)
 801244c:	e0bffd17 	ldw	r2,-12(fp)
 8012450:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 8012454:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 8012458:	e0bff617 	ldw	r2,-40(fp)
}
 801245c:	e037883a 	mov	sp,fp
 8012460:	dfc00117 	ldw	ra,4(sp)
 8012464:	df000017 	ldw	fp,0(sp)
 8012468:	dec00204 	addi	sp,sp,8
 801246c:	f800283a 	ret

08012470 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 8012470:	defff204 	addi	sp,sp,-56
 8012474:	dfc00d15 	stw	ra,52(sp)
 8012478:	df000c15 	stw	fp,48(sp)
 801247c:	df000c04 	addi	fp,sp,48
 8012480:	e13ffd15 	stw	r4,-12(fp)
 8012484:	2805883a 	mov	r2,r5
 8012488:	e1bfff15 	stw	r6,-4(fp)
 801248c:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8012490:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8012494:	e0bfff17 	ldw	r2,-4(fp)
 8012498:	1000021e 	bne	r2,zero,80124a4 <OSQDel+0x34>
        return (pevent);
 801249c:	e0bffd17 	ldw	r2,-12(fp)
 80124a0:	0000a006 	br	8012724 <OSQDel+0x2b4>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 80124a4:	e0bffd17 	ldw	r2,-12(fp)
 80124a8:	1000051e 	bne	r2,zero,80124c0 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 80124ac:	e0bfff17 	ldw	r2,-4(fp)
 80124b0:	00c00104 	movi	r3,4
 80124b4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 80124b8:	e0bffd17 	ldw	r2,-12(fp)
 80124bc:	00009906 	br	8012724 <OSQDel+0x2b4>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 80124c0:	e0bffd17 	ldw	r2,-12(fp)
 80124c4:	10800003 	ldbu	r2,0(r2)
 80124c8:	10803fcc 	andi	r2,r2,255
 80124cc:	108000a0 	cmpeqi	r2,r2,2
 80124d0:	1000051e 	bne	r2,zero,80124e8 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 80124d4:	e0bfff17 	ldw	r2,-4(fp)
 80124d8:	00c00044 	movi	r3,1
 80124dc:	10c00005 	stb	r3,0(r2)
        return (pevent);
 80124e0:	e0bffd17 	ldw	r2,-12(fp)
 80124e4:	00008f06 	br	8012724 <OSQDel+0x2b4>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 80124e8:	008200f4 	movhi	r2,2051
 80124ec:	10bb4704 	addi	r2,r2,-4836
 80124f0:	10800003 	ldbu	r2,0(r2)
 80124f4:	10803fcc 	andi	r2,r2,255
 80124f8:	10000526 	beq	r2,zero,8012510 <OSQDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 80124fc:	e0bfff17 	ldw	r2,-4(fp)
 8012500:	00c003c4 	movi	r3,15
 8012504:	10c00005 	stb	r3,0(r2)
        return (pevent);
 8012508:	e0bffd17 	ldw	r2,-12(fp)
 801250c:	00008506 	br	8012724 <OSQDel+0x2b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012510:	0005303a 	rdctl	r2,status
 8012514:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012518:	e0fff817 	ldw	r3,-32(fp)
 801251c:	00bfff84 	movi	r2,-2
 8012520:	1884703a 	and	r2,r3,r2
 8012524:	1001703a 	wrctl	status,r2
  
  return context;
 8012528:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 801252c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 8012530:	e0bffd17 	ldw	r2,-12(fp)
 8012534:	10800283 	ldbu	r2,10(r2)
 8012538:	10803fcc 	andi	r2,r2,255
 801253c:	10000326 	beq	r2,zero,801254c <OSQDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 8012540:	00800044 	movi	r2,1
 8012544:	e0bff405 	stb	r2,-48(fp)
 8012548:	00000106 	br	8012550 <OSQDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 801254c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 8012550:	e0bffe03 	ldbu	r2,-8(fp)
 8012554:	10000326 	beq	r2,zero,8012564 <OSQDel+0xf4>
 8012558:	10800060 	cmpeqi	r2,r2,1
 801255c:	1000381e 	bne	r2,zero,8012640 <OSQDel+0x1d0>
 8012560:	00006506 	br	80126f8 <OSQDel+0x288>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 8012564:	e0bff403 	ldbu	r2,-48(fp)
 8012568:	1000261e 	bne	r2,zero,8012604 <OSQDel+0x194>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 801256c:	e0bffd17 	ldw	r2,-12(fp)
 8012570:	00c00fc4 	movi	r3,63
 8012574:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 8012578:	e0bffd17 	ldw	r2,-12(fp)
 801257c:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 8012580:	e0bffd17 	ldw	r2,-12(fp)
 8012584:	10800117 	ldw	r2,4(r2)
 8012588:	e0bff715 	stw	r2,-36(fp)
                 pq->OSQPtr             = OSQFreeList;
 801258c:	008200f4 	movhi	r2,2051
 8012590:	10bb4404 	addi	r2,r2,-4848
 8012594:	10c00017 	ldw	r3,0(r2)
 8012598:	e0bff717 	ldw	r2,-36(fp)
 801259c:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 80125a0:	008200f4 	movhi	r2,2051
 80125a4:	10bb4404 	addi	r2,r2,-4848
 80125a8:	e0fff717 	ldw	r3,-36(fp)
 80125ac:	10c00015 	stw	r3,0(r2)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 80125b0:	e0bffd17 	ldw	r2,-12(fp)
 80125b4:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 80125b8:	008200f4 	movhi	r2,2051
 80125bc:	10bb4604 	addi	r2,r2,-4840
 80125c0:	10c00017 	ldw	r3,0(r2)
 80125c4:	e0bffd17 	ldw	r2,-12(fp)
 80125c8:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 80125cc:	e0bffd17 	ldw	r2,-12(fp)
 80125d0:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 80125d4:	008200f4 	movhi	r2,2051
 80125d8:	10bb4604 	addi	r2,r2,-4840
 80125dc:	e0fffd17 	ldw	r3,-12(fp)
 80125e0:	10c00015 	stw	r3,0(r2)
 80125e4:	e0bff617 	ldw	r2,-40(fp)
 80125e8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80125ec:	e0bff917 	ldw	r2,-28(fp)
 80125f0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 80125f4:	e0bfff17 	ldw	r2,-4(fp)
 80125f8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 80125fc:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 8012600:	00004706 	br	8012720 <OSQDel+0x2b0>
 8012604:	e0bff617 	ldw	r2,-40(fp)
 8012608:	e0bffa15 	stw	r2,-24(fp)
 801260c:	e0bffa17 	ldw	r2,-24(fp)
 8012610:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 8012614:	e0bfff17 	ldw	r2,-4(fp)
 8012618:	00c01244 	movi	r3,73
 801261c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 8012620:	e0bffd17 	ldw	r2,-12(fp)
 8012624:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 8012628:	00003d06 	br	8012720 <OSQDel+0x2b0>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 801262c:	e13ffd17 	ldw	r4,-12(fp)
 8012630:	000b883a 	mov	r5,zero
 8012634:	01800104 	movi	r6,4
 8012638:	000f883a 	mov	r7,zero
 801263c:	800ef280 	call	800ef28 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 8012640:	e0bffd17 	ldw	r2,-12(fp)
 8012644:	10800283 	ldbu	r2,10(r2)
 8012648:	10803fcc 	andi	r2,r2,255
 801264c:	103ff71e 	bne	r2,zero,801262c <OSQDel+0x1bc>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 8012650:	e0bffd17 	ldw	r2,-12(fp)
 8012654:	00c00fc4 	movi	r3,63
 8012658:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 801265c:	e0bffd17 	ldw	r2,-12(fp)
 8012660:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 8012664:	e0bffd17 	ldw	r2,-12(fp)
 8012668:	10800117 	ldw	r2,4(r2)
 801266c:	e0bff715 	stw	r2,-36(fp)
             pq->OSQPtr             = OSQFreeList;
 8012670:	008200f4 	movhi	r2,2051
 8012674:	10bb4404 	addi	r2,r2,-4848
 8012678:	10c00017 	ldw	r3,0(r2)
 801267c:	e0bff717 	ldw	r2,-36(fp)
 8012680:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 8012684:	008200f4 	movhi	r2,2051
 8012688:	10bb4404 	addi	r2,r2,-4848
 801268c:	e0fff717 	ldw	r3,-36(fp)
 8012690:	10c00015 	stw	r3,0(r2)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8012694:	e0bffd17 	ldw	r2,-12(fp)
 8012698:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 801269c:	008200f4 	movhi	r2,2051
 80126a0:	10bb4604 	addi	r2,r2,-4840
 80126a4:	10c00017 	ldw	r3,0(r2)
 80126a8:	e0bffd17 	ldw	r2,-12(fp)
 80126ac:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 80126b0:	e0bffd17 	ldw	r2,-12(fp)
 80126b4:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 80126b8:	008200f4 	movhi	r2,2051
 80126bc:	10bb4604 	addi	r2,r2,-4840
 80126c0:	e0fffd17 	ldw	r3,-12(fp)
 80126c4:	10c00015 	stw	r3,0(r2)
 80126c8:	e0bff617 	ldw	r2,-40(fp)
 80126cc:	e0bffb15 	stw	r2,-20(fp)
 80126d0:	e0bffb17 	ldw	r2,-20(fp)
 80126d4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 80126d8:	e0bff403 	ldbu	r2,-48(fp)
 80126dc:	10800058 	cmpnei	r2,r2,1
 80126e0:	1000011e 	bne	r2,zero,80126e8 <OSQDel+0x278>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 80126e4:	800f9400 	call	800f940 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 80126e8:	e0bfff17 	ldw	r2,-4(fp)
 80126ec:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 80126f0:	e03ff515 	stw	zero,-44(fp)
             break;
 80126f4:	00000a06 	br	8012720 <OSQDel+0x2b0>
 80126f8:	e0bff617 	ldw	r2,-40(fp)
 80126fc:	e0bffc15 	stw	r2,-16(fp)
 8012700:	e0bffc17 	ldw	r2,-16(fp)
 8012704:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 8012708:	e0bfff17 	ldw	r2,-4(fp)
 801270c:	00c001c4 	movi	r3,7
 8012710:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 8012714:	e0bffd17 	ldw	r2,-12(fp)
 8012718:	e0bff515 	stw	r2,-44(fp)
             break;
 801271c:	0001883a 	nop
    }
    return (pevent_return);
 8012720:	e0bff517 	ldw	r2,-44(fp)
}
 8012724:	e037883a 	mov	sp,fp
 8012728:	dfc00117 	ldw	ra,4(sp)
 801272c:	df000017 	ldw	fp,0(sp)
 8012730:	dec00204 	addi	sp,sp,8
 8012734:	f800283a 	ret

08012738 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 8012738:	defffa04 	addi	sp,sp,-24
 801273c:	df000515 	stw	fp,20(sp)
 8012740:	df000504 	addi	fp,sp,20
 8012744:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8012748:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 801274c:	e0bfff17 	ldw	r2,-4(fp)
 8012750:	1000021e 	bne	r2,zero,801275c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 8012754:	00800104 	movi	r2,4
 8012758:	00002106 	br	80127e0 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 801275c:	e0bfff17 	ldw	r2,-4(fp)
 8012760:	10800003 	ldbu	r2,0(r2)
 8012764:	10803fcc 	andi	r2,r2,255
 8012768:	108000a0 	cmpeqi	r2,r2,2
 801276c:	1000021e 	bne	r2,zero,8012778 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 8012770:	00800044 	movi	r2,1
 8012774:	00001a06 	br	80127e0 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012778:	0005303a 	rdctl	r2,status
 801277c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012780:	e0fffd17 	ldw	r3,-12(fp)
 8012784:	00bfff84 	movi	r2,-2
 8012788:	1884703a 	and	r2,r3,r2
 801278c:	1001703a 	wrctl	status,r2
  
  return context;
 8012790:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8012794:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 8012798:	e0bfff17 	ldw	r2,-4(fp)
 801279c:	10800117 	ldw	r2,4(r2)
 80127a0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 80127a4:	e0bffc17 	ldw	r2,-16(fp)
 80127a8:	10c00117 	ldw	r3,4(r2)
 80127ac:	e0bffc17 	ldw	r2,-16(fp)
 80127b0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 80127b4:	e0bffc17 	ldw	r2,-16(fp)
 80127b8:	10c00117 	ldw	r3,4(r2)
 80127bc:	e0bffc17 	ldw	r2,-16(fp)
 80127c0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 80127c4:	e0bffc17 	ldw	r2,-16(fp)
 80127c8:	1000058d 	sth	zero,22(r2)
 80127cc:	e0bffb17 	ldw	r2,-20(fp)
 80127d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80127d4:	e0bffe17 	ldw	r2,-8(fp)
 80127d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 80127dc:	0005883a 	mov	r2,zero
}
 80127e0:	e037883a 	mov	sp,fp
 80127e4:	df000017 	ldw	fp,0(sp)
 80127e8:	dec00104 	addi	sp,sp,4
 80127ec:	f800283a 	ret

080127f0 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 80127f0:	defff304 	addi	sp,sp,-52
 80127f4:	dfc00c15 	stw	ra,48(sp)
 80127f8:	df000b15 	stw	fp,44(sp)
 80127fc:	df000b04 	addi	fp,sp,44
 8012800:	e13ffd15 	stw	r4,-12(fp)
 8012804:	2805883a 	mov	r2,r5
 8012808:	e1bfff15 	stw	r6,-4(fp)
 801280c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8012810:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 8012814:	e0bfff17 	ldw	r2,-4(fp)
 8012818:	1000021e 	bne	r2,zero,8012824 <OSQPend+0x34>
        return ((void *)0);
 801281c:	0005883a 	mov	r2,zero
 8012820:	0000ad06 	br	8012ad8 <OSQPend+0x2e8>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 8012824:	e0bffd17 	ldw	r2,-12(fp)
 8012828:	1000051e 	bne	r2,zero,8012840 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 801282c:	e0bfff17 	ldw	r2,-4(fp)
 8012830:	00c00104 	movi	r3,4
 8012834:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8012838:	0005883a 	mov	r2,zero
 801283c:	0000a606 	br	8012ad8 <OSQPend+0x2e8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 8012840:	e0bffd17 	ldw	r2,-12(fp)
 8012844:	10800003 	ldbu	r2,0(r2)
 8012848:	10803fcc 	andi	r2,r2,255
 801284c:	108000a0 	cmpeqi	r2,r2,2
 8012850:	1000051e 	bne	r2,zero,8012868 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 8012854:	e0bfff17 	ldw	r2,-4(fp)
 8012858:	00c00044 	movi	r3,1
 801285c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8012860:	0005883a 	mov	r2,zero
 8012864:	00009c06 	br	8012ad8 <OSQPend+0x2e8>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 8012868:	008200f4 	movhi	r2,2051
 801286c:	10bb4704 	addi	r2,r2,-4836
 8012870:	10800003 	ldbu	r2,0(r2)
 8012874:	10803fcc 	andi	r2,r2,255
 8012878:	10000526 	beq	r2,zero,8012890 <OSQPend+0xa0>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 801287c:	e0bfff17 	ldw	r2,-4(fp)
 8012880:	00c00084 	movi	r3,2
 8012884:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 8012888:	0005883a 	mov	r2,zero
 801288c:	00009206 	br	8012ad8 <OSQPend+0x2e8>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 8012890:	008200f4 	movhi	r2,2051
 8012894:	10bb3904 	addi	r2,r2,-4892
 8012898:	10800003 	ldbu	r2,0(r2)
 801289c:	10803fcc 	andi	r2,r2,255
 80128a0:	10000526 	beq	r2,zero,80128b8 <OSQPend+0xc8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 80128a4:	e0bfff17 	ldw	r2,-4(fp)
 80128a8:	00c00344 	movi	r3,13
 80128ac:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 80128b0:	0005883a 	mov	r2,zero
 80128b4:	00008806 	br	8012ad8 <OSQPend+0x2e8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80128b8:	0005303a 	rdctl	r2,status
 80128bc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80128c0:	e0fff817 	ldw	r3,-32(fp)
 80128c4:	00bfff84 	movi	r2,-2
 80128c8:	1884703a 	and	r2,r3,r2
 80128cc:	1001703a 	wrctl	status,r2
  
  return context;
 80128d0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 80128d4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 80128d8:	e0bffd17 	ldw	r2,-12(fp)
 80128dc:	10800117 	ldw	r2,4(r2)
 80128e0:	e0bff715 	stw	r2,-36(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 80128e4:	e0bff717 	ldw	r2,-36(fp)
 80128e8:	1080058b 	ldhu	r2,22(r2)
 80128ec:	10bfffcc 	andi	r2,r2,65535
 80128f0:	10001e26 	beq	r2,zero,801296c <OSQPend+0x17c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 80128f4:	e0bff717 	ldw	r2,-36(fp)
 80128f8:	10800417 	ldw	r2,16(r2)
 80128fc:	11000104 	addi	r4,r2,4
 8012900:	e0fff717 	ldw	r3,-36(fp)
 8012904:	19000415 	stw	r4,16(r3)
 8012908:	10800017 	ldw	r2,0(r2)
 801290c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 8012910:	e0bff717 	ldw	r2,-36(fp)
 8012914:	1080058b 	ldhu	r2,22(r2)
 8012918:	10bfffc4 	addi	r2,r2,-1
 801291c:	1007883a 	mov	r3,r2
 8012920:	e0bff717 	ldw	r2,-36(fp)
 8012924:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 8012928:	e0bff717 	ldw	r2,-36(fp)
 801292c:	10c00417 	ldw	r3,16(r2)
 8012930:	e0bff717 	ldw	r2,-36(fp)
 8012934:	10800217 	ldw	r2,8(r2)
 8012938:	1880041e 	bne	r3,r2,801294c <OSQPend+0x15c>
            pq->OSQOut = pq->OSQStart;
 801293c:	e0bff717 	ldw	r2,-36(fp)
 8012940:	10c00117 	ldw	r3,4(r2)
 8012944:	e0bff717 	ldw	r2,-36(fp)
 8012948:	10c00415 	stw	r3,16(r2)
 801294c:	e0bff617 	ldw	r2,-40(fp)
 8012950:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012954:	e0bff917 	ldw	r2,-28(fp)
 8012958:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 801295c:	e0bfff17 	ldw	r2,-4(fp)
 8012960:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 8012964:	e0bff517 	ldw	r2,-44(fp)
 8012968:	00005b06 	br	8012ad8 <OSQPend+0x2e8>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 801296c:	008200f4 	movhi	r2,2051
 8012970:	10bb4804 	addi	r2,r2,-4832
 8012974:	10c00017 	ldw	r3,0(r2)
 8012978:	008200f4 	movhi	r2,2051
 801297c:	10bb4804 	addi	r2,r2,-4832
 8012980:	10800017 	ldw	r2,0(r2)
 8012984:	10800c03 	ldbu	r2,48(r2)
 8012988:	10800114 	ori	r2,r2,4
 801298c:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8012990:	008200f4 	movhi	r2,2051
 8012994:	10bb4804 	addi	r2,r2,-4832
 8012998:	10800017 	ldw	r2,0(r2)
 801299c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 80129a0:	008200f4 	movhi	r2,2051
 80129a4:	10bb4804 	addi	r2,r2,-4832
 80129a8:	10800017 	ldw	r2,0(r2)
 80129ac:	e0fffe0b 	ldhu	r3,-8(fp)
 80129b0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 80129b4:	e13ffd17 	ldw	r4,-12(fp)
 80129b8:	800f0c00 	call	800f0c0 <OS_EventTaskWait>
 80129bc:	e0bff617 	ldw	r2,-40(fp)
 80129c0:	e0bffa15 	stw	r2,-24(fp)
 80129c4:	e0bffa17 	ldw	r2,-24(fp)
 80129c8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 80129cc:	800f9400 	call	800f940 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80129d0:	0005303a 	rdctl	r2,status
 80129d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80129d8:	e0fffb17 	ldw	r3,-20(fp)
 80129dc:	00bfff84 	movi	r2,-2
 80129e0:	1884703a 	and	r2,r3,r2
 80129e4:	1001703a 	wrctl	status,r2
  
  return context;
 80129e8:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 80129ec:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 80129f0:	008200f4 	movhi	r2,2051
 80129f4:	10bb4804 	addi	r2,r2,-4832
 80129f8:	10800017 	ldw	r2,0(r2)
 80129fc:	10800c43 	ldbu	r2,49(r2)
 8012a00:	10803fcc 	andi	r2,r2,255
 8012a04:	10000326 	beq	r2,zero,8012a14 <OSQPend+0x224>
 8012a08:	108000a0 	cmpeqi	r2,r2,2
 8012a0c:	1000091e 	bne	r2,zero,8012a34 <OSQPend+0x244>
 8012a10:	00000d06 	br	8012a48 <OSQPend+0x258>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 8012a14:	008200f4 	movhi	r2,2051
 8012a18:	10bb4804 	addi	r2,r2,-4832
 8012a1c:	10800017 	ldw	r2,0(r2)
 8012a20:	10800917 	ldw	r2,36(r2)
 8012a24:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 8012a28:	e0bfff17 	ldw	r2,-4(fp)
 8012a2c:	10000005 	stb	zero,0(r2)
             break;
 8012a30:	00001006 	br	8012a74 <OSQPend+0x284>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 8012a34:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8012a38:	e0bfff17 	ldw	r2,-4(fp)
 8012a3c:	00c00384 	movi	r3,14
 8012a40:	10c00005 	stb	r3,0(r2)
             break;
 8012a44:	00000b06 	br	8012a74 <OSQPend+0x284>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 8012a48:	008200f4 	movhi	r2,2051
 8012a4c:	10bb4804 	addi	r2,r2,-4832
 8012a50:	10800017 	ldw	r2,0(r2)
 8012a54:	1009883a 	mov	r4,r2
 8012a58:	e17ffd17 	ldw	r5,-12(fp)
 8012a5c:	800f3180 	call	800f318 <OS_EventTaskRemove>
             pmsg = (void *)0;
 8012a60:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8012a64:	e0bfff17 	ldw	r2,-4(fp)
 8012a68:	00c00284 	movi	r3,10
 8012a6c:	10c00005 	stb	r3,0(r2)
             break;
 8012a70:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8012a74:	008200f4 	movhi	r2,2051
 8012a78:	10bb4804 	addi	r2,r2,-4832
 8012a7c:	10800017 	ldw	r2,0(r2)
 8012a80:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8012a84:	008200f4 	movhi	r2,2051
 8012a88:	10bb4804 	addi	r2,r2,-4832
 8012a8c:	10800017 	ldw	r2,0(r2)
 8012a90:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8012a94:	008200f4 	movhi	r2,2051
 8012a98:	10bb4804 	addi	r2,r2,-4832
 8012a9c:	10800017 	ldw	r2,0(r2)
 8012aa0:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8012aa4:	008200f4 	movhi	r2,2051
 8012aa8:	10bb4804 	addi	r2,r2,-4832
 8012aac:	10800017 	ldw	r2,0(r2)
 8012ab0:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 8012ab4:	008200f4 	movhi	r2,2051
 8012ab8:	10bb4804 	addi	r2,r2,-4832
 8012abc:	10800017 	ldw	r2,0(r2)
 8012ac0:	10000915 	stw	zero,36(r2)
 8012ac4:	e0bff617 	ldw	r2,-40(fp)
 8012ac8:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012acc:	e0bffc17 	ldw	r2,-16(fp)
 8012ad0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 8012ad4:	e0bff517 	ldw	r2,-44(fp)
}
 8012ad8:	e037883a 	mov	sp,fp
 8012adc:	dfc00117 	ldw	ra,4(sp)
 8012ae0:	df000017 	ldw	fp,0(sp)
 8012ae4:	dec00204 	addi	sp,sp,8
 8012ae8:	f800283a 	ret

08012aec <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 8012aec:	defff604 	addi	sp,sp,-40
 8012af0:	dfc00915 	stw	ra,36(sp)
 8012af4:	df000815 	stw	fp,32(sp)
 8012af8:	df000804 	addi	fp,sp,32
 8012afc:	e13ffd15 	stw	r4,-12(fp)
 8012b00:	2805883a 	mov	r2,r5
 8012b04:	e1bfff15 	stw	r6,-4(fp)
 8012b08:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8012b0c:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8012b10:	e0bfff17 	ldw	r2,-4(fp)
 8012b14:	1000021e 	bne	r2,zero,8012b20 <OSQPendAbort+0x34>
        return (0);
 8012b18:	0005883a 	mov	r2,zero
 8012b1c:	00004906 	br	8012c44 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 8012b20:	e0bffd17 	ldw	r2,-12(fp)
 8012b24:	1000051e 	bne	r2,zero,8012b3c <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 8012b28:	e0bfff17 	ldw	r2,-4(fp)
 8012b2c:	00c00104 	movi	r3,4
 8012b30:	10c00005 	stb	r3,0(r2)
        return (0);
 8012b34:	0005883a 	mov	r2,zero
 8012b38:	00004206 	br	8012c44 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 8012b3c:	e0bffd17 	ldw	r2,-12(fp)
 8012b40:	10800003 	ldbu	r2,0(r2)
 8012b44:	10803fcc 	andi	r2,r2,255
 8012b48:	108000a0 	cmpeqi	r2,r2,2
 8012b4c:	1000051e 	bne	r2,zero,8012b64 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 8012b50:	e0bfff17 	ldw	r2,-4(fp)
 8012b54:	00c00044 	movi	r3,1
 8012b58:	10c00005 	stb	r3,0(r2)
        return (0);
 8012b5c:	0005883a 	mov	r2,zero
 8012b60:	00003806 	br	8012c44 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012b64:	0005303a 	rdctl	r2,status
 8012b68:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012b6c:	e0fffa17 	ldw	r3,-24(fp)
 8012b70:	00bfff84 	movi	r2,-2
 8012b74:	1884703a 	and	r2,r3,r2
 8012b78:	1001703a 	wrctl	status,r2
  
  return context;
 8012b7c:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 8012b80:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 8012b84:	e0bffd17 	ldw	r2,-12(fp)
 8012b88:	10800283 	ldbu	r2,10(r2)
 8012b8c:	10803fcc 	andi	r2,r2,255
 8012b90:	10002526 	beq	r2,zero,8012c28 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 8012b94:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 8012b98:	e0bffe03 	ldbu	r2,-8(fp)
 8012b9c:	10800060 	cmpeqi	r2,r2,1
 8012ba0:	10000e26 	beq	r2,zero,8012bdc <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 8012ba4:	00000806 	br	8012bc8 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 8012ba8:	e13ffd17 	ldw	r4,-12(fp)
 8012bac:	000b883a 	mov	r5,zero
 8012bb0:	01800104 	movi	r6,4
 8012bb4:	01c00084 	movi	r7,2
 8012bb8:	800ef280 	call	800ef28 <OS_EventTaskRdy>
                     nbr_tasks++;
 8012bbc:	e0bff803 	ldbu	r2,-32(fp)
 8012bc0:	10800044 	addi	r2,r2,1
 8012bc4:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 8012bc8:	e0bffd17 	ldw	r2,-12(fp)
 8012bcc:	10800283 	ldbu	r2,10(r2)
 8012bd0:	10803fcc 	andi	r2,r2,255
 8012bd4:	103ff41e 	bne	r2,zero,8012ba8 <OSQPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 8012bd8:	00000906 	br	8012c00 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 8012bdc:	e13ffd17 	ldw	r4,-12(fp)
 8012be0:	000b883a 	mov	r5,zero
 8012be4:	01800104 	movi	r6,4
 8012be8:	01c00084 	movi	r7,2
 8012bec:	800ef280 	call	800ef28 <OS_EventTaskRdy>
                 nbr_tasks++;
 8012bf0:	e0bff803 	ldbu	r2,-32(fp)
 8012bf4:	10800044 	addi	r2,r2,1
 8012bf8:	e0bff805 	stb	r2,-32(fp)
                 break;
 8012bfc:	0001883a 	nop
 8012c00:	e0bff917 	ldw	r2,-28(fp)
 8012c04:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012c08:	e0bffb17 	ldw	r2,-20(fp)
 8012c0c:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 8012c10:	800f9400 	call	800f940 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 8012c14:	e0bfff17 	ldw	r2,-4(fp)
 8012c18:	00c00384 	movi	r3,14
 8012c1c:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 8012c20:	e0bff803 	ldbu	r2,-32(fp)
 8012c24:	00000706 	br	8012c44 <OSQPendAbort+0x158>
 8012c28:	e0bff917 	ldw	r2,-28(fp)
 8012c2c:	e0bffc15 	stw	r2,-16(fp)
 8012c30:	e0bffc17 	ldw	r2,-16(fp)
 8012c34:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8012c38:	e0bfff17 	ldw	r2,-4(fp)
 8012c3c:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 8012c40:	0005883a 	mov	r2,zero
}
 8012c44:	e037883a 	mov	sp,fp
 8012c48:	dfc00117 	ldw	ra,4(sp)
 8012c4c:	df000017 	ldw	fp,0(sp)
 8012c50:	dec00204 	addi	sp,sp,8
 8012c54:	f800283a 	ret

08012c58 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 8012c58:	defff604 	addi	sp,sp,-40
 8012c5c:	dfc00915 	stw	ra,36(sp)
 8012c60:	df000815 	stw	fp,32(sp)
 8012c64:	df000804 	addi	fp,sp,32
 8012c68:	e13ffe15 	stw	r4,-8(fp)
 8012c6c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 8012c70:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 8012c74:	e0bffe17 	ldw	r2,-8(fp)
 8012c78:	1000021e 	bne	r2,zero,8012c84 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 8012c7c:	00800104 	movi	r2,4
 8012c80:	00004a06 	br	8012dac <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 8012c84:	e0bffe17 	ldw	r2,-8(fp)
 8012c88:	10800003 	ldbu	r2,0(r2)
 8012c8c:	10803fcc 	andi	r2,r2,255
 8012c90:	108000a0 	cmpeqi	r2,r2,2
 8012c94:	1000021e 	bne	r2,zero,8012ca0 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 8012c98:	00800044 	movi	r2,1
 8012c9c:	00004306 	br	8012dac <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012ca0:	0005303a 	rdctl	r2,status
 8012ca4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012ca8:	e0fffa17 	ldw	r3,-24(fp)
 8012cac:	00bfff84 	movi	r2,-2
 8012cb0:	1884703a 	and	r2,r3,r2
 8012cb4:	1001703a 	wrctl	status,r2
  
  return context;
 8012cb8:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 8012cbc:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 8012cc0:	e0bffe17 	ldw	r2,-8(fp)
 8012cc4:	10800283 	ldbu	r2,10(r2)
 8012cc8:	10803fcc 	andi	r2,r2,255
 8012ccc:	10000c26 	beq	r2,zero,8012d00 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8012cd0:	e13ffe17 	ldw	r4,-8(fp)
 8012cd4:	e17fff17 	ldw	r5,-4(fp)
 8012cd8:	01800104 	movi	r6,4
 8012cdc:	000f883a 	mov	r7,zero
 8012ce0:	800ef280 	call	800ef28 <OS_EventTaskRdy>
 8012ce4:	e0bff817 	ldw	r2,-32(fp)
 8012ce8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012cec:	e0bffb17 	ldw	r2,-20(fp)
 8012cf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 8012cf4:	800f9400 	call	800f940 <OS_Sched>
        return (OS_ERR_NONE);
 8012cf8:	0005883a 	mov	r2,zero
 8012cfc:	00002b06 	br	8012dac <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 8012d00:	e0bffe17 	ldw	r2,-8(fp)
 8012d04:	10800117 	ldw	r2,4(r2)
 8012d08:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 8012d0c:	e0bff917 	ldw	r2,-28(fp)
 8012d10:	10c0058b 	ldhu	r3,22(r2)
 8012d14:	e0bff917 	ldw	r2,-28(fp)
 8012d18:	1080050b 	ldhu	r2,20(r2)
 8012d1c:	18ffffcc 	andi	r3,r3,65535
 8012d20:	10bfffcc 	andi	r2,r2,65535
 8012d24:	18800636 	bltu	r3,r2,8012d40 <OSQPost+0xe8>
 8012d28:	e0bff817 	ldw	r2,-32(fp)
 8012d2c:	e0bffc15 	stw	r2,-16(fp)
 8012d30:	e0bffc17 	ldw	r2,-16(fp)
 8012d34:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 8012d38:	00800784 	movi	r2,30
 8012d3c:	00001b06 	br	8012dac <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 8012d40:	e0bff917 	ldw	r2,-28(fp)
 8012d44:	10800317 	ldw	r2,12(r2)
 8012d48:	11000104 	addi	r4,r2,4
 8012d4c:	e0fff917 	ldw	r3,-28(fp)
 8012d50:	19000315 	stw	r4,12(r3)
 8012d54:	e0ffff17 	ldw	r3,-4(fp)
 8012d58:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 8012d5c:	e0bff917 	ldw	r2,-28(fp)
 8012d60:	1080058b 	ldhu	r2,22(r2)
 8012d64:	10800044 	addi	r2,r2,1
 8012d68:	1007883a 	mov	r3,r2
 8012d6c:	e0bff917 	ldw	r2,-28(fp)
 8012d70:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 8012d74:	e0bff917 	ldw	r2,-28(fp)
 8012d78:	10c00317 	ldw	r3,12(r2)
 8012d7c:	e0bff917 	ldw	r2,-28(fp)
 8012d80:	10800217 	ldw	r2,8(r2)
 8012d84:	1880041e 	bne	r3,r2,8012d98 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 8012d88:	e0bff917 	ldw	r2,-28(fp)
 8012d8c:	10c00117 	ldw	r3,4(r2)
 8012d90:	e0bff917 	ldw	r2,-28(fp)
 8012d94:	10c00315 	stw	r3,12(r2)
 8012d98:	e0bff817 	ldw	r2,-32(fp)
 8012d9c:	e0bffd15 	stw	r2,-12(fp)
 8012da0:	e0bffd17 	ldw	r2,-12(fp)
 8012da4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8012da8:	0005883a 	mov	r2,zero
}
 8012dac:	e037883a 	mov	sp,fp
 8012db0:	dfc00117 	ldw	ra,4(sp)
 8012db4:	df000017 	ldw	fp,0(sp)
 8012db8:	dec00204 	addi	sp,sp,8
 8012dbc:	f800283a 	ret

08012dc0 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 8012dc0:	defff604 	addi	sp,sp,-40
 8012dc4:	dfc00915 	stw	ra,36(sp)
 8012dc8:	df000815 	stw	fp,32(sp)
 8012dcc:	df000804 	addi	fp,sp,32
 8012dd0:	e13ffe15 	stw	r4,-8(fp)
 8012dd4:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8012dd8:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8012ddc:	e0bffe17 	ldw	r2,-8(fp)
 8012de0:	1000021e 	bne	r2,zero,8012dec <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 8012de4:	00800104 	movi	r2,4
 8012de8:	00004c06 	br	8012f1c <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 8012dec:	e0bffe17 	ldw	r2,-8(fp)
 8012df0:	10800003 	ldbu	r2,0(r2)
 8012df4:	10803fcc 	andi	r2,r2,255
 8012df8:	108000a0 	cmpeqi	r2,r2,2
 8012dfc:	1000021e 	bne	r2,zero,8012e08 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 8012e00:	00800044 	movi	r2,1
 8012e04:	00004506 	br	8012f1c <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012e08:	0005303a 	rdctl	r2,status
 8012e0c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012e10:	e0fffa17 	ldw	r3,-24(fp)
 8012e14:	00bfff84 	movi	r2,-2
 8012e18:	1884703a 	and	r2,r3,r2
 8012e1c:	1001703a 	wrctl	status,r2
  
  return context;
 8012e20:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 8012e24:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 8012e28:	e0bffe17 	ldw	r2,-8(fp)
 8012e2c:	10800283 	ldbu	r2,10(r2)
 8012e30:	10803fcc 	andi	r2,r2,255
 8012e34:	10000c26 	beq	r2,zero,8012e68 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8012e38:	e13ffe17 	ldw	r4,-8(fp)
 8012e3c:	e17fff17 	ldw	r5,-4(fp)
 8012e40:	01800104 	movi	r6,4
 8012e44:	000f883a 	mov	r7,zero
 8012e48:	800ef280 	call	800ef28 <OS_EventTaskRdy>
 8012e4c:	e0bff817 	ldw	r2,-32(fp)
 8012e50:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8012e54:	e0bffb17 	ldw	r2,-20(fp)
 8012e58:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 8012e5c:	800f9400 	call	800f940 <OS_Sched>
        return (OS_ERR_NONE);
 8012e60:	0005883a 	mov	r2,zero
 8012e64:	00002d06 	br	8012f1c <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 8012e68:	e0bffe17 	ldw	r2,-8(fp)
 8012e6c:	10800117 	ldw	r2,4(r2)
 8012e70:	e0bff915 	stw	r2,-28(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 8012e74:	e0bff917 	ldw	r2,-28(fp)
 8012e78:	10c0058b 	ldhu	r3,22(r2)
 8012e7c:	e0bff917 	ldw	r2,-28(fp)
 8012e80:	1080050b 	ldhu	r2,20(r2)
 8012e84:	18ffffcc 	andi	r3,r3,65535
 8012e88:	10bfffcc 	andi	r2,r2,65535
 8012e8c:	18800636 	bltu	r3,r2,8012ea8 <OSQPostFront+0xe8>
 8012e90:	e0bff817 	ldw	r2,-32(fp)
 8012e94:	e0bffc15 	stw	r2,-16(fp)
 8012e98:	e0bffc17 	ldw	r2,-16(fp)
 8012e9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 8012ea0:	00800784 	movi	r2,30
 8012ea4:	00001d06 	br	8012f1c <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 8012ea8:	e0bff917 	ldw	r2,-28(fp)
 8012eac:	10c00417 	ldw	r3,16(r2)
 8012eb0:	e0bff917 	ldw	r2,-28(fp)
 8012eb4:	10800117 	ldw	r2,4(r2)
 8012eb8:	1880041e 	bne	r3,r2,8012ecc <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 8012ebc:	e0bff917 	ldw	r2,-28(fp)
 8012ec0:	10c00217 	ldw	r3,8(r2)
 8012ec4:	e0bff917 	ldw	r2,-28(fp)
 8012ec8:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 8012ecc:	e0bff917 	ldw	r2,-28(fp)
 8012ed0:	10800417 	ldw	r2,16(r2)
 8012ed4:	10ffff04 	addi	r3,r2,-4
 8012ed8:	e0bff917 	ldw	r2,-28(fp)
 8012edc:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 8012ee0:	e0bff917 	ldw	r2,-28(fp)
 8012ee4:	10800417 	ldw	r2,16(r2)
 8012ee8:	e0ffff17 	ldw	r3,-4(fp)
 8012eec:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 8012ef0:	e0bff917 	ldw	r2,-28(fp)
 8012ef4:	1080058b 	ldhu	r2,22(r2)
 8012ef8:	10800044 	addi	r2,r2,1
 8012efc:	1007883a 	mov	r3,r2
 8012f00:	e0bff917 	ldw	r2,-28(fp)
 8012f04:	10c0058d 	sth	r3,22(r2)
 8012f08:	e0bff817 	ldw	r2,-32(fp)
 8012f0c:	e0bffd15 	stw	r2,-12(fp)
 8012f10:	e0bffd17 	ldw	r2,-12(fp)
 8012f14:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8012f18:	0005883a 	mov	r2,zero
}
 8012f1c:	e037883a 	mov	sp,fp
 8012f20:	dfc00117 	ldw	ra,4(sp)
 8012f24:	df000017 	ldw	fp,0(sp)
 8012f28:	dec00204 	addi	sp,sp,8
 8012f2c:	f800283a 	ret

08012f30 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 8012f30:	defff504 	addi	sp,sp,-44
 8012f34:	dfc00a15 	stw	ra,40(sp)
 8012f38:	df000915 	stw	fp,36(sp)
 8012f3c:	df000904 	addi	fp,sp,36
 8012f40:	e13ffd15 	stw	r4,-12(fp)
 8012f44:	e17ffe15 	stw	r5,-8(fp)
 8012f48:	3005883a 	mov	r2,r6
 8012f4c:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8012f50:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8012f54:	e0bffd17 	ldw	r2,-12(fp)
 8012f58:	1000021e 	bne	r2,zero,8012f64 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 8012f5c:	00800104 	movi	r2,4
 8012f60:	00007106 	br	8013128 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 8012f64:	e0bffd17 	ldw	r2,-12(fp)
 8012f68:	10800003 	ldbu	r2,0(r2)
 8012f6c:	10803fcc 	andi	r2,r2,255
 8012f70:	108000a0 	cmpeqi	r2,r2,2
 8012f74:	1000021e 	bne	r2,zero,8012f80 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 8012f78:	00800044 	movi	r2,1
 8012f7c:	00006a06 	br	8013128 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8012f80:	0005303a 	rdctl	r2,status
 8012f84:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8012f88:	e0fff917 	ldw	r3,-28(fp)
 8012f8c:	00bfff84 	movi	r2,-2
 8012f90:	1884703a 	and	r2,r3,r2
 8012f94:	1001703a 	wrctl	status,r2
  
  return context;
 8012f98:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 8012f9c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 8012fa0:	e0bffd17 	ldw	r2,-12(fp)
 8012fa4:	10800283 	ldbu	r2,10(r2)
 8012fa8:	10803fcc 	andi	r2,r2,255
 8012fac:	10001d26 	beq	r2,zero,8013024 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 8012fb0:	e0bfff03 	ldbu	r2,-4(fp)
 8012fb4:	1080004c 	andi	r2,r2,1
 8012fb8:	10000b26 	beq	r2,zero,8012fe8 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 8012fbc:	00000506 	br	8012fd4 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8012fc0:	e13ffd17 	ldw	r4,-12(fp)
 8012fc4:	e17ffe17 	ldw	r5,-8(fp)
 8012fc8:	01800104 	movi	r6,4
 8012fcc:	000f883a 	mov	r7,zero
 8012fd0:	800ef280 	call	800ef28 <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 8012fd4:	e0bffd17 	ldw	r2,-12(fp)
 8012fd8:	10800283 	ldbu	r2,10(r2)
 8012fdc:	10803fcc 	andi	r2,r2,255
 8012fe0:	103ff71e 	bne	r2,zero,8012fc0 <OSQPostOpt+0x90>
 8012fe4:	00000506 	br	8012ffc <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 8012fe8:	e13ffd17 	ldw	r4,-12(fp)
 8012fec:	e17ffe17 	ldw	r5,-8(fp)
 8012ff0:	01800104 	movi	r6,4
 8012ff4:	000f883a 	mov	r7,zero
 8012ff8:	800ef280 	call	800ef28 <OS_EventTaskRdy>
 8012ffc:	e0bff717 	ldw	r2,-36(fp)
 8013000:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013004:	e0bffa17 	ldw	r2,-24(fp)
 8013008:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 801300c:	e0bfff03 	ldbu	r2,-4(fp)
 8013010:	1080010c 	andi	r2,r2,4
 8013014:	1000011e 	bne	r2,zero,801301c <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 8013018:	800f9400 	call	800f940 <OS_Sched>
        }
        return (OS_ERR_NONE);
 801301c:	0005883a 	mov	r2,zero
 8013020:	00004106 	br	8013128 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 8013024:	e0bffd17 	ldw	r2,-12(fp)
 8013028:	10800117 	ldw	r2,4(r2)
 801302c:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 8013030:	e0bff817 	ldw	r2,-32(fp)
 8013034:	10c0058b 	ldhu	r3,22(r2)
 8013038:	e0bff817 	ldw	r2,-32(fp)
 801303c:	1080050b 	ldhu	r2,20(r2)
 8013040:	18ffffcc 	andi	r3,r3,65535
 8013044:	10bfffcc 	andi	r2,r2,65535
 8013048:	18800636 	bltu	r3,r2,8013064 <OSQPostOpt+0x134>
 801304c:	e0bff717 	ldw	r2,-36(fp)
 8013050:	e0bffb15 	stw	r2,-20(fp)
 8013054:	e0bffb17 	ldw	r2,-20(fp)
 8013058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 801305c:	00800784 	movi	r2,30
 8013060:	00003106 	br	8013128 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 8013064:	e0bfff03 	ldbu	r2,-4(fp)
 8013068:	1080008c 	andi	r2,r2,2
 801306c:	10001326 	beq	r2,zero,80130bc <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 8013070:	e0bff817 	ldw	r2,-32(fp)
 8013074:	10c00417 	ldw	r3,16(r2)
 8013078:	e0bff817 	ldw	r2,-32(fp)
 801307c:	10800117 	ldw	r2,4(r2)
 8013080:	1880041e 	bne	r3,r2,8013094 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 8013084:	e0bff817 	ldw	r2,-32(fp)
 8013088:	10c00217 	ldw	r3,8(r2)
 801308c:	e0bff817 	ldw	r2,-32(fp)
 8013090:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 8013094:	e0bff817 	ldw	r2,-32(fp)
 8013098:	10800417 	ldw	r2,16(r2)
 801309c:	10ffff04 	addi	r3,r2,-4
 80130a0:	e0bff817 	ldw	r2,-32(fp)
 80130a4:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 80130a8:	e0bff817 	ldw	r2,-32(fp)
 80130ac:	10800417 	ldw	r2,16(r2)
 80130b0:	e0fffe17 	ldw	r3,-8(fp)
 80130b4:	10c00015 	stw	r3,0(r2)
 80130b8:	00001006 	br	80130fc <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 80130bc:	e0bff817 	ldw	r2,-32(fp)
 80130c0:	10800317 	ldw	r2,12(r2)
 80130c4:	11000104 	addi	r4,r2,4
 80130c8:	e0fff817 	ldw	r3,-32(fp)
 80130cc:	19000315 	stw	r4,12(r3)
 80130d0:	e0fffe17 	ldw	r3,-8(fp)
 80130d4:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 80130d8:	e0bff817 	ldw	r2,-32(fp)
 80130dc:	10c00317 	ldw	r3,12(r2)
 80130e0:	e0bff817 	ldw	r2,-32(fp)
 80130e4:	10800217 	ldw	r2,8(r2)
 80130e8:	1880041e 	bne	r3,r2,80130fc <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 80130ec:	e0bff817 	ldw	r2,-32(fp)
 80130f0:	10c00117 	ldw	r3,4(r2)
 80130f4:	e0bff817 	ldw	r2,-32(fp)
 80130f8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 80130fc:	e0bff817 	ldw	r2,-32(fp)
 8013100:	1080058b 	ldhu	r2,22(r2)
 8013104:	10800044 	addi	r2,r2,1
 8013108:	1007883a 	mov	r3,r2
 801310c:	e0bff817 	ldw	r2,-32(fp)
 8013110:	10c0058d 	sth	r3,22(r2)
 8013114:	e0bff717 	ldw	r2,-36(fp)
 8013118:	e0bffc15 	stw	r2,-16(fp)
 801311c:	e0bffc17 	ldw	r2,-16(fp)
 8013120:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8013124:	0005883a 	mov	r2,zero
}
 8013128:	e037883a 	mov	sp,fp
 801312c:	dfc00117 	ldw	ra,4(sp)
 8013130:	df000017 	ldw	fp,0(sp)
 8013134:	dec00204 	addi	sp,sp,8
 8013138:	f800283a 	ret

0801313c <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 801313c:	defff604 	addi	sp,sp,-40
 8013140:	df000915 	stw	fp,36(sp)
 8013144:	df000904 	addi	fp,sp,36
 8013148:	e13ffe15 	stw	r4,-8(fp)
 801314c:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 8013150:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 8013154:	e0bffe17 	ldw	r2,-8(fp)
 8013158:	1000021e 	bne	r2,zero,8013164 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 801315c:	00800104 	movi	r2,4
 8013160:	00004906 	br	8013288 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 8013164:	e0bfff17 	ldw	r2,-4(fp)
 8013168:	1000021e 	bne	r2,zero,8013174 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 801316c:	00800244 	movi	r2,9
 8013170:	00004506 	br	8013288 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 8013174:	e0bffe17 	ldw	r2,-8(fp)
 8013178:	10800003 	ldbu	r2,0(r2)
 801317c:	10803fcc 	andi	r2,r2,255
 8013180:	108000a0 	cmpeqi	r2,r2,2
 8013184:	1000021e 	bne	r2,zero,8013190 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 8013188:	00800044 	movi	r2,1
 801318c:	00003e06 	br	8013288 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013190:	0005303a 	rdctl	r2,status
 8013194:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013198:	e0fffc17 	ldw	r3,-16(fp)
 801319c:	00bfff84 	movi	r2,-2
 80131a0:	1884703a 	and	r2,r3,r2
 80131a4:	1001703a 	wrctl	status,r2
  
  return context;
 80131a8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 80131ac:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 80131b0:	e0bffe17 	ldw	r2,-8(fp)
 80131b4:	10c00283 	ldbu	r3,10(r2)
 80131b8:	e0bfff17 	ldw	r2,-4(fp)
 80131bc:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 80131c0:	e0bffe17 	ldw	r2,-8(fp)
 80131c4:	108002c4 	addi	r2,r2,11
 80131c8:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 80131cc:	e0bfff17 	ldw	r2,-4(fp)
 80131d0:	10800204 	addi	r2,r2,8
 80131d4:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 80131d8:	e03ff705 	stb	zero,-36(fp)
 80131dc:	00000b06 	br	801320c <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 80131e0:	e0bff917 	ldw	r2,-28(fp)
 80131e4:	10c00044 	addi	r3,r2,1
 80131e8:	e0fff915 	stw	r3,-28(fp)
 80131ec:	e0fff817 	ldw	r3,-32(fp)
 80131f0:	19000044 	addi	r4,r3,1
 80131f4:	e13ff815 	stw	r4,-32(fp)
 80131f8:	18c00003 	ldbu	r3,0(r3)
 80131fc:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 8013200:	e0bff703 	ldbu	r2,-36(fp)
 8013204:	10800044 	addi	r2,r2,1
 8013208:	e0bff705 	stb	r2,-36(fp)
 801320c:	e0bff703 	ldbu	r2,-36(fp)
 8013210:	108000f0 	cmpltui	r2,r2,3
 8013214:	103ff21e 	bne	r2,zero,80131e0 <OSQQuery+0xa4>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 8013218:	e0bffe17 	ldw	r2,-8(fp)
 801321c:	10800117 	ldw	r2,4(r2)
 8013220:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries > 0) {
 8013224:	e0bffb17 	ldw	r2,-20(fp)
 8013228:	1080058b 	ldhu	r2,22(r2)
 801322c:	10bfffcc 	andi	r2,r2,65535
 8013230:	10000626 	beq	r2,zero,801324c <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 8013234:	e0bffb17 	ldw	r2,-20(fp)
 8013238:	10800417 	ldw	r2,16(r2)
 801323c:	10c00017 	ldw	r3,0(r2)
 8013240:	e0bfff17 	ldw	r2,-4(fp)
 8013244:	10c00015 	stw	r3,0(r2)
 8013248:	00000206 	br	8013254 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 801324c:	e0bfff17 	ldw	r2,-4(fp)
 8013250:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 8013254:	e0bffb17 	ldw	r2,-20(fp)
 8013258:	10c0058b 	ldhu	r3,22(r2)
 801325c:	e0bfff17 	ldw	r2,-4(fp)
 8013260:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 8013264:	e0bffb17 	ldw	r2,-20(fp)
 8013268:	10c0050b 	ldhu	r3,20(r2)
 801326c:	e0bfff17 	ldw	r2,-4(fp)
 8013270:	10c0018d 	sth	r3,6(r2)
 8013274:	e0bffa17 	ldw	r2,-24(fp)
 8013278:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801327c:	e0bffd17 	ldw	r2,-12(fp)
 8013280:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8013284:	0005883a 	mov	r2,zero
}
 8013288:	e037883a 	mov	sp,fp
 801328c:	df000017 	ldw	fp,0(sp)
 8013290:	dec00104 	addi	sp,sp,4
 8013294:	f800283a 	ret

08013298 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 8013298:	defffb04 	addi	sp,sp,-20
 801329c:	dfc00415 	stw	ra,16(sp)
 80132a0:	df000315 	stw	fp,12(sp)
 80132a4:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 80132a8:	010200f4 	movhi	r4,2051
 80132ac:	21134304 	addi	r4,r4,19724
 80132b0:	01407804 	movi	r5,480
 80132b4:	800f88c0 	call	800f88c <OS_MemClr>
    pq1 = &OSQTbl[0];
 80132b8:	008200f4 	movhi	r2,2051
 80132bc:	10934304 	addi	r2,r2,19724
 80132c0:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 80132c4:	008200f4 	movhi	r2,2051
 80132c8:	10934904 	addi	r2,r2,19748
 80132cc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 80132d0:	e03ffd0d 	sth	zero,-12(fp)
 80132d4:	00000c06 	br	8013308 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 80132d8:	e0bffe17 	ldw	r2,-8(fp)
 80132dc:	e0ffff17 	ldw	r3,-4(fp)
 80132e0:	10c00015 	stw	r3,0(r2)
        pq1++;
 80132e4:	e0bffe17 	ldw	r2,-8(fp)
 80132e8:	10800604 	addi	r2,r2,24
 80132ec:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 80132f0:	e0bfff17 	ldw	r2,-4(fp)
 80132f4:	10800604 	addi	r2,r2,24
 80132f8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 80132fc:	e0bffd0b 	ldhu	r2,-12(fp)
 8013300:	10800044 	addi	r2,r2,1
 8013304:	e0bffd0d 	sth	r2,-12(fp)
 8013308:	e0bffd0b 	ldhu	r2,-12(fp)
 801330c:	108004f0 	cmpltui	r2,r2,19
 8013310:	103ff11e 	bne	r2,zero,80132d8 <OS_QInit+0x40>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 8013314:	e0bffe17 	ldw	r2,-8(fp)
 8013318:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 801331c:	008200f4 	movhi	r2,2051
 8013320:	10bb4404 	addi	r2,r2,-4848
 8013324:	00c200f4 	movhi	r3,2051
 8013328:	18d34304 	addi	r3,r3,19724
 801332c:	10c00015 	stw	r3,0(r2)
#endif
}
 8013330:	e037883a 	mov	sp,fp
 8013334:	dfc00117 	ldw	ra,4(sp)
 8013338:	df000017 	ldw	fp,0(sp)
 801333c:	dec00204 	addi	sp,sp,8
 8013340:	f800283a 	ret

08013344 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 8013344:	defffa04 	addi	sp,sp,-24
 8013348:	df000515 	stw	fp,20(sp)
 801334c:	df000504 	addi	fp,sp,20
 8013350:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8013354:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8013358:	e0bfff17 	ldw	r2,-4(fp)
 801335c:	1000021e 	bne	r2,zero,8013368 <OSSemAccept+0x24>
        return (0);
 8013360:	0005883a 	mov	r2,zero
 8013364:	00001f06 	br	80133e4 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8013368:	e0bfff17 	ldw	r2,-4(fp)
 801336c:	10800003 	ldbu	r2,0(r2)
 8013370:	10803fcc 	andi	r2,r2,255
 8013374:	108000e0 	cmpeqi	r2,r2,3
 8013378:	1000021e 	bne	r2,zero,8013384 <OSSemAccept+0x40>
        return (0);
 801337c:	0005883a 	mov	r2,zero
 8013380:	00001806 	br	80133e4 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013384:	0005303a 	rdctl	r2,status
 8013388:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801338c:	e0fffd17 	ldw	r3,-12(fp)
 8013390:	00bfff84 	movi	r2,-2
 8013394:	1884703a 	and	r2,r3,r2
 8013398:	1001703a 	wrctl	status,r2
  
  return context;
 801339c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 80133a0:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 80133a4:	e0bfff17 	ldw	r2,-4(fp)
 80133a8:	1080020b 	ldhu	r2,8(r2)
 80133ac:	e0bffc0d 	sth	r2,-16(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 80133b0:	e0bffc0b 	ldhu	r2,-16(fp)
 80133b4:	10000626 	beq	r2,zero,80133d0 <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 80133b8:	e0bfff17 	ldw	r2,-4(fp)
 80133bc:	1080020b 	ldhu	r2,8(r2)
 80133c0:	10bfffc4 	addi	r2,r2,-1
 80133c4:	1007883a 	mov	r3,r2
 80133c8:	e0bfff17 	ldw	r2,-4(fp)
 80133cc:	10c0020d 	sth	r3,8(r2)
 80133d0:	e0bffb17 	ldw	r2,-20(fp)
 80133d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80133d8:	e0bffe17 	ldw	r2,-8(fp)
 80133dc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 80133e0:	e0bffc0b 	ldhu	r2,-16(fp)
}
 80133e4:	e037883a 	mov	sp,fp
 80133e8:	df000017 	ldw	fp,0(sp)
 80133ec:	dec00104 	addi	sp,sp,4
 80133f0:	f800283a 	ret

080133f4 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 80133f4:	defff904 	addi	sp,sp,-28
 80133f8:	dfc00615 	stw	ra,24(sp)
 80133fc:	df000515 	stw	fp,20(sp)
 8013400:	df000504 	addi	fp,sp,20
 8013404:	2005883a 	mov	r2,r4
 8013408:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 801340c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 8013410:	008200f4 	movhi	r2,2051
 8013414:	10bb4704 	addi	r2,r2,-4836
 8013418:	10800003 	ldbu	r2,0(r2)
 801341c:	10803fcc 	andi	r2,r2,255
 8013420:	10000226 	beq	r2,zero,801342c <OSSemCreate+0x38>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 8013424:	0005883a 	mov	r2,zero
 8013428:	00002d06 	br	80134e0 <OSSemCreate+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801342c:	0005303a 	rdctl	r2,status
 8013430:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013434:	e0fffd17 	ldw	r3,-12(fp)
 8013438:	00bfff84 	movi	r2,-2
 801343c:	1884703a 	and	r2,r3,r2
 8013440:	1001703a 	wrctl	status,r2
  
  return context;
 8013444:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 8013448:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 801344c:	008200f4 	movhi	r2,2051
 8013450:	10bb4604 	addi	r2,r2,-4840
 8013454:	10800017 	ldw	r2,0(r2)
 8013458:	e0bffc15 	stw	r2,-16(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 801345c:	008200f4 	movhi	r2,2051
 8013460:	10bb4604 	addi	r2,r2,-4840
 8013464:	10800017 	ldw	r2,0(r2)
 8013468:	10000726 	beq	r2,zero,8013488 <OSSemCreate+0x94>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 801346c:	008200f4 	movhi	r2,2051
 8013470:	10bb4604 	addi	r2,r2,-4840
 8013474:	10800017 	ldw	r2,0(r2)
 8013478:	10c00117 	ldw	r3,4(r2)
 801347c:	008200f4 	movhi	r2,2051
 8013480:	10bb4604 	addi	r2,r2,-4840
 8013484:	10c00015 	stw	r3,0(r2)
 8013488:	e0bffb17 	ldw	r2,-20(fp)
 801348c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013490:	e0bffe17 	ldw	r2,-8(fp)
 8013494:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 8013498:	e0bffc17 	ldw	r2,-16(fp)
 801349c:	10000f26 	beq	r2,zero,80134dc <OSSemCreate+0xe8>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 80134a0:	e0bffc17 	ldw	r2,-16(fp)
 80134a4:	00c000c4 	movi	r3,3
 80134a8:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 80134ac:	e0bffc17 	ldw	r2,-16(fp)
 80134b0:	e0ffff0b 	ldhu	r3,-4(fp)
 80134b4:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 80134b8:	e0bffc17 	ldw	r2,-16(fp)
 80134bc:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 80134c0:	e0bffc17 	ldw	r2,-16(fp)
 80134c4:	00c00fc4 	movi	r3,63
 80134c8:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 80134cc:	e0bffc17 	ldw	r2,-16(fp)
 80134d0:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 80134d4:	e13ffc17 	ldw	r4,-16(fp)
 80134d8:	800f4c80 	call	800f4c8 <OS_EventWaitListInit>
    }
    return (pevent);
 80134dc:	e0bffc17 	ldw	r2,-16(fp)
}
 80134e0:	e037883a 	mov	sp,fp
 80134e4:	dfc00117 	ldw	ra,4(sp)
 80134e8:	df000017 	ldw	fp,0(sp)
 80134ec:	dec00204 	addi	sp,sp,8
 80134f0:	f800283a 	ret

080134f4 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 80134f4:	defff304 	addi	sp,sp,-52
 80134f8:	dfc00c15 	stw	ra,48(sp)
 80134fc:	df000b15 	stw	fp,44(sp)
 8013500:	df000b04 	addi	fp,sp,44
 8013504:	e13ffd15 	stw	r4,-12(fp)
 8013508:	2805883a 	mov	r2,r5
 801350c:	e1bfff15 	stw	r6,-4(fp)
 8013510:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8013514:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 8013518:	e0bfff17 	ldw	r2,-4(fp)
 801351c:	1000021e 	bne	r2,zero,8013528 <OSSemDel+0x34>
        return (pevent);
 8013520:	e0bffd17 	ldw	r2,-12(fp)
 8013524:	00008806 	br	8013748 <OSSemDel+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 8013528:	e0bffd17 	ldw	r2,-12(fp)
 801352c:	1000051e 	bne	r2,zero,8013544 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 8013530:	e0bfff17 	ldw	r2,-4(fp)
 8013534:	00c00104 	movi	r3,4
 8013538:	10c00005 	stb	r3,0(r2)
        return (pevent);
 801353c:	e0bffd17 	ldw	r2,-12(fp)
 8013540:	00008106 	br	8013748 <OSSemDel+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 8013544:	e0bffd17 	ldw	r2,-12(fp)
 8013548:	10800003 	ldbu	r2,0(r2)
 801354c:	10803fcc 	andi	r2,r2,255
 8013550:	108000e0 	cmpeqi	r2,r2,3
 8013554:	1000051e 	bne	r2,zero,801356c <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 8013558:	e0bfff17 	ldw	r2,-4(fp)
 801355c:	00c00044 	movi	r3,1
 8013560:	10c00005 	stb	r3,0(r2)
        return (pevent);
 8013564:	e0bffd17 	ldw	r2,-12(fp)
 8013568:	00007706 	br	8013748 <OSSemDel+0x254>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 801356c:	008200f4 	movhi	r2,2051
 8013570:	10bb4704 	addi	r2,r2,-4836
 8013574:	10800003 	ldbu	r2,0(r2)
 8013578:	10803fcc 	andi	r2,r2,255
 801357c:	10000526 	beq	r2,zero,8013594 <OSSemDel+0xa0>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 8013580:	e0bfff17 	ldw	r2,-4(fp)
 8013584:	00c003c4 	movi	r3,15
 8013588:	10c00005 	stb	r3,0(r2)
        return (pevent);
 801358c:	e0bffd17 	ldw	r2,-12(fp)
 8013590:	00006d06 	br	8013748 <OSSemDel+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013594:	0005303a 	rdctl	r2,status
 8013598:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801359c:	e0fff817 	ldw	r3,-32(fp)
 80135a0:	00bfff84 	movi	r2,-2
 80135a4:	1884703a 	and	r2,r3,r2
 80135a8:	1001703a 	wrctl	status,r2
  
  return context;
 80135ac:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 80135b0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 80135b4:	e0bffd17 	ldw	r2,-12(fp)
 80135b8:	10800283 	ldbu	r2,10(r2)
 80135bc:	10803fcc 	andi	r2,r2,255
 80135c0:	10000326 	beq	r2,zero,80135d0 <OSSemDel+0xdc>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 80135c4:	00800044 	movi	r2,1
 80135c8:	e0bff505 	stb	r2,-44(fp)
 80135cc:	00000106 	br	80135d4 <OSSemDel+0xe0>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 80135d0:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 80135d4:	e0bffe03 	ldbu	r2,-8(fp)
 80135d8:	10000326 	beq	r2,zero,80135e8 <OSSemDel+0xf4>
 80135dc:	10800060 	cmpeqi	r2,r2,1
 80135e0:	10002c1e 	bne	r2,zero,8013694 <OSSemDel+0x1a0>
 80135e4:	00004d06 	br	801371c <OSSemDel+0x228>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 80135e8:	e0bff503 	ldbu	r2,-44(fp)
 80135ec:	10001a1e 	bne	r2,zero,8013658 <OSSemDel+0x164>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 80135f0:	e0bffd17 	ldw	r2,-12(fp)
 80135f4:	00c00fc4 	movi	r3,63
 80135f8:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 80135fc:	e0bffd17 	ldw	r2,-12(fp)
 8013600:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 8013604:	e0bffd17 	ldw	r2,-12(fp)
 8013608:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 801360c:	008200f4 	movhi	r2,2051
 8013610:	10bb4604 	addi	r2,r2,-4840
 8013614:	10c00017 	ldw	r3,0(r2)
 8013618:	e0bffd17 	ldw	r2,-12(fp)
 801361c:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 8013620:	e0bffd17 	ldw	r2,-12(fp)
 8013624:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 8013628:	008200f4 	movhi	r2,2051
 801362c:	10bb4604 	addi	r2,r2,-4840
 8013630:	e0fffd17 	ldw	r3,-12(fp)
 8013634:	10c00015 	stw	r3,0(r2)
 8013638:	e0bff717 	ldw	r2,-36(fp)
 801363c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013640:	e0bff917 	ldw	r2,-28(fp)
 8013644:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 8013648:	e0bfff17 	ldw	r2,-4(fp)
 801364c:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 8013650:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 8013654:	00003b06 	br	8013744 <OSSemDel+0x250>
 8013658:	e0bff717 	ldw	r2,-36(fp)
 801365c:	e0bffa15 	stw	r2,-24(fp)
 8013660:	e0bffa17 	ldw	r2,-24(fp)
 8013664:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 8013668:	e0bfff17 	ldw	r2,-4(fp)
 801366c:	00c01244 	movi	r3,73
 8013670:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 8013674:	e0bffd17 	ldw	r2,-12(fp)
 8013678:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 801367c:	00003106 	br	8013744 <OSSemDel+0x250>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 8013680:	e13ffd17 	ldw	r4,-12(fp)
 8013684:	000b883a 	mov	r5,zero
 8013688:	01800044 	movi	r6,1
 801368c:	000f883a 	mov	r7,zero
 8013690:	800ef280 	call	800ef28 <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 8013694:	e0bffd17 	ldw	r2,-12(fp)
 8013698:	10800283 	ldbu	r2,10(r2)
 801369c:	10803fcc 	andi	r2,r2,255
 80136a0:	103ff71e 	bne	r2,zero,8013680 <OSSemDel+0x18c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 80136a4:	e0bffd17 	ldw	r2,-12(fp)
 80136a8:	00c00fc4 	movi	r3,63
 80136ac:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 80136b0:	e0bffd17 	ldw	r2,-12(fp)
 80136b4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 80136b8:	e0bffd17 	ldw	r2,-12(fp)
 80136bc:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 80136c0:	008200f4 	movhi	r2,2051
 80136c4:	10bb4604 	addi	r2,r2,-4840
 80136c8:	10c00017 	ldw	r3,0(r2)
 80136cc:	e0bffd17 	ldw	r2,-12(fp)
 80136d0:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 80136d4:	e0bffd17 	ldw	r2,-12(fp)
 80136d8:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 80136dc:	008200f4 	movhi	r2,2051
 80136e0:	10bb4604 	addi	r2,r2,-4840
 80136e4:	e0fffd17 	ldw	r3,-12(fp)
 80136e8:	10c00015 	stw	r3,0(r2)
 80136ec:	e0bff717 	ldw	r2,-36(fp)
 80136f0:	e0bffb15 	stw	r2,-20(fp)
 80136f4:	e0bffb17 	ldw	r2,-20(fp)
 80136f8:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 80136fc:	e0bff503 	ldbu	r2,-44(fp)
 8013700:	10800058 	cmpnei	r2,r2,1
 8013704:	1000011e 	bne	r2,zero,801370c <OSSemDel+0x218>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 8013708:	800f9400 	call	800f940 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 801370c:	e0bfff17 	ldw	r2,-4(fp)
 8013710:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 8013714:	e03ff615 	stw	zero,-40(fp)
             break;
 8013718:	00000a06 	br	8013744 <OSSemDel+0x250>
 801371c:	e0bff717 	ldw	r2,-36(fp)
 8013720:	e0bffc15 	stw	r2,-16(fp)
 8013724:	e0bffc17 	ldw	r2,-16(fp)
 8013728:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 801372c:	e0bfff17 	ldw	r2,-4(fp)
 8013730:	00c001c4 	movi	r3,7
 8013734:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 8013738:	e0bffd17 	ldw	r2,-12(fp)
 801373c:	e0bff615 	stw	r2,-40(fp)
             break;
 8013740:	0001883a 	nop
    }
    return (pevent_return);
 8013744:	e0bff617 	ldw	r2,-40(fp)
}
 8013748:	e037883a 	mov	sp,fp
 801374c:	dfc00117 	ldw	ra,4(sp)
 8013750:	df000017 	ldw	fp,0(sp)
 8013754:	dec00204 	addi	sp,sp,8
 8013758:	f800283a 	ret

0801375c <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 801375c:	defff504 	addi	sp,sp,-44
 8013760:	dfc00a15 	stw	ra,40(sp)
 8013764:	df000915 	stw	fp,36(sp)
 8013768:	df000904 	addi	fp,sp,36
 801376c:	e13ffd15 	stw	r4,-12(fp)
 8013770:	2805883a 	mov	r2,r5
 8013774:	e1bfff15 	stw	r6,-4(fp)
 8013778:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 801377c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 8013780:	e0bfff17 	ldw	r2,-4(fp)
 8013784:	1000011e 	bne	r2,zero,801378c <OSSemPend+0x30>
        return;
 8013788:	00008906 	br	80139b0 <OSSemPend+0x254>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 801378c:	e0bffd17 	ldw	r2,-12(fp)
 8013790:	1000041e 	bne	r2,zero,80137a4 <OSSemPend+0x48>
        *perr = OS_ERR_PEVENT_NULL;
 8013794:	e0bfff17 	ldw	r2,-4(fp)
 8013798:	00c00104 	movi	r3,4
 801379c:	10c00005 	stb	r3,0(r2)
        return;
 80137a0:	00008306 	br	80139b0 <OSSemPend+0x254>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 80137a4:	e0bffd17 	ldw	r2,-12(fp)
 80137a8:	10800003 	ldbu	r2,0(r2)
 80137ac:	10803fcc 	andi	r2,r2,255
 80137b0:	108000e0 	cmpeqi	r2,r2,3
 80137b4:	1000041e 	bne	r2,zero,80137c8 <OSSemPend+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 80137b8:	e0bfff17 	ldw	r2,-4(fp)
 80137bc:	00c00044 	movi	r3,1
 80137c0:	10c00005 	stb	r3,0(r2)
        return;
 80137c4:	00007a06 	br	80139b0 <OSSemPend+0x254>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 80137c8:	008200f4 	movhi	r2,2051
 80137cc:	10bb4704 	addi	r2,r2,-4836
 80137d0:	10800003 	ldbu	r2,0(r2)
 80137d4:	10803fcc 	andi	r2,r2,255
 80137d8:	10000426 	beq	r2,zero,80137ec <OSSemPend+0x90>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 80137dc:	e0bfff17 	ldw	r2,-4(fp)
 80137e0:	00c00084 	movi	r3,2
 80137e4:	10c00005 	stb	r3,0(r2)
        return;
 80137e8:	00007106 	br	80139b0 <OSSemPend+0x254>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 80137ec:	008200f4 	movhi	r2,2051
 80137f0:	10bb3904 	addi	r2,r2,-4892
 80137f4:	10800003 	ldbu	r2,0(r2)
 80137f8:	10803fcc 	andi	r2,r2,255
 80137fc:	10000426 	beq	r2,zero,8013810 <OSSemPend+0xb4>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 8013800:	e0bfff17 	ldw	r2,-4(fp)
 8013804:	00c00344 	movi	r3,13
 8013808:	10c00005 	stb	r3,0(r2)
        return;
 801380c:	00006806 	br	80139b0 <OSSemPend+0x254>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013810:	0005303a 	rdctl	r2,status
 8013814:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013818:	e0fff817 	ldw	r3,-32(fp)
 801381c:	00bfff84 	movi	r2,-2
 8013820:	1884703a 	and	r2,r3,r2
 8013824:	1001703a 	wrctl	status,r2
  
  return context;
 8013828:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 801382c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 8013830:	e0bffd17 	ldw	r2,-12(fp)
 8013834:	1080020b 	ldhu	r2,8(r2)
 8013838:	10bfffcc 	andi	r2,r2,65535
 801383c:	10000d26 	beq	r2,zero,8013874 <OSSemPend+0x118>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 8013840:	e0bffd17 	ldw	r2,-12(fp)
 8013844:	1080020b 	ldhu	r2,8(r2)
 8013848:	10bfffc4 	addi	r2,r2,-1
 801384c:	1007883a 	mov	r3,r2
 8013850:	e0bffd17 	ldw	r2,-12(fp)
 8013854:	10c0020d 	sth	r3,8(r2)
 8013858:	e0bff717 	ldw	r2,-36(fp)
 801385c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013860:	e0bff917 	ldw	r2,-28(fp)
 8013864:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 8013868:	e0bfff17 	ldw	r2,-4(fp)
 801386c:	10000005 	stb	zero,0(r2)
        return;
 8013870:	00004f06 	br	80139b0 <OSSemPend+0x254>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 8013874:	008200f4 	movhi	r2,2051
 8013878:	10bb4804 	addi	r2,r2,-4832
 801387c:	10c00017 	ldw	r3,0(r2)
 8013880:	008200f4 	movhi	r2,2051
 8013884:	10bb4804 	addi	r2,r2,-4832
 8013888:	10800017 	ldw	r2,0(r2)
 801388c:	10800c03 	ldbu	r2,48(r2)
 8013890:	10800054 	ori	r2,r2,1
 8013894:	18800c05 	stb	r2,48(r3)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 8013898:	008200f4 	movhi	r2,2051
 801389c:	10bb4804 	addi	r2,r2,-4832
 80138a0:	10800017 	ldw	r2,0(r2)
 80138a4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 80138a8:	008200f4 	movhi	r2,2051
 80138ac:	10bb4804 	addi	r2,r2,-4832
 80138b0:	10800017 	ldw	r2,0(r2)
 80138b4:	e0fffe0b 	ldhu	r3,-8(fp)
 80138b8:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 80138bc:	e13ffd17 	ldw	r4,-12(fp)
 80138c0:	800f0c00 	call	800f0c0 <OS_EventTaskWait>
 80138c4:	e0bff717 	ldw	r2,-36(fp)
 80138c8:	e0bffa15 	stw	r2,-24(fp)
 80138cc:	e0bffa17 	ldw	r2,-24(fp)
 80138d0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 80138d4:	800f9400 	call	800f940 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80138d8:	0005303a 	rdctl	r2,status
 80138dc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80138e0:	e0fffb17 	ldw	r3,-20(fp)
 80138e4:	00bfff84 	movi	r2,-2
 80138e8:	1884703a 	and	r2,r3,r2
 80138ec:	1001703a 	wrctl	status,r2
  
  return context;
 80138f0:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 80138f4:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 80138f8:	008200f4 	movhi	r2,2051
 80138fc:	10bb4804 	addi	r2,r2,-4832
 8013900:	10800017 	ldw	r2,0(r2)
 8013904:	10800c43 	ldbu	r2,49(r2)
 8013908:	10803fcc 	andi	r2,r2,255
 801390c:	10000326 	beq	r2,zero,801391c <OSSemPend+0x1c0>
 8013910:	108000a0 	cmpeqi	r2,r2,2
 8013914:	1000041e 	bne	r2,zero,8013928 <OSSemPend+0x1cc>
 8013918:	00000706 	br	8013938 <OSSemPend+0x1dc>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 801391c:	e0bfff17 	ldw	r2,-4(fp)
 8013920:	10000005 	stb	zero,0(r2)
             break;
 8013924:	00000e06 	br	8013960 <OSSemPend+0x204>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 8013928:	e0bfff17 	ldw	r2,-4(fp)
 801392c:	00c00384 	movi	r3,14
 8013930:	10c00005 	stb	r3,0(r2)
             break;
 8013934:	00000a06 	br	8013960 <OSSemPend+0x204>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 8013938:	008200f4 	movhi	r2,2051
 801393c:	10bb4804 	addi	r2,r2,-4832
 8013940:	10800017 	ldw	r2,0(r2)
 8013944:	1009883a 	mov	r4,r2
 8013948:	e17ffd17 	ldw	r5,-12(fp)
 801394c:	800f3180 	call	800f318 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 8013950:	e0bfff17 	ldw	r2,-4(fp)
 8013954:	00c00284 	movi	r3,10
 8013958:	10c00005 	stb	r3,0(r2)
             break;
 801395c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 8013960:	008200f4 	movhi	r2,2051
 8013964:	10bb4804 	addi	r2,r2,-4832
 8013968:	10800017 	ldw	r2,0(r2)
 801396c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 8013970:	008200f4 	movhi	r2,2051
 8013974:	10bb4804 	addi	r2,r2,-4832
 8013978:	10800017 	ldw	r2,0(r2)
 801397c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 8013980:	008200f4 	movhi	r2,2051
 8013984:	10bb4804 	addi	r2,r2,-4832
 8013988:	10800017 	ldw	r2,0(r2)
 801398c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 8013990:	008200f4 	movhi	r2,2051
 8013994:	10bb4804 	addi	r2,r2,-4832
 8013998:	10800017 	ldw	r2,0(r2)
 801399c:	10000815 	stw	zero,32(r2)
 80139a0:	e0bff717 	ldw	r2,-36(fp)
 80139a4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80139a8:	e0bffc17 	ldw	r2,-16(fp)
 80139ac:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
}
 80139b0:	e037883a 	mov	sp,fp
 80139b4:	dfc00117 	ldw	ra,4(sp)
 80139b8:	df000017 	ldw	fp,0(sp)
 80139bc:	dec00204 	addi	sp,sp,8
 80139c0:	f800283a 	ret

080139c4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 80139c4:	defff604 	addi	sp,sp,-40
 80139c8:	dfc00915 	stw	ra,36(sp)
 80139cc:	df000815 	stw	fp,32(sp)
 80139d0:	df000804 	addi	fp,sp,32
 80139d4:	e13ffd15 	stw	r4,-12(fp)
 80139d8:	2805883a 	mov	r2,r5
 80139dc:	e1bfff15 	stw	r6,-4(fp)
 80139e0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 80139e4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 80139e8:	e0bfff17 	ldw	r2,-4(fp)
 80139ec:	1000021e 	bne	r2,zero,80139f8 <OSSemPendAbort+0x34>
        return (0);
 80139f0:	0005883a 	mov	r2,zero
 80139f4:	00004906 	br	8013b1c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 80139f8:	e0bffd17 	ldw	r2,-12(fp)
 80139fc:	1000051e 	bne	r2,zero,8013a14 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 8013a00:	e0bfff17 	ldw	r2,-4(fp)
 8013a04:	00c00104 	movi	r3,4
 8013a08:	10c00005 	stb	r3,0(r2)
        return (0);
 8013a0c:	0005883a 	mov	r2,zero
 8013a10:	00004206 	br	8013b1c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8013a14:	e0bffd17 	ldw	r2,-12(fp)
 8013a18:	10800003 	ldbu	r2,0(r2)
 8013a1c:	10803fcc 	andi	r2,r2,255
 8013a20:	108000e0 	cmpeqi	r2,r2,3
 8013a24:	1000051e 	bne	r2,zero,8013a3c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 8013a28:	e0bfff17 	ldw	r2,-4(fp)
 8013a2c:	00c00044 	movi	r3,1
 8013a30:	10c00005 	stb	r3,0(r2)
        return (0);
 8013a34:	0005883a 	mov	r2,zero
 8013a38:	00003806 	br	8013b1c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013a3c:	0005303a 	rdctl	r2,status
 8013a40:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013a44:	e0fffa17 	ldw	r3,-24(fp)
 8013a48:	00bfff84 	movi	r2,-2
 8013a4c:	1884703a 	and	r2,r3,r2
 8013a50:	1001703a 	wrctl	status,r2
  
  return context;
 8013a54:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 8013a58:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 8013a5c:	e0bffd17 	ldw	r2,-12(fp)
 8013a60:	10800283 	ldbu	r2,10(r2)
 8013a64:	10803fcc 	andi	r2,r2,255
 8013a68:	10002526 	beq	r2,zero,8013b00 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 8013a6c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 8013a70:	e0bffe03 	ldbu	r2,-8(fp)
 8013a74:	10800060 	cmpeqi	r2,r2,1
 8013a78:	10000e26 	beq	r2,zero,8013ab4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 8013a7c:	00000806 	br	8013aa0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 8013a80:	e13ffd17 	ldw	r4,-12(fp)
 8013a84:	000b883a 	mov	r5,zero
 8013a88:	01800044 	movi	r6,1
 8013a8c:	01c00084 	movi	r7,2
 8013a90:	800ef280 	call	800ef28 <OS_EventTaskRdy>
                     nbr_tasks++;
 8013a94:	e0bff803 	ldbu	r2,-32(fp)
 8013a98:	10800044 	addi	r2,r2,1
 8013a9c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 8013aa0:	e0bffd17 	ldw	r2,-12(fp)
 8013aa4:	10800283 	ldbu	r2,10(r2)
 8013aa8:	10803fcc 	andi	r2,r2,255
 8013aac:	103ff41e 	bne	r2,zero,8013a80 <OSSemPendAbort+0xbc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 8013ab0:	00000906 	br	8013ad8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 8013ab4:	e13ffd17 	ldw	r4,-12(fp)
 8013ab8:	000b883a 	mov	r5,zero
 8013abc:	01800044 	movi	r6,1
 8013ac0:	01c00084 	movi	r7,2
 8013ac4:	800ef280 	call	800ef28 <OS_EventTaskRdy>
                 nbr_tasks++;
 8013ac8:	e0bff803 	ldbu	r2,-32(fp)
 8013acc:	10800044 	addi	r2,r2,1
 8013ad0:	e0bff805 	stb	r2,-32(fp)
                 break;
 8013ad4:	0001883a 	nop
 8013ad8:	e0bff917 	ldw	r2,-28(fp)
 8013adc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013ae0:	e0bffb17 	ldw	r2,-20(fp)
 8013ae4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 8013ae8:	800f9400 	call	800f940 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 8013aec:	e0bfff17 	ldw	r2,-4(fp)
 8013af0:	00c00384 	movi	r3,14
 8013af4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 8013af8:	e0bff803 	ldbu	r2,-32(fp)
 8013afc:	00000706 	br	8013b1c <OSSemPendAbort+0x158>
 8013b00:	e0bff917 	ldw	r2,-28(fp)
 8013b04:	e0bffc15 	stw	r2,-16(fp)
 8013b08:	e0bffc17 	ldw	r2,-16(fp)
 8013b0c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8013b10:	e0bfff17 	ldw	r2,-4(fp)
 8013b14:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 8013b18:	0005883a 	mov	r2,zero
}
 8013b1c:	e037883a 	mov	sp,fp
 8013b20:	dfc00117 	ldw	ra,4(sp)
 8013b24:	df000017 	ldw	fp,0(sp)
 8013b28:	dec00204 	addi	sp,sp,8
 8013b2c:	f800283a 	ret

08013b30 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 8013b30:	defff804 	addi	sp,sp,-32
 8013b34:	dfc00715 	stw	ra,28(sp)
 8013b38:	df000615 	stw	fp,24(sp)
 8013b3c:	df000604 	addi	fp,sp,24
 8013b40:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8013b44:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8013b48:	e0bfff17 	ldw	r2,-4(fp)
 8013b4c:	1000021e 	bne	r2,zero,8013b58 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 8013b50:	00800104 	movi	r2,4
 8013b54:	00003506 	br	8013c2c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8013b58:	e0bfff17 	ldw	r2,-4(fp)
 8013b5c:	10800003 	ldbu	r2,0(r2)
 8013b60:	10803fcc 	andi	r2,r2,255
 8013b64:	108000e0 	cmpeqi	r2,r2,3
 8013b68:	1000021e 	bne	r2,zero,8013b74 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 8013b6c:	00800044 	movi	r2,1
 8013b70:	00002e06 	br	8013c2c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013b74:	0005303a 	rdctl	r2,status
 8013b78:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013b7c:	e0fffb17 	ldw	r3,-20(fp)
 8013b80:	00bfff84 	movi	r2,-2
 8013b84:	1884703a 	and	r2,r3,r2
 8013b88:	1001703a 	wrctl	status,r2
  
  return context;
 8013b8c:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 8013b90:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 8013b94:	e0bfff17 	ldw	r2,-4(fp)
 8013b98:	10800283 	ldbu	r2,10(r2)
 8013b9c:	10803fcc 	andi	r2,r2,255
 8013ba0:	10000c26 	beq	r2,zero,8013bd4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 8013ba4:	e13fff17 	ldw	r4,-4(fp)
 8013ba8:	000b883a 	mov	r5,zero
 8013bac:	01800044 	movi	r6,1
 8013bb0:	000f883a 	mov	r7,zero
 8013bb4:	800ef280 	call	800ef28 <OS_EventTaskRdy>
 8013bb8:	e0bffa17 	ldw	r2,-24(fp)
 8013bbc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013bc0:	e0bffc17 	ldw	r2,-16(fp)
 8013bc4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 8013bc8:	800f9400 	call	800f940 <OS_Sched>
        return (OS_ERR_NONE);
 8013bcc:	0005883a 	mov	r2,zero
 8013bd0:	00001606 	br	8013c2c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 8013bd4:	e0bfff17 	ldw	r2,-4(fp)
 8013bd8:	1080020b 	ldhu	r2,8(r2)
 8013bdc:	10ffffcc 	andi	r3,r2,65535
 8013be0:	00bfffd4 	movui	r2,65535
 8013be4:	18800c26 	beq	r3,r2,8013c18 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 8013be8:	e0bfff17 	ldw	r2,-4(fp)
 8013bec:	1080020b 	ldhu	r2,8(r2)
 8013bf0:	10800044 	addi	r2,r2,1
 8013bf4:	1007883a 	mov	r3,r2
 8013bf8:	e0bfff17 	ldw	r2,-4(fp)
 8013bfc:	10c0020d 	sth	r3,8(r2)
 8013c00:	e0bffa17 	ldw	r2,-24(fp)
 8013c04:	e0bffd15 	stw	r2,-12(fp)
 8013c08:	e0bffd17 	ldw	r2,-12(fp)
 8013c0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 8013c10:	0005883a 	mov	r2,zero
 8013c14:	00000506 	br	8013c2c <OSSemPost+0xfc>
 8013c18:	e0bffa17 	ldw	r2,-24(fp)
 8013c1c:	e0bffe15 	stw	r2,-8(fp)
 8013c20:	e0bffe17 	ldw	r2,-8(fp)
 8013c24:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 8013c28:	00800c84 	movi	r2,50
}
 8013c2c:	e037883a 	mov	sp,fp
 8013c30:	dfc00117 	ldw	ra,4(sp)
 8013c34:	df000017 	ldw	fp,0(sp)
 8013c38:	dec00204 	addi	sp,sp,8
 8013c3c:	f800283a 	ret

08013c40 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 8013c40:	defff704 	addi	sp,sp,-36
 8013c44:	df000815 	stw	fp,32(sp)
 8013c48:	df000804 	addi	fp,sp,32
 8013c4c:	e13ffe15 	stw	r4,-8(fp)
 8013c50:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 8013c54:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 8013c58:	e0bffe17 	ldw	r2,-8(fp)
 8013c5c:	1000021e 	bne	r2,zero,8013c68 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 8013c60:	00800104 	movi	r2,4
 8013c64:	00003606 	br	8013d40 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 8013c68:	e0bfff17 	ldw	r2,-4(fp)
 8013c6c:	1000021e 	bne	r2,zero,8013c78 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 8013c70:	00800244 	movi	r2,9
 8013c74:	00003206 	br	8013d40 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 8013c78:	e0bffe17 	ldw	r2,-8(fp)
 8013c7c:	10800003 	ldbu	r2,0(r2)
 8013c80:	10803fcc 	andi	r2,r2,255
 8013c84:	108000e0 	cmpeqi	r2,r2,3
 8013c88:	1000021e 	bne	r2,zero,8013c94 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 8013c8c:	00800044 	movi	r2,1
 8013c90:	00002b06 	br	8013d40 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013c94:	0005303a 	rdctl	r2,status
 8013c98:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013c9c:	e0fffc17 	ldw	r3,-16(fp)
 8013ca0:	00bfff84 	movi	r2,-2
 8013ca4:	1884703a 	and	r2,r3,r2
 8013ca8:	1001703a 	wrctl	status,r2
  
  return context;
 8013cac:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 8013cb0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 8013cb4:	e0bffe17 	ldw	r2,-8(fp)
 8013cb8:	10c00283 	ldbu	r3,10(r2)
 8013cbc:	e0bfff17 	ldw	r2,-4(fp)
 8013cc0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 8013cc4:	e0bffe17 	ldw	r2,-8(fp)
 8013cc8:	108002c4 	addi	r2,r2,11
 8013ccc:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 8013cd0:	e0bfff17 	ldw	r2,-4(fp)
 8013cd4:	10800084 	addi	r2,r2,2
 8013cd8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 8013cdc:	e03ffa05 	stb	zero,-24(fp)
 8013ce0:	00000b06 	br	8013d10 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 8013ce4:	e0bff917 	ldw	r2,-28(fp)
 8013ce8:	10c00044 	addi	r3,r2,1
 8013cec:	e0fff915 	stw	r3,-28(fp)
 8013cf0:	e0fff817 	ldw	r3,-32(fp)
 8013cf4:	19000044 	addi	r4,r3,1
 8013cf8:	e13ff815 	stw	r4,-32(fp)
 8013cfc:	18c00003 	ldbu	r3,0(r3)
 8013d00:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 8013d04:	e0bffa03 	ldbu	r2,-24(fp)
 8013d08:	10800044 	addi	r2,r2,1
 8013d0c:	e0bffa05 	stb	r2,-24(fp)
 8013d10:	e0bffa03 	ldbu	r2,-24(fp)
 8013d14:	108000f0 	cmpltui	r2,r2,3
 8013d18:	103ff21e 	bne	r2,zero,8013ce4 <OSSemQuery+0xa4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 8013d1c:	e0bffe17 	ldw	r2,-8(fp)
 8013d20:	10c0020b 	ldhu	r3,8(r2)
 8013d24:	e0bfff17 	ldw	r2,-4(fp)
 8013d28:	10c0000d 	sth	r3,0(r2)
 8013d2c:	e0bffb17 	ldw	r2,-20(fp)
 8013d30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013d34:	e0bffd17 	ldw	r2,-12(fp)
 8013d38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8013d3c:	0005883a 	mov	r2,zero
}
 8013d40:	e037883a 	mov	sp,fp
 8013d44:	df000017 	ldw	fp,0(sp)
 8013d48:	dec00104 	addi	sp,sp,4
 8013d4c:	f800283a 	ret

08013d50 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 8013d50:	defff904 	addi	sp,sp,-28
 8013d54:	df000615 	stw	fp,24(sp)
 8013d58:	df000604 	addi	fp,sp,24
 8013d5c:	e13ffd15 	stw	r4,-12(fp)
 8013d60:	2805883a 	mov	r2,r5
 8013d64:	e1bfff15 	stw	r6,-4(fp)
 8013d68:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 8013d6c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 8013d70:	e0bfff17 	ldw	r2,-4(fp)
 8013d74:	1000011e 	bne	r2,zero,8013d7c <OSSemSet+0x2c>
        return;
 8013d78:	00003006 	br	8013e3c <OSSemSet+0xec>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 8013d7c:	e0bffd17 	ldw	r2,-12(fp)
 8013d80:	1000041e 	bne	r2,zero,8013d94 <OSSemSet+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 8013d84:	e0bfff17 	ldw	r2,-4(fp)
 8013d88:	00c00104 	movi	r3,4
 8013d8c:	10c00005 	stb	r3,0(r2)
        return;
 8013d90:	00002a06 	br	8013e3c <OSSemSet+0xec>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 8013d94:	e0bffd17 	ldw	r2,-12(fp)
 8013d98:	10800003 	ldbu	r2,0(r2)
 8013d9c:	10803fcc 	andi	r2,r2,255
 8013da0:	108000e0 	cmpeqi	r2,r2,3
 8013da4:	1000041e 	bne	r2,zero,8013db8 <OSSemSet+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 8013da8:	e0bfff17 	ldw	r2,-4(fp)
 8013dac:	00c00044 	movi	r3,1
 8013db0:	10c00005 	stb	r3,0(r2)
        return;
 8013db4:	00002106 	br	8013e3c <OSSemSet+0xec>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013db8:	0005303a 	rdctl	r2,status
 8013dbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013dc0:	e0fffb17 	ldw	r3,-20(fp)
 8013dc4:	00bfff84 	movi	r2,-2
 8013dc8:	1884703a 	and	r2,r3,r2
 8013dcc:	1001703a 	wrctl	status,r2
  
  return context;
 8013dd0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 8013dd4:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 8013dd8:	e0bfff17 	ldw	r2,-4(fp)
 8013ddc:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 8013de0:	e0bffd17 	ldw	r2,-12(fp)
 8013de4:	1080020b 	ldhu	r2,8(r2)
 8013de8:	10bfffcc 	andi	r2,r2,65535
 8013dec:	10000426 	beq	r2,zero,8013e00 <OSSemSet+0xb0>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 8013df0:	e0bffd17 	ldw	r2,-12(fp)
 8013df4:	e0fffe0b 	ldhu	r3,-8(fp)
 8013df8:	10c0020d 	sth	r3,8(r2)
 8013dfc:	00000b06 	br	8013e2c <OSSemSet+0xdc>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 8013e00:	e0bffd17 	ldw	r2,-12(fp)
 8013e04:	10800283 	ldbu	r2,10(r2)
 8013e08:	10803fcc 	andi	r2,r2,255
 8013e0c:	1000041e 	bne	r2,zero,8013e20 <OSSemSet+0xd0>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 8013e10:	e0bffd17 	ldw	r2,-12(fp)
 8013e14:	e0fffe0b 	ldhu	r3,-8(fp)
 8013e18:	10c0020d 	sth	r3,8(r2)
 8013e1c:	00000306 	br	8013e2c <OSSemSet+0xdc>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 8013e20:	e0bfff17 	ldw	r2,-4(fp)
 8013e24:	00c01244 	movi	r3,73
 8013e28:	10c00005 	stb	r3,0(r2)
 8013e2c:	e0bffa17 	ldw	r2,-24(fp)
 8013e30:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013e34:	e0bffc17 	ldw	r2,-16(fp)
 8013e38:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
}
 8013e3c:	e037883a 	mov	sp,fp
 8013e40:	df000017 	ldw	fp,0(sp)
 8013e44:	dec00104 	addi	sp,sp,4
 8013e48:	f800283a 	ret

08013e4c <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 8013e4c:	defff104 	addi	sp,sp,-60
 8013e50:	dfc00e15 	stw	ra,56(sp)
 8013e54:	df000d15 	stw	fp,52(sp)
 8013e58:	df000d04 	addi	fp,sp,52
 8013e5c:	2007883a 	mov	r3,r4
 8013e60:	2805883a 	mov	r2,r5
 8013e64:	e0fffe05 	stb	r3,-8(fp)
 8013e68:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 8013e6c:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 8013e70:	e0bffe03 	ldbu	r2,-8(fp)
 8013e74:	10800530 	cmpltui	r2,r2,20
 8013e78:	1000051e 	bne	r2,zero,8013e90 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 8013e7c:	e0bffe03 	ldbu	r2,-8(fp)
 8013e80:	10803fe0 	cmpeqi	r2,r2,255
 8013e84:	1000021e 	bne	r2,zero,8013e90 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 8013e88:	00800a84 	movi	r2,42
 8013e8c:	00013a06 	br	8014378 <OSTaskChangePrio+0x52c>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 8013e90:	e0bfff03 	ldbu	r2,-4(fp)
 8013e94:	10800530 	cmpltui	r2,r2,20
 8013e98:	1000021e 	bne	r2,zero,8013ea4 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 8013e9c:	00800a84 	movi	r2,42
 8013ea0:	00013506 	br	8014378 <OSTaskChangePrio+0x52c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8013ea4:	0005303a 	rdctl	r2,status
 8013ea8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8013eac:	e0fff917 	ldw	r3,-28(fp)
 8013eb0:	00bfff84 	movi	r2,-2
 8013eb4:	1884703a 	and	r2,r3,r2
 8013eb8:	1001703a 	wrctl	status,r2
  
  return context;
 8013ebc:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8013ec0:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 8013ec4:	e0ffff03 	ldbu	r3,-4(fp)
 8013ec8:	008200f4 	movhi	r2,2051
 8013ecc:	1099cf04 	addi	r2,r2,26428
 8013ed0:	18c7883a 	add	r3,r3,r3
 8013ed4:	18c7883a 	add	r3,r3,r3
 8013ed8:	10c5883a 	add	r2,r2,r3
 8013edc:	10800017 	ldw	r2,0(r2)
 8013ee0:	10000626 	beq	r2,zero,8013efc <OSTaskChangePrio+0xb0>
 8013ee4:	e0bff517 	ldw	r2,-44(fp)
 8013ee8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8013eec:	e0bffa17 	ldw	r2,-24(fp)
 8013ef0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 8013ef4:	00800a04 	movi	r2,40
 8013ef8:	00011f06 	br	8014378 <OSTaskChangePrio+0x52c>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 8013efc:	e0bffe03 	ldbu	r2,-8(fp)
 8013f00:	10803fd8 	cmpnei	r2,r2,255
 8013f04:	1000051e 	bne	r2,zero,8013f1c <OSTaskChangePrio+0xd0>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 8013f08:	008200f4 	movhi	r2,2051
 8013f0c:	10bb4804 	addi	r2,r2,-4832
 8013f10:	10800017 	ldw	r2,0(r2)
 8013f14:	10800c83 	ldbu	r2,50(r2)
 8013f18:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 8013f1c:	e0fffe03 	ldbu	r3,-8(fp)
 8013f20:	008200f4 	movhi	r2,2051
 8013f24:	1099cf04 	addi	r2,r2,26428
 8013f28:	18c7883a 	add	r3,r3,r3
 8013f2c:	18c7883a 	add	r3,r3,r3
 8013f30:	10c5883a 	add	r2,r2,r3
 8013f34:	10800017 	ldw	r2,0(r2)
 8013f38:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 8013f3c:	e0bff617 	ldw	r2,-40(fp)
 8013f40:	1000061e 	bne	r2,zero,8013f5c <OSTaskChangePrio+0x110>
 8013f44:	e0bff517 	ldw	r2,-44(fp)
 8013f48:	e0bffb15 	stw	r2,-20(fp)
 8013f4c:	e0bffb17 	ldw	r2,-20(fp)
 8013f50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 8013f54:	00800a44 	movi	r2,41
 8013f58:	00010706 	br	8014378 <OSTaskChangePrio+0x52c>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 8013f5c:	e0bff617 	ldw	r2,-40(fp)
 8013f60:	10800058 	cmpnei	r2,r2,1
 8013f64:	1000061e 	bne	r2,zero,8013f80 <OSTaskChangePrio+0x134>
 8013f68:	e0bff517 	ldw	r2,-44(fp)
 8013f6c:	e0bffc15 	stw	r2,-16(fp)
 8013f70:	e0bffc17 	ldw	r2,-16(fp)
 8013f74:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 8013f78:	008010c4 	movi	r2,67
 8013f7c:	0000fe06 	br	8014378 <OSTaskChangePrio+0x52c>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 8013f80:	e0bfff03 	ldbu	r2,-4(fp)
 8013f84:	1004d0fa 	srli	r2,r2,3
 8013f88:	e0bff705 	stb	r2,-36(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 8013f8c:	e0bfff03 	ldbu	r2,-4(fp)
 8013f90:	108001cc 	andi	r2,r2,7
 8013f94:	e0bff745 	stb	r2,-35(fp)
    bity_new              = (INT8U)(1 << y_new);
 8013f98:	e0bff703 	ldbu	r2,-36(fp)
 8013f9c:	00c00044 	movi	r3,1
 8013fa0:	1884983a 	sll	r2,r3,r2
 8013fa4:	e0bff785 	stb	r2,-34(fp)
    bitx_new              = (INT8U)(1 << x_new);
 8013fa8:	e0bff743 	ldbu	r2,-35(fp)
 8013fac:	00c00044 	movi	r3,1
 8013fb0:	1884983a 	sll	r2,r3,r2
 8013fb4:	e0bff7c5 	stb	r2,-33(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 8013fb8:	e0fffe03 	ldbu	r3,-8(fp)
 8013fbc:	008200f4 	movhi	r2,2051
 8013fc0:	1099cf04 	addi	r2,r2,26428
 8013fc4:	18c7883a 	add	r3,r3,r3
 8013fc8:	18c7883a 	add	r3,r3,r3
 8013fcc:	10c5883a 	add	r2,r2,r3
 8013fd0:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 8013fd4:	e0ffff03 	ldbu	r3,-4(fp)
 8013fd8:	008200f4 	movhi	r2,2051
 8013fdc:	1099cf04 	addi	r2,r2,26428
 8013fe0:	18c7883a 	add	r3,r3,r3
 8013fe4:	18c7883a 	add	r3,r3,r3
 8013fe8:	10c5883a 	add	r2,r2,r3
 8013fec:	e0fff617 	ldw	r3,-40(fp)
 8013ff0:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 8013ff4:	e0bff617 	ldw	r2,-40(fp)
 8013ff8:	10800d03 	ldbu	r2,52(r2)
 8013ffc:	e0bff805 	stb	r2,-32(fp)
    bity_old              =  ptcb->OSTCBBitY;
 8014000:	e0bff617 	ldw	r2,-40(fp)
 8014004:	10800d83 	ldbu	r2,54(r2)
 8014008:	e0bff845 	stb	r2,-31(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 801400c:	e0bff617 	ldw	r2,-40(fp)
 8014010:	10800d43 	ldbu	r2,53(r2)
 8014014:	e0bff885 	stb	r2,-30(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 8014018:	e0fff803 	ldbu	r3,-32(fp)
 801401c:	008200f4 	movhi	r2,2051
 8014020:	10bb4544 	addi	r2,r2,-4843
 8014024:	10c5883a 	add	r2,r2,r3
 8014028:	10c00003 	ldbu	r3,0(r2)
 801402c:	e0bff883 	ldbu	r2,-30(fp)
 8014030:	1884703a 	and	r2,r3,r2
 8014034:	10803fcc 	andi	r2,r2,255
 8014038:	10003726 	beq	r2,zero,8014118 <OSTaskChangePrio+0x2cc>
         OSRdyTbl[y_old] &= ~bitx_old;
 801403c:	e0fff803 	ldbu	r3,-32(fp)
 8014040:	e13ff803 	ldbu	r4,-32(fp)
 8014044:	008200f4 	movhi	r2,2051
 8014048:	10bb4544 	addi	r2,r2,-4843
 801404c:	1105883a 	add	r2,r2,r4
 8014050:	10800003 	ldbu	r2,0(r2)
 8014054:	1009883a 	mov	r4,r2
 8014058:	e0bff883 	ldbu	r2,-30(fp)
 801405c:	0084303a 	nor	r2,zero,r2
 8014060:	2084703a 	and	r2,r4,r2
 8014064:	1009883a 	mov	r4,r2
 8014068:	008200f4 	movhi	r2,2051
 801406c:	10bb4544 	addi	r2,r2,-4843
 8014070:	10c5883a 	add	r2,r2,r3
 8014074:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 8014078:	e0fff803 	ldbu	r3,-32(fp)
 801407c:	008200f4 	movhi	r2,2051
 8014080:	10bb4544 	addi	r2,r2,-4843
 8014084:	10c5883a 	add	r2,r2,r3
 8014088:	10800003 	ldbu	r2,0(r2)
 801408c:	10803fcc 	andi	r2,r2,255
 8014090:	10000b1e 	bne	r2,zero,80140c0 <OSTaskChangePrio+0x274>
             OSRdyGrp &= ~bity_old;
 8014094:	e0bff843 	ldbu	r2,-31(fp)
 8014098:	0084303a 	nor	r2,zero,r2
 801409c:	1007883a 	mov	r3,r2
 80140a0:	008200f4 	movhi	r2,2051
 80140a4:	10bb4504 	addi	r2,r2,-4844
 80140a8:	10800003 	ldbu	r2,0(r2)
 80140ac:	1884703a 	and	r2,r3,r2
 80140b0:	1007883a 	mov	r3,r2
 80140b4:	008200f4 	movhi	r2,2051
 80140b8:	10bb4504 	addi	r2,r2,-4844
 80140bc:	10c00005 	stb	r3,0(r2)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 80140c0:	008200f4 	movhi	r2,2051
 80140c4:	10bb4504 	addi	r2,r2,-4844
 80140c8:	10c00003 	ldbu	r3,0(r2)
 80140cc:	e0bff783 	ldbu	r2,-34(fp)
 80140d0:	1884b03a 	or	r2,r3,r2
 80140d4:	1007883a 	mov	r3,r2
 80140d8:	008200f4 	movhi	r2,2051
 80140dc:	10bb4504 	addi	r2,r2,-4844
 80140e0:	10c00005 	stb	r3,0(r2)
         OSRdyTbl[y_new] |= bitx_new;
 80140e4:	e0fff703 	ldbu	r3,-36(fp)
 80140e8:	e13ff703 	ldbu	r4,-36(fp)
 80140ec:	008200f4 	movhi	r2,2051
 80140f0:	10bb4544 	addi	r2,r2,-4843
 80140f4:	1105883a 	add	r2,r2,r4
 80140f8:	11000003 	ldbu	r4,0(r2)
 80140fc:	e0bff7c3 	ldbu	r2,-33(fp)
 8014100:	2084b03a 	or	r2,r4,r2
 8014104:	1009883a 	mov	r4,r2
 8014108:	008200f4 	movhi	r2,2051
 801410c:	10bb4544 	addi	r2,r2,-4843
 8014110:	10c5883a 	add	r2,r2,r3
 8014114:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 8014118:	e0bff617 	ldw	r2,-40(fp)
 801411c:	10800717 	ldw	r2,28(r2)
 8014120:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 8014124:	e0bff317 	ldw	r2,-52(fp)
 8014128:	10003326 	beq	r2,zero,80141f8 <OSTaskChangePrio+0x3ac>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 801412c:	e0bff803 	ldbu	r2,-32(fp)
 8014130:	e0fff803 	ldbu	r3,-32(fp)
 8014134:	e13ff317 	ldw	r4,-52(fp)
 8014138:	20c7883a 	add	r3,r4,r3
 801413c:	18c00204 	addi	r3,r3,8
 8014140:	18c000c3 	ldbu	r3,3(r3)
 8014144:	1809883a 	mov	r4,r3
 8014148:	e0fff883 	ldbu	r3,-30(fp)
 801414c:	00c6303a 	nor	r3,zero,r3
 8014150:	20c6703a 	and	r3,r4,r3
 8014154:	1809883a 	mov	r4,r3
 8014158:	e0fff317 	ldw	r3,-52(fp)
 801415c:	1885883a 	add	r2,r3,r2
 8014160:	10800204 	addi	r2,r2,8
 8014164:	110000c5 	stb	r4,3(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 8014168:	e0bff803 	ldbu	r2,-32(fp)
 801416c:	e0fff317 	ldw	r3,-52(fp)
 8014170:	1885883a 	add	r2,r3,r2
 8014174:	10800204 	addi	r2,r2,8
 8014178:	108000c3 	ldbu	r2,3(r2)
 801417c:	10803fcc 	andi	r2,r2,255
 8014180:	1000091e 	bne	r2,zero,80141a8 <OSTaskChangePrio+0x35c>
            pevent->OSEventGrp    &= ~bity_old;
 8014184:	e0bff317 	ldw	r2,-52(fp)
 8014188:	10800283 	ldbu	r2,10(r2)
 801418c:	1007883a 	mov	r3,r2
 8014190:	e0bff843 	ldbu	r2,-31(fp)
 8014194:	0084303a 	nor	r2,zero,r2
 8014198:	1884703a 	and	r2,r3,r2
 801419c:	1007883a 	mov	r3,r2
 80141a0:	e0bff317 	ldw	r2,-52(fp)
 80141a4:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 80141a8:	e0bff317 	ldw	r2,-52(fp)
 80141ac:	10c00283 	ldbu	r3,10(r2)
 80141b0:	e0bff783 	ldbu	r2,-34(fp)
 80141b4:	1884b03a 	or	r2,r3,r2
 80141b8:	1007883a 	mov	r3,r2
 80141bc:	e0bff317 	ldw	r2,-52(fp)
 80141c0:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 80141c4:	e0bff703 	ldbu	r2,-36(fp)
 80141c8:	e0fff703 	ldbu	r3,-36(fp)
 80141cc:	e13ff317 	ldw	r4,-52(fp)
 80141d0:	20c7883a 	add	r3,r4,r3
 80141d4:	18c00204 	addi	r3,r3,8
 80141d8:	190000c3 	ldbu	r4,3(r3)
 80141dc:	e0fff7c3 	ldbu	r3,-33(fp)
 80141e0:	20c6b03a 	or	r3,r4,r3
 80141e4:	1809883a 	mov	r4,r3
 80141e8:	e0fff317 	ldw	r3,-52(fp)
 80141ec:	1885883a 	add	r2,r3,r2
 80141f0:	10800204 	addi	r2,r2,8
 80141f4:	110000c5 	stb	r4,3(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 80141f8:	e0bff617 	ldw	r2,-40(fp)
 80141fc:	10800817 	ldw	r2,32(r2)
 8014200:	10004226 	beq	r2,zero,801430c <OSTaskChangePrio+0x4c0>
        pevents =  ptcb->OSTCBEventMultiPtr;
 8014204:	e0bff617 	ldw	r2,-40(fp)
 8014208:	10800817 	ldw	r2,32(r2)
 801420c:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 8014210:	e0bff417 	ldw	r2,-48(fp)
 8014214:	10800017 	ldw	r2,0(r2)
 8014218:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 801421c:	00003906 	br	8014304 <OSTaskChangePrio+0x4b8>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 8014220:	e0bff803 	ldbu	r2,-32(fp)
 8014224:	e0fff803 	ldbu	r3,-32(fp)
 8014228:	e13ff317 	ldw	r4,-52(fp)
 801422c:	20c7883a 	add	r3,r4,r3
 8014230:	18c00204 	addi	r3,r3,8
 8014234:	18c000c3 	ldbu	r3,3(r3)
 8014238:	1809883a 	mov	r4,r3
 801423c:	e0fff883 	ldbu	r3,-30(fp)
 8014240:	00c6303a 	nor	r3,zero,r3
 8014244:	20c6703a 	and	r3,r4,r3
 8014248:	1809883a 	mov	r4,r3
 801424c:	e0fff317 	ldw	r3,-52(fp)
 8014250:	1885883a 	add	r2,r3,r2
 8014254:	10800204 	addi	r2,r2,8
 8014258:	110000c5 	stb	r4,3(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 801425c:	e0bff803 	ldbu	r2,-32(fp)
 8014260:	e0fff317 	ldw	r3,-52(fp)
 8014264:	1885883a 	add	r2,r3,r2
 8014268:	10800204 	addi	r2,r2,8
 801426c:	108000c3 	ldbu	r2,3(r2)
 8014270:	10803fcc 	andi	r2,r2,255
 8014274:	1000091e 	bne	r2,zero,801429c <OSTaskChangePrio+0x450>
                pevent->OSEventGrp    &= ~bity_old;
 8014278:	e0bff317 	ldw	r2,-52(fp)
 801427c:	10800283 	ldbu	r2,10(r2)
 8014280:	1007883a 	mov	r3,r2
 8014284:	e0bff843 	ldbu	r2,-31(fp)
 8014288:	0084303a 	nor	r2,zero,r2
 801428c:	1884703a 	and	r2,r3,r2
 8014290:	1007883a 	mov	r3,r2
 8014294:	e0bff317 	ldw	r2,-52(fp)
 8014298:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 801429c:	e0bff317 	ldw	r2,-52(fp)
 80142a0:	10c00283 	ldbu	r3,10(r2)
 80142a4:	e0bff783 	ldbu	r2,-34(fp)
 80142a8:	1884b03a 	or	r2,r3,r2
 80142ac:	1007883a 	mov	r3,r2
 80142b0:	e0bff317 	ldw	r2,-52(fp)
 80142b4:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 80142b8:	e0bff703 	ldbu	r2,-36(fp)
 80142bc:	e0fff703 	ldbu	r3,-36(fp)
 80142c0:	e13ff317 	ldw	r4,-52(fp)
 80142c4:	20c7883a 	add	r3,r4,r3
 80142c8:	18c00204 	addi	r3,r3,8
 80142cc:	190000c3 	ldbu	r4,3(r3)
 80142d0:	e0fff7c3 	ldbu	r3,-33(fp)
 80142d4:	20c6b03a 	or	r3,r4,r3
 80142d8:	1809883a 	mov	r4,r3
 80142dc:	e0fff317 	ldw	r3,-52(fp)
 80142e0:	1885883a 	add	r2,r3,r2
 80142e4:	10800204 	addi	r2,r2,8
 80142e8:	110000c5 	stb	r4,3(r2)
            pevents++;
 80142ec:	e0bff417 	ldw	r2,-48(fp)
 80142f0:	10800104 	addi	r2,r2,4
 80142f4:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 80142f8:	e0bff417 	ldw	r2,-48(fp)
 80142fc:	10800017 	ldw	r2,0(r2)
 8014300:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 8014304:	e0bff317 	ldw	r2,-52(fp)
 8014308:	103fc51e 	bne	r2,zero,8014220 <OSTaskChangePrio+0x3d4>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 801430c:	e0bff617 	ldw	r2,-40(fp)
 8014310:	e0ffff03 	ldbu	r3,-4(fp)
 8014314:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 8014318:	e0bff617 	ldw	r2,-40(fp)
 801431c:	e0fff703 	ldbu	r3,-36(fp)
 8014320:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 8014324:	e0bff617 	ldw	r2,-40(fp)
 8014328:	e0fff743 	ldbu	r3,-35(fp)
 801432c:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 8014330:	e0bff617 	ldw	r2,-40(fp)
 8014334:	e0fff783 	ldbu	r3,-34(fp)
 8014338:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 801433c:	e0bff617 	ldw	r2,-40(fp)
 8014340:	e0fff7c3 	ldbu	r3,-33(fp)
 8014344:	10c00d45 	stb	r3,53(r2)
 8014348:	e0bff517 	ldw	r2,-44(fp)
 801434c:	e0bffd15 	stw	r2,-12(fp)
 8014350:	e0bffd17 	ldw	r2,-12(fp)
 8014354:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 8014358:	008200f4 	movhi	r2,2051
 801435c:	10bb3944 	addi	r2,r2,-4891
 8014360:	10800003 	ldbu	r2,0(r2)
 8014364:	10803fcc 	andi	r2,r2,255
 8014368:	10800058 	cmpnei	r2,r2,1
 801436c:	1000011e 	bne	r2,zero,8014374 <OSTaskChangePrio+0x528>
        OS_Sched();                                         /* Find new highest priority task          */
 8014370:	800f9400 	call	800f940 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8014374:	0005883a 	mov	r2,zero
}
 8014378:	e037883a 	mov	sp,fp
 801437c:	dfc00117 	ldw	ra,4(sp)
 8014380:	df000017 	ldw	fp,0(sp)
 8014384:	dec00204 	addi	sp,sp,8
 8014388:	f800283a 	ret

0801438c <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 801438c:	deffee04 	addi	sp,sp,-72
 8014390:	dfc01115 	stw	ra,68(sp)
 8014394:	df001015 	stw	fp,64(sp)
 8014398:	df001004 	addi	fp,sp,64
 801439c:	e13ffc15 	stw	r4,-16(fp)
 80143a0:	e17ffd15 	stw	r5,-12(fp)
 80143a4:	e1bffe15 	stw	r6,-8(fp)
 80143a8:	3805883a 	mov	r2,r7
 80143ac:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 80143b0:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 80143b4:	e0bfff03 	ldbu	r2,-4(fp)
 80143b8:	10800570 	cmpltui	r2,r2,21
 80143bc:	1000021e 	bne	r2,zero,80143c8 <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 80143c0:	00800a84 	movi	r2,42
 80143c4:	00005b06 	br	8014534 <OSTaskCreate+0x1a8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80143c8:	0005303a 	rdctl	r2,status
 80143cc:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80143d0:	e0fff617 	ldw	r3,-40(fp)
 80143d4:	00bfff84 	movi	r2,-2
 80143d8:	1884703a 	and	r2,r3,r2
 80143dc:	1001703a 	wrctl	status,r2
  
  return context;
 80143e0:	e0bff617 	ldw	r2,-40(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 80143e4:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 80143e8:	008200f4 	movhi	r2,2051
 80143ec:	10bb4704 	addi	r2,r2,-4836
 80143f0:	10800003 	ldbu	r2,0(r2)
 80143f4:	10803fcc 	andi	r2,r2,255
 80143f8:	10000626 	beq	r2,zero,8014414 <OSTaskCreate+0x88>
 80143fc:	e0bff317 	ldw	r2,-52(fp)
 8014400:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014404:	e0bff717 	ldw	r2,-36(fp)
 8014408:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 801440c:	00800f04 	movi	r2,60
 8014410:	00004806 	br	8014534 <OSTaskCreate+0x1a8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 8014414:	e0ffff03 	ldbu	r3,-4(fp)
 8014418:	008200f4 	movhi	r2,2051
 801441c:	1099cf04 	addi	r2,r2,26428
 8014420:	18c7883a 	add	r3,r3,r3
 8014424:	18c7883a 	add	r3,r3,r3
 8014428:	10c5883a 	add	r2,r2,r3
 801442c:	10800017 	ldw	r2,0(r2)
 8014430:	10003b1e 	bne	r2,zero,8014520 <OSTaskCreate+0x194>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8014434:	e0ffff03 	ldbu	r3,-4(fp)
 8014438:	008200f4 	movhi	r2,2051
 801443c:	1099cf04 	addi	r2,r2,26428
 8014440:	18c7883a 	add	r3,r3,r3
 8014444:	18c7883a 	add	r3,r3,r3
 8014448:	10c5883a 	add	r2,r2,r3
 801444c:	00c00044 	movi	r3,1
 8014450:	10c00015 	stw	r3,0(r2)
 8014454:	e0bff317 	ldw	r2,-52(fp)
 8014458:	e0bff815 	stw	r2,-32(fp)
 801445c:	e0bff817 	ldw	r2,-32(fp)
 8014460:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 8014464:	e13ffc17 	ldw	r4,-16(fp)
 8014468:	e17ffd17 	ldw	r5,-12(fp)
 801446c:	e1bffe17 	ldw	r6,-8(fp)
 8014470:	000f883a 	mov	r7,zero
 8014474:	8018fb80 	call	8018fb8 <OSTaskStkInit>
 8014478:	e0bff415 	stw	r2,-48(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 801447c:	e0bfff03 	ldbu	r2,-4(fp)
 8014480:	d8000015 	stw	zero,0(sp)
 8014484:	d8000115 	stw	zero,4(sp)
 8014488:	d8000215 	stw	zero,8(sp)
 801448c:	1009883a 	mov	r4,r2
 8014490:	e17ff417 	ldw	r5,-48(fp)
 8014494:	000d883a 	mov	r6,zero
 8014498:	000f883a 	mov	r7,zero
 801449c:	800fd340 	call	800fd34 <OS_TCBInit>
 80144a0:	e0bff505 	stb	r2,-44(fp)
        if (err == OS_ERR_NONE) {
 80144a4:	e0bff503 	ldbu	r2,-44(fp)
 80144a8:	1000081e 	bne	r2,zero,80144cc <OSTaskCreate+0x140>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 80144ac:	008200f4 	movhi	r2,2051
 80144b0:	10bb3944 	addi	r2,r2,-4891
 80144b4:	10800003 	ldbu	r2,0(r2)
 80144b8:	10803fcc 	andi	r2,r2,255
 80144bc:	10800058 	cmpnei	r2,r2,1
 80144c0:	1000151e 	bne	r2,zero,8014518 <OSTaskCreate+0x18c>
                OS_Sched();
 80144c4:	800f9400 	call	800f940 <OS_Sched>
 80144c8:	00001306 	br	8014518 <OSTaskCreate+0x18c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80144cc:	0005303a 	rdctl	r2,status
 80144d0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80144d4:	e0fff917 	ldw	r3,-28(fp)
 80144d8:	00bfff84 	movi	r2,-2
 80144dc:	1884703a 	and	r2,r3,r2
 80144e0:	1001703a 	wrctl	status,r2
  
  return context;
 80144e4:	e0bff917 	ldw	r2,-28(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 80144e8:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 80144ec:	e0ffff03 	ldbu	r3,-4(fp)
 80144f0:	008200f4 	movhi	r2,2051
 80144f4:	1099cf04 	addi	r2,r2,26428
 80144f8:	18c7883a 	add	r3,r3,r3
 80144fc:	18c7883a 	add	r3,r3,r3
 8014500:	10c5883a 	add	r2,r2,r3
 8014504:	10000015 	stw	zero,0(r2)
 8014508:	e0bff317 	ldw	r2,-52(fp)
 801450c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014510:	e0bffa17 	ldw	r2,-24(fp)
 8014514:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 8014518:	e0bff503 	ldbu	r2,-44(fp)
 801451c:	00000506 	br	8014534 <OSTaskCreate+0x1a8>
 8014520:	e0bff317 	ldw	r2,-52(fp)
 8014524:	e0bffb15 	stw	r2,-20(fp)
 8014528:	e0bffb17 	ldw	r2,-20(fp)
 801452c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 8014530:	00800a04 	movi	r2,40
}
 8014534:	e037883a 	mov	sp,fp
 8014538:	dfc00117 	ldw	ra,4(sp)
 801453c:	df000017 	ldw	fp,0(sp)
 8014540:	dec00204 	addi	sp,sp,8
 8014544:	f800283a 	ret

08014548 <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 8014548:	deffec04 	addi	sp,sp,-80
 801454c:	dfc01315 	stw	ra,76(sp)
 8014550:	df001215 	stw	fp,72(sp)
 8014554:	df001204 	addi	fp,sp,72
 8014558:	e13ffa15 	stw	r4,-24(fp)
 801455c:	e17ffb15 	stw	r5,-20(fp)
 8014560:	e1bffc15 	stw	r6,-16(fp)
 8014564:	3809883a 	mov	r4,r7
 8014568:	e0c00217 	ldw	r3,8(fp)
 801456c:	e0800617 	ldw	r2,24(fp)
 8014570:	e13ffd05 	stb	r4,-12(fp)
 8014574:	e0fffe0d 	sth	r3,-8(fp)
 8014578:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 801457c:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 8014580:	e0bffd03 	ldbu	r2,-12(fp)
 8014584:	10800570 	cmpltui	r2,r2,21
 8014588:	1000021e 	bne	r2,zero,8014594 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 801458c:	00800a84 	movi	r2,42
 8014590:	00006306 	br	8014720 <OSTaskCreateExt+0x1d8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014594:	0005303a 	rdctl	r2,status
 8014598:	e0bff415 	stw	r2,-48(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801459c:	e0fff417 	ldw	r3,-48(fp)
 80145a0:	00bfff84 	movi	r2,-2
 80145a4:	1884703a 	and	r2,r3,r2
 80145a8:	1001703a 	wrctl	status,r2
  
  return context;
 80145ac:	e0bff417 	ldw	r2,-48(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 80145b0:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 80145b4:	008200f4 	movhi	r2,2051
 80145b8:	10bb4704 	addi	r2,r2,-4836
 80145bc:	10800003 	ldbu	r2,0(r2)
 80145c0:	10803fcc 	andi	r2,r2,255
 80145c4:	10000626 	beq	r2,zero,80145e0 <OSTaskCreateExt+0x98>
 80145c8:	e0bff117 	ldw	r2,-60(fp)
 80145cc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80145d0:	e0bff517 	ldw	r2,-44(fp)
 80145d4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 80145d8:	00800f04 	movi	r2,60
 80145dc:	00005006 	br	8014720 <OSTaskCreateExt+0x1d8>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 80145e0:	e0fffd03 	ldbu	r3,-12(fp)
 80145e4:	008200f4 	movhi	r2,2051
 80145e8:	1099cf04 	addi	r2,r2,26428
 80145ec:	18c7883a 	add	r3,r3,r3
 80145f0:	18c7883a 	add	r3,r3,r3
 80145f4:	10c5883a 	add	r2,r2,r3
 80145f8:	10800017 	ldw	r2,0(r2)
 80145fc:	1000431e 	bne	r2,zero,801470c <OSTaskCreateExt+0x1c4>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 8014600:	e0fffd03 	ldbu	r3,-12(fp)
 8014604:	008200f4 	movhi	r2,2051
 8014608:	1099cf04 	addi	r2,r2,26428
 801460c:	18c7883a 	add	r3,r3,r3
 8014610:	18c7883a 	add	r3,r3,r3
 8014614:	10c5883a 	add	r2,r2,r3
 8014618:	00c00044 	movi	r3,1
 801461c:	10c00015 	stw	r3,0(r2)
 8014620:	e0bff117 	ldw	r2,-60(fp)
 8014624:	e0bff615 	stw	r2,-40(fp)
 8014628:	e0bff617 	ldw	r2,-40(fp)
 801462c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 8014630:	e0bfff0b 	ldhu	r2,-4(fp)
 8014634:	e1000317 	ldw	r4,12(fp)
 8014638:	e1400417 	ldw	r5,16(fp)
 801463c:	100d883a 	mov	r6,r2
 8014640:	80156d40 	call	80156d4 <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 8014644:	e0bfff0b 	ldhu	r2,-4(fp)
 8014648:	e13ffa17 	ldw	r4,-24(fp)
 801464c:	e17ffb17 	ldw	r5,-20(fp)
 8014650:	e1bffc17 	ldw	r6,-16(fp)
 8014654:	100f883a 	mov	r7,r2
 8014658:	8018fb80 	call	8018fb8 <OSTaskStkInit>
 801465c:	e0bff215 	stw	r2,-56(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 8014660:	e13ffd03 	ldbu	r4,-12(fp)
 8014664:	e1fffe0b 	ldhu	r7,-8(fp)
 8014668:	e0bfff0b 	ldhu	r2,-4(fp)
 801466c:	e0c00417 	ldw	r3,16(fp)
 8014670:	d8c00015 	stw	r3,0(sp)
 8014674:	e0c00517 	ldw	r3,20(fp)
 8014678:	d8c00115 	stw	r3,4(sp)
 801467c:	d8800215 	stw	r2,8(sp)
 8014680:	e17ff217 	ldw	r5,-56(fp)
 8014684:	e1800317 	ldw	r6,12(fp)
 8014688:	800fd340 	call	800fd34 <OS_TCBInit>
 801468c:	e0bff305 	stb	r2,-52(fp)
        if (err == OS_ERR_NONE) {
 8014690:	e0bff303 	ldbu	r2,-52(fp)
 8014694:	1000081e 	bne	r2,zero,80146b8 <OSTaskCreateExt+0x170>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 8014698:	008200f4 	movhi	r2,2051
 801469c:	10bb3944 	addi	r2,r2,-4891
 80146a0:	10800003 	ldbu	r2,0(r2)
 80146a4:	10803fcc 	andi	r2,r2,255
 80146a8:	10800058 	cmpnei	r2,r2,1
 80146ac:	1000151e 	bne	r2,zero,8014704 <OSTaskCreateExt+0x1bc>
                OS_Sched();
 80146b0:	800f9400 	call	800f940 <OS_Sched>
 80146b4:	00001306 	br	8014704 <OSTaskCreateExt+0x1bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80146b8:	0005303a 	rdctl	r2,status
 80146bc:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80146c0:	e0fff717 	ldw	r3,-36(fp)
 80146c4:	00bfff84 	movi	r2,-2
 80146c8:	1884703a 	and	r2,r3,r2
 80146cc:	1001703a 	wrctl	status,r2
  
  return context;
 80146d0:	e0bff717 	ldw	r2,-36(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 80146d4:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 80146d8:	e0fffd03 	ldbu	r3,-12(fp)
 80146dc:	008200f4 	movhi	r2,2051
 80146e0:	1099cf04 	addi	r2,r2,26428
 80146e4:	18c7883a 	add	r3,r3,r3
 80146e8:	18c7883a 	add	r3,r3,r3
 80146ec:	10c5883a 	add	r2,r2,r3
 80146f0:	10000015 	stw	zero,0(r2)
 80146f4:	e0bff117 	ldw	r2,-60(fp)
 80146f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80146fc:	e0bff817 	ldw	r2,-32(fp)
 8014700:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 8014704:	e0bff303 	ldbu	r2,-52(fp)
 8014708:	00000506 	br	8014720 <OSTaskCreateExt+0x1d8>
 801470c:	e0bff117 	ldw	r2,-60(fp)
 8014710:	e0bff915 	stw	r2,-28(fp)
 8014714:	e0bff917 	ldw	r2,-28(fp)
 8014718:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 801471c:	00800a04 	movi	r2,40
}
 8014720:	e037883a 	mov	sp,fp
 8014724:	dfc00117 	ldw	ra,4(sp)
 8014728:	df000017 	ldw	fp,0(sp)
 801472c:	dec00204 	addi	sp,sp,8
 8014730:	f800283a 	ret

08014734 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 8014734:	defff404 	addi	sp,sp,-48
 8014738:	dfc00b15 	stw	ra,44(sp)
 801473c:	df000a15 	stw	fp,40(sp)
 8014740:	df000a04 	addi	fp,sp,40
 8014744:	2005883a 	mov	r2,r4
 8014748:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 801474c:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 8014750:	008200f4 	movhi	r2,2051
 8014754:	10bb4704 	addi	r2,r2,-4836
 8014758:	10800003 	ldbu	r2,0(r2)
 801475c:	10803fcc 	andi	r2,r2,255
 8014760:	10000226 	beq	r2,zero,801476c <OSTaskDel+0x38>
        return (OS_ERR_TASK_DEL_ISR);
 8014764:	00801004 	movi	r2,64
 8014768:	0000e506 	br	8014b00 <OSTaskDel+0x3cc>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 801476c:	e0bfff03 	ldbu	r2,-4(fp)
 8014770:	10800518 	cmpnei	r2,r2,20
 8014774:	1000021e 	bne	r2,zero,8014780 <OSTaskDel+0x4c>
        return (OS_ERR_TASK_DEL_IDLE);
 8014778:	00800f84 	movi	r2,62
 801477c:	0000e006 	br	8014b00 <OSTaskDel+0x3cc>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 8014780:	e0bfff03 	ldbu	r2,-4(fp)
 8014784:	10800530 	cmpltui	r2,r2,20
 8014788:	1000051e 	bne	r2,zero,80147a0 <OSTaskDel+0x6c>
        if (prio != OS_PRIO_SELF) {
 801478c:	e0bfff03 	ldbu	r2,-4(fp)
 8014790:	10803fe0 	cmpeqi	r2,r2,255
 8014794:	1000021e 	bne	r2,zero,80147a0 <OSTaskDel+0x6c>
            return (OS_ERR_PRIO_INVALID);
 8014798:	00800a84 	movi	r2,42
 801479c:	0000d806 	br	8014b00 <OSTaskDel+0x3cc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80147a0:	0005303a 	rdctl	r2,status
 80147a4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80147a8:	e0fff917 	ldw	r3,-28(fp)
 80147ac:	00bfff84 	movi	r2,-2
 80147b0:	1884703a 	and	r2,r3,r2
 80147b4:	1001703a 	wrctl	status,r2
  
  return context;
 80147b8:	e0bff917 	ldw	r2,-28(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 80147bc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 80147c0:	e0bfff03 	ldbu	r2,-4(fp)
 80147c4:	10803fd8 	cmpnei	r2,r2,255
 80147c8:	1000051e 	bne	r2,zero,80147e0 <OSTaskDel+0xac>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 80147cc:	008200f4 	movhi	r2,2051
 80147d0:	10bb4804 	addi	r2,r2,-4832
 80147d4:	10800017 	ldw	r2,0(r2)
 80147d8:	10800c83 	ldbu	r2,50(r2)
 80147dc:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 80147e0:	e0ffff03 	ldbu	r3,-4(fp)
 80147e4:	008200f4 	movhi	r2,2051
 80147e8:	1099cf04 	addi	r2,r2,26428
 80147ec:	18c7883a 	add	r3,r3,r3
 80147f0:	18c7883a 	add	r3,r3,r3
 80147f4:	10c5883a 	add	r2,r2,r3
 80147f8:	10800017 	ldw	r2,0(r2)
 80147fc:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 8014800:	e0bff717 	ldw	r2,-36(fp)
 8014804:	1000061e 	bne	r2,zero,8014820 <OSTaskDel+0xec>
 8014808:	e0bff617 	ldw	r2,-40(fp)
 801480c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014810:	e0bffa17 	ldw	r2,-24(fp)
 8014814:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 8014818:	008010c4 	movi	r2,67
 801481c:	0000b806 	br	8014b00 <OSTaskDel+0x3cc>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 8014820:	e0bff717 	ldw	r2,-36(fp)
 8014824:	10800058 	cmpnei	r2,r2,1
 8014828:	1000061e 	bne	r2,zero,8014844 <OSTaskDel+0x110>
 801482c:	e0bff617 	ldw	r2,-40(fp)
 8014830:	e0bffb15 	stw	r2,-20(fp)
 8014834:	e0bffb17 	ldw	r2,-20(fp)
 8014838:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 801483c:	00800f44 	movi	r2,61
 8014840:	0000af06 	br	8014b00 <OSTaskDel+0x3cc>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 8014844:	e0bff717 	ldw	r2,-36(fp)
 8014848:	10800d03 	ldbu	r2,52(r2)
 801484c:	10c03fcc 	andi	r3,r2,255
 8014850:	e0bff717 	ldw	r2,-36(fp)
 8014854:	10800d03 	ldbu	r2,52(r2)
 8014858:	11003fcc 	andi	r4,r2,255
 801485c:	008200f4 	movhi	r2,2051
 8014860:	10bb4544 	addi	r2,r2,-4843
 8014864:	1105883a 	add	r2,r2,r4
 8014868:	10800003 	ldbu	r2,0(r2)
 801486c:	1009883a 	mov	r4,r2
 8014870:	e0bff717 	ldw	r2,-36(fp)
 8014874:	10800d43 	ldbu	r2,53(r2)
 8014878:	0084303a 	nor	r2,zero,r2
 801487c:	2084703a 	and	r2,r4,r2
 8014880:	1009883a 	mov	r4,r2
 8014884:	008200f4 	movhi	r2,2051
 8014888:	10bb4544 	addi	r2,r2,-4843
 801488c:	10c5883a 	add	r2,r2,r3
 8014890:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 8014894:	e0bff717 	ldw	r2,-36(fp)
 8014898:	10800d03 	ldbu	r2,52(r2)
 801489c:	10c03fcc 	andi	r3,r2,255
 80148a0:	008200f4 	movhi	r2,2051
 80148a4:	10bb4544 	addi	r2,r2,-4843
 80148a8:	10c5883a 	add	r2,r2,r3
 80148ac:	10800003 	ldbu	r2,0(r2)
 80148b0:	10803fcc 	andi	r2,r2,255
 80148b4:	10000c1e 	bne	r2,zero,80148e8 <OSTaskDel+0x1b4>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 80148b8:	e0bff717 	ldw	r2,-36(fp)
 80148bc:	10800d83 	ldbu	r2,54(r2)
 80148c0:	0084303a 	nor	r2,zero,r2
 80148c4:	1007883a 	mov	r3,r2
 80148c8:	008200f4 	movhi	r2,2051
 80148cc:	10bb4504 	addi	r2,r2,-4844
 80148d0:	10800003 	ldbu	r2,0(r2)
 80148d4:	1884703a 	and	r2,r3,r2
 80148d8:	1007883a 	mov	r3,r2
 80148dc:	008200f4 	movhi	r2,2051
 80148e0:	10bb4504 	addi	r2,r2,-4844
 80148e4:	10c00005 	stb	r3,0(r2)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 80148e8:	e0bff717 	ldw	r2,-36(fp)
 80148ec:	10800717 	ldw	r2,28(r2)
 80148f0:	10000526 	beq	r2,zero,8014908 <OSTaskDel+0x1d4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 80148f4:	e0bff717 	ldw	r2,-36(fp)
 80148f8:	10800717 	ldw	r2,28(r2)
 80148fc:	e13ff717 	ldw	r4,-36(fp)
 8014900:	100b883a 	mov	r5,r2
 8014904:	800f3180 	call	800f318 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 8014908:	e0bff717 	ldw	r2,-36(fp)
 801490c:	10800817 	ldw	r2,32(r2)
 8014910:	10000526 	beq	r2,zero,8014928 <OSTaskDel+0x1f4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 8014914:	e0bff717 	ldw	r2,-36(fp)
 8014918:	10800817 	ldw	r2,32(r2)
 801491c:	e13ff717 	ldw	r4,-36(fp)
 8014920:	100b883a 	mov	r5,r2
 8014924:	800f3cc0 	call	800f3cc <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 8014928:	e0bff717 	ldw	r2,-36(fp)
 801492c:	10800a17 	ldw	r2,40(r2)
 8014930:	e0bff815 	stw	r2,-32(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 8014934:	e0bff817 	ldw	r2,-32(fp)
 8014938:	10000226 	beq	r2,zero,8014944 <OSTaskDel+0x210>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 801493c:	e13ff817 	ldw	r4,-32(fp)
 8014940:	80119100 	call	8011910 <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 8014944:	e0bff717 	ldw	r2,-36(fp)
 8014948:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 801494c:	e0bff717 	ldw	r2,-36(fp)
 8014950:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 8014954:	e0bff717 	ldw	r2,-36(fp)
 8014958:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 801495c:	008200f4 	movhi	r2,2051
 8014960:	10bb3904 	addi	r2,r2,-4892
 8014964:	10800003 	ldbu	r2,0(r2)
 8014968:	10803fcc 	andi	r2,r2,255
 801496c:	10803fe0 	cmpeqi	r2,r2,255
 8014970:	1000081e 	bne	r2,zero,8014994 <OSTaskDel+0x260>
        OSLockNesting++;
 8014974:	008200f4 	movhi	r2,2051
 8014978:	10bb3904 	addi	r2,r2,-4892
 801497c:	10800003 	ldbu	r2,0(r2)
 8014980:	10800044 	addi	r2,r2,1
 8014984:	1007883a 	mov	r3,r2
 8014988:	008200f4 	movhi	r2,2051
 801498c:	10bb3904 	addi	r2,r2,-4892
 8014990:	10c00005 	stb	r3,0(r2)
 8014994:	e0bff617 	ldw	r2,-40(fp)
 8014998:	e0bffc15 	stw	r2,-16(fp)
 801499c:	e0bffc17 	ldw	r2,-16(fp)
 80149a0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 80149a4:	800ef0c0 	call	800ef0c <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80149a8:	0005303a 	rdctl	r2,status
 80149ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80149b0:	e0fffd17 	ldw	r3,-12(fp)
 80149b4:	00bfff84 	movi	r2,-2
 80149b8:	1884703a 	and	r2,r3,r2
 80149bc:	1001703a 	wrctl	status,r2
  
  return context;
 80149c0:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 80149c4:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 80149c8:	008200f4 	movhi	r2,2051
 80149cc:	10bb3904 	addi	r2,r2,-4892
 80149d0:	10800003 	ldbu	r2,0(r2)
 80149d4:	10803fcc 	andi	r2,r2,255
 80149d8:	10000826 	beq	r2,zero,80149fc <OSTaskDel+0x2c8>
        OSLockNesting--;
 80149dc:	008200f4 	movhi	r2,2051
 80149e0:	10bb3904 	addi	r2,r2,-4892
 80149e4:	10800003 	ldbu	r2,0(r2)
 80149e8:	10bfffc4 	addi	r2,r2,-1
 80149ec:	1007883a 	mov	r3,r2
 80149f0:	008200f4 	movhi	r2,2051
 80149f4:	10bb3904 	addi	r2,r2,-4892
 80149f8:	10c00005 	stb	r3,0(r2)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 80149fc:	e13ff717 	ldw	r4,-36(fp)
 8014a00:	80191340 	call	8019134 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 8014a04:	008200f4 	movhi	r2,2051
 8014a08:	10bb4144 	addi	r2,r2,-4859
 8014a0c:	10800003 	ldbu	r2,0(r2)
 8014a10:	10bfffc4 	addi	r2,r2,-1
 8014a14:	1007883a 	mov	r3,r2
 8014a18:	008200f4 	movhi	r2,2051
 8014a1c:	10bb4144 	addi	r2,r2,-4859
 8014a20:	10c00005 	stb	r3,0(r2)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 8014a24:	e0ffff03 	ldbu	r3,-4(fp)
 8014a28:	008200f4 	movhi	r2,2051
 8014a2c:	1099cf04 	addi	r2,r2,26428
 8014a30:	18c7883a 	add	r3,r3,r3
 8014a34:	18c7883a 	add	r3,r3,r3
 8014a38:	10c5883a 	add	r2,r2,r3
 8014a3c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 8014a40:	e0bff717 	ldw	r2,-36(fp)
 8014a44:	10800617 	ldw	r2,24(r2)
 8014a48:	1000091e 	bne	r2,zero,8014a70 <OSTaskDel+0x33c>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 8014a4c:	e0bff717 	ldw	r2,-36(fp)
 8014a50:	10800517 	ldw	r2,20(r2)
 8014a54:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 8014a58:	e0bff717 	ldw	r2,-36(fp)
 8014a5c:	10c00517 	ldw	r3,20(r2)
 8014a60:	008200f4 	movhi	r2,2051
 8014a64:	10bb3c04 	addi	r2,r2,-4880
 8014a68:	10c00015 	stw	r3,0(r2)
 8014a6c:	00000a06 	br	8014a98 <OSTaskDel+0x364>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 8014a70:	e0bff717 	ldw	r2,-36(fp)
 8014a74:	10800617 	ldw	r2,24(r2)
 8014a78:	e0fff717 	ldw	r3,-36(fp)
 8014a7c:	18c00517 	ldw	r3,20(r3)
 8014a80:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 8014a84:	e0bff717 	ldw	r2,-36(fp)
 8014a88:	10800517 	ldw	r2,20(r2)
 8014a8c:	e0fff717 	ldw	r3,-36(fp)
 8014a90:	18c00617 	ldw	r3,24(r3)
 8014a94:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 8014a98:	008200f4 	movhi	r2,2051
 8014a9c:	10bb4004 	addi	r2,r2,-4864
 8014aa0:	10c00017 	ldw	r3,0(r2)
 8014aa4:	e0bff717 	ldw	r2,-36(fp)
 8014aa8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 8014aac:	008200f4 	movhi	r2,2051
 8014ab0:	10bb4004 	addi	r2,r2,-4864
 8014ab4:	e0fff717 	ldw	r3,-36(fp)
 8014ab8:	10c00015 	stw	r3,0(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 8014abc:	e0bff717 	ldw	r2,-36(fp)
 8014ac0:	00c00fc4 	movi	r3,63
 8014ac4:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 8014ac8:	e0bff717 	ldw	r2,-36(fp)
 8014acc:	10001345 	stb	zero,77(r2)
 8014ad0:	e0bff617 	ldw	r2,-40(fp)
 8014ad4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014ad8:	e0bffe17 	ldw	r2,-8(fp)
 8014adc:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 8014ae0:	008200f4 	movhi	r2,2051
 8014ae4:	10bb3944 	addi	r2,r2,-4891
 8014ae8:	10800003 	ldbu	r2,0(r2)
 8014aec:	10803fcc 	andi	r2,r2,255
 8014af0:	10800058 	cmpnei	r2,r2,1
 8014af4:	1000011e 	bne	r2,zero,8014afc <OSTaskDel+0x3c8>
        OS_Sched();                                     /* Find new highest priority task              */
 8014af8:	800f9400 	call	800f940 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8014afc:	0005883a 	mov	r2,zero
}
 8014b00:	e037883a 	mov	sp,fp
 8014b04:	dfc00117 	ldw	ra,4(sp)
 8014b08:	df000017 	ldw	fp,0(sp)
 8014b0c:	dec00204 	addi	sp,sp,8
 8014b10:	f800283a 	ret

08014b14 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 8014b14:	defff504 	addi	sp,sp,-44
 8014b18:	df000a15 	stw	fp,40(sp)
 8014b1c:	df000a04 	addi	fp,sp,40
 8014b20:	2005883a 	mov	r2,r4
 8014b24:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8014b28:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 8014b2c:	e0bfff03 	ldbu	r2,-4(fp)
 8014b30:	10800518 	cmpnei	r2,r2,20
 8014b34:	1000021e 	bne	r2,zero,8014b40 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 8014b38:	00800f84 	movi	r2,62
 8014b3c:	00004706 	br	8014c5c <OSTaskDelReq+0x148>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 8014b40:	e0bfff03 	ldbu	r2,-4(fp)
 8014b44:	10800530 	cmpltui	r2,r2,20
 8014b48:	1000051e 	bne	r2,zero,8014b60 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 8014b4c:	e0bfff03 	ldbu	r2,-4(fp)
 8014b50:	10803fe0 	cmpeqi	r2,r2,255
 8014b54:	1000021e 	bne	r2,zero,8014b60 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 8014b58:	00800a84 	movi	r2,42
 8014b5c:	00003f06 	br	8014c5c <OSTaskDelReq+0x148>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 8014b60:	e0bfff03 	ldbu	r2,-4(fp)
 8014b64:	10803fd8 	cmpnei	r2,r2,255
 8014b68:	1000131e 	bne	r2,zero,8014bb8 <OSTaskDelReq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014b6c:	0005303a 	rdctl	r2,status
 8014b70:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014b74:	e0fff917 	ldw	r3,-28(fp)
 8014b78:	00bfff84 	movi	r2,-2
 8014b7c:	1884703a 	and	r2,r3,r2
 8014b80:	1001703a 	wrctl	status,r2
  
  return context;
 8014b84:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 8014b88:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 8014b8c:	008200f4 	movhi	r2,2051
 8014b90:	10bb4804 	addi	r2,r2,-4832
 8014b94:	10800017 	ldw	r2,0(r2)
 8014b98:	10800dc3 	ldbu	r2,55(r2)
 8014b9c:	e0bff705 	stb	r2,-36(fp)
 8014ba0:	e0bff617 	ldw	r2,-40(fp)
 8014ba4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014ba8:	e0bffa17 	ldw	r2,-24(fp)
 8014bac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 8014bb0:	e0bff703 	ldbu	r2,-36(fp)
 8014bb4:	00002906 	br	8014c5c <OSTaskDelReq+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014bb8:	0005303a 	rdctl	r2,status
 8014bbc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014bc0:	e0fffb17 	ldw	r3,-20(fp)
 8014bc4:	00bfff84 	movi	r2,-2
 8014bc8:	1884703a 	and	r2,r3,r2
 8014bcc:	1001703a 	wrctl	status,r2
  
  return context;
 8014bd0:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 8014bd4:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 8014bd8:	e0ffff03 	ldbu	r3,-4(fp)
 8014bdc:	008200f4 	movhi	r2,2051
 8014be0:	1099cf04 	addi	r2,r2,26428
 8014be4:	18c7883a 	add	r3,r3,r3
 8014be8:	18c7883a 	add	r3,r3,r3
 8014bec:	10c5883a 	add	r2,r2,r3
 8014bf0:	10800017 	ldw	r2,0(r2)
 8014bf4:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 8014bf8:	e0bff817 	ldw	r2,-32(fp)
 8014bfc:	1000061e 	bne	r2,zero,8014c18 <OSTaskDelReq+0x104>
 8014c00:	e0bff617 	ldw	r2,-40(fp)
 8014c04:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014c08:	e0bffc17 	ldw	r2,-16(fp)
 8014c0c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 8014c10:	008010c4 	movi	r2,67
 8014c14:	00001106 	br	8014c5c <OSTaskDelReq+0x148>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 8014c18:	e0bff817 	ldw	r2,-32(fp)
 8014c1c:	10800058 	cmpnei	r2,r2,1
 8014c20:	1000061e 	bne	r2,zero,8014c3c <OSTaskDelReq+0x128>
 8014c24:	e0bff617 	ldw	r2,-40(fp)
 8014c28:	e0bffd15 	stw	r2,-12(fp)
 8014c2c:	e0bffd17 	ldw	r2,-12(fp)
 8014c30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 8014c34:	00800f44 	movi	r2,61
 8014c38:	00000806 	br	8014c5c <OSTaskDelReq+0x148>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 8014c3c:	e0bff817 	ldw	r2,-32(fp)
 8014c40:	00c00fc4 	movi	r3,63
 8014c44:	10c00dc5 	stb	r3,55(r2)
 8014c48:	e0bff617 	ldw	r2,-40(fp)
 8014c4c:	e0bffe15 	stw	r2,-8(fp)
 8014c50:	e0bffe17 	ldw	r2,-8(fp)
 8014c54:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 8014c58:	0005883a 	mov	r2,zero
}
 8014c5c:	e037883a 	mov	sp,fp
 8014c60:	df000017 	ldw	fp,0(sp)
 8014c64:	dec00104 	addi	sp,sp,4
 8014c68:	f800283a 	ret

08014c6c <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 8014c6c:	defff404 	addi	sp,sp,-48
 8014c70:	dfc00b15 	stw	ra,44(sp)
 8014c74:	df000a15 	stw	fp,40(sp)
 8014c78:	df000a04 	addi	fp,sp,40
 8014c7c:	2005883a 	mov	r2,r4
 8014c80:	e17ffe15 	stw	r5,-8(fp)
 8014c84:	e1bfff15 	stw	r6,-4(fp)
 8014c88:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 8014c8c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 8014c90:	e0bfff17 	ldw	r2,-4(fp)
 8014c94:	1000021e 	bne	r2,zero,8014ca0 <OSTaskNameGet+0x34>
        return (0);
 8014c98:	0005883a 	mov	r2,zero
 8014c9c:	00005806 	br	8014e00 <OSTaskNameGet+0x194>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 8014ca0:	e0bffd03 	ldbu	r2,-12(fp)
 8014ca4:	10800570 	cmpltui	r2,r2,21
 8014ca8:	1000081e 	bne	r2,zero,8014ccc <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 8014cac:	e0bffd03 	ldbu	r2,-12(fp)
 8014cb0:	10803fe0 	cmpeqi	r2,r2,255
 8014cb4:	1000051e 	bne	r2,zero,8014ccc <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 8014cb8:	e0bfff17 	ldw	r2,-4(fp)
 8014cbc:	00c00a84 	movi	r3,42
 8014cc0:	10c00005 	stb	r3,0(r2)
            return (0);
 8014cc4:	0005883a 	mov	r2,zero
 8014cc8:	00004d06 	br	8014e00 <OSTaskNameGet+0x194>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 8014ccc:	e0bffe17 	ldw	r2,-8(fp)
 8014cd0:	1000051e 	bne	r2,zero,8014ce8 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 8014cd4:	e0bfff17 	ldw	r2,-4(fp)
 8014cd8:	00c00304 	movi	r3,12
 8014cdc:	10c00005 	stb	r3,0(r2)
        return (0);
 8014ce0:	0005883a 	mov	r2,zero
 8014ce4:	00004606 	br	8014e00 <OSTaskNameGet+0x194>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 8014ce8:	008200f4 	movhi	r2,2051
 8014cec:	10bb4704 	addi	r2,r2,-4836
 8014cf0:	10800003 	ldbu	r2,0(r2)
 8014cf4:	10803fcc 	andi	r2,r2,255
 8014cf8:	10000526 	beq	r2,zero,8014d10 <OSTaskNameGet+0xa4>
        *perr = OS_ERR_NAME_GET_ISR;
 8014cfc:	e0bfff17 	ldw	r2,-4(fp)
 8014d00:	00c00444 	movi	r3,17
 8014d04:	10c00005 	stb	r3,0(r2)
        return (0);
 8014d08:	0005883a 	mov	r2,zero
 8014d0c:	00003c06 	br	8014e00 <OSTaskNameGet+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014d10:	0005303a 	rdctl	r2,status
 8014d14:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014d18:	e0fff917 	ldw	r3,-28(fp)
 8014d1c:	00bfff84 	movi	r2,-2
 8014d20:	1884703a 	and	r2,r3,r2
 8014d24:	1001703a 	wrctl	status,r2
  
  return context;
 8014d28:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 8014d2c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 8014d30:	e0bffd03 	ldbu	r2,-12(fp)
 8014d34:	10803fd8 	cmpnei	r2,r2,255
 8014d38:	1000051e 	bne	r2,zero,8014d50 <OSTaskNameGet+0xe4>
        prio = OSTCBCur->OSTCBPrio;
 8014d3c:	008200f4 	movhi	r2,2051
 8014d40:	10bb4804 	addi	r2,r2,-4832
 8014d44:	10800017 	ldw	r2,0(r2)
 8014d48:	10800c83 	ldbu	r2,50(r2)
 8014d4c:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 8014d50:	e0fffd03 	ldbu	r3,-12(fp)
 8014d54:	008200f4 	movhi	r2,2051
 8014d58:	1099cf04 	addi	r2,r2,26428
 8014d5c:	18c7883a 	add	r3,r3,r3
 8014d60:	18c7883a 	add	r3,r3,r3
 8014d64:	10c5883a 	add	r2,r2,r3
 8014d68:	10800017 	ldw	r2,0(r2)
 8014d6c:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 8014d70:	e0bff717 	ldw	r2,-36(fp)
 8014d74:	1000091e 	bne	r2,zero,8014d9c <OSTaskNameGet+0x130>
 8014d78:	e0bff617 	ldw	r2,-40(fp)
 8014d7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014d80:	e0bffa17 	ldw	r2,-24(fp)
 8014d84:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 8014d88:	e0bfff17 	ldw	r2,-4(fp)
 8014d8c:	00c010c4 	movi	r3,67
 8014d90:	10c00005 	stb	r3,0(r2)
        return (0);
 8014d94:	0005883a 	mov	r2,zero
 8014d98:	00001906 	br	8014e00 <OSTaskNameGet+0x194>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 8014d9c:	e0bff717 	ldw	r2,-36(fp)
 8014da0:	10800058 	cmpnei	r2,r2,1
 8014da4:	1000091e 	bne	r2,zero,8014dcc <OSTaskNameGet+0x160>
 8014da8:	e0bff617 	ldw	r2,-40(fp)
 8014dac:	e0bffb15 	stw	r2,-20(fp)
 8014db0:	e0bffb17 	ldw	r2,-20(fp)
 8014db4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 8014db8:	e0bfff17 	ldw	r2,-4(fp)
 8014dbc:	00c010c4 	movi	r3,67
 8014dc0:	10c00005 	stb	r3,0(r2)
        return (0);
 8014dc4:	0005883a 	mov	r2,zero
 8014dc8:	00000d06 	br	8014e00 <OSTaskNameGet+0x194>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 8014dcc:	e0bff717 	ldw	r2,-36(fp)
 8014dd0:	10801304 	addi	r2,r2,76
 8014dd4:	e13ffe17 	ldw	r4,-8(fp)
 8014dd8:	100b883a 	mov	r5,r2
 8014ddc:	800fa7c0 	call	800fa7c <OS_StrCopy>
 8014de0:	e0bff805 	stb	r2,-32(fp)
 8014de4:	e0bff617 	ldw	r2,-40(fp)
 8014de8:	e0bffc15 	stw	r2,-16(fp)
 8014dec:	e0bffc17 	ldw	r2,-16(fp)
 8014df0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8014df4:	e0bfff17 	ldw	r2,-4(fp)
 8014df8:	10000005 	stb	zero,0(r2)
    return (len);
 8014dfc:	e0bff803 	ldbu	r2,-32(fp)
}
 8014e00:	e037883a 	mov	sp,fp
 8014e04:	dfc00117 	ldw	ra,4(sp)
 8014e08:	df000017 	ldw	fp,0(sp)
 8014e0c:	dec00204 	addi	sp,sp,8
 8014e10:	f800283a 	ret

08014e14 <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 8014e14:	defff304 	addi	sp,sp,-52
 8014e18:	dfc00c15 	stw	ra,48(sp)
 8014e1c:	df000b15 	stw	fp,44(sp)
 8014e20:	df000b04 	addi	fp,sp,44
 8014e24:	2005883a 	mov	r2,r4
 8014e28:	e17ffe15 	stw	r5,-8(fp)
 8014e2c:	e1bfff15 	stw	r6,-4(fp)
 8014e30:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 8014e34:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 8014e38:	e0bfff17 	ldw	r2,-4(fp)
 8014e3c:	1000011e 	bne	r2,zero,8014e44 <OSTaskNameSet+0x30>
        return;
 8014e40:	00005f06 	br	8014fc0 <OSTaskNameSet+0x1ac>
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 8014e44:	e0bffd03 	ldbu	r2,-12(fp)
 8014e48:	10800570 	cmpltui	r2,r2,21
 8014e4c:	1000071e 	bne	r2,zero,8014e6c <OSTaskNameSet+0x58>
        if (prio != OS_PRIO_SELF) {
 8014e50:	e0bffd03 	ldbu	r2,-12(fp)
 8014e54:	10803fe0 	cmpeqi	r2,r2,255
 8014e58:	1000041e 	bne	r2,zero,8014e6c <OSTaskNameSet+0x58>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 8014e5c:	e0bfff17 	ldw	r2,-4(fp)
 8014e60:	00c00a84 	movi	r3,42
 8014e64:	10c00005 	stb	r3,0(r2)
            return;
 8014e68:	00005506 	br	8014fc0 <OSTaskNameSet+0x1ac>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 8014e6c:	e0bffe17 	ldw	r2,-8(fp)
 8014e70:	1000041e 	bne	r2,zero,8014e84 <OSTaskNameSet+0x70>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 8014e74:	e0bfff17 	ldw	r2,-4(fp)
 8014e78:	00c00304 	movi	r3,12
 8014e7c:	10c00005 	stb	r3,0(r2)
        return;
 8014e80:	00004f06 	br	8014fc0 <OSTaskNameSet+0x1ac>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 8014e84:	008200f4 	movhi	r2,2051
 8014e88:	10bb4704 	addi	r2,r2,-4836
 8014e8c:	10800003 	ldbu	r2,0(r2)
 8014e90:	10803fcc 	andi	r2,r2,255
 8014e94:	10000426 	beq	r2,zero,8014ea8 <OSTaskNameSet+0x94>
        *perr = OS_ERR_NAME_SET_ISR;
 8014e98:	e0bfff17 	ldw	r2,-4(fp)
 8014e9c:	00c00484 	movi	r3,18
 8014ea0:	10c00005 	stb	r3,0(r2)
        return;
 8014ea4:	00004606 	br	8014fc0 <OSTaskNameSet+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8014ea8:	0005303a 	rdctl	r2,status
 8014eac:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8014eb0:	e0fff817 	ldw	r3,-32(fp)
 8014eb4:	00bfff84 	movi	r2,-2
 8014eb8:	1884703a 	and	r2,r3,r2
 8014ebc:	1001703a 	wrctl	status,r2
  
  return context;
 8014ec0:	e0bff817 	ldw	r2,-32(fp)
    }
    OS_ENTER_CRITICAL();
 8014ec4:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 8014ec8:	e0bffd03 	ldbu	r2,-12(fp)
 8014ecc:	10803fd8 	cmpnei	r2,r2,255
 8014ed0:	1000051e 	bne	r2,zero,8014ee8 <OSTaskNameSet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 8014ed4:	008200f4 	movhi	r2,2051
 8014ed8:	10bb4804 	addi	r2,r2,-4832
 8014edc:	10800017 	ldw	r2,0(r2)
 8014ee0:	10800c83 	ldbu	r2,50(r2)
 8014ee4:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 8014ee8:	e0fffd03 	ldbu	r3,-12(fp)
 8014eec:	008200f4 	movhi	r2,2051
 8014ef0:	1099cf04 	addi	r2,r2,26428
 8014ef4:	18c7883a 	add	r3,r3,r3
 8014ef8:	18c7883a 	add	r3,r3,r3
 8014efc:	10c5883a 	add	r2,r2,r3
 8014f00:	10800017 	ldw	r2,0(r2)
 8014f04:	e0bff615 	stw	r2,-40(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 8014f08:	e0bff617 	ldw	r2,-40(fp)
 8014f0c:	1000081e 	bne	r2,zero,8014f30 <OSTaskNameSet+0x11c>
 8014f10:	e0bff517 	ldw	r2,-44(fp)
 8014f14:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8014f18:	e0bff917 	ldw	r2,-28(fp)
 8014f1c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 8014f20:	e0bfff17 	ldw	r2,-4(fp)
 8014f24:	00c010c4 	movi	r3,67
 8014f28:	10c00005 	stb	r3,0(r2)
        return;
 8014f2c:	00002406 	br	8014fc0 <OSTaskNameSet+0x1ac>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 8014f30:	e0bff617 	ldw	r2,-40(fp)
 8014f34:	10800058 	cmpnei	r2,r2,1
 8014f38:	1000081e 	bne	r2,zero,8014f5c <OSTaskNameSet+0x148>
 8014f3c:	e0bff517 	ldw	r2,-44(fp)
 8014f40:	e0bffa15 	stw	r2,-24(fp)
 8014f44:	e0bffa17 	ldw	r2,-24(fp)
 8014f48:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 8014f4c:	e0bfff17 	ldw	r2,-4(fp)
 8014f50:	00c010c4 	movi	r3,67
 8014f54:	10c00005 	stb	r3,0(r2)
        return;
 8014f58:	00001906 	br	8014fc0 <OSTaskNameSet+0x1ac>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 8014f5c:	e13ffe17 	ldw	r4,-8(fp)
 8014f60:	800faf00 	call	800faf0 <OS_StrLen>
 8014f64:	e0bff705 	stb	r2,-36(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 8014f68:	e0bff703 	ldbu	r2,-36(fp)
 8014f6c:	10800830 	cmpltui	r2,r2,32
 8014f70:	1000081e 	bne	r2,zero,8014f94 <OSTaskNameSet+0x180>
 8014f74:	e0bff517 	ldw	r2,-44(fp)
 8014f78:	e0bffb15 	stw	r2,-20(fp)
 8014f7c:	e0bffb17 	ldw	r2,-20(fp)
 8014f80:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 8014f84:	e0bfff17 	ldw	r2,-4(fp)
 8014f88:	00c01044 	movi	r3,65
 8014f8c:	10c00005 	stb	r3,0(r2)
        return;
 8014f90:	00000b06 	br	8014fc0 <OSTaskNameSet+0x1ac>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 8014f94:	e0bff617 	ldw	r2,-40(fp)
 8014f98:	10801304 	addi	r2,r2,76
 8014f9c:	1009883a 	mov	r4,r2
 8014fa0:	e17ffe17 	ldw	r5,-8(fp)
 8014fa4:	800fa7c0 	call	800fa7c <OS_StrCopy>
 8014fa8:	e0bff517 	ldw	r2,-44(fp)
 8014fac:	e0bffc15 	stw	r2,-16(fp)
 8014fb0:	e0bffc17 	ldw	r2,-16(fp)
 8014fb4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 8014fb8:	e0bfff17 	ldw	r2,-4(fp)
 8014fbc:	10000005 	stb	zero,0(r2)
}
 8014fc0:	e037883a 	mov	sp,fp
 8014fc4:	dfc00117 	ldw	ra,4(sp)
 8014fc8:	df000017 	ldw	fp,0(sp)
 8014fcc:	dec00204 	addi	sp,sp,8
 8014fd0:	f800283a 	ret

08014fd4 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 8014fd4:	defff404 	addi	sp,sp,-48
 8014fd8:	dfc00b15 	stw	ra,44(sp)
 8014fdc:	df000a15 	stw	fp,40(sp)
 8014fe0:	df000a04 	addi	fp,sp,40
 8014fe4:	2005883a 	mov	r2,r4
 8014fe8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 8014fec:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 8014ff0:	e0bfff03 	ldbu	r2,-4(fp)
 8014ff4:	10800530 	cmpltui	r2,r2,20
 8014ff8:	1000021e 	bne	r2,zero,8015004 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 8014ffc:	00800a84 	movi	r2,42
 8015000:	00006d06 	br	80151b8 <OSTaskResume+0x1e4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015004:	0005303a 	rdctl	r2,status
 8015008:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801500c:	e0fff817 	ldw	r3,-32(fp)
 8015010:	00bfff84 	movi	r2,-2
 8015014:	1884703a 	and	r2,r3,r2
 8015018:	1001703a 	wrctl	status,r2
  
  return context;
 801501c:	e0bff817 	ldw	r2,-32(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8015020:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 8015024:	e0ffff03 	ldbu	r3,-4(fp)
 8015028:	008200f4 	movhi	r2,2051
 801502c:	1099cf04 	addi	r2,r2,26428
 8015030:	18c7883a 	add	r3,r3,r3
 8015034:	18c7883a 	add	r3,r3,r3
 8015038:	10c5883a 	add	r2,r2,r3
 801503c:	10800017 	ldw	r2,0(r2)
 8015040:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 8015044:	e0bff717 	ldw	r2,-36(fp)
 8015048:	1000061e 	bne	r2,zero,8015064 <OSTaskResume+0x90>
 801504c:	e0bff617 	ldw	r2,-40(fp)
 8015050:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015054:	e0bff917 	ldw	r2,-28(fp)
 8015058:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 801505c:	00801184 	movi	r2,70
 8015060:	00005506 	br	80151b8 <OSTaskResume+0x1e4>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 8015064:	e0bff717 	ldw	r2,-36(fp)
 8015068:	10800058 	cmpnei	r2,r2,1
 801506c:	1000061e 	bne	r2,zero,8015088 <OSTaskResume+0xb4>
 8015070:	e0bff617 	ldw	r2,-40(fp)
 8015074:	e0bffa15 	stw	r2,-24(fp)
 8015078:	e0bffa17 	ldw	r2,-24(fp)
 801507c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 8015080:	008010c4 	movi	r2,67
 8015084:	00004c06 	br	80151b8 <OSTaskResume+0x1e4>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 8015088:	e0bff717 	ldw	r2,-36(fp)
 801508c:	10800c03 	ldbu	r2,48(r2)
 8015090:	10803fcc 	andi	r2,r2,255
 8015094:	1080020c 	andi	r2,r2,8
 8015098:	10004226 	beq	r2,zero,80151a4 <OSTaskResume+0x1d0>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 801509c:	e0bff717 	ldw	r2,-36(fp)
 80150a0:	10c00c03 	ldbu	r3,48(r2)
 80150a4:	00bffdc4 	movi	r2,-9
 80150a8:	1884703a 	and	r2,r3,r2
 80150ac:	1007883a 	mov	r3,r2
 80150b0:	e0bff717 	ldw	r2,-36(fp)
 80150b4:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 80150b8:	e0bff717 	ldw	r2,-36(fp)
 80150bc:	10800c03 	ldbu	r2,48(r2)
 80150c0:	10803fcc 	andi	r2,r2,255
 80150c4:	1000311e 	bne	r2,zero,801518c <OSTaskResume+0x1b8>
            if (ptcb->OSTCBDly == 0) {
 80150c8:	e0bff717 	ldw	r2,-36(fp)
 80150cc:	10800b8b 	ldhu	r2,46(r2)
 80150d0:	10bfffcc 	andi	r2,r2,65535
 80150d4:	1000281e 	bne	r2,zero,8015178 <OSTaskResume+0x1a4>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 80150d8:	e0bff717 	ldw	r2,-36(fp)
 80150dc:	10c00d83 	ldbu	r3,54(r2)
 80150e0:	008200f4 	movhi	r2,2051
 80150e4:	10bb4504 	addi	r2,r2,-4844
 80150e8:	10800003 	ldbu	r2,0(r2)
 80150ec:	1884b03a 	or	r2,r3,r2
 80150f0:	1007883a 	mov	r3,r2
 80150f4:	008200f4 	movhi	r2,2051
 80150f8:	10bb4504 	addi	r2,r2,-4844
 80150fc:	10c00005 	stb	r3,0(r2)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8015100:	e0bff717 	ldw	r2,-36(fp)
 8015104:	10800d03 	ldbu	r2,52(r2)
 8015108:	10c03fcc 	andi	r3,r2,255
 801510c:	e0bff717 	ldw	r2,-36(fp)
 8015110:	10800d03 	ldbu	r2,52(r2)
 8015114:	11003fcc 	andi	r4,r2,255
 8015118:	008200f4 	movhi	r2,2051
 801511c:	10bb4544 	addi	r2,r2,-4843
 8015120:	1105883a 	add	r2,r2,r4
 8015124:	11000003 	ldbu	r4,0(r2)
 8015128:	e0bff717 	ldw	r2,-36(fp)
 801512c:	10800d43 	ldbu	r2,53(r2)
 8015130:	2084b03a 	or	r2,r4,r2
 8015134:	1009883a 	mov	r4,r2
 8015138:	008200f4 	movhi	r2,2051
 801513c:	10bb4544 	addi	r2,r2,-4843
 8015140:	10c5883a 	add	r2,r2,r3
 8015144:	11000005 	stb	r4,0(r2)
 8015148:	e0bff617 	ldw	r2,-40(fp)
 801514c:	e0bffb15 	stw	r2,-20(fp)
 8015150:	e0bffb17 	ldw	r2,-20(fp)
 8015154:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 8015158:	008200f4 	movhi	r2,2051
 801515c:	10bb3944 	addi	r2,r2,-4891
 8015160:	10800003 	ldbu	r2,0(r2)
 8015164:	10803fcc 	andi	r2,r2,255
 8015168:	10800058 	cmpnei	r2,r2,1
 801516c:	10000b1e 	bne	r2,zero,801519c <OSTaskResume+0x1c8>
                    OS_Sched();                               /* Find new highest priority task        */
 8015170:	800f9400 	call	800f940 <OS_Sched>
 8015174:	00000906 	br	801519c <OSTaskResume+0x1c8>
 8015178:	e0bff617 	ldw	r2,-40(fp)
 801517c:	e0bffc15 	stw	r2,-16(fp)
 8015180:	e0bffc17 	ldw	r2,-16(fp)
 8015184:	1001703a 	wrctl	status,r2
 8015188:	00000406 	br	801519c <OSTaskResume+0x1c8>
 801518c:	e0bff617 	ldw	r2,-40(fp)
 8015190:	e0bffd15 	stw	r2,-12(fp)
 8015194:	e0bffd17 	ldw	r2,-12(fp)
 8015198:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 801519c:	0005883a 	mov	r2,zero
 80151a0:	00000506 	br	80151b8 <OSTaskResume+0x1e4>
 80151a4:	e0bff617 	ldw	r2,-40(fp)
 80151a8:	e0bffe15 	stw	r2,-8(fp)
 80151ac:	e0bffe17 	ldw	r2,-8(fp)
 80151b0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 80151b4:	00801104 	movi	r2,68
}
 80151b8:	e037883a 	mov	sp,fp
 80151bc:	dfc00117 	ldw	ra,4(sp)
 80151c0:	df000017 	ldw	fp,0(sp)
 80151c4:	dec00204 	addi	sp,sp,8
 80151c8:	f800283a 	ret

080151cc <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 80151cc:	defff304 	addi	sp,sp,-52
 80151d0:	df000c15 	stw	fp,48(sp)
 80151d4:	df000c04 	addi	fp,sp,48
 80151d8:	2005883a 	mov	r2,r4
 80151dc:	e17fff15 	stw	r5,-4(fp)
 80151e0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 80151e4:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 80151e8:	e0bffe03 	ldbu	r2,-8(fp)
 80151ec:	10800570 	cmpltui	r2,r2,21
 80151f0:	1000051e 	bne	r2,zero,8015208 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 80151f4:	e0bffe03 	ldbu	r2,-8(fp)
 80151f8:	10803fe0 	cmpeqi	r2,r2,255
 80151fc:	1000021e 	bne	r2,zero,8015208 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 8015200:	00800a84 	movi	r2,42
 8015204:	00005f06 	br	8015384 <OSTaskStkChk+0x1b8>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 8015208:	e0bfff17 	ldw	r2,-4(fp)
 801520c:	1000021e 	bne	r2,zero,8015218 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 8015210:	00800244 	movi	r2,9
 8015214:	00005b06 	br	8015384 <OSTaskStkChk+0x1b8>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 8015218:	e0bfff17 	ldw	r2,-4(fp)
 801521c:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 8015220:	e0bfff17 	ldw	r2,-4(fp)
 8015224:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015228:	0005303a 	rdctl	r2,status
 801522c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015230:	e0fff917 	ldw	r3,-28(fp)
 8015234:	00bfff84 	movi	r2,-2
 8015238:	1884703a 	and	r2,r3,r2
 801523c:	1001703a 	wrctl	status,r2
  
  return context;
 8015240:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 8015244:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 8015248:	e0bffe03 	ldbu	r2,-8(fp)
 801524c:	10803fd8 	cmpnei	r2,r2,255
 8015250:	1000051e 	bne	r2,zero,8015268 <OSTaskStkChk+0x9c>
        prio = OSTCBCur->OSTCBPrio;
 8015254:	008200f4 	movhi	r2,2051
 8015258:	10bb4804 	addi	r2,r2,-4832
 801525c:	10800017 	ldw	r2,0(r2)
 8015260:	10800c83 	ldbu	r2,50(r2)
 8015264:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 8015268:	e0fffe03 	ldbu	r3,-8(fp)
 801526c:	008200f4 	movhi	r2,2051
 8015270:	1099cf04 	addi	r2,r2,26428
 8015274:	18c7883a 	add	r3,r3,r3
 8015278:	18c7883a 	add	r3,r3,r3
 801527c:	10c5883a 	add	r2,r2,r3
 8015280:	10800017 	ldw	r2,0(r2)
 8015284:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 8015288:	e0bff717 	ldw	r2,-36(fp)
 801528c:	1000061e 	bne	r2,zero,80152a8 <OSTaskStkChk+0xdc>
 8015290:	e0bff617 	ldw	r2,-40(fp)
 8015294:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015298:	e0bffa17 	ldw	r2,-24(fp)
 801529c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 80152a0:	008010c4 	movi	r2,67
 80152a4:	00003706 	br	8015384 <OSTaskStkChk+0x1b8>
    }
    if (ptcb == OS_TCB_RESERVED) {
 80152a8:	e0bff717 	ldw	r2,-36(fp)
 80152ac:	10800058 	cmpnei	r2,r2,1
 80152b0:	1000061e 	bne	r2,zero,80152cc <OSTaskStkChk+0x100>
 80152b4:	e0bff617 	ldw	r2,-40(fp)
 80152b8:	e0bffb15 	stw	r2,-20(fp)
 80152bc:	e0bffb17 	ldw	r2,-20(fp)
 80152c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 80152c4:	008010c4 	movi	r2,67
 80152c8:	00002e06 	br	8015384 <OSTaskStkChk+0x1b8>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 80152cc:	e0bff717 	ldw	r2,-36(fp)
 80152d0:	1080040b 	ldhu	r2,16(r2)
 80152d4:	10bfffcc 	andi	r2,r2,65535
 80152d8:	1080004c 	andi	r2,r2,1
 80152dc:	1000061e 	bne	r2,zero,80152f8 <OSTaskStkChk+0x12c>
 80152e0:	e0bff617 	ldw	r2,-40(fp)
 80152e4:	e0bffc15 	stw	r2,-16(fp)
 80152e8:	e0bffc17 	ldw	r2,-16(fp)
 80152ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 80152f0:	00801144 	movi	r2,69
 80152f4:	00002306 	br	8015384 <OSTaskStkChk+0x1b8>
    }
    nfree = 0;
 80152f8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 80152fc:	e0bff717 	ldw	r2,-36(fp)
 8015300:	10800317 	ldw	r2,12(r2)
 8015304:	e0bff815 	stw	r2,-32(fp)
    pchk  = ptcb->OSTCBStkBottom;
 8015308:	e0bff717 	ldw	r2,-36(fp)
 801530c:	10800217 	ldw	r2,8(r2)
 8015310:	e0bff415 	stw	r2,-48(fp)
 8015314:	e0bff617 	ldw	r2,-40(fp)
 8015318:	e0bffd15 	stw	r2,-12(fp)
 801531c:	e0bffd17 	ldw	r2,-12(fp)
 8015320:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8015324:	00000306 	br	8015334 <OSTaskStkChk+0x168>
        nfree++;
 8015328:	e0bff517 	ldw	r2,-44(fp)
 801532c:	10800044 	addi	r2,r2,1
 8015330:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 8015334:	e0bff417 	ldw	r2,-48(fp)
 8015338:	10c00104 	addi	r3,r2,4
 801533c:	e0fff415 	stw	r3,-48(fp)
 8015340:	10800017 	ldw	r2,0(r2)
 8015344:	103ff826 	beq	r2,zero,8015328 <OSTaskStkChk+0x15c>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 8015348:	e0bff517 	ldw	r2,-44(fp)
 801534c:	1085883a 	add	r2,r2,r2
 8015350:	1085883a 	add	r2,r2,r2
 8015354:	1007883a 	mov	r3,r2
 8015358:	e0bfff17 	ldw	r2,-4(fp)
 801535c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 8015360:	e0fff817 	ldw	r3,-32(fp)
 8015364:	e0bff517 	ldw	r2,-44(fp)
 8015368:	1885c83a 	sub	r2,r3,r2
 801536c:	1085883a 	add	r2,r2,r2
 8015370:	1085883a 	add	r2,r2,r2
 8015374:	1007883a 	mov	r3,r2
 8015378:	e0bfff17 	ldw	r2,-4(fp)
 801537c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 8015380:	0005883a 	mov	r2,zero
}
 8015384:	e037883a 	mov	sp,fp
 8015388:	df000017 	ldw	fp,0(sp)
 801538c:	dec00104 	addi	sp,sp,4
 8015390:	f800283a 	ret

08015394 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 8015394:	defff504 	addi	sp,sp,-44
 8015398:	dfc00a15 	stw	ra,40(sp)
 801539c:	df000915 	stw	fp,36(sp)
 80153a0:	df000904 	addi	fp,sp,36
 80153a4:	2005883a 	mov	r2,r4
 80153a8:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80153ac:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 80153b0:	e0bfff03 	ldbu	r2,-4(fp)
 80153b4:	10800518 	cmpnei	r2,r2,20
 80153b8:	1000021e 	bne	r2,zero,80153c4 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 80153bc:	008011c4 	movi	r2,71
 80153c0:	00007406 	br	8015594 <OSTaskSuspend+0x200>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 80153c4:	e0bfff03 	ldbu	r2,-4(fp)
 80153c8:	10800530 	cmpltui	r2,r2,20
 80153cc:	1000051e 	bne	r2,zero,80153e4 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 80153d0:	e0bfff03 	ldbu	r2,-4(fp)
 80153d4:	10803fe0 	cmpeqi	r2,r2,255
 80153d8:	1000021e 	bne	r2,zero,80153e4 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 80153dc:	00800a84 	movi	r2,42
 80153e0:	00006c06 	br	8015594 <OSTaskSuspend+0x200>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80153e4:	0005303a 	rdctl	r2,status
 80153e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80153ec:	e0fffb17 	ldw	r3,-20(fp)
 80153f0:	00bfff84 	movi	r2,-2
 80153f4:	1884703a 	and	r2,r3,r2
 80153f8:	1001703a 	wrctl	status,r2
  
  return context;
 80153fc:	e0bffb17 	ldw	r2,-20(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 8015400:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 8015404:	e0bfff03 	ldbu	r2,-4(fp)
 8015408:	10803fd8 	cmpnei	r2,r2,255
 801540c:	1000081e 	bne	r2,zero,8015430 <OSTaskSuspend+0x9c>
        prio = OSTCBCur->OSTCBPrio;
 8015410:	008200f4 	movhi	r2,2051
 8015414:	10bb4804 	addi	r2,r2,-4832
 8015418:	10800017 	ldw	r2,0(r2)
 801541c:	10800c83 	ldbu	r2,50(r2)
 8015420:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 8015424:	00800044 	movi	r2,1
 8015428:	e0bff705 	stb	r2,-36(fp)
 801542c:	00000b06 	br	801545c <OSTaskSuspend+0xc8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 8015430:	008200f4 	movhi	r2,2051
 8015434:	10bb4804 	addi	r2,r2,-4832
 8015438:	10800017 	ldw	r2,0(r2)
 801543c:	10800c83 	ldbu	r2,50(r2)
 8015440:	10c03fcc 	andi	r3,r2,255
 8015444:	e0bfff03 	ldbu	r2,-4(fp)
 8015448:	1880031e 	bne	r3,r2,8015458 <OSTaskSuspend+0xc4>
        self = OS_TRUE;
 801544c:	00800044 	movi	r2,1
 8015450:	e0bff705 	stb	r2,-36(fp)
 8015454:	00000106 	br	801545c <OSTaskSuspend+0xc8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 8015458:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 801545c:	e0ffff03 	ldbu	r3,-4(fp)
 8015460:	008200f4 	movhi	r2,2051
 8015464:	1099cf04 	addi	r2,r2,26428
 8015468:	18c7883a 	add	r3,r3,r3
 801546c:	18c7883a 	add	r3,r3,r3
 8015470:	10c5883a 	add	r2,r2,r3
 8015474:	10800017 	ldw	r2,0(r2)
 8015478:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 801547c:	e0bff917 	ldw	r2,-28(fp)
 8015480:	1000061e 	bne	r2,zero,801549c <OSTaskSuspend+0x108>
 8015484:	e0bff817 	ldw	r2,-32(fp)
 8015488:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801548c:	e0bffc17 	ldw	r2,-16(fp)
 8015490:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 8015494:	00801204 	movi	r2,72
 8015498:	00003e06 	br	8015594 <OSTaskSuspend+0x200>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 801549c:	e0bff917 	ldw	r2,-28(fp)
 80154a0:	10800058 	cmpnei	r2,r2,1
 80154a4:	1000061e 	bne	r2,zero,80154c0 <OSTaskSuspend+0x12c>
 80154a8:	e0bff817 	ldw	r2,-32(fp)
 80154ac:	e0bffd15 	stw	r2,-12(fp)
 80154b0:	e0bffd17 	ldw	r2,-12(fp)
 80154b4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 80154b8:	008010c4 	movi	r2,67
 80154bc:	00003506 	br	8015594 <OSTaskSuspend+0x200>
    }
    y            = ptcb->OSTCBY;
 80154c0:	e0bff917 	ldw	r2,-28(fp)
 80154c4:	10800d03 	ldbu	r2,52(r2)
 80154c8:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 80154cc:	e0fffa03 	ldbu	r3,-24(fp)
 80154d0:	e13ffa03 	ldbu	r4,-24(fp)
 80154d4:	008200f4 	movhi	r2,2051
 80154d8:	10bb4544 	addi	r2,r2,-4843
 80154dc:	1105883a 	add	r2,r2,r4
 80154e0:	10800003 	ldbu	r2,0(r2)
 80154e4:	1009883a 	mov	r4,r2
 80154e8:	e0bff917 	ldw	r2,-28(fp)
 80154ec:	10800d43 	ldbu	r2,53(r2)
 80154f0:	0084303a 	nor	r2,zero,r2
 80154f4:	2084703a 	and	r2,r4,r2
 80154f8:	1009883a 	mov	r4,r2
 80154fc:	008200f4 	movhi	r2,2051
 8015500:	10bb4544 	addi	r2,r2,-4843
 8015504:	10c5883a 	add	r2,r2,r3
 8015508:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 801550c:	e0fffa03 	ldbu	r3,-24(fp)
 8015510:	008200f4 	movhi	r2,2051
 8015514:	10bb4544 	addi	r2,r2,-4843
 8015518:	10c5883a 	add	r2,r2,r3
 801551c:	10800003 	ldbu	r2,0(r2)
 8015520:	10803fcc 	andi	r2,r2,255
 8015524:	10000c1e 	bne	r2,zero,8015558 <OSTaskSuspend+0x1c4>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 8015528:	e0bff917 	ldw	r2,-28(fp)
 801552c:	10800d83 	ldbu	r2,54(r2)
 8015530:	0084303a 	nor	r2,zero,r2
 8015534:	1007883a 	mov	r3,r2
 8015538:	008200f4 	movhi	r2,2051
 801553c:	10bb4504 	addi	r2,r2,-4844
 8015540:	10800003 	ldbu	r2,0(r2)
 8015544:	1884703a 	and	r2,r3,r2
 8015548:	1007883a 	mov	r3,r2
 801554c:	008200f4 	movhi	r2,2051
 8015550:	10bb4504 	addi	r2,r2,-4844
 8015554:	10c00005 	stb	r3,0(r2)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 8015558:	e0bff917 	ldw	r2,-28(fp)
 801555c:	10800c03 	ldbu	r2,48(r2)
 8015560:	10800214 	ori	r2,r2,8
 8015564:	1007883a 	mov	r3,r2
 8015568:	e0bff917 	ldw	r2,-28(fp)
 801556c:	10c00c05 	stb	r3,48(r2)
 8015570:	e0bff817 	ldw	r2,-32(fp)
 8015574:	e0bffe15 	stw	r2,-8(fp)
 8015578:	e0bffe17 	ldw	r2,-8(fp)
 801557c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 8015580:	e0bff703 	ldbu	r2,-36(fp)
 8015584:	10800058 	cmpnei	r2,r2,1
 8015588:	1000011e 	bne	r2,zero,8015590 <OSTaskSuspend+0x1fc>
        OS_Sched();                                             /* Find new highest priority task      */
 801558c:	800f9400 	call	800f940 <OS_Sched>
    }
    return (OS_ERR_NONE);
 8015590:	0005883a 	mov	r2,zero
}
 8015594:	e037883a 	mov	sp,fp
 8015598:	dfc00117 	ldw	ra,4(sp)
 801559c:	df000017 	ldw	fp,0(sp)
 80155a0:	dec00204 	addi	sp,sp,8
 80155a4:	f800283a 	ret

080155a8 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 80155a8:	defff604 	addi	sp,sp,-40
 80155ac:	dfc00915 	stw	ra,36(sp)
 80155b0:	df000815 	stw	fp,32(sp)
 80155b4:	df000804 	addi	fp,sp,32
 80155b8:	2005883a 	mov	r2,r4
 80155bc:	e17fff15 	stw	r5,-4(fp)
 80155c0:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 80155c4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 80155c8:	e0bffe03 	ldbu	r2,-8(fp)
 80155cc:	10800570 	cmpltui	r2,r2,21
 80155d0:	1000051e 	bne	r2,zero,80155e8 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 80155d4:	e0bffe03 	ldbu	r2,-8(fp)
 80155d8:	10803fe0 	cmpeqi	r2,r2,255
 80155dc:	1000021e 	bne	r2,zero,80155e8 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 80155e0:	00800a84 	movi	r2,42
 80155e4:	00003606 	br	80156c0 <OSTaskQuery+0x118>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 80155e8:	e0bfff17 	ldw	r2,-4(fp)
 80155ec:	1000021e 	bne	r2,zero,80155f8 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 80155f0:	00800244 	movi	r2,9
 80155f4:	00003206 	br	80156c0 <OSTaskQuery+0x118>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80155f8:	0005303a 	rdctl	r2,status
 80155fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015600:	e0fffa17 	ldw	r3,-24(fp)
 8015604:	00bfff84 	movi	r2,-2
 8015608:	1884703a 	and	r2,r3,r2
 801560c:	1001703a 	wrctl	status,r2
  
  return context;
 8015610:	e0bffa17 	ldw	r2,-24(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 8015614:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 8015618:	e0bffe03 	ldbu	r2,-8(fp)
 801561c:	10803fd8 	cmpnei	r2,r2,255
 8015620:	1000051e 	bne	r2,zero,8015638 <OSTaskQuery+0x90>
        prio = OSTCBCur->OSTCBPrio;
 8015624:	008200f4 	movhi	r2,2051
 8015628:	10bb4804 	addi	r2,r2,-4832
 801562c:	10800017 	ldw	r2,0(r2)
 8015630:	10800c83 	ldbu	r2,50(r2)
 8015634:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 8015638:	e0fffe03 	ldbu	r3,-8(fp)
 801563c:	008200f4 	movhi	r2,2051
 8015640:	1099cf04 	addi	r2,r2,26428
 8015644:	18c7883a 	add	r3,r3,r3
 8015648:	18c7883a 	add	r3,r3,r3
 801564c:	10c5883a 	add	r2,r2,r3
 8015650:	10800017 	ldw	r2,0(r2)
 8015654:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 8015658:	e0bff917 	ldw	r2,-28(fp)
 801565c:	1000061e 	bne	r2,zero,8015678 <OSTaskQuery+0xd0>
 8015660:	e0bff817 	ldw	r2,-32(fp)
 8015664:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015668:	e0bffb17 	ldw	r2,-20(fp)
 801566c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 8015670:	00800a44 	movi	r2,41
 8015674:	00001206 	br	80156c0 <OSTaskQuery+0x118>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 8015678:	e0bff917 	ldw	r2,-28(fp)
 801567c:	10800058 	cmpnei	r2,r2,1
 8015680:	1000061e 	bne	r2,zero,801569c <OSTaskQuery+0xf4>
 8015684:	e0bff817 	ldw	r2,-32(fp)
 8015688:	e0bffc15 	stw	r2,-16(fp)
 801568c:	e0bffc17 	ldw	r2,-16(fp)
 8015690:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 8015694:	008010c4 	movi	r2,67
 8015698:	00000906 	br	80156c0 <OSTaskQuery+0x118>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 801569c:	e13fff17 	ldw	r4,-4(fp)
 80156a0:	e17ff917 	ldw	r5,-28(fp)
 80156a4:	01801b04 	movi	r6,108
 80156a8:	800f8dc0 	call	800f8dc <OS_MemCopy>
 80156ac:	e0bff817 	ldw	r2,-32(fp)
 80156b0:	e0bffd15 	stw	r2,-12(fp)
 80156b4:	e0bffd17 	ldw	r2,-12(fp)
 80156b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 80156bc:	0005883a 	mov	r2,zero
}
 80156c0:	e037883a 	mov	sp,fp
 80156c4:	dfc00117 	ldw	ra,4(sp)
 80156c8:	df000017 	ldw	fp,0(sp)
 80156cc:	dec00204 	addi	sp,sp,8
 80156d0:	f800283a 	ret

080156d4 <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 80156d4:	defffc04 	addi	sp,sp,-16
 80156d8:	df000315 	stw	fp,12(sp)
 80156dc:	df000304 	addi	fp,sp,12
 80156e0:	e13ffd15 	stw	r4,-12(fp)
 80156e4:	e17ffe15 	stw	r5,-8(fp)
 80156e8:	3005883a 	mov	r2,r6
 80156ec:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 80156f0:	e0bfff0b 	ldhu	r2,-4(fp)
 80156f4:	1080004c 	andi	r2,r2,1
 80156f8:	10000d26 	beq	r2,zero,8015730 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 80156fc:	e0bfff0b 	ldhu	r2,-4(fp)
 8015700:	1080008c 	andi	r2,r2,2
 8015704:	10000a26 	beq	r2,zero,8015730 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 8015708:	00000706 	br	8015728 <OS_TaskStkClr+0x54>
                size--;
 801570c:	e0bffe17 	ldw	r2,-8(fp)
 8015710:	10bfffc4 	addi	r2,r2,-1
 8015714:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 8015718:	e0bffd17 	ldw	r2,-12(fp)
 801571c:	10c00104 	addi	r3,r2,4
 8015720:	e0fffd15 	stw	r3,-12(fp)
 8015724:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 8015728:	e0bffe17 	ldw	r2,-8(fp)
 801572c:	103ff71e 	bne	r2,zero,801570c <OS_TaskStkClr+0x38>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 8015730:	e037883a 	mov	sp,fp
 8015734:	df000017 	ldw	fp,0(sp)
 8015738:	dec00104 	addi	sp,sp,4
 801573c:	f800283a 	ret

08015740 <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 8015740:	defff904 	addi	sp,sp,-28
 8015744:	dfc00615 	stw	ra,24(sp)
 8015748:	df000515 	stw	fp,20(sp)
 801574c:	df000504 	addi	fp,sp,20
 8015750:	2005883a 	mov	r2,r4
 8015754:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8015758:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 801575c:	008200f4 	movhi	r2,2051
 8015760:	10bb4704 	addi	r2,r2,-4836
 8015764:	10800003 	ldbu	r2,0(r2)
 8015768:	10803fcc 	andi	r2,r2,255
 801576c:	10000126 	beq	r2,zero,8015774 <OSTimeDly+0x34>
        return;
 8015770:	00004006 	br	8015874 <OSTimeDly+0x134>
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 8015774:	e0bfff0b 	ldhu	r2,-4(fp)
 8015778:	10003e26 	beq	r2,zero,8015874 <OSTimeDly+0x134>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801577c:	0005303a 	rdctl	r2,status
 8015780:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015784:	e0fffd17 	ldw	r3,-12(fp)
 8015788:	00bfff84 	movi	r2,-2
 801578c:	1884703a 	and	r2,r3,r2
 8015790:	1001703a 	wrctl	status,r2
  
  return context;
 8015794:	e0bffd17 	ldw	r2,-12(fp)
        OS_ENTER_CRITICAL();
 8015798:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 801579c:	008200f4 	movhi	r2,2051
 80157a0:	10bb4804 	addi	r2,r2,-4832
 80157a4:	10800017 	ldw	r2,0(r2)
 80157a8:	10800d03 	ldbu	r2,52(r2)
 80157ac:	e0bffc05 	stb	r2,-16(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 80157b0:	e0fffc03 	ldbu	r3,-16(fp)
 80157b4:	e13ffc03 	ldbu	r4,-16(fp)
 80157b8:	008200f4 	movhi	r2,2051
 80157bc:	10bb4544 	addi	r2,r2,-4843
 80157c0:	1105883a 	add	r2,r2,r4
 80157c4:	10800003 	ldbu	r2,0(r2)
 80157c8:	1009883a 	mov	r4,r2
 80157cc:	008200f4 	movhi	r2,2051
 80157d0:	10bb4804 	addi	r2,r2,-4832
 80157d4:	10800017 	ldw	r2,0(r2)
 80157d8:	10800d43 	ldbu	r2,53(r2)
 80157dc:	0084303a 	nor	r2,zero,r2
 80157e0:	2084703a 	and	r2,r4,r2
 80157e4:	1009883a 	mov	r4,r2
 80157e8:	008200f4 	movhi	r2,2051
 80157ec:	10bb4544 	addi	r2,r2,-4843
 80157f0:	10c5883a 	add	r2,r2,r3
 80157f4:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 80157f8:	e0fffc03 	ldbu	r3,-16(fp)
 80157fc:	008200f4 	movhi	r2,2051
 8015800:	10bb4544 	addi	r2,r2,-4843
 8015804:	10c5883a 	add	r2,r2,r3
 8015808:	10800003 	ldbu	r2,0(r2)
 801580c:	10803fcc 	andi	r2,r2,255
 8015810:	10000e1e 	bne	r2,zero,801584c <OSTimeDly+0x10c>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 8015814:	008200f4 	movhi	r2,2051
 8015818:	10bb4804 	addi	r2,r2,-4832
 801581c:	10800017 	ldw	r2,0(r2)
 8015820:	10800d83 	ldbu	r2,54(r2)
 8015824:	0084303a 	nor	r2,zero,r2
 8015828:	1007883a 	mov	r3,r2
 801582c:	008200f4 	movhi	r2,2051
 8015830:	10bb4504 	addi	r2,r2,-4844
 8015834:	10800003 	ldbu	r2,0(r2)
 8015838:	1884703a 	and	r2,r3,r2
 801583c:	1007883a 	mov	r3,r2
 8015840:	008200f4 	movhi	r2,2051
 8015844:	10bb4504 	addi	r2,r2,-4844
 8015848:	10c00005 	stb	r3,0(r2)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 801584c:	008200f4 	movhi	r2,2051
 8015850:	10bb4804 	addi	r2,r2,-4832
 8015854:	10800017 	ldw	r2,0(r2)
 8015858:	e0ffff0b 	ldhu	r3,-4(fp)
 801585c:	10c00b8d 	sth	r3,46(r2)
 8015860:	e0bffb17 	ldw	r2,-20(fp)
 8015864:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015868:	e0bffe17 	ldw	r2,-8(fp)
 801586c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 8015870:	800f9400 	call	800f940 <OS_Sched>
    }
}
 8015874:	e037883a 	mov	sp,fp
 8015878:	dfc00117 	ldw	ra,4(sp)
 801587c:	df000017 	ldw	fp,0(sp)
 8015880:	dec00204 	addi	sp,sp,8
 8015884:	f800283a 	ret

08015888 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 8015888:	defff704 	addi	sp,sp,-36
 801588c:	dfc00815 	stw	ra,32(sp)
 8015890:	df000715 	stw	fp,28(sp)
 8015894:	dc000615 	stw	r16,24(sp)
 8015898:	df000704 	addi	fp,sp,28
 801589c:	2011883a 	mov	r8,r4
 80158a0:	2809883a 	mov	r4,r5
 80158a4:	3007883a 	mov	r3,r6
 80158a8:	3805883a 	mov	r2,r7
 80158ac:	e23ffb05 	stb	r8,-20(fp)
 80158b0:	e13ffc05 	stb	r4,-16(fp)
 80158b4:	e0fffd05 	stb	r3,-12(fp)
 80158b8:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 80158bc:	008200f4 	movhi	r2,2051
 80158c0:	10bb4704 	addi	r2,r2,-4836
 80158c4:	10800003 	ldbu	r2,0(r2)
 80158c8:	10803fcc 	andi	r2,r2,255
 80158cc:	10000226 	beq	r2,zero,80158d8 <OSTimeDlyHMSM+0x50>
        return (OS_ERR_TIME_DLY_ISR);
 80158d0:	00801544 	movi	r2,85
 80158d4:	00003d06 	br	80159cc <OSTimeDlyHMSM+0x144>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 80158d8:	e0bffb03 	ldbu	r2,-20(fp)
 80158dc:	1000081e 	bne	r2,zero,8015900 <OSTimeDlyHMSM+0x78>
        if (minutes == 0) {
 80158e0:	e0bffc03 	ldbu	r2,-16(fp)
 80158e4:	1000061e 	bne	r2,zero,8015900 <OSTimeDlyHMSM+0x78>
            if (seconds == 0) {
 80158e8:	e0bffd03 	ldbu	r2,-12(fp)
 80158ec:	1000041e 	bne	r2,zero,8015900 <OSTimeDlyHMSM+0x78>
                if (ms == 0) {
 80158f0:	e0bffe0b 	ldhu	r2,-8(fp)
 80158f4:	1000021e 	bne	r2,zero,8015900 <OSTimeDlyHMSM+0x78>
                    return (OS_ERR_TIME_ZERO_DLY);
 80158f8:	00801504 	movi	r2,84
 80158fc:	00003306 	br	80159cc <OSTimeDlyHMSM+0x144>
                }
            }
        }
    }
    if (minutes > 59) {
 8015900:	e0bffc03 	ldbu	r2,-16(fp)
 8015904:	10800f30 	cmpltui	r2,r2,60
 8015908:	1000021e 	bne	r2,zero,8015914 <OSTimeDlyHMSM+0x8c>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 801590c:	00801444 	movi	r2,81
 8015910:	00002e06 	br	80159cc <OSTimeDlyHMSM+0x144>
    }
    if (seconds > 59) {
 8015914:	e0bffd03 	ldbu	r2,-12(fp)
 8015918:	10800f30 	cmpltui	r2,r2,60
 801591c:	1000021e 	bne	r2,zero,8015928 <OSTimeDlyHMSM+0xa0>
        return (OS_ERR_TIME_INVALID_SECONDS);
 8015920:	00801484 	movi	r2,82
 8015924:	00002906 	br	80159cc <OSTimeDlyHMSM+0x144>
    }
    if (ms > 999) {
 8015928:	e0bffe0b 	ldhu	r2,-8(fp)
 801592c:	1080fa30 	cmpltui	r2,r2,1000
 8015930:	1000021e 	bne	r2,zero,801593c <OSTimeDlyHMSM+0xb4>
        return (OS_ERR_TIME_INVALID_MS);
 8015934:	008014c4 	movi	r2,83
 8015938:	00002406 	br	80159cc <OSTimeDlyHMSM+0x144>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 801593c:	e0bffb03 	ldbu	r2,-20(fp)
 8015940:	10c38424 	muli	r3,r2,3600
 8015944:	e0bffc03 	ldbu	r2,-16(fp)
 8015948:	10800f24 	muli	r2,r2,60
 801594c:	1887883a 	add	r3,r3,r2
 8015950:	e0bffd03 	ldbu	r2,-12(fp)
 8015954:	1885883a 	add	r2,r3,r2
 8015958:	1400fa24 	muli	r16,r2,1000
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 801595c:	e0bffe0b 	ldhu	r2,-8(fp)
 8015960:	1080fa24 	muli	r2,r2,1000
 8015964:	1009883a 	mov	r4,r2
 8015968:	0140fa04 	movi	r5,1000
 801596c:	800ad4c0 	call	800ad4c <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 8015970:	8085883a 	add	r2,r16,r2
 8015974:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 8015978:	e0bffa17 	ldw	r2,-24(fp)
 801597c:	1004d43a 	srli	r2,r2,16
 8015980:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 8015984:	e0bffa17 	ldw	r2,-24(fp)
 8015988:	10bfffcc 	andi	r2,r2,65535
 801598c:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 8015990:	e0bffa17 	ldw	r2,-24(fp)
 8015994:	10bfffcc 	andi	r2,r2,65535
 8015998:	1009883a 	mov	r4,r2
 801599c:	80157400 	call	8015740 <OSTimeDly>
    while (loops > 0) {
 80159a0:	00000706 	br	80159c0 <OSTimeDlyHMSM+0x138>
        OSTimeDly((INT16U)32768u);
 80159a4:	01200014 	movui	r4,32768
 80159a8:	80157400 	call	8015740 <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 80159ac:	01200014 	movui	r4,32768
 80159b0:	80157400 	call	8015740 <OSTimeDly>
        loops--;
 80159b4:	e0bff90b 	ldhu	r2,-28(fp)
 80159b8:	10bfffc4 	addi	r2,r2,-1
 80159bc:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 80159c0:	e0bff90b 	ldhu	r2,-28(fp)
 80159c4:	103ff71e 	bne	r2,zero,80159a4 <OSTimeDlyHMSM+0x11c>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 80159c8:	0005883a 	mov	r2,zero
}
 80159cc:	e6ffff04 	addi	sp,fp,-4
 80159d0:	dfc00217 	ldw	ra,8(sp)
 80159d4:	df000117 	ldw	fp,4(sp)
 80159d8:	dc000017 	ldw	r16,0(sp)
 80159dc:	dec00304 	addi	sp,sp,12
 80159e0:	f800283a 	ret

080159e4 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 80159e4:	defff504 	addi	sp,sp,-44
 80159e8:	dfc00a15 	stw	ra,40(sp)
 80159ec:	df000915 	stw	fp,36(sp)
 80159f0:	df000904 	addi	fp,sp,36
 80159f4:	2005883a 	mov	r2,r4
 80159f8:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 80159fc:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 8015a00:	e0bfff03 	ldbu	r2,-4(fp)
 8015a04:	10800530 	cmpltui	r2,r2,20
 8015a08:	1000021e 	bne	r2,zero,8015a14 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 8015a0c:	00800a84 	movi	r2,42
 8015a10:	00006b06 	br	8015bc0 <OSTimeDlyResume+0x1dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015a14:	0005303a 	rdctl	r2,status
 8015a18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015a1c:	e0fff917 	ldw	r3,-28(fp)
 8015a20:	00bfff84 	movi	r2,-2
 8015a24:	1884703a 	and	r2,r3,r2
 8015a28:	1001703a 	wrctl	status,r2
  
  return context;
 8015a2c:	e0bff917 	ldw	r2,-28(fp)
    }
    OS_ENTER_CRITICAL();
 8015a30:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 8015a34:	e0ffff03 	ldbu	r3,-4(fp)
 8015a38:	008200f4 	movhi	r2,2051
 8015a3c:	1099cf04 	addi	r2,r2,26428
 8015a40:	18c7883a 	add	r3,r3,r3
 8015a44:	18c7883a 	add	r3,r3,r3
 8015a48:	10c5883a 	add	r2,r2,r3
 8015a4c:	10800017 	ldw	r2,0(r2)
 8015a50:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {
 8015a54:	e0bff817 	ldw	r2,-32(fp)
 8015a58:	1000061e 	bne	r2,zero,8015a74 <OSTimeDlyResume+0x90>
 8015a5c:	e0bff717 	ldw	r2,-36(fp)
 8015a60:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015a64:	e0bffa17 	ldw	r2,-24(fp)
 8015a68:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 8015a6c:	008010c4 	movi	r2,67
 8015a70:	00005306 	br	8015bc0 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb == OS_TCB_RESERVED) {
 8015a74:	e0bff817 	ldw	r2,-32(fp)
 8015a78:	10800058 	cmpnei	r2,r2,1
 8015a7c:	1000061e 	bne	r2,zero,8015a98 <OSTimeDlyResume+0xb4>
 8015a80:	e0bff717 	ldw	r2,-36(fp)
 8015a84:	e0bffb15 	stw	r2,-20(fp)
 8015a88:	e0bffb17 	ldw	r2,-20(fp)
 8015a8c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 8015a90:	008010c4 	movi	r2,67
 8015a94:	00004a06 	br	8015bc0 <OSTimeDlyResume+0x1dc>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 8015a98:	e0bff817 	ldw	r2,-32(fp)
 8015a9c:	10800b8b 	ldhu	r2,46(r2)
 8015aa0:	10bfffcc 	andi	r2,r2,65535
 8015aa4:	1000061e 	bne	r2,zero,8015ac0 <OSTimeDlyResume+0xdc>
 8015aa8:	e0bff717 	ldw	r2,-36(fp)
 8015aac:	e0bffc15 	stw	r2,-16(fp)
 8015ab0:	e0bffc17 	ldw	r2,-16(fp)
 8015ab4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 8015ab8:	00801404 	movi	r2,80
 8015abc:	00004006 	br	8015bc0 <OSTimeDlyResume+0x1dc>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 8015ac0:	e0bff817 	ldw	r2,-32(fp)
 8015ac4:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 8015ac8:	e0bff817 	ldw	r2,-32(fp)
 8015acc:	10800c03 	ldbu	r2,48(r2)
 8015ad0:	10803fcc 	andi	r2,r2,255
 8015ad4:	10800dcc 	andi	r2,r2,55
 8015ad8:	10000b26 	beq	r2,zero,8015b08 <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 8015adc:	e0bff817 	ldw	r2,-32(fp)
 8015ae0:	10c00c03 	ldbu	r3,48(r2)
 8015ae4:	00bff204 	movi	r2,-56
 8015ae8:	1884703a 	and	r2,r3,r2
 8015aec:	1007883a 	mov	r3,r2
 8015af0:	e0bff817 	ldw	r2,-32(fp)
 8015af4:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 8015af8:	e0bff817 	ldw	r2,-32(fp)
 8015afc:	00c00044 	movi	r3,1
 8015b00:	10c00c45 	stb	r3,49(r2)
 8015b04:	00000206 	br	8015b10 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 8015b08:	e0bff817 	ldw	r2,-32(fp)
 8015b0c:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 8015b10:	e0bff817 	ldw	r2,-32(fp)
 8015b14:	10800c03 	ldbu	r2,48(r2)
 8015b18:	10803fcc 	andi	r2,r2,255
 8015b1c:	1080020c 	andi	r2,r2,8
 8015b20:	1000221e 	bne	r2,zero,8015bac <OSTimeDlyResume+0x1c8>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 8015b24:	e0bff817 	ldw	r2,-32(fp)
 8015b28:	10c00d83 	ldbu	r3,54(r2)
 8015b2c:	008200f4 	movhi	r2,2051
 8015b30:	10bb4504 	addi	r2,r2,-4844
 8015b34:	10800003 	ldbu	r2,0(r2)
 8015b38:	1884b03a 	or	r2,r3,r2
 8015b3c:	1007883a 	mov	r3,r2
 8015b40:	008200f4 	movhi	r2,2051
 8015b44:	10bb4504 	addi	r2,r2,-4844
 8015b48:	10c00005 	stb	r3,0(r2)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 8015b4c:	e0bff817 	ldw	r2,-32(fp)
 8015b50:	10800d03 	ldbu	r2,52(r2)
 8015b54:	10c03fcc 	andi	r3,r2,255
 8015b58:	e0bff817 	ldw	r2,-32(fp)
 8015b5c:	10800d03 	ldbu	r2,52(r2)
 8015b60:	11003fcc 	andi	r4,r2,255
 8015b64:	008200f4 	movhi	r2,2051
 8015b68:	10bb4544 	addi	r2,r2,-4843
 8015b6c:	1105883a 	add	r2,r2,r4
 8015b70:	11000003 	ldbu	r4,0(r2)
 8015b74:	e0bff817 	ldw	r2,-32(fp)
 8015b78:	10800d43 	ldbu	r2,53(r2)
 8015b7c:	2084b03a 	or	r2,r4,r2
 8015b80:	1009883a 	mov	r4,r2
 8015b84:	008200f4 	movhi	r2,2051
 8015b88:	10bb4544 	addi	r2,r2,-4843
 8015b8c:	10c5883a 	add	r2,r2,r3
 8015b90:	11000005 	stb	r4,0(r2)
 8015b94:	e0bff717 	ldw	r2,-36(fp)
 8015b98:	e0bffd15 	stw	r2,-12(fp)
 8015b9c:	e0bffd17 	ldw	r2,-12(fp)
 8015ba0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 8015ba4:	800f9400 	call	800f940 <OS_Sched>
 8015ba8:	00000406 	br	8015bbc <OSTimeDlyResume+0x1d8>
 8015bac:	e0bff717 	ldw	r2,-36(fp)
 8015bb0:	e0bffe15 	stw	r2,-8(fp)
 8015bb4:	e0bffe17 	ldw	r2,-8(fp)
 8015bb8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 8015bbc:	0005883a 	mov	r2,zero
}
 8015bc0:	e037883a 	mov	sp,fp
 8015bc4:	dfc00117 	ldw	ra,4(sp)
 8015bc8:	df000017 	ldw	fp,0(sp)
 8015bcc:	dec00204 	addi	sp,sp,8
 8015bd0:	f800283a 	ret

08015bd4 <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 8015bd4:	defffb04 	addi	sp,sp,-20
 8015bd8:	df000415 	stw	fp,16(sp)
 8015bdc:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8015be0:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015be4:	0005303a 	rdctl	r2,status
 8015be8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015bec:	e0fffe17 	ldw	r3,-8(fp)
 8015bf0:	00bfff84 	movi	r2,-2
 8015bf4:	1884703a 	and	r2,r3,r2
 8015bf8:	1001703a 	wrctl	status,r2
  
  return context;
 8015bfc:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 8015c00:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 8015c04:	008200f4 	movhi	r2,2051
 8015c08:	10bb4904 	addi	r2,r2,-4828
 8015c0c:	10800017 	ldw	r2,0(r2)
 8015c10:	e0bffd15 	stw	r2,-12(fp)
 8015c14:	e0bffc17 	ldw	r2,-16(fp)
 8015c18:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015c1c:	e0bfff17 	ldw	r2,-4(fp)
 8015c20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 8015c24:	e0bffd17 	ldw	r2,-12(fp)
}
 8015c28:	e037883a 	mov	sp,fp
 8015c2c:	df000017 	ldw	fp,0(sp)
 8015c30:	dec00104 	addi	sp,sp,4
 8015c34:	f800283a 	ret

08015c38 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 8015c38:	defffb04 	addi	sp,sp,-20
 8015c3c:	df000415 	stw	fp,16(sp)
 8015c40:	df000404 	addi	fp,sp,16
 8015c44:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 8015c48:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8015c4c:	0005303a 	rdctl	r2,status
 8015c50:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8015c54:	e0fffd17 	ldw	r3,-12(fp)
 8015c58:	00bfff84 	movi	r2,-2
 8015c5c:	1884703a 	and	r2,r3,r2
 8015c60:	1001703a 	wrctl	status,r2
  
  return context;
 8015c64:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 8015c68:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 8015c6c:	008200f4 	movhi	r2,2051
 8015c70:	10bb4904 	addi	r2,r2,-4828
 8015c74:	e0ffff17 	ldw	r3,-4(fp)
 8015c78:	10c00015 	stw	r3,0(r2)
 8015c7c:	e0bffc17 	ldw	r2,-16(fp)
 8015c80:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8015c84:	e0bffe17 	ldw	r2,-8(fp)
 8015c88:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 8015c8c:	e037883a 	mov	sp,fp
 8015c90:	df000017 	ldw	fp,0(sp)
 8015c94:	dec00104 	addi	sp,sp,4
 8015c98:	f800283a 	ret

08015c9c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8015c9c:	defffd04 	addi	sp,sp,-12
 8015ca0:	dfc00215 	stw	ra,8(sp)
 8015ca4:	df000115 	stw	fp,4(sp)
 8015ca8:	df000104 	addi	fp,sp,4
 8015cac:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8015cb0:	e13fff17 	ldw	r4,-4(fp)
 8015cb4:	014200b4 	movhi	r5,2050
 8015cb8:	29514004 	addi	r5,r5,17664
 8015cbc:	80185b40 	call	80185b4 <alt_dev_llist_insert>
}
 8015cc0:	e037883a 	mov	sp,fp
 8015cc4:	dfc00117 	ldw	ra,4(sp)
 8015cc8:	df000017 	ldw	fp,0(sp)
 8015ccc:	dec00204 	addi	sp,sp,8
 8015cd0:	f800283a 	ret

08015cd4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8015cd4:	defffd04 	addi	sp,sp,-12
 8015cd8:	dfc00215 	stw	ra,8(sp)
 8015cdc:	df000115 	stw	fp,4(sp)
 8015ce0:	df000104 	addi	fp,sp,4
 8015ce4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, nios2_cpu);
 8015ce8:	8018ec80 	call	8018ec8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8015cec:	00800044 	movi	r2,1
 8015cf0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8015cf4:	e037883a 	mov	sp,fp
 8015cf8:	dfc00117 	ldw	ra,4(sp)
 8015cfc:	df000017 	ldw	fp,0(sp)
 8015d00:	dec00204 	addi	sp,sp,8
 8015d04:	f800283a 	ret

08015d08 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8015d08:	defffd04 	addi	sp,sp,-12
 8015d0c:	dfc00215 	stw	ra,8(sp)
 8015d10:	df000115 	stw	fp,4(sp)
 8015d14:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 8015d18:	01040934 	movhi	r4,4132
 8015d1c:	211c0804 	addi	r4,r4,28704
 8015d20:	000b883a 	mov	r5,zero
 8015d24:	018000c4 	movi	r6,3
 8015d28:	01c0fa04 	movi	r7,1000
 8015d2c:	8016cfc0 	call	8016cfc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 8015d30:	010200b4 	movhi	r4,2050
 8015d34:	210cf004 	addi	r4,r4,13248
 8015d38:	000b883a 	mov	r5,zero
 8015d3c:	000d883a 	mov	r6,zero
 8015d40:	80160c40 	call	80160c4 <altera_avalon_jtag_uart_init>
 8015d44:	010200b4 	movhi	r4,2050
 8015d48:	210ce604 	addi	r4,r4,13208
 8015d4c:	8015c9c0 	call	8015c9c <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_TOUCH, spi_touch);
 8015d50:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 8015d54:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG, audio_and_video_config);
 8015d58:	010200b4 	movhi	r4,2050
 8015d5c:	21110104 	addi	r4,r4,17412
 8015d60:	8015c9c0 	call	8015c9c <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
 8015d64:	010200b4 	movhi	r4,2050
 8015d68:	21110d04 	addi	r4,r4,17460
 8015d6c:	8015c9c0 	call	8015c9c <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA, video_pixel_buffer_dma);
 8015d70:	008200b4 	movhi	r2,2050
 8015d74:	10911904 	addi	r2,r2,17508
 8015d78:	10800a17 	ldw	r2,40(r2)
 8015d7c:	10800017 	ldw	r2,0(r2)
 8015d80:	1007883a 	mov	r3,r2
 8015d84:	008200b4 	movhi	r2,2050
 8015d88:	10911904 	addi	r2,r2,17508
 8015d8c:	10c00b15 	stw	r3,44(r2)
 8015d90:	008200b4 	movhi	r2,2050
 8015d94:	10911904 	addi	r2,r2,17508
 8015d98:	10800a17 	ldw	r2,40(r2)
 8015d9c:	10800104 	addi	r2,r2,4
 8015da0:	10800017 	ldw	r2,0(r2)
 8015da4:	1007883a 	mov	r3,r2
 8015da8:	008200b4 	movhi	r2,2050
 8015dac:	10911904 	addi	r2,r2,17508
 8015db0:	10c00c15 	stw	r3,48(r2)
 8015db4:	008200b4 	movhi	r2,2050
 8015db8:	10911904 	addi	r2,r2,17508
 8015dbc:	10800a17 	ldw	r2,40(r2)
 8015dc0:	10800204 	addi	r2,r2,8
 8015dc4:	10800017 	ldw	r2,0(r2)
 8015dc8:	10ffffcc 	andi	r3,r2,65535
 8015dcc:	008200b4 	movhi	r2,2050
 8015dd0:	10911904 	addi	r2,r2,17508
 8015dd4:	10c00f15 	stw	r3,60(r2)
 8015dd8:	008200b4 	movhi	r2,2050
 8015ddc:	10911904 	addi	r2,r2,17508
 8015de0:	10800a17 	ldw	r2,40(r2)
 8015de4:	10800204 	addi	r2,r2,8
 8015de8:	10800017 	ldw	r2,0(r2)
 8015dec:	1006d43a 	srli	r3,r2,16
 8015df0:	008200b4 	movhi	r2,2050
 8015df4:	10911904 	addi	r2,r2,17508
 8015df8:	10c01015 	stw	r3,64(r2)
 8015dfc:	008200b4 	movhi	r2,2050
 8015e00:	10911904 	addi	r2,r2,17508
 8015e04:	10800a17 	ldw	r2,40(r2)
 8015e08:	10800304 	addi	r2,r2,12
 8015e0c:	10800017 	ldw	r2,0(r2)
 8015e10:	1005d07a 	srai	r2,r2,1
 8015e14:	10c0004c 	andi	r3,r2,1
 8015e18:	008200b4 	movhi	r2,2050
 8015e1c:	10911904 	addi	r2,r2,17508
 8015e20:	10c00d15 	stw	r3,52(r2)
 8015e24:	008200b4 	movhi	r2,2050
 8015e28:	10911904 	addi	r2,r2,17508
 8015e2c:	10800a17 	ldw	r2,40(r2)
 8015e30:	10800304 	addi	r2,r2,12
 8015e34:	10800017 	ldw	r2,0(r2)
 8015e38:	1005d13a 	srai	r2,r2,4
 8015e3c:	10c003cc 	andi	r3,r2,15
 8015e40:	008200b4 	movhi	r2,2050
 8015e44:	10911904 	addi	r2,r2,17508
 8015e48:	10c00e15 	stw	r3,56(r2)
 8015e4c:	008200b4 	movhi	r2,2050
 8015e50:	10911904 	addi	r2,r2,17508
 8015e54:	10800a17 	ldw	r2,40(r2)
 8015e58:	10800304 	addi	r2,r2,12
 8015e5c:	10800017 	ldw	r2,0(r2)
 8015e60:	1005d43a 	srai	r2,r2,16
 8015e64:	e0bfff05 	stb	r2,-4(fp)
 8015e68:	008200b4 	movhi	r2,2050
 8015e6c:	10911904 	addi	r2,r2,17508
 8015e70:	10800a17 	ldw	r2,40(r2)
 8015e74:	10800304 	addi	r2,r2,12
 8015e78:	10800017 	ldw	r2,0(r2)
 8015e7c:	1004d63a 	srli	r2,r2,24
 8015e80:	e0bfff45 	stb	r2,-3(fp)
 8015e84:	008200b4 	movhi	r2,2050
 8015e88:	10911904 	addi	r2,r2,17508
 8015e8c:	10800e17 	ldw	r2,56(r2)
 8015e90:	10800058 	cmpnei	r2,r2,1
 8015e94:	1000041e 	bne	r2,zero,8015ea8 <alt_sys_init+0x1a0>
 8015e98:	008200b4 	movhi	r2,2050
 8015e9c:	10911904 	addi	r2,r2,17508
 8015ea0:	10001115 	stw	zero,68(r2)
 8015ea4:	00000e06 	br	8015ee0 <alt_sys_init+0x1d8>
 8015ea8:	008200b4 	movhi	r2,2050
 8015eac:	10911904 	addi	r2,r2,17508
 8015eb0:	10800e17 	ldw	r2,56(r2)
 8015eb4:	10800098 	cmpnei	r2,r2,2
 8015eb8:	1000051e 	bne	r2,zero,8015ed0 <alt_sys_init+0x1c8>
 8015ebc:	008200b4 	movhi	r2,2050
 8015ec0:	10911904 	addi	r2,r2,17508
 8015ec4:	00c00044 	movi	r3,1
 8015ec8:	10c01115 	stw	r3,68(r2)
 8015ecc:	00000406 	br	8015ee0 <alt_sys_init+0x1d8>
 8015ed0:	008200b4 	movhi	r2,2050
 8015ed4:	10911904 	addi	r2,r2,17508
 8015ed8:	00c00084 	movi	r3,2
 8015edc:	10c01115 	stw	r3,68(r2)
 8015ee0:	e0bfff03 	ldbu	r2,-4(fp)
 8015ee4:	00c00804 	movi	r3,32
 8015ee8:	1885c83a 	sub	r2,r3,r2
 8015eec:	00ffffc4 	movi	r3,-1
 8015ef0:	1886d83a 	srl	r3,r3,r2
 8015ef4:	008200b4 	movhi	r2,2050
 8015ef8:	10911904 	addi	r2,r2,17508
 8015efc:	10c01215 	stw	r3,72(r2)
 8015f00:	e0ffff03 	ldbu	r3,-4(fp)
 8015f04:	008200b4 	movhi	r2,2050
 8015f08:	10911904 	addi	r2,r2,17508
 8015f0c:	10801117 	ldw	r2,68(r2)
 8015f10:	1887883a 	add	r3,r3,r2
 8015f14:	008200b4 	movhi	r2,2050
 8015f18:	10911904 	addi	r2,r2,17508
 8015f1c:	10c01315 	stw	r3,76(r2)
 8015f20:	e0bfff43 	ldbu	r2,-3(fp)
 8015f24:	00c00804 	movi	r3,32
 8015f28:	1885c83a 	sub	r2,r3,r2
 8015f2c:	00ffffc4 	movi	r3,-1
 8015f30:	1886d83a 	srl	r3,r3,r2
 8015f34:	008200b4 	movhi	r2,2050
 8015f38:	10911904 	addi	r2,r2,17508
 8015f3c:	10c01415 	stw	r3,80(r2)
 8015f40:	010200b4 	movhi	r4,2050
 8015f44:	21111904 	addi	r4,r4,17508
 8015f48:	8015c9c0 	call	8015c9c <alt_dev_reg>
}
 8015f4c:	e037883a 	mov	sp,fp
 8015f50:	dfc00117 	ldw	ra,4(sp)
 8015f54:	df000017 	ldw	fp,0(sp)
 8015f58:	dec00204 	addi	sp,sp,8
 8015f5c:	f800283a 	ret

08015f60 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8015f60:	defffa04 	addi	sp,sp,-24
 8015f64:	dfc00515 	stw	ra,20(sp)
 8015f68:	df000415 	stw	fp,16(sp)
 8015f6c:	df000404 	addi	fp,sp,16
 8015f70:	e13ffd15 	stw	r4,-12(fp)
 8015f74:	e17ffe15 	stw	r5,-8(fp)
 8015f78:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015f7c:	e0bffd17 	ldw	r2,-12(fp)
 8015f80:	10800017 	ldw	r2,0(r2)
 8015f84:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8015f88:	e0bffc17 	ldw	r2,-16(fp)
 8015f8c:	10c00a04 	addi	r3,r2,40
 8015f90:	e0bffd17 	ldw	r2,-12(fp)
 8015f94:	10800217 	ldw	r2,8(r2)
 8015f98:	1809883a 	mov	r4,r3
 8015f9c:	e17ffe17 	ldw	r5,-8(fp)
 8015fa0:	e1bfff17 	ldw	r6,-4(fp)
 8015fa4:	100f883a 	mov	r7,r2
 8015fa8:	80167100 	call	8016710 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8015fac:	e037883a 	mov	sp,fp
 8015fb0:	dfc00117 	ldw	ra,4(sp)
 8015fb4:	df000017 	ldw	fp,0(sp)
 8015fb8:	dec00204 	addi	sp,sp,8
 8015fbc:	f800283a 	ret

08015fc0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8015fc0:	defffa04 	addi	sp,sp,-24
 8015fc4:	dfc00515 	stw	ra,20(sp)
 8015fc8:	df000415 	stw	fp,16(sp)
 8015fcc:	df000404 	addi	fp,sp,16
 8015fd0:	e13ffd15 	stw	r4,-12(fp)
 8015fd4:	e17ffe15 	stw	r5,-8(fp)
 8015fd8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8015fdc:	e0bffd17 	ldw	r2,-12(fp)
 8015fe0:	10800017 	ldw	r2,0(r2)
 8015fe4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8015fe8:	e0bffc17 	ldw	r2,-16(fp)
 8015fec:	10c00a04 	addi	r3,r2,40
 8015ff0:	e0bffd17 	ldw	r2,-12(fp)
 8015ff4:	10800217 	ldw	r2,8(r2)
 8015ff8:	1809883a 	mov	r4,r3
 8015ffc:	e17ffe17 	ldw	r5,-8(fp)
 8016000:	e1bfff17 	ldw	r6,-4(fp)
 8016004:	100f883a 	mov	r7,r2
 8016008:	80169c40 	call	80169c4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 801600c:	e037883a 	mov	sp,fp
 8016010:	dfc00117 	ldw	ra,4(sp)
 8016014:	df000017 	ldw	fp,0(sp)
 8016018:	dec00204 	addi	sp,sp,8
 801601c:	f800283a 	ret

08016020 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8016020:	defffc04 	addi	sp,sp,-16
 8016024:	dfc00315 	stw	ra,12(sp)
 8016028:	df000215 	stw	fp,8(sp)
 801602c:	df000204 	addi	fp,sp,8
 8016030:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8016034:	e0bfff17 	ldw	r2,-4(fp)
 8016038:	10800017 	ldw	r2,0(r2)
 801603c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8016040:	e0bffe17 	ldw	r2,-8(fp)
 8016044:	10c00a04 	addi	r3,r2,40
 8016048:	e0bfff17 	ldw	r2,-4(fp)
 801604c:	10800217 	ldw	r2,8(r2)
 8016050:	1809883a 	mov	r4,r3
 8016054:	100b883a 	mov	r5,r2
 8016058:	80165bc0 	call	80165bc <altera_avalon_jtag_uart_close>
}
 801605c:	e037883a 	mov	sp,fp
 8016060:	dfc00117 	ldw	ra,4(sp)
 8016064:	df000017 	ldw	fp,0(sp)
 8016068:	dec00204 	addi	sp,sp,8
 801606c:	f800283a 	ret

08016070 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8016070:	defffa04 	addi	sp,sp,-24
 8016074:	dfc00515 	stw	ra,20(sp)
 8016078:	df000415 	stw	fp,16(sp)
 801607c:	df000404 	addi	fp,sp,16
 8016080:	e13ffd15 	stw	r4,-12(fp)
 8016084:	e17ffe15 	stw	r5,-8(fp)
 8016088:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 801608c:	e0bffd17 	ldw	r2,-12(fp)
 8016090:	10800017 	ldw	r2,0(r2)
 8016094:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8016098:	e0bffc17 	ldw	r2,-16(fp)
 801609c:	10800a04 	addi	r2,r2,40
 80160a0:	1009883a 	mov	r4,r2
 80160a4:	e17ffe17 	ldw	r5,-8(fp)
 80160a8:	e1bfff17 	ldw	r6,-4(fp)
 80160ac:	80166240 	call	8016624 <altera_avalon_jtag_uart_ioctl>
}
 80160b0:	e037883a 	mov	sp,fp
 80160b4:	dfc00117 	ldw	ra,4(sp)
 80160b8:	df000017 	ldw	fp,0(sp)
 80160bc:	dec00204 	addi	sp,sp,8
 80160c0:	f800283a 	ret

080160c4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80160c4:	defff104 	addi	sp,sp,-60
 80160c8:	dfc00e15 	stw	ra,56(sp)
 80160cc:	df000d15 	stw	fp,52(sp)
 80160d0:	df000d04 	addi	fp,sp,52
 80160d4:	e13ff915 	stw	r4,-28(fp)
 80160d8:	e17ffa15 	stw	r5,-24(fp)
 80160dc:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 80160e0:	e0bff917 	ldw	r2,-28(fp)
 80160e4:	10800c04 	addi	r2,r2,48
 80160e8:	e0bff315 	stw	r2,-52(fp)
 80160ec:	e03ff40d 	sth	zero,-48(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 80160f0:	e0fff40b 	ldhu	r3,-48(fp)
 80160f4:	e0bff884 	addi	r2,fp,-30
 80160f8:	1809883a 	mov	r4,r3
 80160fc:	100b883a 	mov	r5,r2
 8016100:	801049c0 	call	801049c <OSFlagCreate>
 8016104:	1007883a 	mov	r3,r2
 8016108:	e0bff317 	ldw	r2,-52(fp)
 801610c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 8016110:	e0bff917 	ldw	r2,-28(fp)
 8016114:	10800a04 	addi	r2,r2,40
 8016118:	e0bff515 	stw	r2,-44(fp)
 801611c:	00800044 	movi	r2,1
 8016120:	e0bff60d 	sth	r2,-40(fp)
 8016124:	e0bff60b 	ldhu	r2,-40(fp)
 8016128:	1009883a 	mov	r4,r2
 801612c:	80133f40 	call	80133f4 <OSSemCreate>
 8016130:	1007883a 	mov	r3,r2
 8016134:	e0bff517 	ldw	r2,-44(fp)
 8016138:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 801613c:	e0bff917 	ldw	r2,-28(fp)
 8016140:	10800b04 	addi	r2,r2,44
 8016144:	e0bff715 	stw	r2,-36(fp)
 8016148:	00800044 	movi	r2,1
 801614c:	e0bff80d 	sth	r2,-32(fp)
 8016150:	e0bff80b 	ldhu	r2,-32(fp)
 8016154:	1009883a 	mov	r4,r2
 8016158:	80133f40 	call	80133f4 <OSSemCreate>
 801615c:	1007883a 	mov	r3,r2
 8016160:	e0bff717 	ldw	r2,-36(fp)
 8016164:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8016168:	e0bff917 	ldw	r2,-28(fp)
 801616c:	00c00044 	movi	r3,1
 8016170:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8016174:	e0bff917 	ldw	r2,-28(fp)
 8016178:	10800017 	ldw	r2,0(r2)
 801617c:	10800104 	addi	r2,r2,4
 8016180:	1007883a 	mov	r3,r2
 8016184:	e0bff917 	ldw	r2,-28(fp)
 8016188:	10800817 	ldw	r2,32(r2)
 801618c:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 8016190:	e0bffb17 	ldw	r2,-20(fp)
 8016194:	1009883a 	mov	r4,r2
 8016198:	e17ff917 	ldw	r5,-28(fp)
 801619c:	01820074 	movhi	r6,2049
 80161a0:	31988104 	addi	r6,r6,25092
 80161a4:	80189080 	call	8018908 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 80161a8:	e0bff917 	ldw	r2,-28(fp)
 80161ac:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 80161b0:	e0bff917 	ldw	r2,-28(fp)
 80161b4:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80161b8:	008200f4 	movhi	r2,2051
 80161bc:	10bb4e04 	addi	r2,r2,-4808
 80161c0:	10800017 	ldw	r2,0(r2)
 80161c4:	1809883a 	mov	r4,r3
 80161c8:	100b883a 	mov	r5,r2
 80161cc:	01820074 	movhi	r6,2049
 80161d0:	31992b04 	addi	r6,r6,25772
 80161d4:	e1fff917 	ldw	r7,-28(fp)
 80161d8:	80183e00 	call	80183e0 <alt_alarm_start>
 80161dc:	1000040e 	bge	r2,zero,80161f0 <altera_avalon_jtag_uart_init+0x12c>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 80161e0:	e0fff917 	ldw	r3,-28(fp)
 80161e4:	00a00034 	movhi	r2,32768
 80161e8:	10bfffc4 	addi	r2,r2,-1
 80161ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 80161f0:	e037883a 	mov	sp,fp
 80161f4:	dfc00117 	ldw	ra,4(sp)
 80161f8:	df000017 	ldw	fp,0(sp)
 80161fc:	dec00204 	addi	sp,sp,8
 8016200:	f800283a 	ret

08016204 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8016204:	defff104 	addi	sp,sp,-60
 8016208:	dfc00e15 	stw	ra,56(sp)
 801620c:	df000d15 	stw	fp,52(sp)
 8016210:	df000d04 	addi	fp,sp,52
 8016214:	e13ffe15 	stw	r4,-8(fp)
 8016218:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 801621c:	e0bffe17 	ldw	r2,-8(fp)
 8016220:	e0bff515 	stw	r2,-44(fp)
  unsigned int base = sp->base;
 8016224:	e0bff517 	ldw	r2,-44(fp)
 8016228:	10800017 	ldw	r2,0(r2)
 801622c:	e0bff615 	stw	r2,-40(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016230:	e0bff617 	ldw	r2,-40(fp)
 8016234:	10800104 	addi	r2,r2,4
 8016238:	10800037 	ldwio	r2,0(r2)
 801623c:	e0bff715 	stw	r2,-36(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8016240:	e0bff717 	ldw	r2,-36(fp)
 8016244:	1080c00c 	andi	r2,r2,768
 8016248:	1000011e 	bne	r2,zero,8016250 <altera_avalon_jtag_uart_irq+0x4c>
      break;
 801624c:	00009206 	br	8016498 <altera_avalon_jtag_uart_irq+0x294>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8016250:	e0bff717 	ldw	r2,-36(fp)
 8016254:	1080400c 	andi	r2,r2,256
 8016258:	10004726 	beq	r2,zero,8016378 <altera_avalon_jtag_uart_irq+0x174>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 801625c:	00800074 	movhi	r2,1
 8016260:	e0bff315 	stw	r2,-52(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016264:	e0bff517 	ldw	r2,-44(fp)
 8016268:	10800d17 	ldw	r2,52(r2)
 801626c:	10800044 	addi	r2,r2,1
 8016270:	1081ffcc 	andi	r2,r2,2047
 8016274:	e0bff815 	stw	r2,-32(fp)
        if (next == sp->rx_out)
 8016278:	e0bff517 	ldw	r2,-44(fp)
 801627c:	10c00e17 	ldw	r3,56(r2)
 8016280:	e0bff817 	ldw	r2,-32(fp)
 8016284:	1880011e 	bne	r3,r2,801628c <altera_avalon_jtag_uart_irq+0x88>
          break;
 8016288:	00002906 	br	8016330 <altera_avalon_jtag_uart_irq+0x12c>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 801628c:	e0bff617 	ldw	r2,-40(fp)
 8016290:	10800037 	ldwio	r2,0(r2)
 8016294:	e0bff315 	stw	r2,-52(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8016298:	e0bff317 	ldw	r2,-52(fp)
 801629c:	10a0000c 	andi	r2,r2,32768
 80162a0:	1000011e 	bne	r2,zero,80162a8 <altera_avalon_jtag_uart_irq+0xa4>
          break;
 80162a4:	00002206 	br	8016330 <altera_avalon_jtag_uart_irq+0x12c>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80162a8:	e0bff517 	ldw	r2,-44(fp)
 80162ac:	10800d17 	ldw	r2,52(r2)
 80162b0:	e0fff317 	ldw	r3,-52(fp)
 80162b4:	1809883a 	mov	r4,r3
 80162b8:	e0fff517 	ldw	r3,-44(fp)
 80162bc:	1885883a 	add	r2,r3,r2
 80162c0:	10801104 	addi	r2,r2,68
 80162c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80162c8:	e0bff517 	ldw	r2,-44(fp)
 80162cc:	10800d17 	ldw	r2,52(r2)
 80162d0:	10800044 	addi	r2,r2,1
 80162d4:	10c1ffcc 	andi	r3,r2,2047
 80162d8:	e0bff517 	ldw	r2,-44(fp)
 80162dc:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 80162e0:	e0bff517 	ldw	r2,-44(fp)
 80162e4:	10800c17 	ldw	r2,48(r2)
 80162e8:	e0bff915 	stw	r2,-28(fp)
 80162ec:	00800044 	movi	r2,1
 80162f0:	e0bffa0d 	sth	r2,-24(fp)
 80162f4:	00800044 	movi	r2,1
 80162f8:	e0bffa85 	stb	r2,-22(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 80162fc:	008200f4 	movhi	r2,2051
 8016300:	10bb3944 	addi	r2,r2,-4891
 8016304:	10800003 	ldbu	r2,0(r2)
 8016308:	10803fcc 	andi	r2,r2,255
 801630c:	103fd526 	beq	r2,zero,8016264 <altera_avalon_jtag_uart_irq+0x60>
  {
    OSFlagPost (group, flags, opt, &err);
 8016310:	e17ffa0b 	ldhu	r5,-24(fp)
 8016314:	e0fffa83 	ldbu	r3,-22(fp)
 8016318:	e0bffcc4 	addi	r2,fp,-13
 801631c:	e13ff917 	ldw	r4,-28(fp)
 8016320:	180d883a 	mov	r6,r3
 8016324:	100f883a 	mov	r7,r2
 8016328:	801110c0 	call	801110c <OSFlagPost>
      }
 801632c:	003fcd06 	br	8016264 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8016330:	e0bff317 	ldw	r2,-52(fp)
 8016334:	10bfffec 	andhi	r2,r2,65535
 8016338:	10000f26 	beq	r2,zero,8016378 <altera_avalon_jtag_uart_irq+0x174>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801633c:	e0bff517 	ldw	r2,-44(fp)
 8016340:	10c00817 	ldw	r3,32(r2)
 8016344:	00bfff84 	movi	r2,-2
 8016348:	1886703a 	and	r3,r3,r2
 801634c:	e0bff517 	ldw	r2,-44(fp)
 8016350:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8016354:	e0bff617 	ldw	r2,-40(fp)
 8016358:	10800104 	addi	r2,r2,4
 801635c:	1007883a 	mov	r3,r2
 8016360:	e0bff517 	ldw	r2,-44(fp)
 8016364:	10800817 	ldw	r2,32(r2)
 8016368:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801636c:	e0bff617 	ldw	r2,-40(fp)
 8016370:	10800104 	addi	r2,r2,4
 8016374:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8016378:	e0bff717 	ldw	r2,-36(fp)
 801637c:	1080800c 	andi	r2,r2,512
 8016380:	10004426 	beq	r2,zero,8016494 <altera_avalon_jtag_uart_irq+0x290>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8016384:	e0bff717 	ldw	r2,-36(fp)
 8016388:	1004d43a 	srli	r2,r2,16
 801638c:	e0bff415 	stw	r2,-48(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8016390:	00002706 	br	8016430 <altera_avalon_jtag_uart_irq+0x22c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8016394:	e0bff617 	ldw	r2,-40(fp)
 8016398:	e0fff517 	ldw	r3,-44(fp)
 801639c:	18c01017 	ldw	r3,64(r3)
 80163a0:	e13ff517 	ldw	r4,-44(fp)
 80163a4:	20c7883a 	add	r3,r4,r3
 80163a8:	18c21104 	addi	r3,r3,2116
 80163ac:	18c00003 	ldbu	r3,0(r3)
 80163b0:	18c03fcc 	andi	r3,r3,255
 80163b4:	18c0201c 	xori	r3,r3,128
 80163b8:	18ffe004 	addi	r3,r3,-128
 80163bc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80163c0:	e0bff517 	ldw	r2,-44(fp)
 80163c4:	10801017 	ldw	r2,64(r2)
 80163c8:	10800044 	addi	r2,r2,1
 80163cc:	10c1ffcc 	andi	r3,r2,2047
 80163d0:	e0bff517 	ldw	r2,-44(fp)
 80163d4:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 80163d8:	e0bff517 	ldw	r2,-44(fp)
 80163dc:	10800c17 	ldw	r2,48(r2)
 80163e0:	e0bffb15 	stw	r2,-20(fp)
 80163e4:	00800084 	movi	r2,2
 80163e8:	e0bffc0d 	sth	r2,-16(fp)
 80163ec:	00800044 	movi	r2,1
 80163f0:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 80163f4:	008200f4 	movhi	r2,2051
 80163f8:	10bb3944 	addi	r2,r2,-4891
 80163fc:	10800003 	ldbu	r2,0(r2)
 8016400:	10803fcc 	andi	r2,r2,255
 8016404:	10000726 	beq	r2,zero,8016424 <altera_avalon_jtag_uart_irq+0x220>
  {
    OSFlagPost (group, flags, opt, &err);
 8016408:	e17ffc0b 	ldhu	r5,-16(fp)
 801640c:	e0fffc83 	ldbu	r3,-14(fp)
 8016410:	e0bffd04 	addi	r2,fp,-12
 8016414:	e13ffb17 	ldw	r4,-20(fp)
 8016418:	180d883a 	mov	r6,r3
 801641c:	100f883a 	mov	r7,r2
 8016420:	801110c0 	call	801110c <OSFlagPost>

        space--;
 8016424:	e0bff417 	ldw	r2,-48(fp)
 8016428:	10bfffc4 	addi	r2,r2,-1
 801642c:	e0bff415 	stw	r2,-48(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8016430:	e0bff417 	ldw	r2,-48(fp)
 8016434:	10000526 	beq	r2,zero,801644c <altera_avalon_jtag_uart_irq+0x248>
 8016438:	e0bff517 	ldw	r2,-44(fp)
 801643c:	10c01017 	ldw	r3,64(r2)
 8016440:	e0bff517 	ldw	r2,-44(fp)
 8016444:	10800f17 	ldw	r2,60(r2)
 8016448:	18bfd21e 	bne	r3,r2,8016394 <altera_avalon_jtag_uart_irq+0x190>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 801644c:	e0bff417 	ldw	r2,-48(fp)
 8016450:	10001026 	beq	r2,zero,8016494 <altera_avalon_jtag_uart_irq+0x290>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8016454:	e0bff517 	ldw	r2,-44(fp)
 8016458:	10c00817 	ldw	r3,32(r2)
 801645c:	00bfff44 	movi	r2,-3
 8016460:	1886703a 	and	r3,r3,r2
 8016464:	e0bff517 	ldw	r2,-44(fp)
 8016468:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801646c:	e0bff517 	ldw	r2,-44(fp)
 8016470:	10800017 	ldw	r2,0(r2)
 8016474:	10800104 	addi	r2,r2,4
 8016478:	1007883a 	mov	r3,r2
 801647c:	e0bff517 	ldw	r2,-44(fp)
 8016480:	10800817 	ldw	r2,32(r2)
 8016484:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8016488:	e0bff617 	ldw	r2,-40(fp)
 801648c:	10800104 	addi	r2,r2,4
 8016490:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8016494:	003f6606 	br	8016230 <altera_avalon_jtag_uart_irq+0x2c>
}
 8016498:	e037883a 	mov	sp,fp
 801649c:	dfc00117 	ldw	ra,4(sp)
 80164a0:	df000017 	ldw	fp,0(sp)
 80164a4:	dec00204 	addi	sp,sp,8
 80164a8:	f800283a 	ret

080164ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80164ac:	defff904 	addi	sp,sp,-28
 80164b0:	dfc00615 	stw	ra,24(sp)
 80164b4:	df000515 	stw	fp,20(sp)
 80164b8:	df000504 	addi	fp,sp,20
 80164bc:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80164c0:	e0bfff17 	ldw	r2,-4(fp)
 80164c4:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80164c8:	e0bffb17 	ldw	r2,-20(fp)
 80164cc:	10800017 	ldw	r2,0(r2)
 80164d0:	10800104 	addi	r2,r2,4
 80164d4:	10800037 	ldwio	r2,0(r2)
 80164d8:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80164dc:	e0bffc17 	ldw	r2,-16(fp)
 80164e0:	1081000c 	andi	r2,r2,1024
 80164e4:	10000b26 	beq	r2,zero,8016514 <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80164e8:	e0bffb17 	ldw	r2,-20(fp)
 80164ec:	10800017 	ldw	r2,0(r2)
 80164f0:	10800104 	addi	r2,r2,4
 80164f4:	1007883a 	mov	r3,r2
 80164f8:	e0bffb17 	ldw	r2,-20(fp)
 80164fc:	10800817 	ldw	r2,32(r2)
 8016500:	10810014 	ori	r2,r2,1024
 8016504:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8016508:	e0bffb17 	ldw	r2,-20(fp)
 801650c:	10000915 	stw	zero,36(r2)
 8016510:	00002206 	br	801659c <altera_avalon_jtag_uart_timeout+0xf0>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8016514:	e0bffb17 	ldw	r2,-20(fp)
 8016518:	10c00917 	ldw	r3,36(r2)
 801651c:	00a00034 	movhi	r2,32768
 8016520:	10bfff04 	addi	r2,r2,-4
 8016524:	10c01d36 	bltu	r2,r3,801659c <altera_avalon_jtag_uart_timeout+0xf0>
    sp->host_inactive++;
 8016528:	e0bffb17 	ldw	r2,-20(fp)
 801652c:	10800917 	ldw	r2,36(r2)
 8016530:	10c00044 	addi	r3,r2,1
 8016534:	e0bffb17 	ldw	r2,-20(fp)
 8016538:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 801653c:	e0bffb17 	ldw	r2,-20(fp)
 8016540:	10c00917 	ldw	r3,36(r2)
 8016544:	e0bffb17 	ldw	r2,-20(fp)
 8016548:	10800117 	ldw	r2,4(r2)
 801654c:	18801336 	bltu	r3,r2,801659c <altera_avalon_jtag_uart_timeout+0xf0>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 8016550:	e0bffb17 	ldw	r2,-20(fp)
 8016554:	10800c17 	ldw	r2,48(r2)
 8016558:	e0bffd15 	stw	r2,-12(fp)
 801655c:	00800104 	movi	r2,4
 8016560:	e0bffe0d 	sth	r2,-8(fp)
 8016564:	00800044 	movi	r2,1
 8016568:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 801656c:	008200f4 	movhi	r2,2051
 8016570:	10bb3944 	addi	r2,r2,-4891
 8016574:	10800003 	ldbu	r2,0(r2)
 8016578:	10803fcc 	andi	r2,r2,255
 801657c:	10000726 	beq	r2,zero,801659c <altera_avalon_jtag_uart_timeout+0xf0>
  {
    OSFlagPost (group, flags, opt, &err);
 8016580:	e17ffe0b 	ldhu	r5,-8(fp)
 8016584:	e0fffe83 	ldbu	r3,-6(fp)
 8016588:	e0bffec4 	addi	r2,fp,-5
 801658c:	e13ffd17 	ldw	r4,-12(fp)
 8016590:	180d883a 	mov	r6,r3
 8016594:	100f883a 	mov	r7,r2
 8016598:	801110c0 	call	801110c <OSFlagPost>
 801659c:	008200f4 	movhi	r2,2051
 80165a0:	10bb4e04 	addi	r2,r2,-4808
 80165a4:	10800017 	ldw	r2,0(r2)
    }
  }

  return alt_ticks_per_second();
}
 80165a8:	e037883a 	mov	sp,fp
 80165ac:	dfc00117 	ldw	ra,4(sp)
 80165b0:	df000017 	ldw	fp,0(sp)
 80165b4:	dec00204 	addi	sp,sp,8
 80165b8:	f800283a 	ret

080165bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80165bc:	defffd04 	addi	sp,sp,-12
 80165c0:	df000215 	stw	fp,8(sp)
 80165c4:	df000204 	addi	fp,sp,8
 80165c8:	e13ffe15 	stw	r4,-8(fp)
 80165cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80165d0:	00000506 	br	80165e8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80165d4:	e0bfff17 	ldw	r2,-4(fp)
 80165d8:	1090000c 	andi	r2,r2,16384
 80165dc:	10000226 	beq	r2,zero,80165e8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80165e0:	00bffd44 	movi	r2,-11
 80165e4:	00000b06 	br	8016614 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80165e8:	e0bffe17 	ldw	r2,-8(fp)
 80165ec:	10c01017 	ldw	r3,64(r2)
 80165f0:	e0bffe17 	ldw	r2,-8(fp)
 80165f4:	10800f17 	ldw	r2,60(r2)
 80165f8:	18800526 	beq	r3,r2,8016610 <altera_avalon_jtag_uart_close+0x54>
 80165fc:	e0bffe17 	ldw	r2,-8(fp)
 8016600:	10c00917 	ldw	r3,36(r2)
 8016604:	e0bffe17 	ldw	r2,-8(fp)
 8016608:	10800117 	ldw	r2,4(r2)
 801660c:	18bff136 	bltu	r3,r2,80165d4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8016610:	0005883a 	mov	r2,zero
}
 8016614:	e037883a 	mov	sp,fp
 8016618:	df000017 	ldw	fp,0(sp)
 801661c:	dec00104 	addi	sp,sp,4
 8016620:	f800283a 	ret

08016624 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8016624:	defffa04 	addi	sp,sp,-24
 8016628:	df000515 	stw	fp,20(sp)
 801662c:	df000504 	addi	fp,sp,20
 8016630:	e13ffd15 	stw	r4,-12(fp)
 8016634:	e17ffe15 	stw	r5,-8(fp)
 8016638:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 801663c:	00bff9c4 	movi	r2,-25
 8016640:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 8016644:	e0bffe17 	ldw	r2,-8(fp)
 8016648:	10da8060 	cmpeqi	r3,r2,27137
 801664c:	1800031e 	bne	r3,zero,801665c <altera_avalon_jtag_uart_ioctl+0x38>
 8016650:	109a80a0 	cmpeqi	r2,r2,27138
 8016654:	1000191e 	bne	r2,zero,80166bc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8016658:	00002806 	br	80166fc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 801665c:	e0bffd17 	ldw	r2,-12(fp)
 8016660:	10c00117 	ldw	r3,4(r2)
 8016664:	00a00034 	movhi	r2,32768
 8016668:	10bfffc4 	addi	r2,r2,-1
 801666c:	18801226 	beq	r3,r2,80166b8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 8016670:	e0bfff17 	ldw	r2,-4(fp)
 8016674:	10800017 	ldw	r2,0(r2)
 8016678:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801667c:	e0bffc17 	ldw	r2,-16(fp)
 8016680:	10800090 	cmplti	r2,r2,2
 8016684:	1000061e 	bne	r2,zero,80166a0 <altera_avalon_jtag_uart_ioctl+0x7c>
 8016688:	e0fffc17 	ldw	r3,-16(fp)
 801668c:	00a00034 	movhi	r2,32768
 8016690:	10bfffc4 	addi	r2,r2,-1
 8016694:	18800226 	beq	r3,r2,80166a0 <altera_avalon_jtag_uart_ioctl+0x7c>
 8016698:	e0bffc17 	ldw	r2,-16(fp)
 801669c:	00000206 	br	80166a8 <altera_avalon_jtag_uart_ioctl+0x84>
 80166a0:	00a00034 	movhi	r2,32768
 80166a4:	10bfff84 	addi	r2,r2,-2
 80166a8:	e0fffd17 	ldw	r3,-12(fp)
 80166ac:	18800115 	stw	r2,4(r3)
      rc = 0;
 80166b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80166b4:	00001106 	br	80166fc <altera_avalon_jtag_uart_ioctl+0xd8>
 80166b8:	00001006 	br	80166fc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 80166bc:	e0bffd17 	ldw	r2,-12(fp)
 80166c0:	10c00117 	ldw	r3,4(r2)
 80166c4:	00a00034 	movhi	r2,32768
 80166c8:	10bfffc4 	addi	r2,r2,-1
 80166cc:	18800a26 	beq	r3,r2,80166f8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80166d0:	e0bffd17 	ldw	r2,-12(fp)
 80166d4:	10c00917 	ldw	r3,36(r2)
 80166d8:	e0bffd17 	ldw	r2,-12(fp)
 80166dc:	10800117 	ldw	r2,4(r2)
 80166e0:	1885803a 	cmpltu	r2,r3,r2
 80166e4:	10c03fcc 	andi	r3,r2,255
 80166e8:	e0bfff17 	ldw	r2,-4(fp)
 80166ec:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80166f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 80166f4:	00000006 	br	80166f8 <altera_avalon_jtag_uart_ioctl+0xd4>
 80166f8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 80166fc:	e0bffb17 	ldw	r2,-20(fp)
}
 8016700:	e037883a 	mov	sp,fp
 8016704:	df000017 	ldw	fp,0(sp)
 8016708:	dec00104 	addi	sp,sp,4
 801670c:	f800283a 	ret

08016710 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8016710:	deffec04 	addi	sp,sp,-80
 8016714:	dfc01315 	stw	ra,76(sp)
 8016718:	df001215 	stw	fp,72(sp)
 801671c:	df001204 	addi	fp,sp,72
 8016720:	e13ffc15 	stw	r4,-16(fp)
 8016724:	e17ffd15 	stw	r5,-12(fp)
 8016728:	e1bffe15 	stw	r6,-8(fp)
 801672c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 8016730:	e0bffd17 	ldw	r2,-12(fp)
 8016734:	e0bfef15 	stw	r2,-68(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 8016738:	e0bffc17 	ldw	r2,-16(fp)
 801673c:	10800a17 	ldw	r2,40(r2)
 8016740:	e0bff415 	stw	r2,-48(fp)
 8016744:	e03ff50d 	sth	zero,-44(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 8016748:	e0fff50b 	ldhu	r3,-44(fp)
 801674c:	e0bffb04 	addi	r2,fp,-20
 8016750:	e13ff417 	ldw	r4,-48(fp)
 8016754:	180b883a 	mov	r5,r3
 8016758:	100d883a 	mov	r6,r2
 801675c:	801375c0 	call	801375c <OSSemPend>

  while (space > 0)
 8016760:	00006506 	br	80168f8 <altera_avalon_jtag_uart_read+0x1e8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8016764:	e0bffc17 	ldw	r2,-16(fp)
 8016768:	10800d17 	ldw	r2,52(r2)
 801676c:	e0bff115 	stw	r2,-60(fp)
      out = sp->rx_out;
 8016770:	e0bffc17 	ldw	r2,-16(fp)
 8016774:	10800e17 	ldw	r2,56(r2)
 8016778:	e0bff215 	stw	r2,-56(fp)

      if (in >= out)
 801677c:	e0fff117 	ldw	r3,-60(fp)
 8016780:	e0bff217 	ldw	r2,-56(fp)
 8016784:	18800536 	bltu	r3,r2,801679c <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 8016788:	e0fff117 	ldw	r3,-60(fp)
 801678c:	e0bff217 	ldw	r2,-56(fp)
 8016790:	1885c83a 	sub	r2,r3,r2
 8016794:	e0bff015 	stw	r2,-64(fp)
 8016798:	00000406 	br	80167ac <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 801679c:	00c20004 	movi	r3,2048
 80167a0:	e0bff217 	ldw	r2,-56(fp)
 80167a4:	1885c83a 	sub	r2,r3,r2
 80167a8:	e0bff015 	stw	r2,-64(fp)

      if (n == 0)
 80167ac:	e0bff017 	ldw	r2,-64(fp)
 80167b0:	1000011e 	bne	r2,zero,80167b8 <altera_avalon_jtag_uart_read+0xa8>
        break; /* No more data available */
 80167b4:	00001d06 	br	801682c <altera_avalon_jtag_uart_read+0x11c>

      if (n > space)
 80167b8:	e0fffe17 	ldw	r3,-8(fp)
 80167bc:	e0bff017 	ldw	r2,-64(fp)
 80167c0:	1880022e 	bgeu	r3,r2,80167cc <altera_avalon_jtag_uart_read+0xbc>
        n = space;
 80167c4:	e0bffe17 	ldw	r2,-8(fp)
 80167c8:	e0bff015 	stw	r2,-64(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80167cc:	e0bff217 	ldw	r2,-56(fp)
 80167d0:	10801104 	addi	r2,r2,68
 80167d4:	e0fffc17 	ldw	r3,-16(fp)
 80167d8:	1885883a 	add	r2,r3,r2
 80167dc:	e13fef17 	ldw	r4,-68(fp)
 80167e0:	100b883a 	mov	r5,r2
 80167e4:	e1bff017 	ldw	r6,-64(fp)
 80167e8:	80068b40 	call	80068b4 <memcpy>
      ptr   += n;
 80167ec:	e0ffef17 	ldw	r3,-68(fp)
 80167f0:	e0bff017 	ldw	r2,-64(fp)
 80167f4:	1885883a 	add	r2,r3,r2
 80167f8:	e0bfef15 	stw	r2,-68(fp)
      space -= n;
 80167fc:	e0fffe17 	ldw	r3,-8(fp)
 8016800:	e0bff017 	ldw	r2,-64(fp)
 8016804:	1885c83a 	sub	r2,r3,r2
 8016808:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801680c:	e0fff217 	ldw	r3,-56(fp)
 8016810:	e0bff017 	ldw	r2,-64(fp)
 8016814:	1885883a 	add	r2,r3,r2
 8016818:	10c1ffcc 	andi	r3,r2,2047
 801681c:	e0bffc17 	ldw	r2,-16(fp)
 8016820:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 8016824:	e0bffe17 	ldw	r2,-8(fp)
 8016828:	00bfce16 	blt	zero,r2,8016764 <altera_avalon_jtag_uart_read+0x54>

    /* If we read any data then return it */
    if (ptr != buffer)
 801682c:	e0ffef17 	ldw	r3,-68(fp)
 8016830:	e0bffd17 	ldw	r2,-12(fp)
 8016834:	18800126 	beq	r3,r2,801683c <altera_avalon_jtag_uart_read+0x12c>
      break;
 8016838:	00003106 	br	8016900 <altera_avalon_jtag_uart_read+0x1f0>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 801683c:	e0bfff17 	ldw	r2,-4(fp)
 8016840:	1090000c 	andi	r2,r2,16384
 8016844:	10000126 	beq	r2,zero,801684c <altera_avalon_jtag_uart_read+0x13c>
      break;
 8016848:	00002d06 	br	8016900 <altera_avalon_jtag_uart_read+0x1f0>

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 801684c:	008200f4 	movhi	r2,2051
 8016850:	10bb3944 	addi	r2,r2,-4891
 8016854:	10800003 	ldbu	r2,0(r2)
 8016858:	10803fcc 	andi	r2,r2,255
 801685c:	10800058 	cmpnei	r2,r2,1
 8016860:	1000161e 	bne	r2,zero,80168bc <altera_avalon_jtag_uart_read+0x1ac>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 8016864:	e0bffc17 	ldw	r2,-16(fp)
 8016868:	10800c17 	ldw	r2,48(r2)
 801686c:	e0bff615 	stw	r2,-40(fp)
 8016870:	00800144 	movi	r2,5
 8016874:	e0bff70d 	sth	r2,-36(fp)
 8016878:	00bfe0c4 	movi	r2,-125
 801687c:	e0bff785 	stb	r2,-34(fp)
 8016880:	e03ff80d 	sth	zero,-32(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 8016884:	008200f4 	movhi	r2,2051
 8016888:	10bb3944 	addi	r2,r2,-4891
 801688c:	10800003 	ldbu	r2,0(r2)
 8016890:	10803fcc 	andi	r2,r2,255
 8016894:	10001326 	beq	r2,zero,80168e4 <altera_avalon_jtag_uart_read+0x1d4>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 8016898:	e17ff70b 	ldhu	r5,-36(fp)
 801689c:	e1bff783 	ldbu	r6,-34(fp)
 80168a0:	e0fff80b 	ldhu	r3,-32(fp)
 80168a4:	e0bffb44 	addi	r2,fp,-19
 80168a8:	d8800015 	stw	r2,0(sp)
 80168ac:	e13ff617 	ldw	r4,-40(fp)
 80168b0:	180f883a 	mov	r7,r3
 80168b4:	8010ab40 	call	8010ab4 <OSFlagPend>
 80168b8:	00000a06 	br	80168e4 <altera_avalon_jtag_uart_read+0x1d4>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80168bc:	0001883a 	nop
 80168c0:	e0bffc17 	ldw	r2,-16(fp)
 80168c4:	10c00d17 	ldw	r3,52(r2)
 80168c8:	e0bff117 	ldw	r2,-60(fp)
 80168cc:	1880051e 	bne	r3,r2,80168e4 <altera_avalon_jtag_uart_read+0x1d4>
 80168d0:	e0bffc17 	ldw	r2,-16(fp)
 80168d4:	10c00917 	ldw	r3,36(r2)
 80168d8:	e0bffc17 	ldw	r2,-16(fp)
 80168dc:	10800117 	ldw	r2,4(r2)
 80168e0:	18bff736 	bltu	r3,r2,80168c0 <altera_avalon_jtag_uart_read+0x1b0>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80168e4:	e0bffc17 	ldw	r2,-16(fp)
 80168e8:	10c00d17 	ldw	r3,52(r2)
 80168ec:	e0bff117 	ldw	r2,-60(fp)
 80168f0:	1880011e 	bne	r3,r2,80168f8 <altera_avalon_jtag_uart_read+0x1e8>
      break;
 80168f4:	00000206 	br	8016900 <altera_avalon_jtag_uart_read+0x1f0>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80168f8:	e0bffe17 	ldw	r2,-8(fp)
 80168fc:	00bf9916 	blt	zero,r2,8016764 <altera_avalon_jtag_uart_read+0x54>
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 8016900:	e0bffc17 	ldw	r2,-16(fp)
 8016904:	10800a17 	ldw	r2,40(r2)
 8016908:	1009883a 	mov	r4,r2
 801690c:	8013b300 	call	8013b30 <OSSemPost>

  if (ptr != buffer)
 8016910:	e0ffef17 	ldw	r3,-68(fp)
 8016914:	e0bffd17 	ldw	r2,-12(fp)
 8016918:	18801826 	beq	r3,r2,801697c <altera_avalon_jtag_uart_read+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801691c:	0005303a 	rdctl	r2,status
 8016920:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016924:	e0fff917 	ldw	r3,-28(fp)
 8016928:	00bfff84 	movi	r2,-2
 801692c:	1884703a 	and	r2,r3,r2
 8016930:	1001703a 	wrctl	status,r2
  
  return context;
 8016934:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8016938:	e0bff315 	stw	r2,-52(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801693c:	e0bffc17 	ldw	r2,-16(fp)
 8016940:	10800817 	ldw	r2,32(r2)
 8016944:	10c00054 	ori	r3,r2,1
 8016948:	e0bffc17 	ldw	r2,-16(fp)
 801694c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8016950:	e0bffc17 	ldw	r2,-16(fp)
 8016954:	10800017 	ldw	r2,0(r2)
 8016958:	10800104 	addi	r2,r2,4
 801695c:	1007883a 	mov	r3,r2
 8016960:	e0bffc17 	ldw	r2,-16(fp)
 8016964:	10800817 	ldw	r2,32(r2)
 8016968:	18800035 	stwio	r2,0(r3)
 801696c:	e0bff317 	ldw	r2,-52(fp)
 8016970:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016974:	e0bffa17 	ldw	r2,-24(fp)
 8016978:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801697c:	e0ffef17 	ldw	r3,-68(fp)
 8016980:	e0bffd17 	ldw	r2,-12(fp)
 8016984:	18800426 	beq	r3,r2,8016998 <altera_avalon_jtag_uart_read+0x288>
    return ptr - buffer;
 8016988:	e0ffef17 	ldw	r3,-68(fp)
 801698c:	e0bffd17 	ldw	r2,-12(fp)
 8016990:	1885c83a 	sub	r2,r3,r2
 8016994:	00000606 	br	80169b0 <altera_avalon_jtag_uart_read+0x2a0>
  else if (flags & O_NONBLOCK)
 8016998:	e0bfff17 	ldw	r2,-4(fp)
 801699c:	1090000c 	andi	r2,r2,16384
 80169a0:	10000226 	beq	r2,zero,80169ac <altera_avalon_jtag_uart_read+0x29c>
    return -EWOULDBLOCK;
 80169a4:	00bffd44 	movi	r2,-11
 80169a8:	00000106 	br	80169b0 <altera_avalon_jtag_uart_read+0x2a0>
  else
    return -EIO;
 80169ac:	00bffec4 	movi	r2,-5
}
 80169b0:	e037883a 	mov	sp,fp
 80169b4:	dfc00117 	ldw	ra,4(sp)
 80169b8:	df000017 	ldw	fp,0(sp)
 80169bc:	dec00204 	addi	sp,sp,8
 80169c0:	f800283a 	ret

080169c4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80169c4:	deffed04 	addi	sp,sp,-76
 80169c8:	dfc01215 	stw	ra,72(sp)
 80169cc:	df001115 	stw	fp,68(sp)
 80169d0:	df001104 	addi	fp,sp,68
 80169d4:	e13ffc15 	stw	r4,-16(fp)
 80169d8:	e17ffd15 	stw	r5,-12(fp)
 80169dc:	e1bffe15 	stw	r6,-8(fp)
 80169e0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80169e4:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80169e8:	e0bffd17 	ldw	r2,-12(fp)
 80169ec:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 80169f0:	e0bffc17 	ldw	r2,-16(fp)
 80169f4:	10800b17 	ldw	r2,44(r2)
 80169f8:	e0bff515 	stw	r2,-44(fp)
 80169fc:	e03ff60d 	sth	zero,-40(fp)
 8016a00:	e0fff60b 	ldhu	r3,-40(fp)
 8016a04:	e0bffbc4 	addi	r2,fp,-17
 8016a08:	e13ff517 	ldw	r4,-44(fp)
 8016a0c:	180b883a 	mov	r5,r3
 8016a10:	100d883a 	mov	r6,r2
 8016a14:	801375c0 	call	801375c <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8016a18:	00003806 	br	8016afc <altera_avalon_jtag_uart_write+0x138>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8016a1c:	e0bffc17 	ldw	r2,-16(fp)
 8016a20:	10800f17 	ldw	r2,60(r2)
 8016a24:	e0bff315 	stw	r2,-52(fp)
      out = sp->tx_out;
 8016a28:	e0bffc17 	ldw	r2,-16(fp)
 8016a2c:	10801017 	ldw	r2,64(r2)
 8016a30:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 8016a34:	e0fff317 	ldw	r3,-52(fp)
 8016a38:	e0bff017 	ldw	r2,-64(fp)
 8016a3c:	1880062e 	bgeu	r3,r2,8016a58 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 8016a40:	e0fff017 	ldw	r3,-64(fp)
 8016a44:	e0bff317 	ldw	r2,-52(fp)
 8016a48:	1885c83a 	sub	r2,r3,r2
 8016a4c:	10bfffc4 	addi	r2,r2,-1
 8016a50:	e0bff115 	stw	r2,-60(fp)
 8016a54:	00000b06 	br	8016a84 <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 8016a58:	e0bff017 	ldw	r2,-64(fp)
 8016a5c:	10000526 	beq	r2,zero,8016a74 <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8016a60:	00c20004 	movi	r3,2048
 8016a64:	e0bff317 	ldw	r2,-52(fp)
 8016a68:	1885c83a 	sub	r2,r3,r2
 8016a6c:	e0bff115 	stw	r2,-60(fp)
 8016a70:	00000406 	br	8016a84 <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8016a74:	00c1ffc4 	movi	r3,2047
 8016a78:	e0bff317 	ldw	r2,-52(fp)
 8016a7c:	1885c83a 	sub	r2,r3,r2
 8016a80:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 8016a84:	e0bff117 	ldw	r2,-60(fp)
 8016a88:	1000011e 	bne	r2,zero,8016a90 <altera_avalon_jtag_uart_write+0xcc>
        break;
 8016a8c:	00001d06 	br	8016b04 <altera_avalon_jtag_uart_write+0x140>

      if (n > count)
 8016a90:	e0fffe17 	ldw	r3,-8(fp)
 8016a94:	e0bff117 	ldw	r2,-60(fp)
 8016a98:	1880022e 	bgeu	r3,r2,8016aa4 <altera_avalon_jtag_uart_write+0xe0>
        n = count;
 8016a9c:	e0bffe17 	ldw	r2,-8(fp)
 8016aa0:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8016aa4:	e0bff317 	ldw	r2,-52(fp)
 8016aa8:	10821104 	addi	r2,r2,2116
 8016aac:	e0fffc17 	ldw	r3,-16(fp)
 8016ab0:	1885883a 	add	r2,r3,r2
 8016ab4:	1009883a 	mov	r4,r2
 8016ab8:	e17ffd17 	ldw	r5,-12(fp)
 8016abc:	e1bff117 	ldw	r6,-60(fp)
 8016ac0:	80068b40 	call	80068b4 <memcpy>
      ptr   += n;
 8016ac4:	e0fffd17 	ldw	r3,-12(fp)
 8016ac8:	e0bff117 	ldw	r2,-60(fp)
 8016acc:	1885883a 	add	r2,r3,r2
 8016ad0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 8016ad4:	e0fffe17 	ldw	r3,-8(fp)
 8016ad8:	e0bff117 	ldw	r2,-60(fp)
 8016adc:	1885c83a 	sub	r2,r3,r2
 8016ae0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8016ae4:	e0fff317 	ldw	r3,-52(fp)
 8016ae8:	e0bff117 	ldw	r2,-60(fp)
 8016aec:	1885883a 	add	r2,r3,r2
 8016af0:	10c1ffcc 	andi	r3,r2,2047
 8016af4:	e0bffc17 	ldw	r2,-16(fp)
 8016af8:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8016afc:	e0bffe17 	ldw	r2,-8(fp)
 8016b00:	00bfc616 	blt	zero,r2,8016a1c <altera_avalon_jtag_uart_write+0x58>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016b04:	0005303a 	rdctl	r2,status
 8016b08:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016b0c:	e0fff717 	ldw	r3,-36(fp)
 8016b10:	00bfff84 	movi	r2,-2
 8016b14:	1884703a 	and	r2,r3,r2
 8016b18:	1001703a 	wrctl	status,r2
  
  return context;
 8016b1c:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8016b20:	e0bff415 	stw	r2,-48(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8016b24:	e0bffc17 	ldw	r2,-16(fp)
 8016b28:	10800817 	ldw	r2,32(r2)
 8016b2c:	10c00094 	ori	r3,r2,2
 8016b30:	e0bffc17 	ldw	r2,-16(fp)
 8016b34:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8016b38:	e0bffc17 	ldw	r2,-16(fp)
 8016b3c:	10800017 	ldw	r2,0(r2)
 8016b40:	10800104 	addi	r2,r2,4
 8016b44:	1007883a 	mov	r3,r2
 8016b48:	e0bffc17 	ldw	r2,-16(fp)
 8016b4c:	10800817 	ldw	r2,32(r2)
 8016b50:	18800035 	stwio	r2,0(r3)
 8016b54:	e0bff417 	ldw	r2,-48(fp)
 8016b58:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016b5c:	e0bff817 	ldw	r2,-32(fp)
 8016b60:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8016b64:	e0bffe17 	ldw	r2,-8(fp)
 8016b68:	00802e0e 	bge	zero,r2,8016c24 <altera_avalon_jtag_uart_write+0x260>
    {
      if (flags & O_NONBLOCK)
 8016b6c:	e0bfff17 	ldw	r2,-4(fp)
 8016b70:	1090000c 	andi	r2,r2,16384
 8016b74:	10000126 	beq	r2,zero,8016b7c <altera_avalon_jtag_uart_write+0x1b8>
        break;
 8016b78:	00002c06 	br	8016c2c <altera_avalon_jtag_uart_write+0x268>

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 8016b7c:	008200f4 	movhi	r2,2051
 8016b80:	10bb3944 	addi	r2,r2,-4891
 8016b84:	10800003 	ldbu	r2,0(r2)
 8016b88:	10803fcc 	andi	r2,r2,255
 8016b8c:	10800058 	cmpnei	r2,r2,1
 8016b90:	1000161e 	bne	r2,zero,8016bec <altera_avalon_jtag_uart_write+0x228>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 8016b94:	e0bffc17 	ldw	r2,-16(fp)
 8016b98:	10800c17 	ldw	r2,48(r2)
 8016b9c:	e0bff915 	stw	r2,-28(fp)
 8016ba0:	00800184 	movi	r2,6
 8016ba4:	e0bffa0d 	sth	r2,-24(fp)
 8016ba8:	00bfe0c4 	movi	r2,-125
 8016bac:	e0bffa85 	stb	r2,-22(fp)
 8016bb0:	e03ffb0d 	sth	zero,-20(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 8016bb4:	008200f4 	movhi	r2,2051
 8016bb8:	10bb3944 	addi	r2,r2,-4891
 8016bbc:	10800003 	ldbu	r2,0(r2)
 8016bc0:	10803fcc 	andi	r2,r2,255
 8016bc4:	10001326 	beq	r2,zero,8016c14 <altera_avalon_jtag_uart_write+0x250>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 8016bc8:	e17ffa0b 	ldhu	r5,-24(fp)
 8016bcc:	e1bffa83 	ldbu	r6,-22(fp)
 8016bd0:	e0fffb0b 	ldhu	r3,-20(fp)
 8016bd4:	e0bffb84 	addi	r2,fp,-18
 8016bd8:	d8800015 	stw	r2,0(sp)
 8016bdc:	e13ff917 	ldw	r4,-28(fp)
 8016be0:	180f883a 	mov	r7,r3
 8016be4:	8010ab40 	call	8010ab4 <OSFlagPend>
 8016be8:	00000a06 	br	8016c14 <altera_avalon_jtag_uart_write+0x250>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8016bec:	0001883a 	nop
 8016bf0:	e0bffc17 	ldw	r2,-16(fp)
 8016bf4:	10c01017 	ldw	r3,64(r2)
 8016bf8:	e0bff017 	ldw	r2,-64(fp)
 8016bfc:	1880051e 	bne	r3,r2,8016c14 <altera_avalon_jtag_uart_write+0x250>
 8016c00:	e0bffc17 	ldw	r2,-16(fp)
 8016c04:	10c00917 	ldw	r3,36(r2)
 8016c08:	e0bffc17 	ldw	r2,-16(fp)
 8016c0c:	10800117 	ldw	r2,4(r2)
 8016c10:	18bff736 	bltu	r3,r2,8016bf0 <altera_avalon_jtag_uart_write+0x22c>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8016c14:	e0bffc17 	ldw	r2,-16(fp)
 8016c18:	10800917 	ldw	r2,36(r2)
 8016c1c:	10000126 	beq	r2,zero,8016c24 <altera_avalon_jtag_uart_write+0x260>
         break;
 8016c20:	00000206 	br	8016c2c <altera_avalon_jtag_uart_write+0x268>
    }
  }
  while (count > 0);
 8016c24:	e0bffe17 	ldw	r2,-8(fp)
 8016c28:	00bf7b16 	blt	zero,r2,8016a18 <altera_avalon_jtag_uart_write+0x54>

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 8016c2c:	e0bffc17 	ldw	r2,-16(fp)
 8016c30:	10800b17 	ldw	r2,44(r2)
 8016c34:	1009883a 	mov	r4,r2
 8016c38:	8013b300 	call	8013b30 <OSSemPost>

  if (ptr != start)
 8016c3c:	e0fffd17 	ldw	r3,-12(fp)
 8016c40:	e0bff217 	ldw	r2,-56(fp)
 8016c44:	18800426 	beq	r3,r2,8016c58 <altera_avalon_jtag_uart_write+0x294>
    return ptr - start;
 8016c48:	e0fffd17 	ldw	r3,-12(fp)
 8016c4c:	e0bff217 	ldw	r2,-56(fp)
 8016c50:	1885c83a 	sub	r2,r3,r2
 8016c54:	00000606 	br	8016c70 <altera_avalon_jtag_uart_write+0x2ac>
  else if (flags & O_NONBLOCK)
 8016c58:	e0bfff17 	ldw	r2,-4(fp)
 8016c5c:	1090000c 	andi	r2,r2,16384
 8016c60:	10000226 	beq	r2,zero,8016c6c <altera_avalon_jtag_uart_write+0x2a8>
    return -EWOULDBLOCK;
 8016c64:	00bffd44 	movi	r2,-11
 8016c68:	00000106 	br	8016c70 <altera_avalon_jtag_uart_write+0x2ac>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8016c6c:	00bffec4 	movi	r2,-5
}
 8016c70:	e037883a 	mov	sp,fp
 8016c74:	dfc00117 	ldw	ra,4(sp)
 8016c78:	df000017 	ldw	fp,0(sp)
 8016c7c:	dec00204 	addi	sp,sp,8
 8016c80:	f800283a 	ret

08016c84 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8016c84:	defff904 	addi	sp,sp,-28
 8016c88:	dfc00615 	stw	ra,24(sp)
 8016c8c:	df000515 	stw	fp,20(sp)
 8016c90:	df000504 	addi	fp,sp,20
 8016c94:	e13ffe15 	stw	r4,-8(fp)
 8016c98:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8016c9c:	0007883a 	mov	r3,zero
 8016ca0:	e0bffe17 	ldw	r2,-8(fp)
 8016ca4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8016ca8:	e0bffe17 	ldw	r2,-8(fp)
 8016cac:	10800104 	addi	r2,r2,4
 8016cb0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8016cb4:	0005303a 	rdctl	r2,status
 8016cb8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8016cbc:	e0fffc17 	ldw	r3,-16(fp)
 8016cc0:	00bfff84 	movi	r2,-2
 8016cc4:	1884703a 	and	r2,r3,r2
 8016cc8:	1001703a 	wrctl	status,r2
  
  return context;
 8016ccc:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8016cd0:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 8016cd4:	8018dc40 	call	8018dc4 <alt_tick>
 8016cd8:	e0bffb17 	ldw	r2,-20(fp)
 8016cdc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8016ce0:	e0bffd17 	ldw	r2,-12(fp)
 8016ce4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8016ce8:	e037883a 	mov	sp,fp
 8016cec:	dfc00117 	ldw	ra,4(sp)
 8016cf0:	df000017 	ldw	fp,0(sp)
 8016cf4:	dec00204 	addi	sp,sp,8
 8016cf8:	f800283a 	ret

08016cfc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8016cfc:	defff904 	addi	sp,sp,-28
 8016d00:	dfc00615 	stw	ra,24(sp)
 8016d04:	df000515 	stw	fp,20(sp)
 8016d08:	df000504 	addi	fp,sp,20
 8016d0c:	e13ffc15 	stw	r4,-16(fp)
 8016d10:	e17ffd15 	stw	r5,-12(fp)
 8016d14:	e1bffe15 	stw	r6,-8(fp)
 8016d18:	e1ffff15 	stw	r7,-4(fp)
 8016d1c:	e0bfff17 	ldw	r2,-4(fp)
 8016d20:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8016d24:	008200f4 	movhi	r2,2051
 8016d28:	10bb4e04 	addi	r2,r2,-4808
 8016d2c:	10800017 	ldw	r2,0(r2)
 8016d30:	1000041e 	bne	r2,zero,8016d44 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 8016d34:	008200f4 	movhi	r2,2051
 8016d38:	10bb4e04 	addi	r2,r2,-4808
 8016d3c:	e0fffb17 	ldw	r3,-20(fp)
 8016d40:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8016d44:	e0bffc17 	ldw	r2,-16(fp)
 8016d48:	10800104 	addi	r2,r2,4
 8016d4c:	00c001c4 	movi	r3,7
 8016d50:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 8016d54:	e13ffe17 	ldw	r4,-8(fp)
 8016d58:	e17ffc17 	ldw	r5,-16(fp)
 8016d5c:	01820074 	movhi	r6,2049
 8016d60:	319b2104 	addi	r6,r6,27780
 8016d64:	80189080 	call	8018908 <alt_irq_register>
#endif  
}
 8016d68:	e037883a 	mov	sp,fp
 8016d6c:	dfc00117 	ldw	ra,4(sp)
 8016d70:	df000017 	ldw	fp,0(sp)
 8016d74:	dec00204 	addi	sp,sp,8
 8016d78:	f800283a 	ret

08016d7c <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
 8016d7c:	defffc04 	addi	sp,sp,-16
 8016d80:	dfc00315 	stw	ra,12(sp)
 8016d84:	df000215 	stw	fp,8(sp)
 8016d88:	df000204 	addi	fp,sp,8
 8016d8c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
 8016d90:	e13fff17 	ldw	r4,-4(fp)
 8016d94:	014200b4 	movhi	r5,2050
 8016d98:	29514004 	addi	r5,r5,17664
 8016d9c:	80187100 	call	8018710 <alt_find_dev>
 8016da0:	e0bffe15 	stw	r2,-8(fp)
  return dev;
 8016da4:	e0bffe17 	ldw	r2,-8(fp)
}
 8016da8:	e037883a 	mov	sp,fp
 8016dac:	dfc00117 	ldw	ra,4(sp)
 8016db0:	df000017 	ldw	fp,0(sp)
 8016db4:	dec00204 	addi	sp,sp,8
 8016db8:	f800283a 	ret

08016dbc <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
 8016dbc:	defffd04 	addi	sp,sp,-12
 8016dc0:	df000215 	stw	fp,8(sp)
 8016dc4:	df000204 	addi	fp,sp,8
 8016dc8:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8016dcc:	e0bfff17 	ldw	r2,-4(fp)
 8016dd0:	10800a17 	ldw	r2,40(r2)
 8016dd4:	10800037 	ldwio	r2,0(r2)
 8016dd8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
 8016ddc:	e0bffe17 	ldw	r2,-8(fp)
 8016de0:	10800054 	ori	r2,r2,1
 8016de4:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8016de8:	e0bfff17 	ldw	r2,-4(fp)
 8016dec:	10800a17 	ldw	r2,40(r2)
 8016df0:	1007883a 	mov	r3,r2
 8016df4:	e0bffe17 	ldw	r2,-8(fp)
 8016df8:	18800035 	stwio	r2,0(r3)
}
 8016dfc:	e037883a 	mov	sp,fp
 8016e00:	df000017 	ldw	fp,0(sp)
 8016e04:	dec00104 	addi	sp,sp,4
 8016e08:	f800283a 	ret

08016e0c <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
 8016e0c:	defffd04 	addi	sp,sp,-12
 8016e10:	df000215 	stw	fp,8(sp)
 8016e14:	df000204 	addi	fp,sp,8
 8016e18:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8016e1c:	e0bfff17 	ldw	r2,-4(fp)
 8016e20:	10800a17 	ldw	r2,40(r2)
 8016e24:	10800037 	ldwio	r2,0(r2)
 8016e28:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
 8016e2c:	e0fffe17 	ldw	r3,-8(fp)
 8016e30:	00bfff84 	movi	r2,-2
 8016e34:	1884703a 	and	r2,r3,r2
 8016e38:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8016e3c:	e0bfff17 	ldw	r2,-4(fp)
 8016e40:	10800a17 	ldw	r2,40(r2)
 8016e44:	1007883a 	mov	r3,r2
 8016e48:	e0bffe17 	ldw	r2,-8(fp)
 8016e4c:	18800035 	stwio	r2,0(r3)
}
 8016e50:	e037883a 	mov	sp,fp
 8016e54:	df000017 	ldw	fp,0(sp)
 8016e58:	dec00104 	addi	sp,sp,4
 8016e5c:	f800283a 	ret

08016e60 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
 8016e60:	defffd04 	addi	sp,sp,-12
 8016e64:	df000215 	stw	fp,8(sp)
 8016e68:	df000204 	addi	fp,sp,8
 8016e6c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8016e70:	e0bfff17 	ldw	r2,-4(fp)
 8016e74:	10800a17 	ldw	r2,40(r2)
 8016e78:	10800037 	ldwio	r2,0(r2)
 8016e7c:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
 8016e80:	e0bffe17 	ldw	r2,-8(fp)
 8016e84:	10800094 	ori	r2,r2,2
 8016e88:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8016e8c:	e0bfff17 	ldw	r2,-4(fp)
 8016e90:	10800a17 	ldw	r2,40(r2)
 8016e94:	1007883a 	mov	r3,r2
 8016e98:	e0bffe17 	ldw	r2,-8(fp)
 8016e9c:	18800035 	stwio	r2,0(r3)
}
 8016ea0:	e037883a 	mov	sp,fp
 8016ea4:	df000017 	ldw	fp,0(sp)
 8016ea8:	dec00104 	addi	sp,sp,4
 8016eac:	f800283a 	ret

08016eb0 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
 8016eb0:	defffd04 	addi	sp,sp,-12
 8016eb4:	df000215 	stw	fp,8(sp)
 8016eb8:	df000204 	addi	fp,sp,8
 8016ebc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8016ec0:	e0bfff17 	ldw	r2,-4(fp)
 8016ec4:	10800a17 	ldw	r2,40(r2)
 8016ec8:	10800037 	ldwio	r2,0(r2)
 8016ecc:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
 8016ed0:	e0fffe17 	ldw	r3,-8(fp)
 8016ed4:	00bfff44 	movi	r2,-3
 8016ed8:	1884703a 	and	r2,r3,r2
 8016edc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8016ee0:	e0bfff17 	ldw	r2,-4(fp)
 8016ee4:	10800a17 	ldw	r2,40(r2)
 8016ee8:	1007883a 	mov	r3,r2
 8016eec:	e0bffe17 	ldw	r2,-8(fp)
 8016ef0:	18800035 	stwio	r2,0(r3)
}
 8016ef4:	e037883a 	mov	sp,fp
 8016ef8:	df000017 	ldw	fp,0(sp)
 8016efc:	dec00104 	addi	sp,sp,4
 8016f00:	f800283a 	ret

08016f04 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
 8016f04:	defffd04 	addi	sp,sp,-12
 8016f08:	df000215 	stw	fp,8(sp)
 8016f0c:	df000204 	addi	fp,sp,8
 8016f10:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8016f14:	e0bfff17 	ldw	r2,-4(fp)
 8016f18:	10800a17 	ldw	r2,40(r2)
 8016f1c:	10800037 	ldwio	r2,0(r2)
 8016f20:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
 8016f24:	e0bffe17 	ldw	r2,-8(fp)
 8016f28:	1080400c 	andi	r2,r2,256
 8016f2c:	1004c03a 	cmpne	r2,r2,zero
 8016f30:	10803fcc 	andi	r2,r2,255
}
 8016f34:	e037883a 	mov	sp,fp
 8016f38:	df000017 	ldw	fp,0(sp)
 8016f3c:	dec00104 	addi	sp,sp,4
 8016f40:	f800283a 	ret

08016f44 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
 8016f44:	defffd04 	addi	sp,sp,-12
 8016f48:	df000215 	stw	fp,8(sp)
 8016f4c:	df000204 	addi	fp,sp,8
 8016f50:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8016f54:	e0bfff17 	ldw	r2,-4(fp)
 8016f58:	10800a17 	ldw	r2,40(r2)
 8016f5c:	10800037 	ldwio	r2,0(r2)
 8016f60:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
 8016f64:	e0bffe17 	ldw	r2,-8(fp)
 8016f68:	1080800c 	andi	r2,r2,512
 8016f6c:	1004c03a 	cmpne	r2,r2,zero
 8016f70:	10803fcc 	andi	r2,r2,255
}
 8016f74:	e037883a 	mov	sp,fp
 8016f78:	df000017 	ldw	fp,0(sp)
 8016f7c:	dec00104 	addi	sp,sp,4
 8016f80:	f800283a 	ret

08016f84 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
 8016f84:	defffd04 	addi	sp,sp,-12
 8016f88:	df000215 	stw	fp,8(sp)
 8016f8c:	df000204 	addi	fp,sp,8
 8016f90:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
 8016f94:	e0bfff17 	ldw	r2,-4(fp)
 8016f98:	10800a17 	ldw	r2,40(r2)
 8016f9c:	10800037 	ldwio	r2,0(r2)
 8016fa0:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
 8016fa4:	e0bffe17 	ldw	r2,-8(fp)
 8016fa8:	10800114 	ori	r2,r2,4
 8016fac:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
 8016fb0:	e0bffe17 	ldw	r2,-8(fp)
 8016fb4:	10800214 	ori	r2,r2,8
 8016fb8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8016fbc:	e0bfff17 	ldw	r2,-4(fp)
 8016fc0:	10800a17 	ldw	r2,40(r2)
 8016fc4:	1007883a 	mov	r3,r2
 8016fc8:	e0bffe17 	ldw	r2,-8(fp)
 8016fcc:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
 8016fd0:	e0fffe17 	ldw	r3,-8(fp)
 8016fd4:	00bffec4 	movi	r2,-5
 8016fd8:	1884703a 	and	r2,r3,r2
 8016fdc:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
 8016fe0:	e0fffe17 	ldw	r3,-8(fp)
 8016fe4:	00bffdc4 	movi	r2,-9
 8016fe8:	1884703a 	and	r2,r3,r2
 8016fec:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
 8016ff0:	e0bfff17 	ldw	r2,-4(fp)
 8016ff4:	10800a17 	ldw	r2,40(r2)
 8016ff8:	1007883a 	mov	r3,r2
 8016ffc:	e0bffe17 	ldw	r2,-8(fp)
 8017000:	18800035 	stwio	r2,0(r3)
}
 8017004:	e037883a 	mov	sp,fp
 8017008:	df000017 	ldw	fp,0(sp)
 801700c:	dec00104 	addi	sp,sp,4
 8017010:	f800283a 	ret

08017014 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
 8017014:	defffc04 	addi	sp,sp,-16
 8017018:	df000315 	stw	fp,12(sp)
 801701c:	df000304 	addi	fp,sp,12
 8017020:	e13ffe15 	stw	r4,-8(fp)
 8017024:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8017028:	e0bffe17 	ldw	r2,-8(fp)
 801702c:	10800a17 	ldw	r2,40(r2)
 8017030:	10800104 	addi	r2,r2,4
 8017034:	10800037 	ldwio	r2,0(r2)
 8017038:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
 801703c:	e0bfff17 	ldw	r2,-4(fp)
 8017040:	1000041e 	bne	r2,zero,8017054 <alt_up_audio_read_fifo_avail+0x40>
 8017044:	e0bffd17 	ldw	r2,-12(fp)
 8017048:	10bfc00c 	andi	r2,r2,65280
 801704c:	1004d23a 	srli	r2,r2,8
 8017050:	00000206 	br	801705c <alt_up_audio_read_fifo_avail+0x48>
 8017054:	e0bffd17 	ldw	r2,-12(fp)
 8017058:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 801705c:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
 8017060:	e0bffd17 	ldw	r2,-12(fp)
}
 8017064:	e037883a 	mov	sp,fp
 8017068:	df000017 	ldw	fp,0(sp)
 801706c:	dec00104 	addi	sp,sp,4
 8017070:	f800283a 	ret

08017074 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 8017074:	defffa04 	addi	sp,sp,-24
 8017078:	dfc00515 	stw	ra,20(sp)
 801707c:	df000415 	stw	fp,16(sp)
 8017080:	df000404 	addi	fp,sp,16
 8017084:	e13ffd15 	stw	r4,-12(fp)
 8017088:	e17ffe15 	stw	r5,-8(fp)
 801708c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
 8017090:	e13ffd17 	ldw	r4,-12(fp)
 8017094:	01400044 	movi	r5,1
 8017098:	80170140 	call	8017014 <alt_up_audio_read_fifo_avail>
 801709c:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 80170a0:	e0bffc17 	ldw	r2,-16(fp)
 80170a4:	10801868 	cmpgeui	r2,r2,97
 80170a8:	1000021e 	bne	r2,zero,80170b4 <alt_up_audio_record_r+0x40>
		return 0;
 80170ac:	0005883a 	mov	r2,zero
 80170b0:	00000506 	br	80170c8 <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 80170b4:	e13ffd17 	ldw	r4,-12(fp)
 80170b8:	e17ffe17 	ldw	r5,-8(fp)
 80170bc:	e1bfff17 	ldw	r6,-4(fp)
 80170c0:	01c00044 	movi	r7,1
 80170c4:	80172740 	call	8017274 <alt_up_audio_read_fifo>
}
 80170c8:	e037883a 	mov	sp,fp
 80170cc:	dfc00117 	ldw	ra,4(sp)
 80170d0:	df000017 	ldw	fp,0(sp)
 80170d4:	dec00204 	addi	sp,sp,8
 80170d8:	f800283a 	ret

080170dc <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 80170dc:	defffa04 	addi	sp,sp,-24
 80170e0:	dfc00515 	stw	ra,20(sp)
 80170e4:	df000415 	stw	fp,16(sp)
 80170e8:	df000404 	addi	fp,sp,16
 80170ec:	e13ffd15 	stw	r4,-12(fp)
 80170f0:	e17ffe15 	stw	r5,-8(fp)
 80170f4:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
 80170f8:	e13ffd17 	ldw	r4,-12(fp)
 80170fc:	000b883a 	mov	r5,zero
 8017100:	80170140 	call	8017014 <alt_up_audio_read_fifo_avail>
 8017104:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
 8017108:	e0bffc17 	ldw	r2,-16(fp)
 801710c:	10801868 	cmpgeui	r2,r2,97
 8017110:	1000021e 	bne	r2,zero,801711c <alt_up_audio_record_l+0x40>
		return 0;
 8017114:	0005883a 	mov	r2,zero
 8017118:	00000506 	br	8017130 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 801711c:	e13ffd17 	ldw	r4,-12(fp)
 8017120:	e17ffe17 	ldw	r5,-8(fp)
 8017124:	e1bfff17 	ldw	r6,-4(fp)
 8017128:	000f883a 	mov	r7,zero
 801712c:	80172740 	call	8017274 <alt_up_audio_read_fifo>
}
 8017130:	e037883a 	mov	sp,fp
 8017134:	dfc00117 	ldw	ra,4(sp)
 8017138:	df000017 	ldw	fp,0(sp)
 801713c:	dec00204 	addi	sp,sp,8
 8017140:	f800283a 	ret

08017144 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
 8017144:	defffc04 	addi	sp,sp,-16
 8017148:	df000315 	stw	fp,12(sp)
 801714c:	df000304 	addi	fp,sp,12
 8017150:	e13ffe15 	stw	r4,-8(fp)
 8017154:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8017158:	e0bffe17 	ldw	r2,-8(fp)
 801715c:	10800a17 	ldw	r2,40(r2)
 8017160:	10800104 	addi	r2,r2,4
 8017164:	10800037 	ldwio	r2,0(r2)
 8017168:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 801716c:	e0bfff17 	ldw	r2,-4(fp)
 8017170:	1000031e 	bne	r2,zero,8017180 <alt_up_audio_write_fifo_space+0x3c>
 8017174:	e0bffd17 	ldw	r2,-12(fp)
 8017178:	1004d63a 	srli	r2,r2,24
 801717c:	00000306 	br	801718c <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 8017180:	e0bffd17 	ldw	r2,-12(fp)
 8017184:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 8017188:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 801718c:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
 8017190:	e0bffd17 	ldw	r2,-12(fp)
}
 8017194:	e037883a 	mov	sp,fp
 8017198:	df000017 	ldw	fp,0(sp)
 801719c:	dec00104 	addi	sp,sp,4
 80171a0:	f800283a 	ret

080171a4 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 80171a4:	defffa04 	addi	sp,sp,-24
 80171a8:	dfc00515 	stw	ra,20(sp)
 80171ac:	df000415 	stw	fp,16(sp)
 80171b0:	df000404 	addi	fp,sp,16
 80171b4:	e13ffd15 	stw	r4,-12(fp)
 80171b8:	e17ffe15 	stw	r5,-8(fp)
 80171bc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
 80171c0:	e13ffd17 	ldw	r4,-12(fp)
 80171c4:	01400044 	movi	r5,1
 80171c8:	80171440 	call	8017144 <alt_up_audio_write_fifo_space>
 80171cc:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 80171d0:	e0bffc17 	ldw	r2,-16(fp)
 80171d4:	10801868 	cmpgeui	r2,r2,97
 80171d8:	1000021e 	bne	r2,zero,80171e4 <alt_up_audio_play_r+0x40>
		return 0;
 80171dc:	0005883a 	mov	r2,zero
 80171e0:	00000506 	br	80171f8 <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
 80171e4:	e13ffd17 	ldw	r4,-12(fp)
 80171e8:	e17ffe17 	ldw	r5,-8(fp)
 80171ec:	e1bfff17 	ldw	r6,-4(fp)
 80171f0:	01c00044 	movi	r7,1
 80171f4:	80173540 	call	8017354 <alt_up_audio_write_fifo>
}
 80171f8:	e037883a 	mov	sp,fp
 80171fc:	dfc00117 	ldw	ra,4(sp)
 8017200:	df000017 	ldw	fp,0(sp)
 8017204:	dec00204 	addi	sp,sp,8
 8017208:	f800283a 	ret

0801720c <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
 801720c:	defffa04 	addi	sp,sp,-24
 8017210:	dfc00515 	stw	ra,20(sp)
 8017214:	df000415 	stw	fp,16(sp)
 8017218:	df000404 	addi	fp,sp,16
 801721c:	e13ffd15 	stw	r4,-12(fp)
 8017220:	e17ffe15 	stw	r5,-8(fp)
 8017224:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
 8017228:	e13ffd17 	ldw	r4,-12(fp)
 801722c:	000b883a 	mov	r5,zero
 8017230:	80171440 	call	8017144 <alt_up_audio_write_fifo_space>
 8017234:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
 8017238:	e0bffc17 	ldw	r2,-16(fp)
 801723c:	10801868 	cmpgeui	r2,r2,97
 8017240:	1000021e 	bne	r2,zero,801724c <alt_up_audio_play_l+0x40>
		return 0;
 8017244:	0005883a 	mov	r2,zero
 8017248:	00000506 	br	8017260 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
 801724c:	e13ffd17 	ldw	r4,-12(fp)
 8017250:	e17ffe17 	ldw	r5,-8(fp)
 8017254:	e1bfff17 	ldw	r6,-4(fp)
 8017258:	000f883a 	mov	r7,zero
 801725c:	80173540 	call	8017354 <alt_up_audio_write_fifo>
}
 8017260:	e037883a 	mov	sp,fp
 8017264:	dfc00117 	ldw	ra,4(sp)
 8017268:	df000017 	ldw	fp,0(sp)
 801726c:	dec00204 	addi	sp,sp,8
 8017270:	f800283a 	ret

08017274 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 8017274:	defff904 	addi	sp,sp,-28
 8017278:	df000615 	stw	fp,24(sp)
 801727c:	df000604 	addi	fp,sp,24
 8017280:	e13ffc15 	stw	r4,-16(fp)
 8017284:	e17ffd15 	stw	r5,-12(fp)
 8017288:	e1bffe15 	stw	r6,-8(fp)
 801728c:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 8017290:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 8017294:	00002706 	br	8017334 <alt_up_audio_read_fifo+0xc0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8017298:	e0bffc17 	ldw	r2,-16(fp)
 801729c:	10800a17 	ldw	r2,40(r2)
 80172a0:	10800104 	addi	r2,r2,4
 80172a4:	10800037 	ldwio	r2,0(r2)
 80172a8:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
 80172ac:	e0bfff17 	ldw	r2,-4(fp)
 80172b0:	1000041e 	bne	r2,zero,80172c4 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
 80172b4:	e0bffb17 	ldw	r2,-20(fp)
 80172b8:	10bfc00c 	andi	r2,r2,65280
			:
 80172bc:	1004d23a 	srli	r2,r2,8
 80172c0:	00000206 	br	80172cc <alt_up_audio_read_fifo+0x58>
 80172c4:	e0bffb17 	ldw	r2,-20(fp)
 80172c8:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 80172cc:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
 80172d0:	e0bffb17 	ldw	r2,-20(fp)
 80172d4:	10001626 	beq	r2,zero,8017330 <alt_up_audio_read_fifo+0xbc>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 80172d8:	e0bffa17 	ldw	r2,-24(fp)
 80172dc:	1085883a 	add	r2,r2,r2
 80172e0:	1085883a 	add	r2,r2,r2
 80172e4:	1007883a 	mov	r3,r2
 80172e8:	e0bffd17 	ldw	r2,-12(fp)
 80172ec:	10c5883a 	add	r2,r2,r3
 80172f0:	e0ffff17 	ldw	r3,-4(fp)
 80172f4:	1800051e 	bne	r3,zero,801730c <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 80172f8:	e0fffc17 	ldw	r3,-16(fp)
 80172fc:	18c00a17 	ldw	r3,40(r3)
 8017300:	18c00204 	addi	r3,r3,8
 8017304:	18c00037 	ldwio	r3,0(r3)
 8017308:	00000406 	br	801731c <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
 801730c:	e0fffc17 	ldw	r3,-16(fp)
 8017310:	18c00a17 	ldw	r3,40(r3)
 8017314:	18c00304 	addi	r3,r3,12
 8017318:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
 801731c:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
 8017320:	e0bffa17 	ldw	r2,-24(fp)
 8017324:	10800044 	addi	r2,r2,1
 8017328:	e0bffa15 	stw	r2,-24(fp)
 801732c:	00000106 	br	8017334 <alt_up_audio_read_fifo+0xc0>
		}
		else
		{
			// no more data to read
			break;
 8017330:	00000306 	br	8017340 <alt_up_audio_read_fifo+0xcc>

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 8017334:	e0fffa17 	ldw	r3,-24(fp)
 8017338:	e0bffe17 	ldw	r2,-8(fp)
 801733c:	18bfd616 	blt	r3,r2,8017298 <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
 8017340:	e0bffa17 	ldw	r2,-24(fp)
}
 8017344:	e037883a 	mov	sp,fp
 8017348:	df000017 	ldw	fp,0(sp)
 801734c:	dec00104 	addi	sp,sp,4
 8017350:	f800283a 	ret

08017354 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
 8017354:	defff904 	addi	sp,sp,-28
 8017358:	df000615 	stw	fp,24(sp)
 801735c:	df000604 	addi	fp,sp,24
 8017360:	e13ffc15 	stw	r4,-16(fp)
 8017364:	e17ffd15 	stw	r5,-12(fp)
 8017368:	e1bffe15 	stw	r6,-8(fp)
 801736c:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
 8017370:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
 8017374:	00003106 	br	801743c <alt_up_audio_write_fifo+0xe8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
 8017378:	e0bffc17 	ldw	r2,-16(fp)
 801737c:	10800a17 	ldw	r2,40(r2)
 8017380:	10800104 	addi	r2,r2,4
 8017384:	10800037 	ldwio	r2,0(r2)
 8017388:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 801738c:	e0bfff17 	ldw	r2,-4(fp)
 8017390:	1000031e 	bne	r2,zero,80173a0 <alt_up_audio_write_fifo+0x4c>
 8017394:	e0bffb17 	ldw	r2,-20(fp)
 8017398:	1004d63a 	srli	r2,r2,24
 801739c:	00000306 	br	80173ac <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
 80173a0:	e0bffb17 	ldw	r2,-20(fp)
 80173a4:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
 80173a8:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
 80173ac:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
 80173b0:	e0bffb17 	ldw	r2,-20(fp)
 80173b4:	10002026 	beq	r2,zero,8017438 <alt_up_audio_write_fifo+0xe4>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
 80173b8:	e0bfff17 	ldw	r2,-4(fp)
 80173bc:	10000f1e 	bne	r2,zero,80173fc <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
 80173c0:	e0bffc17 	ldw	r2,-16(fp)
 80173c4:	10800a17 	ldw	r2,40(r2)
 80173c8:	10800204 	addi	r2,r2,8
 80173cc:	1009883a 	mov	r4,r2
 80173d0:	e0bffa17 	ldw	r2,-24(fp)
 80173d4:	10c00044 	addi	r3,r2,1
 80173d8:	e0fffa15 	stw	r3,-24(fp)
 80173dc:	1085883a 	add	r2,r2,r2
 80173e0:	1085883a 	add	r2,r2,r2
 80173e4:	1007883a 	mov	r3,r2
 80173e8:	e0bffd17 	ldw	r2,-12(fp)
 80173ec:	10c5883a 	add	r2,r2,r3
 80173f0:	10800017 	ldw	r2,0(r2)
 80173f4:	20800035 	stwio	r2,0(r4)
 80173f8:	00001006 	br	801743c <alt_up_audio_write_fifo+0xe8>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
 80173fc:	e0bffc17 	ldw	r2,-16(fp)
 8017400:	10800a17 	ldw	r2,40(r2)
 8017404:	10800304 	addi	r2,r2,12
 8017408:	1009883a 	mov	r4,r2
 801740c:	e0bffa17 	ldw	r2,-24(fp)
 8017410:	10c00044 	addi	r3,r2,1
 8017414:	e0fffa15 	stw	r3,-24(fp)
 8017418:	1085883a 	add	r2,r2,r2
 801741c:	1085883a 	add	r2,r2,r2
 8017420:	1007883a 	mov	r3,r2
 8017424:	e0bffd17 	ldw	r2,-12(fp)
 8017428:	10c5883a 	add	r2,r2,r3
 801742c:	10800017 	ldw	r2,0(r2)
 8017430:	20800035 	stwio	r2,0(r4)
 8017434:	00000106 	br	801743c <alt_up_audio_write_fifo+0xe8>
		}
		else
		{
			// no more space to write
			break;
 8017438:	00000306 	br	8017448 <alt_up_audio_write_fifo+0xf4>

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
 801743c:	e0fffa17 	ldw	r3,-24(fp)
 8017440:	e0bffe17 	ldw	r2,-8(fp)
 8017444:	18bfcc16 	blt	r3,r2,8017378 <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
 8017448:	e0bffa17 	ldw	r2,-24(fp)
}
 801744c:	e037883a 	mov	sp,fp
 8017450:	df000017 	ldw	fp,0(sp)
 8017454:	dec00104 	addi	sp,sp,4
 8017458:	f800283a 	ret

0801745c <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
 801745c:	defffd04 	addi	sp,sp,-12
 8017460:	df000215 	stw	fp,8(sp)
 8017464:	df000204 	addi	fp,sp,8
 8017468:	e13ffe15 	stw	r4,-8(fp)
 801746c:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
 8017470:	e0bfff17 	ldw	r2,-4(fp)
 8017474:	1000051e 	bne	r2,zero,801748c <alt_up_audio_read_fifo_head+0x30>
 8017478:	e0bffe17 	ldw	r2,-8(fp)
 801747c:	10800a17 	ldw	r2,40(r2)
 8017480:	10800204 	addi	r2,r2,8
 8017484:	10800037 	ldwio	r2,0(r2)
 8017488:	00000406 	br	801749c <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
 801748c:	e0bffe17 	ldw	r2,-8(fp)
 8017490:	10800a17 	ldw	r2,40(r2)
 8017494:	10800304 	addi	r2,r2,12
 8017498:	10800037 	ldwio	r2,0(r2)
}
 801749c:	e037883a 	mov	sp,fp
 80174a0:	df000017 	ldw	fp,0(sp)
 80174a4:	dec00104 	addi	sp,sp,4
 80174a8:	f800283a 	ret

080174ac <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
 80174ac:	defffc04 	addi	sp,sp,-16
 80174b0:	df000315 	stw	fp,12(sp)
 80174b4:	df000304 	addi	fp,sp,12
 80174b8:	e13ffd15 	stw	r4,-12(fp)
 80174bc:	e17ffe15 	stw	r5,-8(fp)
 80174c0:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
 80174c4:	e0bfff17 	ldw	r2,-4(fp)
 80174c8:	1000071e 	bne	r2,zero,80174e8 <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
 80174cc:	e0bffd17 	ldw	r2,-12(fp)
 80174d0:	10800a17 	ldw	r2,40(r2)
 80174d4:	10800204 	addi	r2,r2,8
 80174d8:	1007883a 	mov	r3,r2
 80174dc:	e0bffe17 	ldw	r2,-8(fp)
 80174e0:	18800035 	stwio	r2,0(r3)
 80174e4:	00000606 	br	8017500 <alt_up_audio_write_fifo_head+0x54>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
 80174e8:	e0bffd17 	ldw	r2,-12(fp)
 80174ec:	10800a17 	ldw	r2,40(r2)
 80174f0:	10800304 	addi	r2,r2,12
 80174f4:	1007883a 	mov	r3,r2
 80174f8:	e0bffe17 	ldw	r2,-8(fp)
 80174fc:	18800035 	stwio	r2,0(r3)
}
 8017500:	e037883a 	mov	sp,fp
 8017504:	df000017 	ldw	fp,0(sp)
 8017508:	dec00104 	addi	sp,sp,4
 801750c:	f800283a 	ret

08017510 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8017510:	defffc04 	addi	sp,sp,-16
 8017514:	dfc00315 	stw	ra,12(sp)
 8017518:	df000215 	stw	fp,8(sp)
 801751c:	df000204 	addi	fp,sp,8
 8017520:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 8017524:	e13fff17 	ldw	r4,-4(fp)
 8017528:	014200b4 	movhi	r5,2050
 801752c:	29514004 	addi	r5,r5,17664
 8017530:	80187100 	call	8018710 <alt_find_dev>
 8017534:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8017538:	e0bffe17 	ldw	r2,-8(fp)
}
 801753c:	e037883a 	mov	sp,fp
 8017540:	dfc00117 	ldw	ra,4(sp)
 8017544:	df000017 	ldw	fp,0(sp)
 8017548:	dec00204 	addi	sp,sp,8
 801754c:	f800283a 	ret

08017550 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 8017550:	defffa04 	addi	sp,sp,-24
 8017554:	df000515 	stw	fp,20(sp)
 8017558:	df000504 	addi	fp,sp,20
 801755c:	e13ffc15 	stw	r4,-16(fp)
 8017560:	e17ffd15 	stw	r5,-12(fp)
 8017564:	e1bffe15 	stw	r6,-8(fp)
 8017568:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 801756c:	e0bffc17 	ldw	r2,-16(fp)
 8017570:	10800f17 	ldw	r2,60(r2)
 8017574:	e0fffe17 	ldw	r3,-8(fp)
 8017578:	1880042e 	bgeu	r3,r2,801758c <alt_up_pixel_buffer_dma_draw+0x3c>
 801757c:	e0bffc17 	ldw	r2,-16(fp)
 8017580:	10801017 	ldw	r2,64(r2)
 8017584:	e0ffff17 	ldw	r3,-4(fp)
 8017588:	18800236 	bltu	r3,r2,8017594 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
 801758c:	00bfffc4 	movi	r2,-1
 8017590:	00005006 	br	80176d4 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
 8017594:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8017598:	e0bffc17 	ldw	r2,-16(fp)
 801759c:	10800d17 	ldw	r2,52(r2)
 80175a0:	1000151e 	bne	r2,zero,80175f8 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 80175a4:	e0bffc17 	ldw	r2,-16(fp)
 80175a8:	10c01217 	ldw	r3,72(r2)
 80175ac:	e0bffe17 	ldw	r2,-8(fp)
 80175b0:	1884703a 	and	r2,r3,r2
 80175b4:	e0fffc17 	ldw	r3,-16(fp)
 80175b8:	18c01117 	ldw	r3,68(r3)
 80175bc:	10c4983a 	sll	r2,r2,r3
 80175c0:	e0fffb17 	ldw	r3,-20(fp)
 80175c4:	1885883a 	add	r2,r3,r2
 80175c8:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 80175cc:	e0bffc17 	ldw	r2,-16(fp)
 80175d0:	10c01417 	ldw	r3,80(r2)
 80175d4:	e0bfff17 	ldw	r2,-4(fp)
 80175d8:	1884703a 	and	r2,r3,r2
 80175dc:	e0fffc17 	ldw	r3,-16(fp)
 80175e0:	18c01317 	ldw	r3,76(r3)
 80175e4:	10c4983a 	sll	r2,r2,r3
 80175e8:	e0fffb17 	ldw	r3,-20(fp)
 80175ec:	1885883a 	add	r2,r3,r2
 80175f0:	e0bffb15 	stw	r2,-20(fp)
 80175f4:	00001706 	br	8017654 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 80175f8:	e0bffc17 	ldw	r2,-16(fp)
 80175fc:	10c01217 	ldw	r3,72(r2)
 8017600:	e0bffe17 	ldw	r2,-8(fp)
 8017604:	1884703a 	and	r2,r3,r2
 8017608:	e0fffc17 	ldw	r3,-16(fp)
 801760c:	18c01117 	ldw	r3,68(r3)
 8017610:	10c4983a 	sll	r2,r2,r3
 8017614:	e0fffb17 	ldw	r3,-20(fp)
 8017618:	1885883a 	add	r2,r3,r2
 801761c:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 8017620:	e0bffc17 	ldw	r2,-16(fp)
 8017624:	10c01417 	ldw	r3,80(r2)
 8017628:	e0bfff17 	ldw	r2,-4(fp)
 801762c:	1886703a 	and	r3,r3,r2
 8017630:	e0bffc17 	ldw	r2,-16(fp)
 8017634:	10800f17 	ldw	r2,60(r2)
 8017638:	1885383a 	mul	r2,r3,r2
 801763c:	e0fffc17 	ldw	r3,-16(fp)
 8017640:	18c01117 	ldw	r3,68(r3)
 8017644:	10c4983a 	sll	r2,r2,r3
 8017648:	e0fffb17 	ldw	r3,-20(fp)
 801764c:	1885883a 	add	r2,r3,r2
 8017650:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8017654:	e0bffc17 	ldw	r2,-16(fp)
 8017658:	10800e17 	ldw	r2,56(r2)
 801765c:	10800058 	cmpnei	r2,r2,1
 8017660:	1000081e 	bne	r2,zero,8017684 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8017664:	e0bffc17 	ldw	r2,-16(fp)
 8017668:	10c00c17 	ldw	r3,48(r2)
 801766c:	e0bffb17 	ldw	r2,-20(fp)
 8017670:	1885883a 	add	r2,r3,r2
 8017674:	1007883a 	mov	r3,r2
 8017678:	e0bffd17 	ldw	r2,-12(fp)
 801767c:	18800025 	stbio	r2,0(r3)
 8017680:	00001306 	br	80176d0 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8017684:	e0bffc17 	ldw	r2,-16(fp)
 8017688:	10800e17 	ldw	r2,56(r2)
 801768c:	10800098 	cmpnei	r2,r2,2
 8017690:	1000081e 	bne	r2,zero,80176b4 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8017694:	e0bffc17 	ldw	r2,-16(fp)
 8017698:	10c00c17 	ldw	r3,48(r2)
 801769c:	e0bffb17 	ldw	r2,-20(fp)
 80176a0:	1885883a 	add	r2,r3,r2
 80176a4:	1007883a 	mov	r3,r2
 80176a8:	e0bffd17 	ldw	r2,-12(fp)
 80176ac:	1880002d 	sthio	r2,0(r3)
 80176b0:	00000706 	br	80176d0 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 80176b4:	e0bffc17 	ldw	r2,-16(fp)
 80176b8:	10c00c17 	ldw	r3,48(r2)
 80176bc:	e0bffb17 	ldw	r2,-20(fp)
 80176c0:	1885883a 	add	r2,r3,r2
 80176c4:	1007883a 	mov	r3,r2
 80176c8:	e0bffd17 	ldw	r2,-12(fp)
 80176cc:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 80176d0:	0005883a 	mov	r2,zero
}
 80176d4:	e037883a 	mov	sp,fp
 80176d8:	df000017 	ldw	fp,0(sp)
 80176dc:	dec00104 	addi	sp,sp,4
 80176e0:	f800283a 	ret

080176e4 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 80176e4:	defffd04 	addi	sp,sp,-12
 80176e8:	df000215 	stw	fp,8(sp)
 80176ec:	df000204 	addi	fp,sp,8
 80176f0:	e13ffe15 	stw	r4,-8(fp)
 80176f4:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 80176f8:	e0bffe17 	ldw	r2,-8(fp)
 80176fc:	10800a17 	ldw	r2,40(r2)
 8017700:	10800104 	addi	r2,r2,4
 8017704:	1007883a 	mov	r3,r2
 8017708:	e0bfff17 	ldw	r2,-4(fp)
 801770c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 8017710:	e0bffe17 	ldw	r2,-8(fp)
 8017714:	10800a17 	ldw	r2,40(r2)
 8017718:	10800104 	addi	r2,r2,4
 801771c:	10800037 	ldwio	r2,0(r2)
 8017720:	1007883a 	mov	r3,r2
 8017724:	e0bffe17 	ldw	r2,-8(fp)
 8017728:	10c00c15 	stw	r3,48(r2)
	return 0;
 801772c:	0005883a 	mov	r2,zero
}
 8017730:	e037883a 	mov	sp,fp
 8017734:	df000017 	ldw	fp,0(sp)
 8017738:	dec00104 	addi	sp,sp,4
 801773c:	f800283a 	ret

08017740 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 8017740:	defffd04 	addi	sp,sp,-12
 8017744:	df000215 	stw	fp,8(sp)
 8017748:	dc000115 	stw	r16,4(sp)
 801774c:	df000204 	addi	fp,sp,8
 8017750:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 8017754:	e0bffe17 	ldw	r2,-8(fp)
 8017758:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 801775c:	e0bffe17 	ldw	r2,-8(fp)
 8017760:	10800a17 	ldw	r2,40(r2)
 8017764:	1007883a 	mov	r3,r2
 8017768:	00800044 	movi	r2,1
 801776c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 8017770:	e0bffe17 	ldw	r2,-8(fp)
 8017774:	10c00b17 	ldw	r3,44(r2)
 8017778:	e0bffe17 	ldw	r2,-8(fp)
 801777c:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 8017780:	e0bffe17 	ldw	r2,-8(fp)
 8017784:	14000b15 	stw	r16,44(r2)
	return 0;
 8017788:	0005883a 	mov	r2,zero
}
 801778c:	e6ffff04 	addi	sp,fp,-4
 8017790:	df000117 	ldw	fp,4(sp)
 8017794:	dc000017 	ldw	r16,0(sp)
 8017798:	dec00204 	addi	sp,sp,8
 801779c:	f800283a 	ret

080177a0 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 80177a0:	defffe04 	addi	sp,sp,-8
 80177a4:	df000115 	stw	fp,4(sp)
 80177a8:	df000104 	addi	fp,sp,4
 80177ac:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 80177b0:	e0bfff17 	ldw	r2,-4(fp)
 80177b4:	10800a17 	ldw	r2,40(r2)
 80177b8:	10800304 	addi	r2,r2,12
 80177bc:	10800037 	ldwio	r2,0(r2)
 80177c0:	1080004c 	andi	r2,r2,1
}
 80177c4:	e037883a 	mov	sp,fp
 80177c8:	df000017 	ldw	fp,0(sp)
 80177cc:	dec00104 	addi	sp,sp,4
 80177d0:	f800283a 	ret

080177d4 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 80177d4:	defff704 	addi	sp,sp,-36
 80177d8:	df000815 	stw	fp,32(sp)
 80177dc:	dd400715 	stw	r21,28(sp)
 80177e0:	dd000615 	stw	r20,24(sp)
 80177e4:	dcc00515 	stw	r19,20(sp)
 80177e8:	dc800415 	stw	r18,16(sp)
 80177ec:	dc400315 	stw	r17,12(sp)
 80177f0:	dc000215 	stw	r16,8(sp)
 80177f4:	df000804 	addi	fp,sp,32
 80177f8:	e13ff815 	stw	r4,-32(fp)
 80177fc:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8017800:	e0bff917 	ldw	r2,-28(fp)
 8017804:	10800058 	cmpnei	r2,r2,1
 8017808:	1000031e 	bne	r2,zero,8017818 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
 801780c:	e0bff817 	ldw	r2,-32(fp)
 8017810:	14400c17 	ldw	r17,48(r2)
 8017814:	00000206 	br	8017820 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
 8017818:	e0bff817 	ldw	r2,-32(fp)
 801781c:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 8017820:	e0bff817 	ldw	r2,-32(fp)
 8017824:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8017828:	e0bff817 	ldw	r2,-32(fp)
 801782c:	10800e17 	ldw	r2,56(r2)
 8017830:	10800098 	cmpnei	r2,r2,2
 8017834:	1000031e 	bne	r2,zero,8017844 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 8017838:	8405883a 	add	r2,r16,r16
 801783c:	1021883a 	mov	r16,r2
 8017840:	00000306 	br	8017850 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
 8017844:	8405883a 	add	r2,r16,r16
 8017848:	1085883a 	add	r2,r2,r2
 801784c:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 8017850:	e0bff817 	ldw	r2,-32(fp)
 8017854:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8017858:	e0bff817 	ldw	r2,-32(fp)
 801785c:	10800d17 	ldw	r2,52(r2)
 8017860:	1000121e 	bne	r2,zero,80178ac <alt_up_pixel_buffer_dma_clear_screen+0xd8>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8017864:	e0bff817 	ldw	r2,-32(fp)
 8017868:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 801786c:	0029883a 	mov	r20,zero
 8017870:	00000c06 	br	80178a4 <alt_up_pixel_buffer_dma_clear_screen+0xd0>
		{
			for (x = 0; x < limit_x; x = x + 4)
 8017874:	0027883a 	mov	r19,zero
 8017878:	00000406 	br	801788c <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
 801787c:	9c45883a 	add	r2,r19,r17
 8017880:	0007883a 	mov	r3,zero
 8017884:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 8017888:	9cc00104 	addi	r19,r19,4
 801788c:	9c3ffb36 	bltu	r19,r16,801787c <alt_up_pixel_buffer_dma_clear_screen+0xa8>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 8017890:	a807883a 	mov	r3,r21
 8017894:	00800044 	movi	r2,1
 8017898:	10c4983a 	sll	r2,r2,r3
 801789c:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 80178a0:	a5000044 	addi	r20,r20,1
 80178a4:	a4bff336 	bltu	r20,r18,8017874 <alt_up_pixel_buffer_dma_clear_screen+0xa0>
 80178a8:	00000a06 	br	80178d4 <alt_up_pixel_buffer_dma_clear_screen+0x100>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 80178ac:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
 80178b0:	0021883a 	mov	r16,zero
 80178b4:	00000506 	br	80178cc <alt_up_pixel_buffer_dma_clear_screen+0xf8>
		{
			IOWR_32DIRECT(addr, x, 0);
 80178b8:	8005883a 	mov	r2,r16
 80178bc:	1445883a 	add	r2,r2,r17
 80178c0:	0007883a 	mov	r3,zero
 80178c4:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 80178c8:	84000104 	addi	r16,r16,4
 80178cc:	8005883a 	mov	r2,r16
 80178d0:	14bff936 	bltu	r2,r18,80178b8 <alt_up_pixel_buffer_dma_clear_screen+0xe4>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 80178d4:	e6fffa04 	addi	sp,fp,-24
 80178d8:	df000617 	ldw	fp,24(sp)
 80178dc:	dd400517 	ldw	r21,20(sp)
 80178e0:	dd000417 	ldw	r20,16(sp)
 80178e4:	dcc00317 	ldw	r19,12(sp)
 80178e8:	dc800217 	ldw	r18,8(sp)
 80178ec:	dc400117 	ldw	r17,4(sp)
 80178f0:	dc000017 	ldw	r16,0(sp)
 80178f4:	dec00704 	addi	sp,sp,28
 80178f8:	f800283a 	ret

080178fc <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 80178fc:	defff304 	addi	sp,sp,-52
 8017900:	df000c15 	stw	fp,48(sp)
 8017904:	ddc00b15 	stw	r23,44(sp)
 8017908:	dd800a15 	stw	r22,40(sp)
 801790c:	dd400915 	stw	r21,36(sp)
 8017910:	dd000815 	stw	r20,32(sp)
 8017914:	dcc00715 	stw	r19,28(sp)
 8017918:	dc800615 	stw	r18,24(sp)
 801791c:	dc400515 	stw	r17,20(sp)
 8017920:	dc000415 	stw	r16,16(sp)
 8017924:	df000c04 	addi	fp,sp,48
 8017928:	e13ff415 	stw	r4,-48(fp)
 801792c:	e17ff515 	stw	r5,-44(fp)
 8017930:	e1bff615 	stw	r6,-40(fp)
 8017934:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8017938:	e0bff417 	ldw	r2,-48(fp)
 801793c:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8017940:	e0bff417 	ldw	r2,-48(fp)
 8017944:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8017948:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 801794c:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 8017950:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 8017954:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
 8017958:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 801795c:	a580032e 	bgeu	r20,r22,801796c <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
 8017960:	b02b883a 	mov	r21,r22
		l_x = r_x;
 8017964:	a02d883a 	mov	r22,r20
		r_x = temp;
 8017968:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 801796c:	9c40032e 	bgeu	r19,r17,801797c <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
 8017970:	882b883a 	mov	r21,r17
		t_y = b_y;
 8017974:	9823883a 	mov	r17,r19
		b_y = temp;
 8017978:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 801797c:	b480012e 	bgeu	r22,r18,8017984 <alt_up_pixel_buffer_dma_draw_box+0x88>
 8017980:	8c000136 	bltu	r17,r16,8017988 <alt_up_pixel_buffer_dma_draw_box+0x8c>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8017984:	00008b06 	br	8017bb4 <alt_up_pixel_buffer_dma_draw_box+0x2b8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8017988:	a4800136 	bltu	r20,r18,8017990 <alt_up_pixel_buffer_dma_draw_box+0x94>
	{
		r_x = limit_x - 1;
 801798c:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8017990:	9c000136 	bltu	r19,r16,8017998 <alt_up_pixel_buffer_dma_draw_box+0x9c>
	{
		b_y = limit_y - 1;
 8017994:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8017998:	e0800317 	ldw	r2,12(fp)
 801799c:	10800058 	cmpnei	r2,r2,1
 80179a0:	1000031e 	bne	r2,zero,80179b0 <alt_up_pixel_buffer_dma_draw_box+0xb4>
		addr = pixel_buffer->back_buffer_start_address;
 80179a4:	e0bff417 	ldw	r2,-48(fp)
 80179a8:	14000c17 	ldw	r16,48(r2)
 80179ac:	00000206 	br	80179b8 <alt_up_pixel_buffer_dma_draw_box+0xbc>
	else
		addr = pixel_buffer->buffer_start_address;
 80179b0:	e0bff417 	ldw	r2,-48(fp)
 80179b4:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80179b8:	e0bff417 	ldw	r2,-48(fp)
 80179bc:	10800d17 	ldw	r2,52(r2)
 80179c0:	1000401e 	bne	r2,zero,8017ac4 <alt_up_pixel_buffer_dma_draw_box+0x1c8>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 80179c4:	e0bff417 	ldw	r2,-48(fp)
 80179c8:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 80179cc:	a805883a 	mov	r2,r21
 80179d0:	8884983a 	sll	r2,r17,r2
 80179d4:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80179d8:	e0bff417 	ldw	r2,-48(fp)
 80179dc:	10800e17 	ldw	r2,56(r2)
 80179e0:	10800058 	cmpnei	r2,r2,1
 80179e4:	1000101e 	bne	r2,zero,8017a28 <alt_up_pixel_buffer_dma_draw_box+0x12c>
			for (y = t_y; y <= b_y; y++)
 80179e8:	8825883a 	mov	r18,r17
 80179ec:	00000c06 	br	8017a20 <alt_up_pixel_buffer_dma_draw_box+0x124>
			{
				for (x = l_x; x <= r_x; x++)
 80179f0:	b023883a 	mov	r17,r22
 80179f4:	00000406 	br	8017a08 <alt_up_pixel_buffer_dma_draw_box+0x10c>
				{
					IOWR_8DIRECT(addr, x, local_color);
 80179f8:	8c05883a 	add	r2,r17,r16
 80179fc:	b807883a 	mov	r3,r23
 8017a00:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8017a04:	8c400044 	addi	r17,r17,1
 8017a08:	a47ffb2e 	bgeu	r20,r17,80179f8 <alt_up_pixel_buffer_dma_draw_box+0xfc>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 8017a0c:	a807883a 	mov	r3,r21
 8017a10:	00800044 	movi	r2,1
 8017a14:	10c4983a 	sll	r2,r2,r3
 8017a18:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8017a1c:	94800044 	addi	r18,r18,1
 8017a20:	9cbff32e 	bgeu	r19,r18,80179f0 <alt_up_pixel_buffer_dma_draw_box+0xf4>
 8017a24:	00006306 	br	8017bb4 <alt_up_pixel_buffer_dma_draw_box+0x2b8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8017a28:	e0bff417 	ldw	r2,-48(fp)
 8017a2c:	10800e17 	ldw	r2,56(r2)
 8017a30:	10800098 	cmpnei	r2,r2,2
 8017a34:	1000111e 	bne	r2,zero,8017a7c <alt_up_pixel_buffer_dma_draw_box+0x180>
			for (y = t_y; y <= b_y; y++)
 8017a38:	8825883a 	mov	r18,r17
 8017a3c:	00000d06 	br	8017a74 <alt_up_pixel_buffer_dma_draw_box+0x178>
			{
				for (x = l_x; x <= r_x; x++)
 8017a40:	b023883a 	mov	r17,r22
 8017a44:	00000506 	br	8017a5c <alt_up_pixel_buffer_dma_draw_box+0x160>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8017a48:	8c45883a 	add	r2,r17,r17
 8017a4c:	1405883a 	add	r2,r2,r16
 8017a50:	b807883a 	mov	r3,r23
 8017a54:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8017a58:	8c400044 	addi	r17,r17,1
 8017a5c:	a47ffa2e 	bgeu	r20,r17,8017a48 <alt_up_pixel_buffer_dma_draw_box+0x14c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 8017a60:	a807883a 	mov	r3,r21
 8017a64:	00800044 	movi	r2,1
 8017a68:	10c4983a 	sll	r2,r2,r3
 8017a6c:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8017a70:	94800044 	addi	r18,r18,1
 8017a74:	9cbff22e 	bgeu	r19,r18,8017a40 <alt_up_pixel_buffer_dma_draw_box+0x144>
 8017a78:	00004e06 	br	8017bb4 <alt_up_pixel_buffer_dma_draw_box+0x2b8>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8017a7c:	8825883a 	mov	r18,r17
 8017a80:	00000e06 	br	8017abc <alt_up_pixel_buffer_dma_draw_box+0x1c0>
			{
				for (x = l_x; x <= r_x; x++)
 8017a84:	b023883a 	mov	r17,r22
 8017a88:	00000606 	br	8017aa4 <alt_up_pixel_buffer_dma_draw_box+0x1a8>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8017a8c:	8c45883a 	add	r2,r17,r17
 8017a90:	1085883a 	add	r2,r2,r2
 8017a94:	1405883a 	add	r2,r2,r16
 8017a98:	b807883a 	mov	r3,r23
 8017a9c:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8017aa0:	8c400044 	addi	r17,r17,1
 8017aa4:	a47ff92e 	bgeu	r20,r17,8017a8c <alt_up_pixel_buffer_dma_draw_box+0x190>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 8017aa8:	a807883a 	mov	r3,r21
 8017aac:	00800044 	movi	r2,1
 8017ab0:	10c4983a 	sll	r2,r2,r3
 8017ab4:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8017ab8:	94800044 	addi	r18,r18,1
 8017abc:	9cbff12e 	bgeu	r19,r18,8017a84 <alt_up_pixel_buffer_dma_draw_box+0x188>
 8017ac0:	00003c06 	br	8017bb4 <alt_up_pixel_buffer_dma_draw_box+0x2b8>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8017ac4:	e0bff417 	ldw	r2,-48(fp)
 8017ac8:	10800e17 	ldw	r2,56(r2)
 8017acc:	10800058 	cmpnei	r2,r2,1
 8017ad0:	10000f1e 	bne	r2,zero,8017b10 <alt_up_pixel_buffer_dma_draw_box+0x214>
			addr = addr + t_y * limit_x;
 8017ad4:	8c85383a 	mul	r2,r17,r18
 8017ad8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8017adc:	882b883a 	mov	r21,r17
 8017ae0:	00000906 	br	8017b08 <alt_up_pixel_buffer_dma_draw_box+0x20c>
			{
				for (x = l_x; x <= r_x; x++)
 8017ae4:	b023883a 	mov	r17,r22
 8017ae8:	00000406 	br	8017afc <alt_up_pixel_buffer_dma_draw_box+0x200>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8017aec:	8c05883a 	add	r2,r17,r16
 8017af0:	b807883a 	mov	r3,r23
 8017af4:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8017af8:	8c400044 	addi	r17,r17,1
 8017afc:	a47ffb2e 	bgeu	r20,r17,8017aec <alt_up_pixel_buffer_dma_draw_box+0x1f0>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 8017b00:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8017b04:	ad400044 	addi	r21,r21,1
 8017b08:	9d7ff62e 	bgeu	r19,r21,8017ae4 <alt_up_pixel_buffer_dma_draw_box+0x1e8>
 8017b0c:	00002906 	br	8017bb4 <alt_up_pixel_buffer_dma_draw_box+0x2b8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8017b10:	e0bff417 	ldw	r2,-48(fp)
 8017b14:	10800e17 	ldw	r2,56(r2)
 8017b18:	10800098 	cmpnei	r2,r2,2
 8017b1c:	1000121e 	bne	r2,zero,8017b68 <alt_up_pixel_buffer_dma_draw_box+0x26c>
			limit_x = limit_x << 1;
 8017b20:	9485883a 	add	r2,r18,r18
 8017b24:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8017b28:	8c85383a 	mul	r2,r17,r18
 8017b2c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8017b30:	882b883a 	mov	r21,r17
 8017b34:	00000a06 	br	8017b60 <alt_up_pixel_buffer_dma_draw_box+0x264>
			{
				for (x = l_x; x <= r_x; x++)
 8017b38:	b023883a 	mov	r17,r22
 8017b3c:	00000506 	br	8017b54 <alt_up_pixel_buffer_dma_draw_box+0x258>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 8017b40:	8c45883a 	add	r2,r17,r17
 8017b44:	1405883a 	add	r2,r2,r16
 8017b48:	b807883a 	mov	r3,r23
 8017b4c:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8017b50:	8c400044 	addi	r17,r17,1
 8017b54:	a47ffa2e 	bgeu	r20,r17,8017b40 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 8017b58:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8017b5c:	ad400044 	addi	r21,r21,1
 8017b60:	9d7ff52e 	bgeu	r19,r21,8017b38 <alt_up_pixel_buffer_dma_draw_box+0x23c>
 8017b64:	00001306 	br	8017bb4 <alt_up_pixel_buffer_dma_draw_box+0x2b8>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8017b68:	9485883a 	add	r2,r18,r18
 8017b6c:	1085883a 	add	r2,r2,r2
 8017b70:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8017b74:	8c85383a 	mul	r2,r17,r18
 8017b78:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8017b7c:	882b883a 	mov	r21,r17
 8017b80:	00000b06 	br	8017bb0 <alt_up_pixel_buffer_dma_draw_box+0x2b4>
			{
				for (x = l_x; x <= r_x; x++)
 8017b84:	b023883a 	mov	r17,r22
 8017b88:	00000606 	br	8017ba4 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 8017b8c:	8c45883a 	add	r2,r17,r17
 8017b90:	1085883a 	add	r2,r2,r2
 8017b94:	1405883a 	add	r2,r2,r16
 8017b98:	b807883a 	mov	r3,r23
 8017b9c:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8017ba0:	8c400044 	addi	r17,r17,1
 8017ba4:	a47ff92e 	bgeu	r20,r17,8017b8c <alt_up_pixel_buffer_dma_draw_box+0x290>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8017ba8:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8017bac:	ad400044 	addi	r21,r21,1
 8017bb0:	9d7ff42e 	bgeu	r19,r21,8017b84 <alt_up_pixel_buffer_dma_draw_box+0x288>
				}
				addr = addr + limit_x;
			}
		}
	}
}
 8017bb4:	e6fff804 	addi	sp,fp,-32
 8017bb8:	df000817 	ldw	fp,32(sp)
 8017bbc:	ddc00717 	ldw	r23,28(sp)
 8017bc0:	dd800617 	ldw	r22,24(sp)
 8017bc4:	dd400517 	ldw	r21,20(sp)
 8017bc8:	dd000417 	ldw	r20,16(sp)
 8017bcc:	dcc00317 	ldw	r19,12(sp)
 8017bd0:	dc800217 	ldw	r18,8(sp)
 8017bd4:	dc400117 	ldw	r17,4(sp)
 8017bd8:	dc000017 	ldw	r16,0(sp)
 8017bdc:	dec00904 	addi	sp,sp,36
 8017be0:	f800283a 	ret

08017be4 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 8017be4:	defff404 	addi	sp,sp,-48
 8017be8:	df000b15 	stw	fp,44(sp)
 8017bec:	dd800a15 	stw	r22,40(sp)
 8017bf0:	dd400915 	stw	r21,36(sp)
 8017bf4:	dd000815 	stw	r20,32(sp)
 8017bf8:	dcc00715 	stw	r19,28(sp)
 8017bfc:	dc800615 	stw	r18,24(sp)
 8017c00:	dc400515 	stw	r17,20(sp)
 8017c04:	dc000415 	stw	r16,16(sp)
 8017c08:	df000b04 	addi	fp,sp,44
 8017c0c:	e13ff515 	stw	r4,-44(fp)
 8017c10:	e17ff615 	stw	r5,-40(fp)
 8017c14:	e1bff715 	stw	r6,-36(fp)
 8017c18:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8017c1c:	e0bff517 	ldw	r2,-44(fp)
 8017c20:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8017c24:	e0bff517 	ldw	r2,-44(fp)
 8017c28:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8017c2c:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 8017c30:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
 8017c34:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 8017c38:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 8017c3c:	9c40032e 	bgeu	r19,r17,8017c4c <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
 8017c40:	882d883a 	mov	r22,r17
		l_x = r_x;
 8017c44:	9823883a 	mov	r17,r19
		r_x = temp;
 8017c48:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 8017c4c:	8c80012e 	bgeu	r17,r18,8017c54 <alt_up_pixel_buffer_dma_draw_hline+0x70>
 8017c50:	a4000136 	bltu	r20,r16,8017c58 <alt_up_pixel_buffer_dma_draw_hline+0x74>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8017c54:	00005d06 	br	8017dcc <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 8017c58:	9c800136 	bltu	r19,r18,8017c60 <alt_up_pixel_buffer_dma_draw_hline+0x7c>
	{
		r_x = limit_x - 1;
 8017c5c:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8017c60:	e0800217 	ldw	r2,8(fp)
 8017c64:	10800058 	cmpnei	r2,r2,1
 8017c68:	1000031e 	bne	r2,zero,8017c78 <alt_up_pixel_buffer_dma_draw_hline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 8017c6c:	e0bff517 	ldw	r2,-44(fp)
 8017c70:	14000c17 	ldw	r16,48(r2)
 8017c74:	00000206 	br	8017c80 <alt_up_pixel_buffer_dma_draw_hline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 8017c78:	e0bff517 	ldw	r2,-44(fp)
 8017c7c:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8017c80:	e0bff517 	ldw	r2,-44(fp)
 8017c84:	10800d17 	ldw	r2,52(r2)
 8017c88:	1000251e 	bne	r2,zero,8017d20 <alt_up_pixel_buffer_dma_draw_hline+0x13c>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8017c8c:	e0bff517 	ldw	r2,-44(fp)
 8017c90:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
 8017c94:	9005883a 	mov	r2,r18
 8017c98:	a084983a 	sll	r2,r20,r2
 8017c9c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8017ca0:	e0bff517 	ldw	r2,-44(fp)
 8017ca4:	10800e17 	ldw	r2,56(r2)
 8017ca8:	10800058 	cmpnei	r2,r2,1
 8017cac:	1000071e 	bne	r2,zero,8017ccc <alt_up_pixel_buffer_dma_draw_hline+0xe8>
			for (x = l_x; x <= r_x; x++)
 8017cb0:	00000406 	br	8017cc4 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8017cb4:	8c05883a 	add	r2,r17,r16
 8017cb8:	a807883a 	mov	r3,r21
 8017cbc:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8017cc0:	8c400044 	addi	r17,r17,1
 8017cc4:	9c7ffb2e 	bgeu	r19,r17,8017cb4 <alt_up_pixel_buffer_dma_draw_hline+0xd0>
 8017cc8:	00004006 	br	8017dcc <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8017ccc:	e0bff517 	ldw	r2,-44(fp)
 8017cd0:	10800e17 	ldw	r2,56(r2)
 8017cd4:	10800098 	cmpnei	r2,r2,2
 8017cd8:	1000081e 	bne	r2,zero,8017cfc <alt_up_pixel_buffer_dma_draw_hline+0x118>
			for (x = l_x; x <= r_x; x++)
 8017cdc:	00000506 	br	8017cf4 <alt_up_pixel_buffer_dma_draw_hline+0x110>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8017ce0:	8c45883a 	add	r2,r17,r17
 8017ce4:	1405883a 	add	r2,r2,r16
 8017ce8:	a807883a 	mov	r3,r21
 8017cec:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 8017cf0:	8c400044 	addi	r17,r17,1
 8017cf4:	9c7ffa2e 	bgeu	r19,r17,8017ce0 <alt_up_pixel_buffer_dma_draw_hline+0xfc>
 8017cf8:	00003406 	br	8017dcc <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8017cfc:	00000606 	br	8017d18 <alt_up_pixel_buffer_dma_draw_hline+0x134>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8017d00:	8c45883a 	add	r2,r17,r17
 8017d04:	1085883a 	add	r2,r2,r2
 8017d08:	1405883a 	add	r2,r2,r16
 8017d0c:	a807883a 	mov	r3,r21
 8017d10:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 8017d14:	8c400044 	addi	r17,r17,1
 8017d18:	9c7ff92e 	bgeu	r19,r17,8017d00 <alt_up_pixel_buffer_dma_draw_hline+0x11c>
 8017d1c:	00002b06 	br	8017dcc <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8017d20:	e0bff517 	ldw	r2,-44(fp)
 8017d24:	10800e17 	ldw	r2,56(r2)
 8017d28:	10800058 	cmpnei	r2,r2,1
 8017d2c:	1000091e 	bne	r2,zero,8017d54 <alt_up_pixel_buffer_dma_draw_hline+0x170>
			addr = addr + line_y * limit_x;
 8017d30:	a485383a 	mul	r2,r20,r18
 8017d34:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8017d38:	00000406 	br	8017d4c <alt_up_pixel_buffer_dma_draw_hline+0x168>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8017d3c:	8c05883a 	add	r2,r17,r16
 8017d40:	a807883a 	mov	r3,r21
 8017d44:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8017d48:	8c400044 	addi	r17,r17,1
 8017d4c:	9c7ffb2e 	bgeu	r19,r17,8017d3c <alt_up_pixel_buffer_dma_draw_hline+0x158>
 8017d50:	00001e06 	br	8017dcc <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8017d54:	e0bff517 	ldw	r2,-44(fp)
 8017d58:	10800e17 	ldw	r2,56(r2)
 8017d5c:	10800098 	cmpnei	r2,r2,2
 8017d60:	10000c1e 	bne	r2,zero,8017d94 <alt_up_pixel_buffer_dma_draw_hline+0x1b0>
			limit_x = limit_x << 1;
 8017d64:	9485883a 	add	r2,r18,r18
 8017d68:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 8017d6c:	a485383a 	mul	r2,r20,r18
 8017d70:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8017d74:	00000506 	br	8017d8c <alt_up_pixel_buffer_dma_draw_hline+0x1a8>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 8017d78:	8c45883a 	add	r2,r17,r17
 8017d7c:	1405883a 	add	r2,r2,r16
 8017d80:	a807883a 	mov	r3,r21
 8017d84:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8017d88:	8c400044 	addi	r17,r17,1
 8017d8c:	9c7ffa2e 	bgeu	r19,r17,8017d78 <alt_up_pixel_buffer_dma_draw_hline+0x194>
 8017d90:	00000e06 	br	8017dcc <alt_up_pixel_buffer_dma_draw_hline+0x1e8>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8017d94:	9485883a 	add	r2,r18,r18
 8017d98:	1085883a 	add	r2,r2,r2
 8017d9c:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 8017da0:	a485383a 	mul	r2,r20,r18
 8017da4:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8017da8:	00000606 	br	8017dc4 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8017dac:	8c45883a 	add	r2,r17,r17
 8017db0:	1085883a 	add	r2,r2,r2
 8017db4:	1405883a 	add	r2,r2,r16
 8017db8:	a807883a 	mov	r3,r21
 8017dbc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8017dc0:	8c400044 	addi	r17,r17,1
 8017dc4:	9c7ff92e 	bgeu	r19,r17,8017dac <alt_up_pixel_buffer_dma_draw_hline+0x1c8>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 8017dc8:	84a1883a 	add	r16,r16,r18
		}
	}
}
 8017dcc:	e6fff904 	addi	sp,fp,-28
 8017dd0:	df000717 	ldw	fp,28(sp)
 8017dd4:	dd800617 	ldw	r22,24(sp)
 8017dd8:	dd400517 	ldw	r21,20(sp)
 8017ddc:	dd000417 	ldw	r20,16(sp)
 8017de0:	dcc00317 	ldw	r19,12(sp)
 8017de4:	dc800217 	ldw	r18,8(sp)
 8017de8:	dc400117 	ldw	r17,4(sp)
 8017dec:	dc000017 	ldw	r16,0(sp)
 8017df0:	dec00804 	addi	sp,sp,32
 8017df4:	f800283a 	ret

08017df8 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 8017df8:	defff404 	addi	sp,sp,-48
 8017dfc:	df000b15 	stw	fp,44(sp)
 8017e00:	dd800a15 	stw	r22,40(sp)
 8017e04:	dd400915 	stw	r21,36(sp)
 8017e08:	dd000815 	stw	r20,32(sp)
 8017e0c:	dcc00715 	stw	r19,28(sp)
 8017e10:	dc800615 	stw	r18,24(sp)
 8017e14:	dc400515 	stw	r17,20(sp)
 8017e18:	dc000415 	stw	r16,16(sp)
 8017e1c:	df000b04 	addi	fp,sp,44
 8017e20:	e13ff515 	stw	r4,-44(fp)
 8017e24:	e17ff615 	stw	r5,-40(fp)
 8017e28:	e1bff715 	stw	r6,-36(fp)
 8017e2c:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8017e30:	e0bff517 	ldw	r2,-44(fp)
 8017e34:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8017e38:	e0bff517 	ldw	r2,-44(fp)
 8017e3c:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 8017e40:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
 8017e44:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 8017e48:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
 8017e4c:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 8017e50:	9d00032e 	bgeu	r19,r20,8017e60 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
 8017e54:	a02d883a 	mov	r22,r20
		t_y = b_y;
 8017e58:	9829883a 	mov	r20,r19
		b_y = temp;
 8017e5c:	b027883a 	mov	r19,r22
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 8017e60:	9440012e 	bgeu	r18,r17,8017e68 <alt_up_pixel_buffer_dma_draw_vline+0x70>
 8017e64:	a4000136 	bltu	r20,r16,8017e6c <alt_up_pixel_buffer_dma_draw_vline+0x74>
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8017e68:	00006e06 	br	8018024 <alt_up_pixel_buffer_dma_draw_vline+0x22c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 8017e6c:	9c000136 	bltu	r19,r16,8017e74 <alt_up_pixel_buffer_dma_draw_vline+0x7c>
	{
		b_y = limit_y - 1;
 8017e70:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8017e74:	e0800217 	ldw	r2,8(fp)
 8017e78:	10800058 	cmpnei	r2,r2,1
 8017e7c:	1000031e 	bne	r2,zero,8017e8c <alt_up_pixel_buffer_dma_draw_vline+0x94>
		addr = pixel_buffer->back_buffer_start_address;
 8017e80:	e0bff517 	ldw	r2,-44(fp)
 8017e84:	14000c17 	ldw	r16,48(r2)
 8017e88:	00000206 	br	8017e94 <alt_up_pixel_buffer_dma_draw_vline+0x9c>
	else
		addr = pixel_buffer->buffer_start_address;
 8017e8c:	e0bff517 	ldw	r2,-44(fp)
 8017e90:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8017e94:	e0bff517 	ldw	r2,-44(fp)
 8017e98:	10800d17 	ldw	r2,52(r2)
 8017e9c:	1000341e 	bne	r2,zero,8017f70 <alt_up_pixel_buffer_dma_draw_vline+0x178>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8017ea0:	e0bff517 	ldw	r2,-44(fp)
 8017ea4:	15801317 	ldw	r22,76(r2)
		addr = addr + (t_y << offset_y);
 8017ea8:	b005883a 	mov	r2,r22
 8017eac:	a084983a 	sll	r2,r20,r2
 8017eb0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8017eb4:	e0bff517 	ldw	r2,-44(fp)
 8017eb8:	10800e17 	ldw	r2,56(r2)
 8017ebc:	10800058 	cmpnei	r2,r2,1
 8017ec0:	10000c1e 	bne	r2,zero,8017ef4 <alt_up_pixel_buffer_dma_draw_vline+0xfc>
			for (y = t_y; y <= b_y; y++)
 8017ec4:	a023883a 	mov	r17,r20
 8017ec8:	00000806 	br	8017eec <alt_up_pixel_buffer_dma_draw_vline+0xf4>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8017ecc:	9405883a 	add	r2,r18,r16
 8017ed0:	a807883a 	mov	r3,r21
 8017ed4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8017ed8:	b007883a 	mov	r3,r22
 8017edc:	00800044 	movi	r2,1
 8017ee0:	10c4983a 	sll	r2,r2,r3
 8017ee4:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8017ee8:	8c400044 	addi	r17,r17,1
 8017eec:	9c7ff72e 	bgeu	r19,r17,8017ecc <alt_up_pixel_buffer_dma_draw_vline+0xd4>
 8017ef0:	00004c06 	br	8018024 <alt_up_pixel_buffer_dma_draw_vline+0x22c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8017ef4:	e0bff517 	ldw	r2,-44(fp)
 8017ef8:	10800e17 	ldw	r2,56(r2)
 8017efc:	10800098 	cmpnei	r2,r2,2
 8017f00:	10000d1e 	bne	r2,zero,8017f38 <alt_up_pixel_buffer_dma_draw_vline+0x140>
			for (y = t_y; y <= b_y; y++)
 8017f04:	a023883a 	mov	r17,r20
 8017f08:	00000906 	br	8017f30 <alt_up_pixel_buffer_dma_draw_vline+0x138>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8017f0c:	9485883a 	add	r2,r18,r18
 8017f10:	1405883a 	add	r2,r2,r16
 8017f14:	a807883a 	mov	r3,r21
 8017f18:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8017f1c:	b007883a 	mov	r3,r22
 8017f20:	00800044 	movi	r2,1
 8017f24:	10c4983a 	sll	r2,r2,r3
 8017f28:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8017f2c:	8c400044 	addi	r17,r17,1
 8017f30:	9c7ff62e 	bgeu	r19,r17,8017f0c <alt_up_pixel_buffer_dma_draw_vline+0x114>
 8017f34:	00003b06 	br	8018024 <alt_up_pixel_buffer_dma_draw_vline+0x22c>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8017f38:	a023883a 	mov	r17,r20
 8017f3c:	00000a06 	br	8017f68 <alt_up_pixel_buffer_dma_draw_vline+0x170>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8017f40:	9485883a 	add	r2,r18,r18
 8017f44:	1085883a 	add	r2,r2,r2
 8017f48:	1405883a 	add	r2,r2,r16
 8017f4c:	a807883a 	mov	r3,r21
 8017f50:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8017f54:	b007883a 	mov	r3,r22
 8017f58:	00800044 	movi	r2,1
 8017f5c:	10c4983a 	sll	r2,r2,r3
 8017f60:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8017f64:	8c400044 	addi	r17,r17,1
 8017f68:	9c7ff52e 	bgeu	r19,r17,8017f40 <alt_up_pixel_buffer_dma_draw_vline+0x148>
 8017f6c:	00002d06 	br	8018024 <alt_up_pixel_buffer_dma_draw_vline+0x22c>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8017f70:	e0bff517 	ldw	r2,-44(fp)
 8017f74:	10800e17 	ldw	r2,56(r2)
 8017f78:	10800058 	cmpnei	r2,r2,1
 8017f7c:	10000a1e 	bne	r2,zero,8017fa8 <alt_up_pixel_buffer_dma_draw_vline+0x1b0>
			addr = addr + t_y * limit_x;
 8017f80:	a445383a 	mul	r2,r20,r17
 8017f84:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8017f88:	00000506 	br	8017fa0 <alt_up_pixel_buffer_dma_draw_vline+0x1a8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8017f8c:	9405883a 	add	r2,r18,r16
 8017f90:	a807883a 	mov	r3,r21
 8017f94:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 8017f98:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8017f9c:	a5000044 	addi	r20,r20,1
 8017fa0:	9d3ffa2e 	bgeu	r19,r20,8017f8c <alt_up_pixel_buffer_dma_draw_vline+0x194>
 8017fa4:	00001f06 	br	8018024 <alt_up_pixel_buffer_dma_draw_vline+0x22c>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8017fa8:	e0bff517 	ldw	r2,-44(fp)
 8017fac:	10800e17 	ldw	r2,56(r2)
 8017fb0:	10800098 	cmpnei	r2,r2,2
 8017fb4:	10000d1e 	bne	r2,zero,8017fec <alt_up_pixel_buffer_dma_draw_vline+0x1f4>
			limit_x = limit_x << 1;
 8017fb8:	8c45883a 	add	r2,r17,r17
 8017fbc:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 8017fc0:	a445383a 	mul	r2,r20,r17
 8017fc4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8017fc8:	00000606 	br	8017fe4 <alt_up_pixel_buffer_dma_draw_vline+0x1ec>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8017fcc:	9485883a 	add	r2,r18,r18
 8017fd0:	1405883a 	add	r2,r2,r16
 8017fd4:	a807883a 	mov	r3,r21
 8017fd8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 8017fdc:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8017fe0:	a5000044 	addi	r20,r20,1
 8017fe4:	9d3ff92e 	bgeu	r19,r20,8017fcc <alt_up_pixel_buffer_dma_draw_vline+0x1d4>
 8017fe8:	00000e06 	br	8018024 <alt_up_pixel_buffer_dma_draw_vline+0x22c>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8017fec:	8c45883a 	add	r2,r17,r17
 8017ff0:	1085883a 	add	r2,r2,r2
 8017ff4:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 8017ff8:	a445383a 	mul	r2,r20,r17
 8017ffc:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8018000:	00000706 	br	8018020 <alt_up_pixel_buffer_dma_draw_vline+0x228>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8018004:	9485883a 	add	r2,r18,r18
 8018008:	1085883a 	add	r2,r2,r2
 801800c:	1405883a 	add	r2,r2,r16
 8018010:	a807883a 	mov	r3,r21
 8018014:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 8018018:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 801801c:	a5000044 	addi	r20,r20,1
 8018020:	9d3ff82e 	bgeu	r19,r20,8018004 <alt_up_pixel_buffer_dma_draw_vline+0x20c>
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8018024:	e6fff904 	addi	sp,fp,-28
 8018028:	df000717 	ldw	fp,28(sp)
 801802c:	dd800617 	ldw	r22,24(sp)
 8018030:	dd400517 	ldw	r21,20(sp)
 8018034:	dd000417 	ldw	r20,16(sp)
 8018038:	dcc00317 	ldw	r19,12(sp)
 801803c:	dc800217 	ldw	r18,8(sp)
 8018040:	dc400117 	ldw	r17,4(sp)
 8018044:	dc000017 	ldw	r16,0(sp)
 8018048:	dec00804 	addi	sp,sp,32
 801804c:	f800283a 	ret

08018050 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 8018050:	defff804 	addi	sp,sp,-32
 8018054:	dfc00715 	stw	ra,28(sp)
 8018058:	df000615 	stw	fp,24(sp)
 801805c:	df000604 	addi	fp,sp,24
 8018060:	e13ffc15 	stw	r4,-16(fp)
 8018064:	e17ffd15 	stw	r5,-12(fp)
 8018068:	e1bffe15 	stw	r6,-8(fp)
 801806c:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 8018070:	e0800317 	ldw	r2,12(fp)
 8018074:	d8800015 	stw	r2,0(sp)
 8018078:	e0800417 	ldw	r2,16(fp)
 801807c:	d8800115 	stw	r2,4(sp)
 8018080:	e13ffc17 	ldw	r4,-16(fp)
 8018084:	e17ffd17 	ldw	r5,-12(fp)
 8018088:	e1bfff17 	ldw	r6,-4(fp)
 801808c:	e1fffe17 	ldw	r7,-8(fp)
 8018090:	8017be40 	call	8017be4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 8018094:	e0800317 	ldw	r2,12(fp)
 8018098:	d8800015 	stw	r2,0(sp)
 801809c:	e0800417 	ldw	r2,16(fp)
 80180a0:	d8800115 	stw	r2,4(sp)
 80180a4:	e13ffc17 	ldw	r4,-16(fp)
 80180a8:	e17ffd17 	ldw	r5,-12(fp)
 80180ac:	e1bfff17 	ldw	r6,-4(fp)
 80180b0:	e1c00217 	ldw	r7,8(fp)
 80180b4:	8017be40 	call	8017be4 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 80180b8:	e0800317 	ldw	r2,12(fp)
 80180bc:	d8800015 	stw	r2,0(sp)
 80180c0:	e0800417 	ldw	r2,16(fp)
 80180c4:	d8800115 	stw	r2,4(sp)
 80180c8:	e13ffc17 	ldw	r4,-16(fp)
 80180cc:	e17ffd17 	ldw	r5,-12(fp)
 80180d0:	e1bffe17 	ldw	r6,-8(fp)
 80180d4:	e1c00217 	ldw	r7,8(fp)
 80180d8:	8017df80 	call	8017df8 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 80180dc:	e0800317 	ldw	r2,12(fp)
 80180e0:	d8800015 	stw	r2,0(sp)
 80180e4:	e0800417 	ldw	r2,16(fp)
 80180e8:	d8800115 	stw	r2,4(sp)
 80180ec:	e13ffc17 	ldw	r4,-16(fp)
 80180f0:	e17fff17 	ldw	r5,-4(fp)
 80180f4:	e1bffe17 	ldw	r6,-8(fp)
 80180f8:	e1c00217 	ldw	r7,8(fp)
 80180fc:	8017df80 	call	8017df8 <alt_up_pixel_buffer_dma_draw_vline>
}
 8018100:	e037883a 	mov	sp,fp
 8018104:	dfc00117 	ldw	ra,4(sp)
 8018108:	df000017 	ldw	fp,0(sp)
 801810c:	dec00204 	addi	sp,sp,8
 8018110:	f800283a 	ret

08018114 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 8018114:	deffff04 	addi	sp,sp,-4
 8018118:	df000015 	stw	fp,0(sp)
 801811c:	d839883a 	mov	fp,sp
 8018120:	2005883a 	mov	r2,r4
 8018124:	3007883a 	mov	r3,r6
 8018128:	3809883a 	mov	r4,r7
 801812c:	e1800117 	ldw	r6,4(fp)
 8018130:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
 8018134:	3800051e 	bne	r7,zero,801814c <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8018138:	2909383a 	mul	r4,r5,r4
 801813c:	20c7883a 	add	r3,r4,r3
 8018140:	1885883a 	add	r2,r3,r2
 8018144:	11800025 	stbio	r6,0(r2)
 8018148:	00000e06 	br	8018184 <helper_plot_pixel+0x70>
	else if (mode == 1)
 801814c:	39c00058 	cmpnei	r7,r7,1
 8018150:	3800061e 	bne	r7,zero,801816c <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 8018154:	2909383a 	mul	r4,r5,r4
 8018158:	20c7883a 	add	r3,r4,r3
 801815c:	18c7883a 	add	r3,r3,r3
 8018160:	1885883a 	add	r2,r3,r2
 8018164:	1180002d 	sthio	r6,0(r2)
 8018168:	00000606 	br	8018184 <helper_plot_pixel+0x70>
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 801816c:	2909383a 	mul	r4,r5,r4
 8018170:	20c7883a 	add	r3,r4,r3
 8018174:	18c7883a 	add	r3,r3,r3
 8018178:	18c7883a 	add	r3,r3,r3
 801817c:	1885883a 	add	r2,r3,r2
 8018180:	11800035 	stwio	r6,0(r2)
}
 8018184:	e037883a 	mov	sp,fp
 8018188:	df000017 	ldw	fp,0(sp)
 801818c:	dec00104 	addi	sp,sp,4
 8018190:	f800283a 	ret

08018194 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 8018194:	deffeb04 	addi	sp,sp,-84
 8018198:	dfc01415 	stw	ra,80(sp)
 801819c:	df001315 	stw	fp,76(sp)
 80181a0:	ddc01215 	stw	r23,72(sp)
 80181a4:	dd801115 	stw	r22,68(sp)
 80181a8:	dd401015 	stw	r21,64(sp)
 80181ac:	dd000f15 	stw	r20,60(sp)
 80181b0:	dcc00e15 	stw	r19,56(sp)
 80181b4:	dc800d15 	stw	r18,52(sp)
 80181b8:	dc400c15 	stw	r17,48(sp)
 80181bc:	dc000b15 	stw	r16,44(sp)
 80181c0:	df001304 	addi	fp,sp,76
 80181c4:	e13fef15 	stw	r4,-68(fp)
 80181c8:	e17ff015 	stw	r5,-64(fp)
 80181cc:	e1bff115 	stw	r6,-60(fp)
 80181d0:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 80181d4:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 80181d8:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 80181dc:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 80181e0:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 80181e4:	a4c5c83a 	sub	r2,r20,r19
 80181e8:	1000010e 	bge	r2,zero,80181f0 <alt_up_pixel_buffer_dma_draw_line+0x5c>
 80181ec:	0085c83a 	sub	r2,zero,r2
 80181f0:	1007883a 	mov	r3,r2
 80181f4:	9445c83a 	sub	r2,r18,r17
 80181f8:	1000010e 	bge	r2,zero,8018200 <alt_up_pixel_buffer_dma_draw_line+0x6c>
 80181fc:	0085c83a 	sub	r2,zero,r2
 8018200:	10c4803a 	cmplt	r2,r2,r3
 8018204:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 8018208:	e0bfef17 	ldw	r2,-68(fp)
 801820c:	10800e17 	ldw	r2,56(r2)
 8018210:	10800060 	cmpeqi	r2,r2,1
 8018214:	1000081e 	bne	r2,zero,8018238 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 8018218:	e0bfef17 	ldw	r2,-68(fp)
 801821c:	10800e17 	ldw	r2,56(r2)
 8018220:	10800098 	cmpnei	r2,r2,2
 8018224:	1000021e 	bne	r2,zero,8018230 <alt_up_pixel_buffer_dma_draw_line+0x9c>
 8018228:	00800044 	movi	r2,1
 801822c:	00000306 	br	801823c <alt_up_pixel_buffer_dma_draw_line+0xa8>
 8018230:	00800084 	movi	r2,2
 8018234:	00000106 	br	801823c <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 8018238:	0005883a 	mov	r2,zero
 801823c:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 8018240:	e0800317 	ldw	r2,12(fp)
 8018244:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 8018248:	e0bfef17 	ldw	r2,-68(fp)
 801824c:	10800d17 	ldw	r2,52(r2)
 8018250:	1000081e 	bne	r2,zero,8018274 <alt_up_pixel_buffer_dma_draw_line+0xe0>
 8018254:	e0bfef17 	ldw	r2,-68(fp)
 8018258:	10801317 	ldw	r2,76(r2)
 801825c:	e0fff417 	ldw	r3,-48(fp)
 8018260:	10c5c83a 	sub	r2,r2,r3
 8018264:	1007883a 	mov	r3,r2
 8018268:	00800044 	movi	r2,1
 801826c:	10c4983a 	sll	r2,r2,r3
 8018270:	00000206 	br	801827c <alt_up_pixel_buffer_dma_draw_line+0xe8>
 8018274:	e0bfef17 	ldw	r2,-68(fp)
 8018278:	10800f17 	ldw	r2,60(r2)
 801827c:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 8018280:	e0800417 	ldw	r2,16(fp)
 8018284:	10800058 	cmpnei	r2,r2,1
 8018288:	1000031e 	bne	r2,zero,8018298 <alt_up_pixel_buffer_dma_draw_line+0x104>
		buffer_start = pixel_buffer->back_buffer_start_address;
 801828c:	e0bfef17 	ldw	r2,-68(fp)
 8018290:	15c00c17 	ldw	r23,48(r2)
 8018294:	00000206 	br	80182a0 <alt_up_pixel_buffer_dma_draw_line+0x10c>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 8018298:	e0bfef17 	ldw	r2,-68(fp)
 801829c:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 80182a0:	e0bff307 	ldb	r2,-52(fp)
 80182a4:	0080060e 	bge	zero,r2,80182c0 <alt_up_pixel_buffer_dma_draw_line+0x12c>
		// Swap x_0 and y_0
		error = x_0;
 80182a8:	8821883a 	mov	r16,r17
		x_0 = y_0;
 80182ac:	9823883a 	mov	r17,r19
		y_0 = error;
 80182b0:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 80182b4:	9021883a 	mov	r16,r18
		x_1 = y_1;
 80182b8:	a025883a 	mov	r18,r20
		y_1 = error;
 80182bc:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 80182c0:	9440060e 	bge	r18,r17,80182dc <alt_up_pixel_buffer_dma_draw_line+0x148>
		// Swap x_0 and x_1
		error = x_0;
 80182c4:	8821883a 	mov	r16,r17
		x_0 = x_1;
 80182c8:	9023883a 	mov	r17,r18
		x_1 = error;
 80182cc:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 80182d0:	9821883a 	mov	r16,r19
		y_0 = y_1;
 80182d4:	a027883a 	mov	r19,r20
		y_1 = error;
 80182d8:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 80182dc:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 80182e0:	a4c5c83a 	sub	r2,r20,r19
 80182e4:	1000010e 	bge	r2,zero,80182ec <alt_up_pixel_buffer_dma_draw_line+0x158>
 80182e8:	0085c83a 	sub	r2,zero,r2
 80182ec:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 80182f0:	a804d7fa 	srli	r2,r21,31
 80182f4:	1545883a 	add	r2,r2,r21
 80182f8:	1005d07a 	srai	r2,r2,1
 80182fc:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 8018300:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 8018304:	9d00020e 	bge	r19,r20,8018310 <alt_up_pixel_buffer_dma_draw_line+0x17c>
		ystep = 1;
 8018308:	04c00044 	movi	r19,1
 801830c:	00000106 	br	8018314 <alt_up_pixel_buffer_dma_draw_line+0x180>
	else
		ystep = -1;
 8018310:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 8018314:	e0bff307 	ldb	r2,-52(fp)
 8018318:	10800058 	cmpnei	r2,r2,1
 801831c:	1000121e 	bne	r2,zero,8018368 <alt_up_pixel_buffer_dma_draw_line+0x1d4>
	{
		for (x=x_0; x <= x_1; x++) {
 8018320:	00000f06 	br	8018360 <alt_up_pixel_buffer_dma_draw_line+0x1cc>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 8018324:	e0bff517 	ldw	r2,-44(fp)
 8018328:	d8800015 	stw	r2,0(sp)
 801832c:	e0bff417 	ldw	r2,-48(fp)
 8018330:	d8800115 	stw	r2,4(sp)
 8018334:	b809883a 	mov	r4,r23
 8018338:	e17ff617 	ldw	r5,-40(fp)
 801833c:	b00d883a 	mov	r6,r22
 8018340:	880f883a 	mov	r7,r17
 8018344:	80181140 	call	8018114 <helper_plot_pixel>
			error = error + deltay;
 8018348:	e0bff717 	ldw	r2,-36(fp)
 801834c:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8018350:	0400020e 	bge	zero,r16,801835c <alt_up_pixel_buffer_dma_draw_line+0x1c8>
				y = y + ystep;
 8018354:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8018358:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 801835c:	8c400044 	addi	r17,r17,1
 8018360:	947ff00e 	bge	r18,r17,8018324 <alt_up_pixel_buffer_dma_draw_line+0x190>
 8018364:	00001106 	br	80183ac <alt_up_pixel_buffer_dma_draw_line+0x218>
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8018368:	00000f06 	br	80183a8 <alt_up_pixel_buffer_dma_draw_line+0x214>
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 801836c:	e0bff517 	ldw	r2,-44(fp)
 8018370:	d8800015 	stw	r2,0(sp)
 8018374:	e0bff417 	ldw	r2,-48(fp)
 8018378:	d8800115 	stw	r2,4(sp)
 801837c:	b809883a 	mov	r4,r23
 8018380:	e17ff617 	ldw	r5,-40(fp)
 8018384:	880d883a 	mov	r6,r17
 8018388:	b00f883a 	mov	r7,r22
 801838c:	80181140 	call	8018114 <helper_plot_pixel>
			error = error + deltay;
 8018390:	e0bff717 	ldw	r2,-36(fp)
 8018394:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8018398:	0400020e 	bge	zero,r16,80183a4 <alt_up_pixel_buffer_dma_draw_line+0x210>
				y = y + ystep;
 801839c:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 80183a0:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 80183a4:	8c400044 	addi	r17,r17,1
 80183a8:	947ff00e 	bge	r18,r17,801836c <alt_up_pixel_buffer_dma_draw_line+0x1d8>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 80183ac:	e6fff804 	addi	sp,fp,-32
 80183b0:	dfc00917 	ldw	ra,36(sp)
 80183b4:	df000817 	ldw	fp,32(sp)
 80183b8:	ddc00717 	ldw	r23,28(sp)
 80183bc:	dd800617 	ldw	r22,24(sp)
 80183c0:	dd400517 	ldw	r21,20(sp)
 80183c4:	dd000417 	ldw	r20,16(sp)
 80183c8:	dcc00317 	ldw	r19,12(sp)
 80183cc:	dc800217 	ldw	r18,8(sp)
 80183d0:	dc400117 	ldw	r17,4(sp)
 80183d4:	dc000017 	ldw	r16,0(sp)
 80183d8:	dec00a04 	addi	sp,sp,40
 80183dc:	f800283a 	ret

080183e0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80183e0:	defff504 	addi	sp,sp,-44
 80183e4:	df000a15 	stw	fp,40(sp)
 80183e8:	df000a04 	addi	fp,sp,40
 80183ec:	e13ffc15 	stw	r4,-16(fp)
 80183f0:	e17ffd15 	stw	r5,-12(fp)
 80183f4:	e1bffe15 	stw	r6,-8(fp)
 80183f8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80183fc:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8018400:	008200f4 	movhi	r2,2051
 8018404:	10bb4e04 	addi	r2,r2,-4808
 8018408:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 801840c:	10003f26 	beq	r2,zero,801850c <alt_alarm_start+0x12c>
  {
    if (alarm)
 8018410:	e0bffc17 	ldw	r2,-16(fp)
 8018414:	10003b26 	beq	r2,zero,8018504 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 8018418:	e0bffc17 	ldw	r2,-16(fp)
 801841c:	e0fffe17 	ldw	r3,-8(fp)
 8018420:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8018424:	e0bffc17 	ldw	r2,-16(fp)
 8018428:	e0ffff17 	ldw	r3,-4(fp)
 801842c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018430:	0005303a 	rdctl	r2,status
 8018434:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018438:	e0fff817 	ldw	r3,-32(fp)
 801843c:	00bfff84 	movi	r2,-2
 8018440:	1884703a 	and	r2,r3,r2
 8018444:	1001703a 	wrctl	status,r2
  
  return context;
 8018448:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 801844c:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8018450:	008200f4 	movhi	r2,2051
 8018454:	10bb4f04 	addi	r2,r2,-4804
 8018458:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 801845c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8018460:	e0fffd17 	ldw	r3,-12(fp)
 8018464:	e0bff617 	ldw	r2,-40(fp)
 8018468:	1885883a 	add	r2,r3,r2
 801846c:	10c00044 	addi	r3,r2,1
 8018470:	e0bffc17 	ldw	r2,-16(fp)
 8018474:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8018478:	e0bffc17 	ldw	r2,-16(fp)
 801847c:	10c00217 	ldw	r3,8(r2)
 8018480:	e0bff617 	ldw	r2,-40(fp)
 8018484:	1880042e 	bgeu	r3,r2,8018498 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 8018488:	e0bffc17 	ldw	r2,-16(fp)
 801848c:	00c00044 	movi	r3,1
 8018490:	10c00405 	stb	r3,16(r2)
 8018494:	00000206 	br	80184a0 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 8018498:	e0bffc17 	ldw	r2,-16(fp)
 801849c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80184a0:	e0fffc17 	ldw	r3,-16(fp)
 80184a4:	008200b4 	movhi	r2,2050
 80184a8:	10916504 	addi	r2,r2,17812
 80184ac:	e0bff915 	stw	r2,-28(fp)
 80184b0:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80184b4:	e0bffa17 	ldw	r2,-24(fp)
 80184b8:	e0fff917 	ldw	r3,-28(fp)
 80184bc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80184c0:	e0bff917 	ldw	r2,-28(fp)
 80184c4:	10c00017 	ldw	r3,0(r2)
 80184c8:	e0bffa17 	ldw	r2,-24(fp)
 80184cc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80184d0:	e0bff917 	ldw	r2,-28(fp)
 80184d4:	10800017 	ldw	r2,0(r2)
 80184d8:	e0fffa17 	ldw	r3,-24(fp)
 80184dc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80184e0:	e0bff917 	ldw	r2,-28(fp)
 80184e4:	e0fffa17 	ldw	r3,-24(fp)
 80184e8:	10c00015 	stw	r3,0(r2)
 80184ec:	e0bff717 	ldw	r2,-36(fp)
 80184f0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80184f4:	e0bffb17 	ldw	r2,-20(fp)
 80184f8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 80184fc:	0005883a 	mov	r2,zero
 8018500:	00000306 	br	8018510 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 8018504:	00bffa84 	movi	r2,-22
 8018508:	00000106 	br	8018510 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 801850c:	00bfde84 	movi	r2,-134
  }
}
 8018510:	e037883a 	mov	sp,fp
 8018514:	df000017 	ldw	fp,0(sp)
 8018518:	dec00104 	addi	sp,sp,4
 801851c:	f800283a 	ret

08018520 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8018520:	defffe04 	addi	sp,sp,-8
 8018524:	df000115 	stw	fp,4(sp)
 8018528:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 801852c:	e03fff15 	stw	zero,-4(fp)
 8018530:	00000506 	br	8018548 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8018534:	e0bfff17 	ldw	r2,-4(fp)
 8018538:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 801853c:	e0bfff17 	ldw	r2,-4(fp)
 8018540:	10800804 	addi	r2,r2,32
 8018544:	e0bfff15 	stw	r2,-4(fp)
 8018548:	e0bfff17 	ldw	r2,-4(fp)
 801854c:	10820030 	cmpltui	r2,r2,2048
 8018550:	103ff81e 	bne	r2,zero,8018534 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8018554:	e037883a 	mov	sp,fp
 8018558:	df000017 	ldw	fp,0(sp)
 801855c:	dec00104 	addi	sp,sp,4
 8018560:	f800283a 	ret

08018564 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018564:	defffe04 	addi	sp,sp,-8
 8018568:	dfc00115 	stw	ra,4(sp)
 801856c:	df000015 	stw	fp,0(sp)
 8018570:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018574:	008200b4 	movhi	r2,2050
 8018578:	10914304 	addi	r2,r2,17676
 801857c:	10800017 	ldw	r2,0(r2)
 8018580:	10000526 	beq	r2,zero,8018598 <alt_get_errno+0x34>
 8018584:	008200b4 	movhi	r2,2050
 8018588:	10914304 	addi	r2,r2,17676
 801858c:	10800017 	ldw	r2,0(r2)
 8018590:	103ee83a 	callr	r2
 8018594:	00000206 	br	80185a0 <alt_get_errno+0x3c>
 8018598:	008200f4 	movhi	r2,2051
 801859c:	10bb2d04 	addi	r2,r2,-4940
}
 80185a0:	e037883a 	mov	sp,fp
 80185a4:	dfc00117 	ldw	ra,4(sp)
 80185a8:	df000017 	ldw	fp,0(sp)
 80185ac:	dec00204 	addi	sp,sp,8
 80185b0:	f800283a 	ret

080185b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 80185b4:	defffa04 	addi	sp,sp,-24
 80185b8:	dfc00515 	stw	ra,20(sp)
 80185bc:	df000415 	stw	fp,16(sp)
 80185c0:	df000404 	addi	fp,sp,16
 80185c4:	e13ffe15 	stw	r4,-8(fp)
 80185c8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 80185cc:	e0bffe17 	ldw	r2,-8(fp)
 80185d0:	10000326 	beq	r2,zero,80185e0 <alt_dev_llist_insert+0x2c>
 80185d4:	e0bffe17 	ldw	r2,-8(fp)
 80185d8:	10800217 	ldw	r2,8(r2)
 80185dc:	1000061e 	bne	r2,zero,80185f8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 80185e0:	80185640 	call	8018564 <alt_get_errno>
 80185e4:	1007883a 	mov	r3,r2
 80185e8:	00800584 	movi	r2,22
 80185ec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80185f0:	00bffa84 	movi	r2,-22
 80185f4:	00001306 	br	8018644 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80185f8:	e0bffe17 	ldw	r2,-8(fp)
 80185fc:	e0ffff17 	ldw	r3,-4(fp)
 8018600:	e0fffc15 	stw	r3,-16(fp)
 8018604:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8018608:	e0bffd17 	ldw	r2,-12(fp)
 801860c:	e0fffc17 	ldw	r3,-16(fp)
 8018610:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8018614:	e0bffc17 	ldw	r2,-16(fp)
 8018618:	10c00017 	ldw	r3,0(r2)
 801861c:	e0bffd17 	ldw	r2,-12(fp)
 8018620:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8018624:	e0bffc17 	ldw	r2,-16(fp)
 8018628:	10800017 	ldw	r2,0(r2)
 801862c:	e0fffd17 	ldw	r3,-12(fp)
 8018630:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8018634:	e0bffc17 	ldw	r2,-16(fp)
 8018638:	e0fffd17 	ldw	r3,-12(fp)
 801863c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8018640:	0005883a 	mov	r2,zero
}
 8018644:	e037883a 	mov	sp,fp
 8018648:	dfc00117 	ldw	ra,4(sp)
 801864c:	df000017 	ldw	fp,0(sp)
 8018650:	dec00204 	addi	sp,sp,8
 8018654:	f800283a 	ret

08018658 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8018658:	defffd04 	addi	sp,sp,-12
 801865c:	dfc00215 	stw	ra,8(sp)
 8018660:	df000115 	stw	fp,4(sp)
 8018664:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8018668:	008200b4 	movhi	r2,2050
 801866c:	10a63f04 	addi	r2,r2,-26372
 8018670:	e0bfff15 	stw	r2,-4(fp)
 8018674:	00000606 	br	8018690 <_do_ctors+0x38>
        (*ctor) (); 
 8018678:	e0bfff17 	ldw	r2,-4(fp)
 801867c:	10800017 	ldw	r2,0(r2)
 8018680:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8018684:	e0bfff17 	ldw	r2,-4(fp)
 8018688:	10bfff04 	addi	r2,r2,-4
 801868c:	e0bfff15 	stw	r2,-4(fp)
 8018690:	e0ffff17 	ldw	r3,-4(fp)
 8018694:	008200b4 	movhi	r2,2050
 8018698:	10a64004 	addi	r2,r2,-26368
 801869c:	18bff62e 	bgeu	r3,r2,8018678 <_do_ctors+0x20>
        (*ctor) (); 
}
 80186a0:	e037883a 	mov	sp,fp
 80186a4:	dfc00117 	ldw	ra,4(sp)
 80186a8:	df000017 	ldw	fp,0(sp)
 80186ac:	dec00204 	addi	sp,sp,8
 80186b0:	f800283a 	ret

080186b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 80186b4:	defffd04 	addi	sp,sp,-12
 80186b8:	dfc00215 	stw	ra,8(sp)
 80186bc:	df000115 	stw	fp,4(sp)
 80186c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80186c4:	008200b4 	movhi	r2,2050
 80186c8:	10a63f04 	addi	r2,r2,-26372
 80186cc:	e0bfff15 	stw	r2,-4(fp)
 80186d0:	00000606 	br	80186ec <_do_dtors+0x38>
        (*dtor) (); 
 80186d4:	e0bfff17 	ldw	r2,-4(fp)
 80186d8:	10800017 	ldw	r2,0(r2)
 80186dc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 80186e0:	e0bfff17 	ldw	r2,-4(fp)
 80186e4:	10bfff04 	addi	r2,r2,-4
 80186e8:	e0bfff15 	stw	r2,-4(fp)
 80186ec:	e0ffff17 	ldw	r3,-4(fp)
 80186f0:	008200b4 	movhi	r2,2050
 80186f4:	10a64004 	addi	r2,r2,-26368
 80186f8:	18bff62e 	bgeu	r3,r2,80186d4 <_do_dtors+0x20>
        (*dtor) (); 
}
 80186fc:	e037883a 	mov	sp,fp
 8018700:	dfc00117 	ldw	ra,4(sp)
 8018704:	df000017 	ldw	fp,0(sp)
 8018708:	dec00204 	addi	sp,sp,8
 801870c:	f800283a 	ret

08018710 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8018710:	defffa04 	addi	sp,sp,-24
 8018714:	dfc00515 	stw	ra,20(sp)
 8018718:	df000415 	stw	fp,16(sp)
 801871c:	df000404 	addi	fp,sp,16
 8018720:	e13ffe15 	stw	r4,-8(fp)
 8018724:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8018728:	e0bfff17 	ldw	r2,-4(fp)
 801872c:	10800017 	ldw	r2,0(r2)
 8018730:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8018734:	e13ffe17 	ldw	r4,-8(fp)
 8018738:	80019600 	call	8001960 <strlen>
 801873c:	10800044 	addi	r2,r2,1
 8018740:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8018744:	00000d06 	br	801877c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8018748:	e0bffc17 	ldw	r2,-16(fp)
 801874c:	10c00217 	ldw	r3,8(r2)
 8018750:	e0bffd17 	ldw	r2,-12(fp)
 8018754:	1809883a 	mov	r4,r3
 8018758:	e17ffe17 	ldw	r5,-8(fp)
 801875c:	100d883a 	mov	r6,r2
 8018760:	80195a00 	call	80195a0 <memcmp>
 8018764:	1000021e 	bne	r2,zero,8018770 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8018768:	e0bffc17 	ldw	r2,-16(fp)
 801876c:	00000706 	br	801878c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8018770:	e0bffc17 	ldw	r2,-16(fp)
 8018774:	10800017 	ldw	r2,0(r2)
 8018778:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801877c:	e0fffc17 	ldw	r3,-16(fp)
 8018780:	e0bfff17 	ldw	r2,-4(fp)
 8018784:	18bff01e 	bne	r3,r2,8018748 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8018788:	0005883a 	mov	r2,zero
}
 801878c:	e037883a 	mov	sp,fp
 8018790:	dfc00117 	ldw	ra,4(sp)
 8018794:	df000017 	ldw	fp,0(sp)
 8018798:	dec00204 	addi	sp,sp,8
 801879c:	f800283a 	ret

080187a0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80187a0:	defffe04 	addi	sp,sp,-8
 80187a4:	dfc00115 	stw	ra,4(sp)
 80187a8:	df000015 	stw	fp,0(sp)
 80187ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 80187b0:	0009883a 	mov	r4,zero
 80187b4:	01440004 	movi	r5,4096
 80187b8:	801942c0 	call	801942c <alt_icache_flush>
#endif
}
 80187bc:	e037883a 	mov	sp,fp
 80187c0:	dfc00117 	ldw	ra,4(sp)
 80187c4:	df000017 	ldw	fp,0(sp)
 80187c8:	dec00204 	addi	sp,sp,8
 80187cc:	f800283a 	ret

080187d0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 80187d0:	defff904 	addi	sp,sp,-28
 80187d4:	dfc00615 	stw	ra,24(sp)
 80187d8:	df000515 	stw	fp,20(sp)
 80187dc:	df000504 	addi	fp,sp,20
 80187e0:	e13ffc15 	stw	r4,-16(fp)
 80187e4:	e17ffd15 	stw	r5,-12(fp)
 80187e8:	e1bffe15 	stw	r6,-8(fp)
 80187ec:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 80187f0:	e13ffd17 	ldw	r4,-12(fp)
 80187f4:	e17ffe17 	ldw	r5,-8(fp)
 80187f8:	e1bfff17 	ldw	r6,-4(fp)
 80187fc:	8018bd40 	call	8018bd4 <open>
 8018800:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8018804:	e0bffb17 	ldw	r2,-20(fp)
 8018808:	10001c16 	blt	r2,zero,801887c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 801880c:	008200b4 	movhi	r2,2050
 8018810:	108c8604 	addi	r2,r2,12824
 8018814:	e0fffb17 	ldw	r3,-20(fp)
 8018818:	18c00324 	muli	r3,r3,12
 801881c:	10c5883a 	add	r2,r2,r3
 8018820:	10c00017 	ldw	r3,0(r2)
 8018824:	e0bffc17 	ldw	r2,-16(fp)
 8018828:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801882c:	008200b4 	movhi	r2,2050
 8018830:	108c8604 	addi	r2,r2,12824
 8018834:	e0fffb17 	ldw	r3,-20(fp)
 8018838:	18c00324 	muli	r3,r3,12
 801883c:	18c00104 	addi	r3,r3,4
 8018840:	10c5883a 	add	r2,r2,r3
 8018844:	10c00017 	ldw	r3,0(r2)
 8018848:	e0bffc17 	ldw	r2,-16(fp)
 801884c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8018850:	008200b4 	movhi	r2,2050
 8018854:	108c8604 	addi	r2,r2,12824
 8018858:	e0fffb17 	ldw	r3,-20(fp)
 801885c:	18c00324 	muli	r3,r3,12
 8018860:	18c00204 	addi	r3,r3,8
 8018864:	10c5883a 	add	r2,r2,r3
 8018868:	10c00017 	ldw	r3,0(r2)
 801886c:	e0bffc17 	ldw	r2,-16(fp)
 8018870:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8018874:	e13ffb17 	ldw	r4,-20(fp)
 8018878:	800dac40 	call	800dac4 <alt_release_fd>
  }
} 
 801887c:	e037883a 	mov	sp,fp
 8018880:	dfc00117 	ldw	ra,4(sp)
 8018884:	df000017 	ldw	fp,0(sp)
 8018888:	dec00204 	addi	sp,sp,8
 801888c:	f800283a 	ret

08018890 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8018890:	defffb04 	addi	sp,sp,-20
 8018894:	dfc00415 	stw	ra,16(sp)
 8018898:	df000315 	stw	fp,12(sp)
 801889c:	df000304 	addi	fp,sp,12
 80188a0:	e13ffd15 	stw	r4,-12(fp)
 80188a4:	e17ffe15 	stw	r5,-8(fp)
 80188a8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 80188ac:	010200b4 	movhi	r4,2050
 80188b0:	210c8904 	addi	r4,r4,12836
 80188b4:	e17ffd17 	ldw	r5,-12(fp)
 80188b8:	01800044 	movi	r6,1
 80188bc:	01c07fc4 	movi	r7,511
 80188c0:	80187d00 	call	80187d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80188c4:	010200b4 	movhi	r4,2050
 80188c8:	210c8604 	addi	r4,r4,12824
 80188cc:	e17ffe17 	ldw	r5,-8(fp)
 80188d0:	000d883a 	mov	r6,zero
 80188d4:	01c07fc4 	movi	r7,511
 80188d8:	80187d00 	call	80187d0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80188dc:	010200b4 	movhi	r4,2050
 80188e0:	210c8c04 	addi	r4,r4,12848
 80188e4:	e17fff17 	ldw	r5,-4(fp)
 80188e8:	01800044 	movi	r6,1
 80188ec:	01c07fc4 	movi	r7,511
 80188f0:	80187d00 	call	80187d0 <alt_open_fd>
}  
 80188f4:	e037883a 	mov	sp,fp
 80188f8:	dfc00117 	ldw	ra,4(sp)
 80188fc:	df000017 	ldw	fp,0(sp)
 8018900:	dec00204 	addi	sp,sp,8
 8018904:	f800283a 	ret

08018908 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 8018908:	defff004 	addi	sp,sp,-64
 801890c:	df000f15 	stw	fp,60(sp)
 8018910:	df000f04 	addi	fp,sp,60
 8018914:	e13ffd15 	stw	r4,-12(fp)
 8018918:	e17ffe15 	stw	r5,-8(fp)
 801891c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 8018920:	00bffa84 	movi	r2,-22
 8018924:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8018928:	e0bffd17 	ldw	r2,-12(fp)
 801892c:	10800828 	cmpgeui	r2,r2,32
 8018930:	10005c1e 	bne	r2,zero,8018aa4 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018934:	0005303a 	rdctl	r2,status
 8018938:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801893c:	e0fff317 	ldw	r3,-52(fp)
 8018940:	00bfff84 	movi	r2,-2
 8018944:	1884703a 	and	r2,r3,r2
 8018948:	1001703a 	wrctl	status,r2
  
  return context;
 801894c:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 8018950:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
 8018954:	008200f4 	movhi	r2,2051
 8018958:	1099e404 	addi	r2,r2,26512
 801895c:	e0fffd17 	ldw	r3,-12(fp)
 8018960:	180690fa 	slli	r3,r3,3
 8018964:	10c5883a 	add	r2,r2,r3
 8018968:	e0ffff17 	ldw	r3,-4(fp)
 801896c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 8018970:	008200f4 	movhi	r2,2051
 8018974:	1099e404 	addi	r2,r2,26512
 8018978:	e0fffd17 	ldw	r3,-12(fp)
 801897c:	180690fa 	slli	r3,r3,3
 8018980:	18c00104 	addi	r3,r3,4
 8018984:	10c5883a 	add	r2,r2,r3
 8018988:	e0fffe17 	ldw	r3,-8(fp)
 801898c:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 8018990:	e0bfff17 	ldw	r2,-4(fp)
 8018994:	10001f26 	beq	r2,zero,8018a14 <alt_irq_register+0x10c>
 8018998:	e0bffd17 	ldw	r2,-12(fp)
 801899c:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80189a0:	0005303a 	rdctl	r2,status
 80189a4:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80189a8:	e0fff517 	ldw	r3,-44(fp)
 80189ac:	00bfff84 	movi	r2,-2
 80189b0:	1884703a 	and	r2,r3,r2
 80189b4:	1001703a 	wrctl	status,r2
  
  return context;
 80189b8:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 80189bc:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
 80189c0:	e0bff417 	ldw	r2,-48(fp)
 80189c4:	00c00044 	movi	r3,1
 80189c8:	1884983a 	sll	r2,r3,r2
 80189cc:	1007883a 	mov	r3,r2
 80189d0:	008200f4 	movhi	r2,2051
 80189d4:	10bb4d04 	addi	r2,r2,-4812
 80189d8:	10800017 	ldw	r2,0(r2)
 80189dc:	1886b03a 	or	r3,r3,r2
 80189e0:	008200f4 	movhi	r2,2051
 80189e4:	10bb4d04 	addi	r2,r2,-4812
 80189e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80189ec:	008200f4 	movhi	r2,2051
 80189f0:	10bb4d04 	addi	r2,r2,-4812
 80189f4:	10800017 	ldw	r2,0(r2)
 80189f8:	100170fa 	wrctl	ienable,r2
 80189fc:	e0bff617 	ldw	r2,-40(fp)
 8018a00:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018a04:	e0bff717 	ldw	r2,-36(fp)
 8018a08:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8018a0c:	0005883a 	mov	r2,zero
 8018a10:	00001f06 	br	8018a90 <alt_irq_register+0x188>
 8018a14:	e0bffd17 	ldw	r2,-12(fp)
 8018a18:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018a1c:	0005303a 	rdctl	r2,status
 8018a20:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018a24:	e0fff917 	ldw	r3,-28(fp)
 8018a28:	00bfff84 	movi	r2,-2
 8018a2c:	1884703a 	and	r2,r3,r2
 8018a30:	1001703a 	wrctl	status,r2
  
  return context;
 8018a34:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8018a38:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
 8018a3c:	e0bff817 	ldw	r2,-32(fp)
 8018a40:	00c00044 	movi	r3,1
 8018a44:	1884983a 	sll	r2,r3,r2
 8018a48:	0084303a 	nor	r2,zero,r2
 8018a4c:	1007883a 	mov	r3,r2
 8018a50:	008200f4 	movhi	r2,2051
 8018a54:	10bb4d04 	addi	r2,r2,-4812
 8018a58:	10800017 	ldw	r2,0(r2)
 8018a5c:	1886703a 	and	r3,r3,r2
 8018a60:	008200f4 	movhi	r2,2051
 8018a64:	10bb4d04 	addi	r2,r2,-4812
 8018a68:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8018a6c:	008200f4 	movhi	r2,2051
 8018a70:	10bb4d04 	addi	r2,r2,-4812
 8018a74:	10800017 	ldw	r2,0(r2)
 8018a78:	100170fa 	wrctl	ienable,r2
 8018a7c:	e0bffa17 	ldw	r2,-24(fp)
 8018a80:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018a84:	e0bffb17 	ldw	r2,-20(fp)
 8018a88:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8018a8c:	0005883a 	mov	r2,zero
 8018a90:	e0bff115 	stw	r2,-60(fp)
 8018a94:	e0bff217 	ldw	r2,-56(fp)
 8018a98:	e0bffc15 	stw	r2,-16(fp)
 8018a9c:	e0bffc17 	ldw	r2,-16(fp)
 8018aa0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 8018aa4:	e0bff117 	ldw	r2,-60(fp)
}
 8018aa8:	e037883a 	mov	sp,fp
 8018aac:	df000017 	ldw	fp,0(sp)
 8018ab0:	dec00104 	addi	sp,sp,4
 8018ab4:	f800283a 	ret

08018ab8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8018ab8:	defffe04 	addi	sp,sp,-8
 8018abc:	dfc00115 	stw	ra,4(sp)
 8018ac0:	df000015 	stw	fp,0(sp)
 8018ac4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8018ac8:	008200b4 	movhi	r2,2050
 8018acc:	10914304 	addi	r2,r2,17676
 8018ad0:	10800017 	ldw	r2,0(r2)
 8018ad4:	10000526 	beq	r2,zero,8018aec <alt_get_errno+0x34>
 8018ad8:	008200b4 	movhi	r2,2050
 8018adc:	10914304 	addi	r2,r2,17676
 8018ae0:	10800017 	ldw	r2,0(r2)
 8018ae4:	103ee83a 	callr	r2
 8018ae8:	00000206 	br	8018af4 <alt_get_errno+0x3c>
 8018aec:	008200f4 	movhi	r2,2051
 8018af0:	10bb2d04 	addi	r2,r2,-4940
}
 8018af4:	e037883a 	mov	sp,fp
 8018af8:	dfc00117 	ldw	ra,4(sp)
 8018afc:	df000017 	ldw	fp,0(sp)
 8018b00:	dec00204 	addi	sp,sp,8
 8018b04:	f800283a 	ret

08018b08 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8018b08:	defffd04 	addi	sp,sp,-12
 8018b0c:	df000215 	stw	fp,8(sp)
 8018b10:	df000204 	addi	fp,sp,8
 8018b14:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8018b18:	e0bfff17 	ldw	r2,-4(fp)
 8018b1c:	10800217 	ldw	r2,8(r2)
 8018b20:	10d00034 	orhi	r3,r2,16384
 8018b24:	e0bfff17 	ldw	r2,-4(fp)
 8018b28:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8018b2c:	e03ffe15 	stw	zero,-8(fp)
 8018b30:	00001d06 	br	8018ba8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8018b34:	008200b4 	movhi	r2,2050
 8018b38:	108c8604 	addi	r2,r2,12824
 8018b3c:	e0fffe17 	ldw	r3,-8(fp)
 8018b40:	18c00324 	muli	r3,r3,12
 8018b44:	10c5883a 	add	r2,r2,r3
 8018b48:	10c00017 	ldw	r3,0(r2)
 8018b4c:	e0bfff17 	ldw	r2,-4(fp)
 8018b50:	10800017 	ldw	r2,0(r2)
 8018b54:	1880111e 	bne	r3,r2,8018b9c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8018b58:	008200b4 	movhi	r2,2050
 8018b5c:	108c8604 	addi	r2,r2,12824
 8018b60:	e0fffe17 	ldw	r3,-8(fp)
 8018b64:	18c00324 	muli	r3,r3,12
 8018b68:	18c00204 	addi	r3,r3,8
 8018b6c:	10c5883a 	add	r2,r2,r3
 8018b70:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8018b74:	1000090e 	bge	r2,zero,8018b9c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8018b78:	e0bffe17 	ldw	r2,-8(fp)
 8018b7c:	10c00324 	muli	r3,r2,12
 8018b80:	008200b4 	movhi	r2,2050
 8018b84:	108c8604 	addi	r2,r2,12824
 8018b88:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8018b8c:	e0bfff17 	ldw	r2,-4(fp)
 8018b90:	18800226 	beq	r3,r2,8018b9c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 8018b94:	00bffcc4 	movi	r2,-13
 8018b98:	00000a06 	br	8018bc4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8018b9c:	e0bffe17 	ldw	r2,-8(fp)
 8018ba0:	10800044 	addi	r2,r2,1
 8018ba4:	e0bffe15 	stw	r2,-8(fp)
 8018ba8:	008200b4 	movhi	r2,2050
 8018bac:	10914204 	addi	r2,r2,17672
 8018bb0:	10800017 	ldw	r2,0(r2)
 8018bb4:	1007883a 	mov	r3,r2
 8018bb8:	e0bffe17 	ldw	r2,-8(fp)
 8018bbc:	18bfdd2e 	bgeu	r3,r2,8018b34 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 8018bc0:	0005883a 	mov	r2,zero
}
 8018bc4:	e037883a 	mov	sp,fp
 8018bc8:	df000017 	ldw	fp,0(sp)
 8018bcc:	dec00104 	addi	sp,sp,4
 8018bd0:	f800283a 	ret

08018bd4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8018bd4:	defff604 	addi	sp,sp,-40
 8018bd8:	dfc00915 	stw	ra,36(sp)
 8018bdc:	df000815 	stw	fp,32(sp)
 8018be0:	df000804 	addi	fp,sp,32
 8018be4:	e13ffd15 	stw	r4,-12(fp)
 8018be8:	e17ffe15 	stw	r5,-8(fp)
 8018bec:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8018bf0:	00bfffc4 	movi	r2,-1
 8018bf4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8018bf8:	00bffb44 	movi	r2,-19
 8018bfc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8018c00:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8018c04:	e13ffd17 	ldw	r4,-12(fp)
 8018c08:	014200b4 	movhi	r5,2050
 8018c0c:	29514004 	addi	r5,r5,17664
 8018c10:	80187100 	call	8018710 <alt_find_dev>
 8018c14:	e0bff815 	stw	r2,-32(fp)
 8018c18:	e0bff817 	ldw	r2,-32(fp)
 8018c1c:	1000051e 	bne	r2,zero,8018c34 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8018c20:	e13ffd17 	ldw	r4,-12(fp)
 8018c24:	801921c0 	call	801921c <alt_find_file>
 8018c28:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8018c2c:	00800044 	movi	r2,1
 8018c30:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8018c34:	e0bff817 	ldw	r2,-32(fp)
 8018c38:	10002926 	beq	r2,zero,8018ce0 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8018c3c:	e13ff817 	ldw	r4,-32(fp)
 8018c40:	80193300 	call	8019330 <alt_get_fd>
 8018c44:	e0bff915 	stw	r2,-28(fp)
 8018c48:	e0bff917 	ldw	r2,-28(fp)
 8018c4c:	1000030e 	bge	r2,zero,8018c5c <open+0x88>
    {
      status = index;
 8018c50:	e0bff917 	ldw	r2,-28(fp)
 8018c54:	e0bffa15 	stw	r2,-24(fp)
 8018c58:	00002306 	br	8018ce8 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 8018c5c:	e0bff917 	ldw	r2,-28(fp)
 8018c60:	10c00324 	muli	r3,r2,12
 8018c64:	008200b4 	movhi	r2,2050
 8018c68:	108c8604 	addi	r2,r2,12824
 8018c6c:	1885883a 	add	r2,r3,r2
 8018c70:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8018c74:	e0fffe17 	ldw	r3,-8(fp)
 8018c78:	00900034 	movhi	r2,16384
 8018c7c:	10bfffc4 	addi	r2,r2,-1
 8018c80:	1886703a 	and	r3,r3,r2
 8018c84:	e0bffc17 	ldw	r2,-16(fp)
 8018c88:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8018c8c:	e0bffb17 	ldw	r2,-20(fp)
 8018c90:	1000051e 	bne	r2,zero,8018ca8 <open+0xd4>
 8018c94:	e13ffc17 	ldw	r4,-16(fp)
 8018c98:	8018b080 	call	8018b08 <alt_file_locked>
 8018c9c:	e0bffa15 	stw	r2,-24(fp)
 8018ca0:	e0bffa17 	ldw	r2,-24(fp)
 8018ca4:	10001016 	blt	r2,zero,8018ce8 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8018ca8:	e0bff817 	ldw	r2,-32(fp)
 8018cac:	10800317 	ldw	r2,12(r2)
 8018cb0:	10000826 	beq	r2,zero,8018cd4 <open+0x100>
 8018cb4:	e0bff817 	ldw	r2,-32(fp)
 8018cb8:	10800317 	ldw	r2,12(r2)
 8018cbc:	e13ffc17 	ldw	r4,-16(fp)
 8018cc0:	e17ffd17 	ldw	r5,-12(fp)
 8018cc4:	e1bffe17 	ldw	r6,-8(fp)
 8018cc8:	e1ffff17 	ldw	r7,-4(fp)
 8018ccc:	103ee83a 	callr	r2
 8018cd0:	00000106 	br	8018cd8 <open+0x104>
 8018cd4:	0005883a 	mov	r2,zero
 8018cd8:	e0bffa15 	stw	r2,-24(fp)
 8018cdc:	00000206 	br	8018ce8 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8018ce0:	00bffb44 	movi	r2,-19
 8018ce4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8018ce8:	e0bffa17 	ldw	r2,-24(fp)
 8018cec:	1000090e 	bge	r2,zero,8018d14 <open+0x140>
  {
    alt_release_fd (index);  
 8018cf0:	e13ff917 	ldw	r4,-28(fp)
 8018cf4:	800dac40 	call	800dac4 <alt_release_fd>
    ALT_ERRNO = -status;
 8018cf8:	8018ab80 	call	8018ab8 <alt_get_errno>
 8018cfc:	1007883a 	mov	r3,r2
 8018d00:	e0bffa17 	ldw	r2,-24(fp)
 8018d04:	0085c83a 	sub	r2,zero,r2
 8018d08:	18800015 	stw	r2,0(r3)
    return -1;
 8018d0c:	00bfffc4 	movi	r2,-1
 8018d10:	00000106 	br	8018d18 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 8018d14:	e0bff917 	ldw	r2,-28(fp)
}
 8018d18:	e037883a 	mov	sp,fp
 8018d1c:	dfc00117 	ldw	ra,4(sp)
 8018d20:	df000017 	ldw	fp,0(sp)
 8018d24:	dec00204 	addi	sp,sp,8
 8018d28:	f800283a 	ret

08018d2c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 8018d2c:	defffa04 	addi	sp,sp,-24
 8018d30:	df000515 	stw	fp,20(sp)
 8018d34:	df000504 	addi	fp,sp,20
 8018d38:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8018d3c:	0005303a 	rdctl	r2,status
 8018d40:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8018d44:	e0fffc17 	ldw	r3,-16(fp)
 8018d48:	00bfff84 	movi	r2,-2
 8018d4c:	1884703a 	and	r2,r3,r2
 8018d50:	1001703a 	wrctl	status,r2
  
  return context;
 8018d54:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8018d58:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 8018d5c:	e0bfff17 	ldw	r2,-4(fp)
 8018d60:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 8018d64:	e0bffd17 	ldw	r2,-12(fp)
 8018d68:	10800017 	ldw	r2,0(r2)
 8018d6c:	e0fffd17 	ldw	r3,-12(fp)
 8018d70:	18c00117 	ldw	r3,4(r3)
 8018d74:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 8018d78:	e0bffd17 	ldw	r2,-12(fp)
 8018d7c:	10800117 	ldw	r2,4(r2)
 8018d80:	e0fffd17 	ldw	r3,-12(fp)
 8018d84:	18c00017 	ldw	r3,0(r3)
 8018d88:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8018d8c:	e0bffd17 	ldw	r2,-12(fp)
 8018d90:	e0fffd17 	ldw	r3,-12(fp)
 8018d94:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8018d98:	e0bffd17 	ldw	r2,-12(fp)
 8018d9c:	e0fffd17 	ldw	r3,-12(fp)
 8018da0:	10c00015 	stw	r3,0(r2)
 8018da4:	e0bffb17 	ldw	r2,-20(fp)
 8018da8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8018dac:	e0bffe17 	ldw	r2,-8(fp)
 8018db0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 8018db4:	e037883a 	mov	sp,fp
 8018db8:	df000017 	ldw	fp,0(sp)
 8018dbc:	dec00104 	addi	sp,sp,4
 8018dc0:	f800283a 	ret

08018dc4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8018dc4:	defffb04 	addi	sp,sp,-20
 8018dc8:	dfc00415 	stw	ra,16(sp)
 8018dcc:	df000315 	stw	fp,12(sp)
 8018dd0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8018dd4:	d0a03717 	ldw	r2,-32548(gp)
 8018dd8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8018ddc:	d08a2117 	ldw	r2,10372(gp)
 8018de0:	10800044 	addi	r2,r2,1
 8018de4:	d08a2115 	stw	r2,10372(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8018de8:	00002e06 	br	8018ea4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8018dec:	e0bffd17 	ldw	r2,-12(fp)
 8018df0:	10800017 	ldw	r2,0(r2)
 8018df4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8018df8:	e0bffd17 	ldw	r2,-12(fp)
 8018dfc:	10800403 	ldbu	r2,16(r2)
 8018e00:	10803fcc 	andi	r2,r2,255
 8018e04:	10000426 	beq	r2,zero,8018e18 <alt_tick+0x54>
 8018e08:	d08a2117 	ldw	r2,10372(gp)
 8018e0c:	1000021e 	bne	r2,zero,8018e18 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8018e10:	e0bffd17 	ldw	r2,-12(fp)
 8018e14:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8018e18:	e0bffd17 	ldw	r2,-12(fp)
 8018e1c:	10800217 	ldw	r2,8(r2)
 8018e20:	d0ca2117 	ldw	r3,10372(gp)
 8018e24:	18801d36 	bltu	r3,r2,8018e9c <alt_tick+0xd8>
 8018e28:	e0bffd17 	ldw	r2,-12(fp)
 8018e2c:	10800403 	ldbu	r2,16(r2)
 8018e30:	10803fcc 	andi	r2,r2,255
 8018e34:	1000191e 	bne	r2,zero,8018e9c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 8018e38:	e0bffd17 	ldw	r2,-12(fp)
 8018e3c:	10800317 	ldw	r2,12(r2)
 8018e40:	e0fffd17 	ldw	r3,-12(fp)
 8018e44:	18c00517 	ldw	r3,20(r3)
 8018e48:	1809883a 	mov	r4,r3
 8018e4c:	103ee83a 	callr	r2
 8018e50:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8018e54:	e0bfff17 	ldw	r2,-4(fp)
 8018e58:	1000031e 	bne	r2,zero,8018e68 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8018e5c:	e13ffd17 	ldw	r4,-12(fp)
 8018e60:	8018d2c0 	call	8018d2c <alt_alarm_stop>
 8018e64:	00000d06 	br	8018e9c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 8018e68:	e0bffd17 	ldw	r2,-12(fp)
 8018e6c:	10c00217 	ldw	r3,8(r2)
 8018e70:	e0bfff17 	ldw	r2,-4(fp)
 8018e74:	1887883a 	add	r3,r3,r2
 8018e78:	e0bffd17 	ldw	r2,-12(fp)
 8018e7c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 8018e80:	e0bffd17 	ldw	r2,-12(fp)
 8018e84:	10c00217 	ldw	r3,8(r2)
 8018e88:	d08a2117 	ldw	r2,10372(gp)
 8018e8c:	1880032e 	bgeu	r3,r2,8018e9c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 8018e90:	e0bffd17 	ldw	r2,-12(fp)
 8018e94:	00c00044 	movi	r3,1
 8018e98:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8018e9c:	e0bffe17 	ldw	r2,-8(fp)
 8018ea0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8018ea4:	e0fffd17 	ldw	r3,-12(fp)
 8018ea8:	d0a03704 	addi	r2,gp,-32548
 8018eac:	18bfcf1e 	bne	r3,r2,8018dec <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 8018eb0:	800ecd00 	call	800ecd0 <OSTimeTick>
}
 8018eb4:	e037883a 	mov	sp,fp
 8018eb8:	dfc00117 	ldw	ra,4(sp)
 8018ebc:	df000017 	ldw	fp,0(sp)
 8018ec0:	dec00204 	addi	sp,sp,8
 8018ec4:	f800283a 	ret

08018ec8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8018ec8:	deffff04 	addi	sp,sp,-4
 8018ecc:	df000015 	stw	fp,0(sp)
 8018ed0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8018ed4:	000170fa 	wrctl	ienable,zero
}
 8018ed8:	e037883a 	mov	sp,fp
 8018edc:	df000017 	ldw	fp,0(sp)
 8018ee0:	dec00104 	addi	sp,sp,4
 8018ee4:	f800283a 	ret

08018ee8 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 8018ee8:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 8018eec:	d0e00d17 	ldw	r3,-32716(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 8018ef0:	d10a1a17 	ldw	r4,10344(gp)

      stw ra,  0(sp)
 8018ef4:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 8018ef8:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 8018efc:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 8018f00:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 8018f04:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 8018f08:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 8018f0c:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 8018f10:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 8018f14:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 8018f18:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 8018f1c:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 8018f20:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 8018f24:	80191540 	call	8019154 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 8018f28:	d10a1517 	ldw	r4,10324(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 8018f2c:	d14a0d07 	ldb	r5,10292(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 8018f30:	d10a1a15 	stw	r4,10344(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 8018f34:	d14a0d45 	stb	r5,10293(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 8018f38:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 8018f3c:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 8018f40:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 8018f44:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 8018f48:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 8018f4c:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 8018f50:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 8018f54:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 8018f58:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 8018f5c:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 8018f60:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 8018f64:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 8018f68:	d0e00d15 	stw	r3,-32716(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 8018f6c:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 8018f70:	f800283a 	ret

08018f74 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 8018f74:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 8018f78:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 8018f7c:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 8018f80:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 8018f84:	80191540 	call	8019154 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 8018f88:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 8018f8c:	d48a0b45 	stb	r18,10285(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 8018f90:	003fe506 	br	8018f28 <OSCtxSw+0x40>

08018f94 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 8018f94:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 8018f98:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 8018f9c:	10800054 	ori	r2,r2,1
      wrctl status, r2
 8018fa0:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 8018fa4:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 8018fa8:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 8018fac:	dec00204 	addi	sp,sp,8

      callr r2
 8018fb0:	103ee83a 	callr	r2

      nop
 8018fb4:	0001883a 	nop

08018fb8 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 8018fb8:	defff704 	addi	sp,sp,-36
 8018fbc:	dfc00815 	stw	ra,32(sp)
 8018fc0:	df000715 	stw	fp,28(sp)
 8018fc4:	df000704 	addi	fp,sp,28
 8018fc8:	e13ffc15 	stw	r4,-16(fp)
 8018fcc:	e17ffd15 	stw	r5,-12(fp)
 8018fd0:	e1bffe15 	stw	r6,-8(fp)
 8018fd4:	3805883a 	mov	r2,r7
 8018fd8:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 8018fdc:	e0fffe17 	ldw	r3,-8(fp)
 8018fe0:	00bfff04 	movi	r2,-4
 8018fe4:	1884703a 	and	r2,r3,r2
 8018fe8:	10bef704 	addi	r2,r2,-1060
 8018fec:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 8018ff0:	e13ff917 	ldw	r4,-28(fp)
 8018ff4:	000b883a 	mov	r5,zero
 8018ff8:	01810904 	movi	r6,1060
 8018ffc:	8006b480 	call	8006b48 <memset>
 8019000:	e0bff917 	ldw	r2,-28(fp)
 8019004:	10c0bb04 	addi	r3,r2,748
 8019008:	e0bff917 	ldw	r2,-28(fp)
 801900c:	10c00115 	stw	r3,4(r2)
 8019010:	e0bff917 	ldw	r2,-28(fp)
 8019014:	10c0d504 	addi	r3,r2,852
 8019018:	e0bff917 	ldw	r2,-28(fp)
 801901c:	10c00215 	stw	r3,8(r2)
 8019020:	e0bff917 	ldw	r2,-28(fp)
 8019024:	10c0ef04 	addi	r3,r2,956
 8019028:	e0bff917 	ldw	r2,-28(fp)
 801902c:	10c00315 	stw	r3,12(r2)
 8019030:	e0fff917 	ldw	r3,-28(fp)
 8019034:	008200b4 	movhi	r2,2050
 8019038:	10a7a804 	addi	r2,r2,-24928
 801903c:	18800d15 	stw	r2,52(r3)
 8019040:	e0bff917 	ldw	r2,-28(fp)
 8019044:	00c00044 	movi	r3,1
 8019048:	10c02915 	stw	r3,164(r2)
 801904c:	10002a15 	stw	zero,168(r2)
 8019050:	e0bff917 	ldw	r2,-28(fp)
 8019054:	00ccc384 	movi	r3,13070
 8019058:	10c02b0d 	sth	r3,172(r2)
 801905c:	e0bff917 	ldw	r2,-28(fp)
 8019060:	00eaf344 	movi	r3,-21555
 8019064:	10c02b8d 	sth	r3,174(r2)
 8019068:	e0bff917 	ldw	r2,-28(fp)
 801906c:	00c48d04 	movi	r3,4660
 8019070:	10c02c0d 	sth	r3,176(r2)
 8019074:	e0bff917 	ldw	r2,-28(fp)
 8019078:	00f99b44 	movi	r3,-6547
 801907c:	10c02c8d 	sth	r3,178(r2)
 8019080:	e0bff917 	ldw	r2,-28(fp)
 8019084:	00f7bb04 	movi	r3,-8468
 8019088:	10c02d0d 	sth	r3,180(r2)
 801908c:	e0bff917 	ldw	r2,-28(fp)
 8019090:	00c00144 	movi	r3,5
 8019094:	10c02d8d 	sth	r3,182(r2)
 8019098:	e0bff917 	ldw	r2,-28(fp)
 801909c:	00c002c4 	movi	r3,11
 80190a0:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 80190a4:	e0bff917 	ldw	r2,-28(fp)
 80190a8:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 80190ac:	e0bffa17 	ldw	r2,-24(fp)
 80190b0:	10bff304 	addi	r2,r2,-52
 80190b4:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 80190b8:	e0bffb17 	ldw	r2,-20(fp)
 80190bc:	10800c04 	addi	r2,r2,48
 80190c0:	e0fffc17 	ldw	r3,-16(fp)
 80190c4:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 80190c8:	e0bffb17 	ldw	r2,-20(fp)
 80190cc:	10800b04 	addi	r2,r2,44
 80190d0:	e0fffd17 	ldw	r3,-12(fp)
 80190d4:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 80190d8:	e0bffb17 	ldw	r2,-20(fp)
 80190dc:	10800a04 	addi	r2,r2,40
 80190e0:	e0fff917 	ldw	r3,-28(fp)
 80190e4:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 80190e8:	008200b4 	movhi	r2,2050
 80190ec:	10a3e504 	addi	r2,r2,-28780
 80190f0:	10c00104 	addi	r3,r2,4
 80190f4:	e0bffb17 	ldw	r2,-20(fp)
 80190f8:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 80190fc:	e0bffb17 	ldw	r2,-20(fp)
}
 8019100:	e037883a 	mov	sp,fp
 8019104:	dfc00117 	ldw	ra,4(sp)
 8019108:	df000017 	ldw	fp,0(sp)
 801910c:	dec00204 	addi	sp,sp,8
 8019110:	f800283a 	ret

08019114 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 8019114:	defffe04 	addi	sp,sp,-8
 8019118:	df000115 	stw	fp,4(sp)
 801911c:	df000104 	addi	fp,sp,4
 8019120:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 8019124:	e037883a 	mov	sp,fp
 8019128:	df000017 	ldw	fp,0(sp)
 801912c:	dec00104 	addi	sp,sp,4
 8019130:	f800283a 	ret

08019134 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 8019134:	defffe04 	addi	sp,sp,-8
 8019138:	df000115 	stw	fp,4(sp)
 801913c:	df000104 	addi	fp,sp,4
 8019140:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 8019144:	e037883a 	mov	sp,fp
 8019148:	df000017 	ldw	fp,0(sp)
 801914c:	dec00104 	addi	sp,sp,4
 8019150:	f800283a 	ret

08019154 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 8019154:	deffff04 	addi	sp,sp,-4
 8019158:	df000015 	stw	fp,0(sp)
 801915c:	d839883a 	mov	fp,sp
}
 8019160:	e037883a 	mov	sp,fp
 8019164:	df000017 	ldw	fp,0(sp)
 8019168:	dec00104 	addi	sp,sp,4
 801916c:	f800283a 	ret

08019170 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 8019170:	deffff04 	addi	sp,sp,-4
 8019174:	df000015 	stw	fp,0(sp)
 8019178:	d839883a 	mov	fp,sp
}
 801917c:	e037883a 	mov	sp,fp
 8019180:	df000017 	ldw	fp,0(sp)
 8019184:	dec00104 	addi	sp,sp,4
 8019188:	f800283a 	ret

0801918c <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 801918c:	deffff04 	addi	sp,sp,-4
 8019190:	df000015 	stw	fp,0(sp)
 8019194:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 8019198:	e037883a 	mov	sp,fp
 801919c:	df000017 	ldw	fp,0(sp)
 80191a0:	dec00104 	addi	sp,sp,4
 80191a4:	f800283a 	ret

080191a8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 80191a8:	deffff04 	addi	sp,sp,-4
 80191ac:	df000015 	stw	fp,0(sp)
 80191b0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 80191b4:	e037883a 	mov	sp,fp
 80191b8:	df000017 	ldw	fp,0(sp)
 80191bc:	dec00104 	addi	sp,sp,4
 80191c0:	f800283a 	ret

080191c4 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 80191c4:	deffff04 	addi	sp,sp,-4
 80191c8:	df000015 	stw	fp,0(sp)
 80191cc:	d839883a 	mov	fp,sp
}
 80191d0:	e037883a 	mov	sp,fp
 80191d4:	df000017 	ldw	fp,0(sp)
 80191d8:	dec00104 	addi	sp,sp,4
 80191dc:	f800283a 	ret

080191e0 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 80191e0:	deffff04 	addi	sp,sp,-4
 80191e4:	df000015 	stw	fp,0(sp)
 80191e8:	d839883a 	mov	fp,sp
}
 80191ec:	e037883a 	mov	sp,fp
 80191f0:	df000017 	ldw	fp,0(sp)
 80191f4:	dec00104 	addi	sp,sp,4
 80191f8:	f800283a 	ret

080191fc <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 80191fc:	defffe04 	addi	sp,sp,-8
 8019200:	df000115 	stw	fp,4(sp)
 8019204:	df000104 	addi	fp,sp,4
 8019208:	e13fff15 	stw	r4,-4(fp)
}
 801920c:	e037883a 	mov	sp,fp
 8019210:	df000017 	ldw	fp,0(sp)
 8019214:	dec00104 	addi	sp,sp,4
 8019218:	f800283a 	ret

0801921c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 801921c:	defffb04 	addi	sp,sp,-20
 8019220:	dfc00415 	stw	ra,16(sp)
 8019224:	df000315 	stw	fp,12(sp)
 8019228:	df000304 	addi	fp,sp,12
 801922c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8019230:	008200b4 	movhi	r2,2050
 8019234:	10913e04 	addi	r2,r2,17656
 8019238:	10800017 	ldw	r2,0(r2)
 801923c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8019240:	00003106 	br	8019308 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 8019244:	e0bffd17 	ldw	r2,-12(fp)
 8019248:	10800217 	ldw	r2,8(r2)
 801924c:	1009883a 	mov	r4,r2
 8019250:	80019600 	call	8001960 <strlen>
 8019254:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8019258:	e0bffd17 	ldw	r2,-12(fp)
 801925c:	10c00217 	ldw	r3,8(r2)
 8019260:	e0bffe17 	ldw	r2,-8(fp)
 8019264:	10bfffc4 	addi	r2,r2,-1
 8019268:	1885883a 	add	r2,r3,r2
 801926c:	10800003 	ldbu	r2,0(r2)
 8019270:	10803fcc 	andi	r2,r2,255
 8019274:	1080201c 	xori	r2,r2,128
 8019278:	10bfe004 	addi	r2,r2,-128
 801927c:	10800bd8 	cmpnei	r2,r2,47
 8019280:	1000031e 	bne	r2,zero,8019290 <alt_find_file+0x74>
    {
      len -= 1;
 8019284:	e0bffe17 	ldw	r2,-8(fp)
 8019288:	10bfffc4 	addi	r2,r2,-1
 801928c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8019290:	e0bffe17 	ldw	r2,-8(fp)
 8019294:	e0ffff17 	ldw	r3,-4(fp)
 8019298:	1885883a 	add	r2,r3,r2
 801929c:	10800003 	ldbu	r2,0(r2)
 80192a0:	10803fcc 	andi	r2,r2,255
 80192a4:	1080201c 	xori	r2,r2,128
 80192a8:	10bfe004 	addi	r2,r2,-128
 80192ac:	10800be0 	cmpeqi	r2,r2,47
 80192b0:	1000081e 	bne	r2,zero,80192d4 <alt_find_file+0xb8>
 80192b4:	e0bffe17 	ldw	r2,-8(fp)
 80192b8:	e0ffff17 	ldw	r3,-4(fp)
 80192bc:	1885883a 	add	r2,r3,r2
 80192c0:	10800003 	ldbu	r2,0(r2)
 80192c4:	10803fcc 	andi	r2,r2,255
 80192c8:	1080201c 	xori	r2,r2,128
 80192cc:	10bfe004 	addi	r2,r2,-128
 80192d0:	10000a1e 	bne	r2,zero,80192fc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 80192d4:	e0bffd17 	ldw	r2,-12(fp)
 80192d8:	10c00217 	ldw	r3,8(r2)
 80192dc:	e0bffe17 	ldw	r2,-8(fp)
 80192e0:	1809883a 	mov	r4,r3
 80192e4:	e17fff17 	ldw	r5,-4(fp)
 80192e8:	100d883a 	mov	r6,r2
 80192ec:	80195a00 	call	80195a0 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80192f0:	1000021e 	bne	r2,zero,80192fc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 80192f4:	e0bffd17 	ldw	r2,-12(fp)
 80192f8:	00000806 	br	801931c <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 80192fc:	e0bffd17 	ldw	r2,-12(fp)
 8019300:	10800017 	ldw	r2,0(r2)
 8019304:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8019308:	e0fffd17 	ldw	r3,-12(fp)
 801930c:	008200b4 	movhi	r2,2050
 8019310:	10913e04 	addi	r2,r2,17656
 8019314:	18bfcb1e 	bne	r3,r2,8019244 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8019318:	0005883a 	mov	r2,zero
}
 801931c:	e037883a 	mov	sp,fp
 8019320:	dfc00117 	ldw	ra,4(sp)
 8019324:	df000017 	ldw	fp,0(sp)
 8019328:	dec00204 	addi	sp,sp,8
 801932c:	f800283a 	ret

08019330 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8019330:	defff904 	addi	sp,sp,-28
 8019334:	dfc00615 	stw	ra,24(sp)
 8019338:	df000515 	stw	fp,20(sp)
 801933c:	df000504 	addi	fp,sp,20
 8019340:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8019344:	00bffa04 	movi	r2,-24
 8019348:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 801934c:	008200f4 	movhi	r2,2051
 8019350:	10bb3104 	addi	r2,r2,-4924
 8019354:	10800017 	ldw	r2,0(r2)
 8019358:	e0bffd15 	stw	r2,-12(fp)
 801935c:	e03ffe0d 	sth	zero,-8(fp)
 8019360:	e0fffe0b 	ldhu	r3,-8(fp)
 8019364:	e0bffe84 	addi	r2,fp,-6
 8019368:	e13ffd17 	ldw	r4,-12(fp)
 801936c:	180b883a 	mov	r5,r3
 8019370:	100d883a 	mov	r6,r2
 8019374:	801375c0 	call	801375c <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8019378:	e03ffb15 	stw	zero,-20(fp)
 801937c:	00001d06 	br	80193f4 <alt_get_fd+0xc4>
  {
    if (!alt_fd_list[i].dev)
 8019380:	008200b4 	movhi	r2,2050
 8019384:	108c8604 	addi	r2,r2,12824
 8019388:	e0fffb17 	ldw	r3,-20(fp)
 801938c:	18c00324 	muli	r3,r3,12
 8019390:	10c5883a 	add	r2,r2,r3
 8019394:	10800017 	ldw	r2,0(r2)
 8019398:	1000131e 	bne	r2,zero,80193e8 <alt_get_fd+0xb8>
    {
      alt_fd_list[i].dev = dev;
 801939c:	008200b4 	movhi	r2,2050
 80193a0:	108c8604 	addi	r2,r2,12824
 80193a4:	e0fffb17 	ldw	r3,-20(fp)
 80193a8:	18c00324 	muli	r3,r3,12
 80193ac:	10c5883a 	add	r2,r2,r3
 80193b0:	e0ffff17 	ldw	r3,-4(fp)
 80193b4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80193b8:	008200b4 	movhi	r2,2050
 80193bc:	10914204 	addi	r2,r2,17672
 80193c0:	10c00017 	ldw	r3,0(r2)
 80193c4:	e0bffb17 	ldw	r2,-20(fp)
 80193c8:	1880040e 	bge	r3,r2,80193dc <alt_get_fd+0xac>
      {
        alt_max_fd = i;
 80193cc:	008200b4 	movhi	r2,2050
 80193d0:	10914204 	addi	r2,r2,17672
 80193d4:	e0fffb17 	ldw	r3,-20(fp)
 80193d8:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 80193dc:	e0bffb17 	ldw	r2,-20(fp)
 80193e0:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 80193e4:	00000606 	br	8019400 <alt_get_fd+0xd0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80193e8:	e0bffb17 	ldw	r2,-20(fp)
 80193ec:	10800044 	addi	r2,r2,1
 80193f0:	e0bffb15 	stw	r2,-20(fp)
 80193f4:	e0bffb17 	ldw	r2,-20(fp)
 80193f8:	10800810 	cmplti	r2,r2,32
 80193fc:	103fe01e 	bne	r2,zero,8019380 <alt_get_fd+0x50>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 8019400:	008200f4 	movhi	r2,2051
 8019404:	10bb3104 	addi	r2,r2,-4924
 8019408:	10800017 	ldw	r2,0(r2)
 801940c:	1009883a 	mov	r4,r2
 8019410:	8013b300 	call	8013b30 <OSSemPost>

  return rc;
 8019414:	e0bffc17 	ldw	r2,-16(fp)
}
 8019418:	e037883a 	mov	sp,fp
 801941c:	dfc00117 	ldw	ra,4(sp)
 8019420:	df000017 	ldw	fp,0(sp)
 8019424:	dec00204 	addi	sp,sp,8
 8019428:	f800283a 	ret

0801942c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 801942c:	defffb04 	addi	sp,sp,-20
 8019430:	df000415 	stw	fp,16(sp)
 8019434:	df000404 	addi	fp,sp,16
 8019438:	e13ffe15 	stw	r4,-8(fp)
 801943c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 8019440:	e0bfff17 	ldw	r2,-4(fp)
 8019444:	10840070 	cmpltui	r2,r2,4097
 8019448:	1000021e 	bne	r2,zero,8019454 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 801944c:	00840004 	movi	r2,4096
 8019450:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8019454:	e0fffe17 	ldw	r3,-8(fp)
 8019458:	e0bfff17 	ldw	r2,-4(fp)
 801945c:	1885883a 	add	r2,r3,r2
 8019460:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8019464:	e0bffe17 	ldw	r2,-8(fp)
 8019468:	e0bffc15 	stw	r2,-16(fp)
 801946c:	00000506 	br	8019484 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8019470:	e0bffc17 	ldw	r2,-16(fp)
 8019474:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8019478:	e0bffc17 	ldw	r2,-16(fp)
 801947c:	10800804 	addi	r2,r2,32
 8019480:	e0bffc15 	stw	r2,-16(fp)
 8019484:	e0fffc17 	ldw	r3,-16(fp)
 8019488:	e0bffd17 	ldw	r2,-12(fp)
 801948c:	18bff836 	bltu	r3,r2,8019470 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8019490:	e0bffe17 	ldw	r2,-8(fp)
 8019494:	108007cc 	andi	r2,r2,31
 8019498:	10000226 	beq	r2,zero,80194a4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 801949c:	e0bffc17 	ldw	r2,-16(fp)
 80194a0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 80194a4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 80194a8:	e037883a 	mov	sp,fp
 80194ac:	df000017 	ldw	fp,0(sp)
 80194b0:	dec00104 	addi	sp,sp,4
 80194b4:	f800283a 	ret

080194b8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 80194b8:	defffe04 	addi	sp,sp,-8
 80194bc:	df000115 	stw	fp,4(sp)
 80194c0:	df000104 	addi	fp,sp,4
 80194c4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 80194c8:	e0bfff17 	ldw	r2,-4(fp)
 80194cc:	10bffe84 	addi	r2,r2,-6
 80194d0:	10c00428 	cmpgeui	r3,r2,16
 80194d4:	18001a1e 	bne	r3,zero,8019540 <alt_exception_cause_generated_bad_addr+0x88>
 80194d8:	100690ba 	slli	r3,r2,2
 80194dc:	008200b4 	movhi	r2,2050
 80194e0:	10a53c04 	addi	r2,r2,-27408
 80194e4:	1885883a 	add	r2,r3,r2
 80194e8:	10800017 	ldw	r2,0(r2)
 80194ec:	1000683a 	jmp	r2
 80194f0:	08019530 	cmpltui	zero,at,1620
 80194f4:	08019530 	cmpltui	zero,at,1620
 80194f8:	08019540 	call	801954 <OSCtxSw_SWITCH_PC+0x801914>
 80194fc:	08019540 	call	801954 <OSCtxSw_SWITCH_PC+0x801914>
 8019500:	08019540 	call	801954 <OSCtxSw_SWITCH_PC+0x801914>
 8019504:	08019530 	cmpltui	zero,at,1620
 8019508:	08019538 	rdprs	zero,at,1620
 801950c:	08019540 	call	801954 <OSCtxSw_SWITCH_PC+0x801914>
 8019510:	08019530 	cmpltui	zero,at,1620
 8019514:	08019530 	cmpltui	zero,at,1620
 8019518:	08019540 	call	801954 <OSCtxSw_SWITCH_PC+0x801914>
 801951c:	08019530 	cmpltui	zero,at,1620
 8019520:	08019538 	rdprs	zero,at,1620
 8019524:	08019540 	call	801954 <OSCtxSw_SWITCH_PC+0x801914>
 8019528:	08019540 	call	801954 <OSCtxSw_SWITCH_PC+0x801914>
 801952c:	08019530 	cmpltui	zero,at,1620
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8019530:	00800044 	movi	r2,1
 8019534:	00000306 	br	8019544 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8019538:	0005883a 	mov	r2,zero
 801953c:	00000106 	br	8019544 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8019540:	0005883a 	mov	r2,zero
  }
}
 8019544:	e037883a 	mov	sp,fp
 8019548:	df000017 	ldw	fp,0(sp)
 801954c:	dec00104 	addi	sp,sp,4
 8019550:	f800283a 	ret

08019554 <atexit>:
 8019554:	200b883a 	mov	r5,r4
 8019558:	000d883a 	mov	r6,zero
 801955c:	0009883a 	mov	r4,zero
 8019560:	000f883a 	mov	r7,zero
 8019564:	801961c1 	jmpi	801961c <__register_exitproc>

08019568 <exit>:
 8019568:	defffe04 	addi	sp,sp,-8
 801956c:	000b883a 	mov	r5,zero
 8019570:	dc000015 	stw	r16,0(sp)
 8019574:	dfc00115 	stw	ra,4(sp)
 8019578:	2021883a 	mov	r16,r4
 801957c:	80197300 	call	8019730 <__call_exitprocs>
 8019580:	008200b4 	movhi	r2,2050
 8019584:	10913a04 	addi	r2,r2,17640
 8019588:	11000017 	ldw	r4,0(r2)
 801958c:	20800f17 	ldw	r2,60(r4)
 8019590:	10000126 	beq	r2,zero,8019598 <exit+0x30>
 8019594:	103ee83a 	callr	r2
 8019598:	8009883a 	mov	r4,r16
 801959c:	80198c40 	call	80198c4 <_exit>

080195a0 <memcmp>:
 80195a0:	01c000c4 	movi	r7,3
 80195a4:	3980192e 	bgeu	r7,r6,801960c <memcmp+0x6c>
 80195a8:	2144b03a 	or	r2,r4,r5
 80195ac:	11c4703a 	and	r2,r2,r7
 80195b0:	10000f26 	beq	r2,zero,80195f0 <memcmp+0x50>
 80195b4:	20800003 	ldbu	r2,0(r4)
 80195b8:	28c00003 	ldbu	r3,0(r5)
 80195bc:	10c0151e 	bne	r2,r3,8019614 <memcmp+0x74>
 80195c0:	31bfff84 	addi	r6,r6,-2
 80195c4:	01ffffc4 	movi	r7,-1
 80195c8:	00000406 	br	80195dc <memcmp+0x3c>
 80195cc:	20800003 	ldbu	r2,0(r4)
 80195d0:	28c00003 	ldbu	r3,0(r5)
 80195d4:	31bfffc4 	addi	r6,r6,-1
 80195d8:	10c00e1e 	bne	r2,r3,8019614 <memcmp+0x74>
 80195dc:	21000044 	addi	r4,r4,1
 80195e0:	29400044 	addi	r5,r5,1
 80195e4:	31fff91e 	bne	r6,r7,80195cc <memcmp+0x2c>
 80195e8:	0005883a 	mov	r2,zero
 80195ec:	f800283a 	ret
 80195f0:	20c00017 	ldw	r3,0(r4)
 80195f4:	28800017 	ldw	r2,0(r5)
 80195f8:	1880041e 	bne	r3,r2,801960c <memcmp+0x6c>
 80195fc:	31bfff04 	addi	r6,r6,-4
 8019600:	21000104 	addi	r4,r4,4
 8019604:	29400104 	addi	r5,r5,4
 8019608:	39bff936 	bltu	r7,r6,80195f0 <memcmp+0x50>
 801960c:	303fe91e 	bne	r6,zero,80195b4 <memcmp+0x14>
 8019610:	003ff506 	br	80195e8 <memcmp+0x48>
 8019614:	10c5c83a 	sub	r2,r2,r3
 8019618:	f800283a 	ret

0801961c <__register_exitproc>:
 801961c:	008200b4 	movhi	r2,2050
 8019620:	defffa04 	addi	sp,sp,-24
 8019624:	10913a04 	addi	r2,r2,17640
 8019628:	dc000315 	stw	r16,12(sp)
 801962c:	14000017 	ldw	r16,0(r2)
 8019630:	dc400415 	stw	r17,16(sp)
 8019634:	dfc00515 	stw	ra,20(sp)
 8019638:	80805217 	ldw	r2,328(r16)
 801963c:	2023883a 	mov	r17,r4
 8019640:	10003626 	beq	r2,zero,801971c <__register_exitproc+0x100>
 8019644:	10c00117 	ldw	r3,4(r2)
 8019648:	010007c4 	movi	r4,31
 801964c:	20c00e16 	blt	r4,r3,8019688 <__register_exitproc+0x6c>
 8019650:	1a400044 	addi	r9,r3,1
 8019654:	8800211e 	bne	r17,zero,80196dc <__register_exitproc+0xc0>
 8019658:	18c00084 	addi	r3,r3,2
 801965c:	18c7883a 	add	r3,r3,r3
 8019660:	18c7883a 	add	r3,r3,r3
 8019664:	12400115 	stw	r9,4(r2)
 8019668:	10c7883a 	add	r3,r2,r3
 801966c:	19400015 	stw	r5,0(r3)
 8019670:	0005883a 	mov	r2,zero
 8019674:	dfc00517 	ldw	ra,20(sp)
 8019678:	dc400417 	ldw	r17,16(sp)
 801967c:	dc000317 	ldw	r16,12(sp)
 8019680:	dec00604 	addi	sp,sp,24
 8019684:	f800283a 	ret
 8019688:	00820034 	movhi	r2,2048
 801968c:	1083dd04 	addi	r2,r2,3956
 8019690:	10002526 	beq	r2,zero,8019728 <__register_exitproc+0x10c>
 8019694:	01006404 	movi	r4,400
 8019698:	d9400015 	stw	r5,0(sp)
 801969c:	d9800115 	stw	r6,4(sp)
 80196a0:	d9c00215 	stw	r7,8(sp)
 80196a4:	8000f740 	call	8000f74 <malloc>
 80196a8:	d9400017 	ldw	r5,0(sp)
 80196ac:	d9800117 	ldw	r6,4(sp)
 80196b0:	d9c00217 	ldw	r7,8(sp)
 80196b4:	10001c26 	beq	r2,zero,8019728 <__register_exitproc+0x10c>
 80196b8:	80c05217 	ldw	r3,328(r16)
 80196bc:	10000115 	stw	zero,4(r2)
 80196c0:	02400044 	movi	r9,1
 80196c4:	10c00015 	stw	r3,0(r2)
 80196c8:	80805215 	stw	r2,328(r16)
 80196cc:	10006215 	stw	zero,392(r2)
 80196d0:	10006315 	stw	zero,396(r2)
 80196d4:	0007883a 	mov	r3,zero
 80196d8:	883fdf26 	beq	r17,zero,8019658 <__register_exitproc+0x3c>
 80196dc:	18d1883a 	add	r8,r3,r3
 80196e0:	4211883a 	add	r8,r8,r8
 80196e4:	1211883a 	add	r8,r2,r8
 80196e8:	41802215 	stw	r6,136(r8)
 80196ec:	01000044 	movi	r4,1
 80196f0:	11806217 	ldw	r6,392(r2)
 80196f4:	20c8983a 	sll	r4,r4,r3
 80196f8:	310cb03a 	or	r6,r6,r4
 80196fc:	11806215 	stw	r6,392(r2)
 8019700:	41c04215 	stw	r7,264(r8)
 8019704:	01800084 	movi	r6,2
 8019708:	89bfd31e 	bne	r17,r6,8019658 <__register_exitproc+0x3c>
 801970c:	11806317 	ldw	r6,396(r2)
 8019710:	3108b03a 	or	r4,r6,r4
 8019714:	11006315 	stw	r4,396(r2)
 8019718:	003fcf06 	br	8019658 <__register_exitproc+0x3c>
 801971c:	80805304 	addi	r2,r16,332
 8019720:	80805215 	stw	r2,328(r16)
 8019724:	003fc706 	br	8019644 <__register_exitproc+0x28>
 8019728:	00bfffc4 	movi	r2,-1
 801972c:	003fd106 	br	8019674 <__register_exitproc+0x58>

08019730 <__call_exitprocs>:
 8019730:	008200b4 	movhi	r2,2050
 8019734:	10913a04 	addi	r2,r2,17640
 8019738:	10800017 	ldw	r2,0(r2)
 801973c:	defff404 	addi	sp,sp,-48
 8019740:	dd800815 	stw	r22,32(sp)
 8019744:	d8800015 	stw	r2,0(sp)
 8019748:	10805204 	addi	r2,r2,328
 801974c:	dd000615 	stw	r20,24(sp)
 8019750:	dc800415 	stw	r18,16(sp)
 8019754:	dfc00b15 	stw	ra,44(sp)
 8019758:	df000a15 	stw	fp,40(sp)
 801975c:	ddc00915 	stw	r23,36(sp)
 8019760:	dd400715 	stw	r21,28(sp)
 8019764:	dcc00515 	stw	r19,20(sp)
 8019768:	dc400315 	stw	r17,12(sp)
 801976c:	dc000215 	stw	r16,8(sp)
 8019770:	2025883a 	mov	r18,r4
 8019774:	2829883a 	mov	r20,r5
 8019778:	d8800115 	stw	r2,4(sp)
 801977c:	05bfffc4 	movi	r22,-1
 8019780:	d8800017 	ldw	r2,0(sp)
 8019784:	14c05217 	ldw	r19,328(r2)
 8019788:	98001d26 	beq	r19,zero,8019800 <__call_exitprocs+0xd0>
 801978c:	dd400117 	ldw	r21,4(sp)
 8019790:	98800117 	ldw	r2,4(r19)
 8019794:	173fffc4 	addi	fp,r2,-1
 8019798:	e0000d16 	blt	fp,zero,80197d0 <__call_exitprocs+0xa0>
 801979c:	14000044 	addi	r16,r2,1
 80197a0:	8421883a 	add	r16,r16,r16
 80197a4:	8421883a 	add	r16,r16,r16
 80197a8:	84402004 	addi	r17,r16,128
 80197ac:	9c63883a 	add	r17,r19,r17
 80197b0:	9c21883a 	add	r16,r19,r16
 80197b4:	a0001e26 	beq	r20,zero,8019830 <__call_exitprocs+0x100>
 80197b8:	80804017 	ldw	r2,256(r16)
 80197bc:	15001c26 	beq	r2,r20,8019830 <__call_exitprocs+0x100>
 80197c0:	e73fffc4 	addi	fp,fp,-1
 80197c4:	843fff04 	addi	r16,r16,-4
 80197c8:	8c7fff04 	addi	r17,r17,-4
 80197cc:	e5bff91e 	bne	fp,r22,80197b4 <__call_exitprocs+0x84>
 80197d0:	00820034 	movhi	r2,2048
 80197d4:	1083e204 	addi	r2,r2,3976
 80197d8:	10000926 	beq	r2,zero,8019800 <__call_exitprocs+0xd0>
 80197dc:	98800117 	ldw	r2,4(r19)
 80197e0:	1000311e 	bne	r2,zero,80198a8 <__call_exitprocs+0x178>
 80197e4:	98800017 	ldw	r2,0(r19)
 80197e8:	10003426 	beq	r2,zero,80198bc <__call_exitprocs+0x18c>
 80197ec:	9809883a 	mov	r4,r19
 80197f0:	a8800015 	stw	r2,0(r21)
 80197f4:	8000f880 	call	8000f88 <free>
 80197f8:	acc00017 	ldw	r19,0(r21)
 80197fc:	983fe41e 	bne	r19,zero,8019790 <__call_exitprocs+0x60>
 8019800:	dfc00b17 	ldw	ra,44(sp)
 8019804:	df000a17 	ldw	fp,40(sp)
 8019808:	ddc00917 	ldw	r23,36(sp)
 801980c:	dd800817 	ldw	r22,32(sp)
 8019810:	dd400717 	ldw	r21,28(sp)
 8019814:	dd000617 	ldw	r20,24(sp)
 8019818:	dcc00517 	ldw	r19,20(sp)
 801981c:	dc800417 	ldw	r18,16(sp)
 8019820:	dc400317 	ldw	r17,12(sp)
 8019824:	dc000217 	ldw	r16,8(sp)
 8019828:	dec00c04 	addi	sp,sp,48
 801982c:	f800283a 	ret
 8019830:	98800117 	ldw	r2,4(r19)
 8019834:	80c00017 	ldw	r3,0(r16)
 8019838:	10bfffc4 	addi	r2,r2,-1
 801983c:	17001526 	beq	r2,fp,8019894 <__call_exitprocs+0x164>
 8019840:	80000015 	stw	zero,0(r16)
 8019844:	183fde26 	beq	r3,zero,80197c0 <__call_exitprocs+0x90>
 8019848:	00800044 	movi	r2,1
 801984c:	1708983a 	sll	r4,r2,fp
 8019850:	98806217 	ldw	r2,392(r19)
 8019854:	9dc00117 	ldw	r23,4(r19)
 8019858:	2084703a 	and	r2,r4,r2
 801985c:	1000061e 	bne	r2,zero,8019878 <__call_exitprocs+0x148>
 8019860:	183ee83a 	callr	r3
 8019864:	98800117 	ldw	r2,4(r19)
 8019868:	15ffc51e 	bne	r2,r23,8019780 <__call_exitprocs+0x50>
 801986c:	a8800017 	ldw	r2,0(r21)
 8019870:	14ffd326 	beq	r2,r19,80197c0 <__call_exitprocs+0x90>
 8019874:	003fc206 	br	8019780 <__call_exitprocs+0x50>
 8019878:	98806317 	ldw	r2,396(r19)
 801987c:	2084703a 	and	r2,r4,r2
 8019880:	1000061e 	bne	r2,zero,801989c <__call_exitprocs+0x16c>
 8019884:	89400017 	ldw	r5,0(r17)
 8019888:	9009883a 	mov	r4,r18
 801988c:	183ee83a 	callr	r3
 8019890:	003ff406 	br	8019864 <__call_exitprocs+0x134>
 8019894:	9f000115 	stw	fp,4(r19)
 8019898:	003fea06 	br	8019844 <__call_exitprocs+0x114>
 801989c:	89000017 	ldw	r4,0(r17)
 80198a0:	183ee83a 	callr	r3
 80198a4:	003fef06 	br	8019864 <__call_exitprocs+0x134>
 80198a8:	98800017 	ldw	r2,0(r19)
 80198ac:	982b883a 	mov	r21,r19
 80198b0:	1027883a 	mov	r19,r2
 80198b4:	983fb61e 	bne	r19,zero,8019790 <__call_exitprocs+0x60>
 80198b8:	003fd106 	br	8019800 <__call_exitprocs+0xd0>
 80198bc:	0005883a 	mov	r2,zero
 80198c0:	003ffa06 	br	80198ac <__call_exitprocs+0x17c>

080198c4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80198c4:	defffd04 	addi	sp,sp,-12
 80198c8:	df000215 	stw	fp,8(sp)
 80198cc:	df000204 	addi	fp,sp,8
 80198d0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80198d4:	008200f4 	movhi	r2,2051
 80198d8:	10bb3944 	addi	r2,r2,-4891
 80198dc:	10000005 	stb	zero,0(r2)
 80198e0:	e0bfff17 	ldw	r2,-4(fp)
 80198e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80198e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80198ec:	10000226 	beq	r2,zero,80198f8 <_exit+0x34>
    ALT_SIM_FAIL();
 80198f0:	002af070 	cmpltui	zero,zero,43969
 80198f4:	00000106 	br	80198fc <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 80198f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80198fc:	003fff06 	br	80198fc <_exit+0x38>
