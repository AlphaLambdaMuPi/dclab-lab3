
nios_test.elf:     file format elf32-littlenios2
nios_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x000063d0 memsz 0x000063d0 flags r-x
    LOAD off    0x000073f0 vaddr 0x000263f0 paddr 0x00027ebc align 2**12
         filesz 0x00001acc memsz 0x00001acc flags rw-
    LOAD off    0x00009988 vaddr 0x00029988 paddr 0x00029988 align 2**12
         filesz 0x00000000 memsz 0x0000bcd8 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000060ec  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c0  00026330  00026330  00007330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001acc  000263f0  00027ebc  000073f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000bcd8  00029988  00029988  00009988  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2 00000000  00035660  00035660  00008ebc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00008ebc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ac0  00000000  00000000  00008ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00018b44  00000000  00000000  000099a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000067e3  00000000  00000000  000224e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000731c  00000000  00000000  00028cc7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001898  00000000  00000000  0002ffe4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002a21  00000000  00000000  0003187c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00004b32  00000000  00000000  0003429d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00038dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000650  00000000  00000000  00038e00  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0003bde7  2**0
                  CONTENTS, READONLY
 18 .cpu          00000009  00000000  00000000  0003bdea  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0003bdf3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0003bdf4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  0003bdf5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  0003bdf9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  0003bdfd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  0003be01  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  0003be0a  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  0003be13  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000004  00000000  00000000  0003be1c  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000024  00000000  00000000  0003be20  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     0003ff15  00000000  00000000  0003be44  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00026330 l    d  .rodata	00000000 .rodata
000263f0 l    d  .rwdata	00000000 .rwdata
00029988 l    d  .bss	00000000 .bss
00035660 l    d  .onchip_memory2	00000000 .onchip_memory2
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios_test_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
000263f0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00021e88 l     F .text	00000008 __fp_lock
00021e90 l     F .text	00000008 __fp_unlock
00021ea4 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00022ef4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 alt_close.c
00023020 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00023140 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002316c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0002326c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
00023360 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
00023444 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0002388c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00027eac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00023ae8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00023c30 l     F .text	00000038 alt_dev_reg
00026dc4 l     O .rwdata	00001060 jtag_uart
00027e24 l     O .rwdata	00000030 audio_and_video_config
00027e54 l     O .rwdata	00000030 audio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00023f18 l     F .text	00000208 altera_avalon_jtag_uart_irq
00024120 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_audio.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00025058 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000252c4 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000255ac l     F .text	00000050 alt_get_errno
000255fc l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000299b4 g     O .bss	00000004 alt_instruction_exception_handler
00022de8 g     F .text	00000054 _isatty_r
00023568 g     F .text	00000078 alt_main
000203ac g     F .text	000000a8 _puts_r
00035560 g     O .bss	00000100 alt_irq
00022e3c g     F .text	0000005c _lseek_r
00027ebc g       *ABS*	00000000 __flash_rwdata_start
000249d8 g     F .text	00000060 alt_up_audio_read_fifo_avail
00035660 g       *ABS*	00000000 __alt_heap_start
00024a38 g     F .text	00000068 alt_up_audio_record_r
00022b78 g     F .text	0000005c __sseek
000221d8 g     F .text	00000010 __sinit
00025f00 g     F .text	00000138 __swbuf_r
00022040 g     F .text	00000068 __sfmoreglue
00023600 g     F .text	00000020 __malloc_unlock
00024948 g     F .text	00000090 alt_up_audio_reset_audio_core
00021388 g     F .text	0000015c memmove
000221c0 g     F .text	00000018 _cleanup
000259bc g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022d90 g     F .text	00000058 _fstat_r
00029998 g     O .bss	00000004 errno
00022af4 g     F .text	00000008 __seofread
00024908 g     F .text	00000040 alt_up_audio_write_interrupt_pending
000299a0 g     O .bss	00000004 alt_argv
0002fe84 g       *ABS*	00000000 _gp
00026c44 g     O .rwdata	00000180 alt_fd_list
00025204 g     F .text	00000090 alt_find_dev
00021250 g     F .text	00000138 memcpy
00021e98 g     F .text	0000000c _cleanup_r
00025384 g     F .text	00000078 alt_io_redirect
00026330 g       *ABS*	00000000 __DTOR_END__
00020454 g     F .text	00000014 puts
00025c30 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00024e20 g     F .text	00000050 alt_up_audio_read_fifo_head
0002431c g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00023010 g     F .text	00000008 .hidden __udivsi3
000232bc g     F .text	000000a4 isatty
00025ba4 g     F .text	0000008c alt_icache_flush
00029994 g     O .bss	00000004 __malloc_top_pad
000299e0 g     O .bss	0000bb80 buff
00020500 g     F .text	000004c0 __sfvwrite_r
00021a4c g     F .text	00000054 _sbrk_r
00022e98 g     F .text	0000005c _read_r
00027ea4 g     O .rwdata	00000004 alt_max_fd
00024e70 g     F .text	00000064 alt_up_audio_write_fifo_head
00022c8c g     F .text	000000f0 _fclose_r
00021e58 g     F .text	00000030 fflush
00029990 g     O .bss	00000004 __malloc_max_sbrked_mem
000253fc g     F .text	000001b0 alt_irq_register
00023494 g     F .text	000000d4 lseek
00027e84 g     O .rwdata	00000004 _global_impure_ptr
000214e4 g     F .text	00000568 _realloc_r
00035660 g       *ABS*	00000000 __bss_end
000258b8 g     F .text	00000104 alt_tick
00024740 g     F .text	00000040 alt_up_audio_open_dev
000221f8 g     F .text	00000018 __fp_lock_all
00024b68 g     F .text	00000068 alt_up_audio_play_r
00025820 g     F .text	00000098 alt_alarm_stop
000299a8 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00026c1c g     O .rwdata	00000028 alt_dev_null
00025014 g     F .text	00000044 alt_dcache_flush_all
00027ebc g       *ABS*	00000000 __ram_rwdata_end
00027e9c g     O .rwdata	00000008 alt_dev_list
00023b38 g     F .text	000000f8 write
00025d94 g     F .text	000000a0 _putc_r
000263f0 g       *ABS*	00000000 __ram_rodata_end
000231bc g     F .text	000000b0 fstat
00023018 g     F .text	00000008 .hidden __umodsi3
00035660 g       *ABS*	00000000 end
00023e60 g     F .text	000000b8 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00026330 g       *ABS*	00000000 __CTOR_LIST__
00039000 g       *ABS*	00000000 __alt_stack_pointer
00024528 g     F .text	00000218 altera_avalon_jtag_uart_write
000221e8 g     F .text	00000004 __sfp_lock_acquire
00021168 g     F .text	000000e8 memchr
0002234c g     F .text	000002f0 _free_r
00023620 g     F .text	00000228 alt_printf
00026168 g     F .text	00000194 __call_exitprocs
00027e8c g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
000299ac g     O .bss	00000004 _alt_tick_rate
00024d18 g     F .text	00000108 alt_up_audio_write_fifo
000299b0 g     O .bss	00000004 _alt_nticks
000238dc g     F .text	000000fc read
00023c9c g     F .text	00000060 alt_sys_init
00024c38 g     F .text	000000e0 alt_up_audio_read_fifo
00026054 g     F .text	00000114 __register_exitproc
00024874 g     F .text	00000054 alt_up_audio_disable_write_interrupt
000241c8 g     F .text	00000068 altera_avalon_jtag_uart_close
000263f0 g       *ABS*	00000000 __ram_rwdata_start
00026330 g       *ABS*	00000000 __ram_rodata_start
000299b8 g     O .bss	00000028 __malloc_current_mallinfo
00023cfc g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00025af0 g     F .text	000000b4 alt_get_fd
00022c38 g     F .text	00000054 _close_r
00024824 g     F .text	00000050 alt_up_audio_enable_write_interrupt
00025d18 g     F .text	0000007c memcmp
00023dbc g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00035660 g       *ABS*	00000000 __alt_stack_base
00023e0c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00021aa0 g     F .text	00000154 __swsetup_r
000247d0 g     F .text	00000054 alt_up_audio_disable_read_interrupt
000220a8 g     F .text	00000118 __sfp
00026814 g     O .rwdata	00000408 __malloc_av_
000221f4 g     F .text	00000004 __sinit_lock_release
00022aa0 g     F .text	00000054 __sread
000259dc g     F .text	00000114 alt_find_file
000250a8 g     F .text	000000a4 alt_dev_llist_insert
000235e0 g     F .text	00000020 __malloc_lock
00023a38 g     F .text	000000b0 sbrk
00021dfc g     F .text	0000005c _fflush_r
00029988 g       *ABS*	00000000 __bss_start
0002297c g     F .text	00000124 memset
00020290 g     F .text	0000011c main
00024b08 g     F .text	00000060 alt_up_audio_write_fifo_space
000299a4 g     O .bss	00000004 alt_envp
0002998c g     O .bss	00000004 __malloc_max_total_mem
00023d5c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00026038 g     F .text	0000001c __swbuf
00029988 g     O .bss	00000004 bid
00022bd4 g     F .text	00000008 __sclose
00039000 g       *ABS*	00000000 __alt_heap_limit
00022d7c g     F .text	00000014 fclose
000209c0 g     F .text	000007a8 _malloc_r
00027ea8 g     O .rwdata	00000004 alt_errno
0002263c g     F .text	000000c4 _fwalk
00025e34 g     F .text	000000cc putc
00022f60 g     F .text	00000054 .hidden __divsi3
00022228 g     F .text	00000124 _malloc_trim_r
00026330 g       *ABS*	00000000 __CTOR_END__
00026330 g       *ABS*	00000000 __flash_rodata_start
00026330 g       *ABS*	00000000 __DTOR_LIST__
00023c68 g     F .text	00000034 alt_irq_init
000239d8 g     F .text	00000060 alt_release_fd
00025ccc g     F .text	00000014 atexit
00022bdc g     F .text	0000005c _write_r
00027e88 g     O .rwdata	00000004 _impure_ptr
0002999c g     O .bss	00000004 alt_argc
00021bf4 g     F .text	00000208 __sflush_r
000251a8 g     F .text	0000005c _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00022210 g     F .text	00000018 __fp_unlock_all
00027e94 g     O .rwdata	00000008 alt_fs_list
00024aa0 g     F .text	00000068 alt_up_audio_record_l
00020020 g       *ABS*	00000000 __ram_exceptions_start
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2
00027ebc g       *ABS*	00000000 _edata
00035660 g       *ABS*	00000000 _end
00020244 g       *ABS*	00000000 __ram_exceptions_end
00024230 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
00024bd0 g     F .text	00000068 alt_up_audio_play_l
00022afc g     F .text	0000007c __swrite
00027e90 g     O .rwdata	00000004 __malloc_trim_threshold
00025ce0 g     F .text	00000038 exit
00022700 g     F .text	000000c4 _fwalk_reent
00022fb4 g     F .text	0000005c .hidden __modsi3
00039000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000221ec g     F .text	00000004 __sfp_lock_release
000262fc g     F .text	00000034 _exit
00024ed4 g     F .text	00000140 alt_alarm_start
000227c4 g     F .text	000001b8 __smakebuf_r
00020468 g     F .text	00000098 strlen
000256c8 g     F .text	00000158 open
00023848 g     F .text	00000044 alt_putchar
00025294 g     F .text	00000030 alt_icache_flush_all
00027eb0 g     O .rwdata	00000004 alt_priority_mask
00027eb4 g     O .rwdata	00000008 alt_alarm_list
0002514c g     F .text	0000005c _do_ctors
00023070 g     F .text	000000d0 close
000233c4 g     F .text	00000080 alt_load
00024780 g     F .text	00000050 alt_up_audio_enable_read_interrupt
00000000  w      *UND*	00000000 free
000221f0 g     F .text	00000004 __sinit_lock_acquire
000248c8 g     F .text	00000040 alt_up_audio_read_interrupt_pending



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
   2008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001526 	beq	r2,zero,20190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10955804 	addi	r2,r2,21856
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10955804 	addi	r2,r2,21856
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	21000104 	addi	r4,r4,4
   20168:	1105883a 	add	r2,r2,r4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	e17ffd17 	ldw	r5,-12(fp)
   20178:	183ee83a 	callr	r3
#endif
        break;
   2017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20180:	0005313a 	rdctl	r2,ipending
   20184:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20188:	e0bfff17 	ldw	r2,-4(fp)
   2018c:	00000706 	br	201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
   20190:	e0bffc17 	ldw	r2,-16(fp)
   20194:	1085883a 	add	r2,r2,r2
   20198:	e0bffc15 	stw	r2,-16(fp)
      i++;
   2019c:	e0bffd17 	ldw	r2,-12(fp)
   201a0:	10800044 	addi	r2,r2,1
   201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a8:	003fe006 	br	2012c <alt_irq_handler+0x30>

    active = alt_irq_pending ();
   201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201b0:	e0bffb17 	ldw	r2,-20(fp)
   201b4:	103fda1e 	bne	r2,zero,20120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b8:	0001883a 	nop
}
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a6cc17 	ldw	r2,-25808(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a6cc17 	ldw	r2,-25808(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	1809883a 	mov	r4,r3
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	e1bffe17 	ldw	r6,-8(fp)
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c000f4 	movhi	sp,3
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dee40014 	ori	sp,sp,36864
    movhi gp, %hi(_gp)
   2025c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20260:	d6bfa114 	ori	gp,gp,65156
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20268:	10a66214 	ori	r2,r2,39304

    movhi r3, %hi(__bss_end)
   2026c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20270:	18d59814 	ori	r3,r3,22112

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	00233c40 	call	233c4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	00235680 	call	23568 <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <alt_after_alt_main>

00020290 <main>:

char buff[48000];
int bid;

int main()
{
   20290:	defff704 	addi	sp,sp,-36
   20294:	dfc00815 	stw	ra,32(sp)
   20298:	df000715 	stw	fp,28(sp)
   2029c:	df000704 	addi	fp,sp,28
  printf("Hello from Nios 123!\n");
   202a0:	010000b4 	movhi	r4,2
   202a4:	2118cc04 	addi	r4,r4,25392
   202a8:	00204540 	call	20454 <puts>
  alt_up_audio_dev *audio_dev;
  /* used for audio record/playback */
  unsigned int l_buf;
  unsigned int r_buf;
  // open the Audio port
  audio_dev = alt_up_audio_open_dev ("/dev/audio");
   202ac:	010000b4 	movhi	r4,2
   202b0:	2118d204 	addi	r4,r4,25416
   202b4:	00247400 	call	24740 <alt_up_audio_open_dev>
   202b8:	e0bffa15 	stw	r2,-24(fp)
  if ( audio_dev == NULL)
   202bc:	e0bffa17 	ldw	r2,-24(fp)
   202c0:	1000041e 	bne	r2,zero,202d4 <main+0x44>
    alt_printf ("Error: could not open audio device \n");
   202c4:	010000b4 	movhi	r4,2
   202c8:	2118d504 	addi	r4,r4,25428
   202cc:	00236200 	call	23620 <alt_printf>
   202d0:	00000306 	br	202e0 <main+0x50>
    else
    alt_printf ("Opened audio device \n");
   202d4:	010000b4 	movhi	r4,2
   202d8:	2118df04 	addi	r4,r4,25468
   202dc:	00236200 	call	23620 <alt_printf>
    /* read and echo audio data */
  alt_up_audio_reset_audio_core(audio_dev);
   202e0:	e13ffa17 	ldw	r4,-24(fp)
   202e4:	00249480 	call	24948 <alt_up_audio_reset_audio_core>
  int readmode = 1;
   202e8:	00800044 	movi	r2,1
   202ec:	e0bffb15 	stw	r2,-20(fp)
  int cnt = 0;
   202f0:	e03ff915 	stw	zero,-28(fp)
  while(1)
  {
    cnt ++;
   202f4:	e0bff917 	ldw	r2,-28(fp)
   202f8:	10800044 	addi	r2,r2,1
   202fc:	e0bff915 	stw	r2,-28(fp)

    int fifospace = alt_up_audio_read_fifo_avail (audio_dev, ALT_UP_AUDIO_RIGHT);
   20300:	e13ffa17 	ldw	r4,-24(fp)
   20304:	01400044 	movi	r5,1
   20308:	00249d80 	call	249d8 <alt_up_audio_read_fifo_avail>
   2030c:	e0bffc15 	stw	r2,-16(fp)
    int fifospacew = alt_up_audio_write_fifo_space (audio_dev, ALT_UP_AUDIO_LEFT);
   20310:	e13ffa17 	ldw	r4,-24(fp)
   20314:	000b883a 	mov	r5,zero
   20318:	0024b080 	call	24b08 <alt_up_audio_write_fifo_space>
   2031c:	e0bffd15 	stw	r2,-12(fp)

    if (readmode) {
   20320:	e0bffb17 	ldw	r2,-20(fp)
   20324:	10002026 	beq	r2,zero,203a8 <main+0x118>
      if ( fifospace > 0 ) // check if data is available
   20328:	e0bffc17 	ldw	r2,-16(fp)
   2032c:	00801e0e 	bge	zero,r2,203a8 <main+0x118>
      {
        // read audio buffer
        alt_up_audio_read_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
   20330:	e0bfff04 	addi	r2,fp,-4
   20334:	e13ffa17 	ldw	r4,-24(fp)
   20338:	100b883a 	mov	r5,r2
   2033c:	01800044 	movi	r6,1
   20340:	01c00044 	movi	r7,1
   20344:	0024c380 	call	24c38 <alt_up_audio_read_fifo>
        alt_up_audio_read_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
   20348:	e0bffe04 	addi	r2,fp,-8
   2034c:	e13ffa17 	ldw	r4,-24(fp)
   20350:	100b883a 	mov	r5,r2
   20354:	01800044 	movi	r6,1
   20358:	000f883a 	mov	r7,zero
   2035c:	0024c380 	call	24c38 <alt_up_audio_read_fifo>
      
        l_buf ^= (1<<15);
   20360:	e0bffe17 	ldw	r2,-8(fp)
   20364:	10a0001c 	xori	r2,r2,32768
   20368:	e0bffe15 	stw	r2,-8(fp)
        r_buf ^= (1<<15);
   2036c:	e0bfff17 	ldw	r2,-4(fp)
   20370:	10a0001c 	xori	r2,r2,32768
   20374:	e0bfff15 	stw	r2,-4(fp)
        alt_up_audio_write_fifo (audio_dev, &(r_buf), 1, ALT_UP_AUDIO_RIGHT);
   20378:	e0bfff04 	addi	r2,fp,-4
   2037c:	e13ffa17 	ldw	r4,-24(fp)
   20380:	100b883a 	mov	r5,r2
   20384:	01800044 	movi	r6,1
   20388:	01c00044 	movi	r7,1
   2038c:	0024d180 	call	24d18 <alt_up_audio_write_fifo>
        alt_up_audio_write_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
   20390:	e0bffe04 	addi	r2,fp,-8
   20394:	e13ffa17 	ldw	r4,-24(fp)
   20398:	100b883a 	mov	r5,r2
   2039c:	01800044 	movi	r6,1
   203a0:	000f883a 	mov	r7,zero
   203a4:	0024d180 	call	24d18 <alt_up_audio_write_fifo>
      }
    }
  }
   203a8:	003fd206 	br	202f4 <main+0x64>

000203ac <_puts_r>:
   203ac:	defff604 	addi	sp,sp,-40
   203b0:	dc000715 	stw	r16,28(sp)
   203b4:	2021883a 	mov	r16,r4
   203b8:	2809883a 	mov	r4,r5
   203bc:	dc400815 	stw	r17,32(sp)
   203c0:	dfc00915 	stw	ra,36(sp)
   203c4:	2823883a 	mov	r17,r5
   203c8:	00204680 	call	20468 <strlen>
   203cc:	81400217 	ldw	r5,8(r16)
   203d0:	11000044 	addi	r4,r2,1
   203d4:	d8800115 	stw	r2,4(sp)
   203d8:	008000b4 	movhi	r2,2
   203dc:	2980030b 	ldhu	r6,12(r5)
   203e0:	1098e504 	addi	r2,r2,25492
   203e4:	d8800215 	stw	r2,8(sp)
   203e8:	00800044 	movi	r2,1
   203ec:	d8800315 	stw	r2,12(sp)
   203f0:	00800084 	movi	r2,2
   203f4:	d8800515 	stw	r2,20(sp)
   203f8:	dc400015 	stw	r17,0(sp)
   203fc:	d9000615 	stw	r4,24(sp)
   20400:	dec00415 	stw	sp,16(sp)
   20404:	3088000c 	andi	r2,r6,8192
   20408:	1000061e 	bne	r2,zero,20424 <_puts_r+0x78>
   2040c:	29001917 	ldw	r4,100(r5)
   20410:	00b7ffc4 	movi	r2,-8193
   20414:	31880014 	ori	r6,r6,8192
   20418:	2084703a 	and	r2,r4,r2
   2041c:	2980030d 	sth	r6,12(r5)
   20420:	28801915 	stw	r2,100(r5)
   20424:	8009883a 	mov	r4,r16
   20428:	d9800404 	addi	r6,sp,16
   2042c:	00205000 	call	20500 <__sfvwrite_r>
   20430:	1000061e 	bne	r2,zero,2044c <_puts_r+0xa0>
   20434:	00800284 	movi	r2,10
   20438:	dfc00917 	ldw	ra,36(sp)
   2043c:	dc400817 	ldw	r17,32(sp)
   20440:	dc000717 	ldw	r16,28(sp)
   20444:	dec00a04 	addi	sp,sp,40
   20448:	f800283a 	ret
   2044c:	00bfffc4 	movi	r2,-1
   20450:	003ff906 	br	20438 <_puts_r+0x8c>

00020454 <puts>:
   20454:	008000b4 	movhi	r2,2
   20458:	109fa204 	addi	r2,r2,32392
   2045c:	200b883a 	mov	r5,r4
   20460:	11000017 	ldw	r4,0(r2)
   20464:	00203ac1 	jmpi	203ac <_puts_r>

00020468 <strlen>:
   20468:	208000cc 	andi	r2,r4,3
   2046c:	10002026 	beq	r2,zero,204f0 <strlen+0x88>
   20470:	20800007 	ldb	r2,0(r4)
   20474:	10002026 	beq	r2,zero,204f8 <strlen+0x90>
   20478:	2005883a 	mov	r2,r4
   2047c:	00000206 	br	20488 <strlen+0x20>
   20480:	10c00007 	ldb	r3,0(r2)
   20484:	18001826 	beq	r3,zero,204e8 <strlen+0x80>
   20488:	10800044 	addi	r2,r2,1
   2048c:	10c000cc 	andi	r3,r2,3
   20490:	183ffb1e 	bne	r3,zero,20480 <strlen+0x18>
   20494:	10c00017 	ldw	r3,0(r2)
   20498:	01ffbff4 	movhi	r7,65279
   2049c:	39ffbfc4 	addi	r7,r7,-257
   204a0:	00ca303a 	nor	r5,zero,r3
   204a4:	01a02074 	movhi	r6,32897
   204a8:	19c7883a 	add	r3,r3,r7
   204ac:	31a02004 	addi	r6,r6,-32640
   204b0:	1946703a 	and	r3,r3,r5
   204b4:	1986703a 	and	r3,r3,r6
   204b8:	1800091e 	bne	r3,zero,204e0 <strlen+0x78>
   204bc:	10800104 	addi	r2,r2,4
   204c0:	10c00017 	ldw	r3,0(r2)
   204c4:	19cb883a 	add	r5,r3,r7
   204c8:	00c6303a 	nor	r3,zero,r3
   204cc:	28c6703a 	and	r3,r5,r3
   204d0:	1986703a 	and	r3,r3,r6
   204d4:	183ff926 	beq	r3,zero,204bc <strlen+0x54>
   204d8:	00000106 	br	204e0 <strlen+0x78>
   204dc:	10800044 	addi	r2,r2,1
   204e0:	10c00007 	ldb	r3,0(r2)
   204e4:	183ffd1e 	bne	r3,zero,204dc <strlen+0x74>
   204e8:	1105c83a 	sub	r2,r2,r4
   204ec:	f800283a 	ret
   204f0:	2005883a 	mov	r2,r4
   204f4:	003fe706 	br	20494 <strlen+0x2c>
   204f8:	0005883a 	mov	r2,zero
   204fc:	f800283a 	ret

00020500 <__sfvwrite_r>:
   20500:	30800217 	ldw	r2,8(r6)
   20504:	10006726 	beq	r2,zero,206a4 <__sfvwrite_r+0x1a4>
   20508:	defff404 	addi	sp,sp,-48
   2050c:	dd000615 	stw	r20,24(sp)
   20510:	2029883a 	mov	r20,r4
   20514:	2900030b 	ldhu	r4,12(r5)
   20518:	ddc00915 	stw	r23,36(sp)
   2051c:	dc000215 	stw	r16,8(sp)
   20520:	dfc00b15 	stw	ra,44(sp)
   20524:	df000a15 	stw	fp,40(sp)
   20528:	dd800815 	stw	r22,32(sp)
   2052c:	dd400715 	stw	r21,28(sp)
   20530:	dcc00515 	stw	r19,20(sp)
   20534:	dc800415 	stw	r18,16(sp)
   20538:	dc400315 	stw	r17,12(sp)
   2053c:	2080020c 	andi	r2,r4,8
   20540:	2821883a 	mov	r16,r5
   20544:	302f883a 	mov	r23,r6
   20548:	10002726 	beq	r2,zero,205e8 <__sfvwrite_r+0xe8>
   2054c:	28800417 	ldw	r2,16(r5)
   20550:	10002526 	beq	r2,zero,205e8 <__sfvwrite_r+0xe8>
   20554:	2080008c 	andi	r2,r4,2
   20558:	bc400017 	ldw	r17,0(r23)
   2055c:	10002a26 	beq	r2,zero,20608 <__sfvwrite_r+0x108>
   20560:	05600034 	movhi	r21,32768
   20564:	0027883a 	mov	r19,zero
   20568:	0025883a 	mov	r18,zero
   2056c:	ad7f0004 	addi	r21,r21,-1024
   20570:	980d883a 	mov	r6,r19
   20574:	a009883a 	mov	r4,r20
   20578:	90004626 	beq	r18,zero,20694 <__sfvwrite_r+0x194>
   2057c:	900f883a 	mov	r7,r18
   20580:	81400717 	ldw	r5,28(r16)
   20584:	ac80022e 	bgeu	r21,r18,20590 <__sfvwrite_r+0x90>
   20588:	01e00034 	movhi	r7,32768
   2058c:	39ff0004 	addi	r7,r7,-1024
   20590:	80800917 	ldw	r2,36(r16)
   20594:	103ee83a 	callr	r2
   20598:	0080520e 	bge	zero,r2,206e4 <__sfvwrite_r+0x1e4>
   2059c:	b8c00217 	ldw	r3,8(r23)
   205a0:	98a7883a 	add	r19,r19,r2
   205a4:	90a5c83a 	sub	r18,r18,r2
   205a8:	1885c83a 	sub	r2,r3,r2
   205ac:	b8800215 	stw	r2,8(r23)
   205b0:	103fef1e 	bne	r2,zero,20570 <__sfvwrite_r+0x70>
   205b4:	0005883a 	mov	r2,zero
   205b8:	dfc00b17 	ldw	ra,44(sp)
   205bc:	df000a17 	ldw	fp,40(sp)
   205c0:	ddc00917 	ldw	r23,36(sp)
   205c4:	dd800817 	ldw	r22,32(sp)
   205c8:	dd400717 	ldw	r21,28(sp)
   205cc:	dd000617 	ldw	r20,24(sp)
   205d0:	dcc00517 	ldw	r19,20(sp)
   205d4:	dc800417 	ldw	r18,16(sp)
   205d8:	dc400317 	ldw	r17,12(sp)
   205dc:	dc000217 	ldw	r16,8(sp)
   205e0:	dec00c04 	addi	sp,sp,48
   205e4:	f800283a 	ret
   205e8:	a009883a 	mov	r4,r20
   205ec:	800b883a 	mov	r5,r16
   205f0:	0021aa00 	call	21aa0 <__swsetup_r>
   205f4:	1000ec1e 	bne	r2,zero,209a8 <__sfvwrite_r+0x4a8>
   205f8:	8100030b 	ldhu	r4,12(r16)
   205fc:	bc400017 	ldw	r17,0(r23)
   20600:	2080008c 	andi	r2,r4,2
   20604:	103fd61e 	bne	r2,zero,20560 <__sfvwrite_r+0x60>
   20608:	2080004c 	andi	r2,r4,1
   2060c:	10003a1e 	bne	r2,zero,206f8 <__sfvwrite_r+0x1f8>
   20610:	0039883a 	mov	fp,zero
   20614:	0025883a 	mov	r18,zero
   20618:	90001a26 	beq	r18,zero,20684 <__sfvwrite_r+0x184>
   2061c:	2080800c 	andi	r2,r4,512
   20620:	85800217 	ldw	r22,8(r16)
   20624:	10007626 	beq	r2,zero,20800 <__sfvwrite_r+0x300>
   20628:	b027883a 	mov	r19,r22
   2062c:	95809436 	bltu	r18,r22,20880 <__sfvwrite_r+0x380>
   20630:	2081200c 	andi	r2,r4,1152
   20634:	10009f1e 	bne	r2,zero,208b4 <__sfvwrite_r+0x3b4>
   20638:	81000017 	ldw	r4,0(r16)
   2063c:	e00b883a 	mov	r5,fp
   20640:	980d883a 	mov	r6,r19
   20644:	00213880 	call	21388 <memmove>
   20648:	81000217 	ldw	r4,8(r16)
   2064c:	81400017 	ldw	r5,0(r16)
   20650:	9005883a 	mov	r2,r18
   20654:	2587c83a 	sub	r3,r4,r22
   20658:	2ce7883a 	add	r19,r5,r19
   2065c:	80c00215 	stw	r3,8(r16)
   20660:	84c00015 	stw	r19,0(r16)
   20664:	b8c00217 	ldw	r3,8(r23)
   20668:	e0b9883a 	add	fp,fp,r2
   2066c:	90a5c83a 	sub	r18,r18,r2
   20670:	1885c83a 	sub	r2,r3,r2
   20674:	b8800215 	stw	r2,8(r23)
   20678:	103fce26 	beq	r2,zero,205b4 <__sfvwrite_r+0xb4>
   2067c:	8100030b 	ldhu	r4,12(r16)
   20680:	903fe61e 	bne	r18,zero,2061c <__sfvwrite_r+0x11c>
   20684:	8f000017 	ldw	fp,0(r17)
   20688:	8c800117 	ldw	r18,4(r17)
   2068c:	8c400204 	addi	r17,r17,8
   20690:	003fe106 	br	20618 <__sfvwrite_r+0x118>
   20694:	8cc00017 	ldw	r19,0(r17)
   20698:	8c800117 	ldw	r18,4(r17)
   2069c:	8c400204 	addi	r17,r17,8
   206a0:	003fb306 	br	20570 <__sfvwrite_r+0x70>
   206a4:	0005883a 	mov	r2,zero
   206a8:	f800283a 	ret
   206ac:	00a00034 	movhi	r2,32768
   206b0:	10bfffc4 	addi	r2,r2,-1
   206b4:	9009883a 	mov	r4,r18
   206b8:	1480012e 	bgeu	r2,r18,206c0 <__sfvwrite_r+0x1c0>
   206bc:	1009883a 	mov	r4,r2
   206c0:	980b883a 	mov	r5,r19
   206c4:	0022f600 	call	22f60 <__divsi3>
   206c8:	81400717 	ldw	r5,28(r16)
   206cc:	80c00917 	ldw	r3,36(r16)
   206d0:	988f383a 	mul	r7,r19,r2
   206d4:	a009883a 	mov	r4,r20
   206d8:	e00d883a 	mov	r6,fp
   206dc:	183ee83a 	callr	r3
   206e0:	00bfe016 	blt	zero,r2,20664 <__sfvwrite_r+0x164>
   206e4:	8080030b 	ldhu	r2,12(r16)
   206e8:	10801014 	ori	r2,r2,64
   206ec:	8080030d 	sth	r2,12(r16)
   206f0:	00bfffc4 	movi	r2,-1
   206f4:	003fb006 	br	205b8 <__sfvwrite_r+0xb8>
   206f8:	0027883a 	mov	r19,zero
   206fc:	0011883a 	mov	r8,zero
   20700:	0039883a 	mov	fp,zero
   20704:	0025883a 	mov	r18,zero
   20708:	90001f26 	beq	r18,zero,20788 <__sfvwrite_r+0x288>
   2070c:	40006026 	beq	r8,zero,20890 <__sfvwrite_r+0x390>
   20710:	982b883a 	mov	r21,r19
   20714:	94c0012e 	bgeu	r18,r19,2071c <__sfvwrite_r+0x21c>
   20718:	902b883a 	mov	r21,r18
   2071c:	81000017 	ldw	r4,0(r16)
   20720:	80800417 	ldw	r2,16(r16)
   20724:	a82d883a 	mov	r22,r21
   20728:	81800217 	ldw	r6,8(r16)
   2072c:	81c00517 	ldw	r7,20(r16)
   20730:	1100022e 	bgeu	r2,r4,2073c <__sfvwrite_r+0x23c>
   20734:	31c7883a 	add	r3,r6,r7
   20738:	1d401816 	blt	r3,r21,2079c <__sfvwrite_r+0x29c>
   2073c:	a9c04416 	blt	r21,r7,20850 <__sfvwrite_r+0x350>
   20740:	80800917 	ldw	r2,36(r16)
   20744:	81400717 	ldw	r5,28(r16)
   20748:	a009883a 	mov	r4,r20
   2074c:	da000115 	stw	r8,4(sp)
   20750:	e00d883a 	mov	r6,fp
   20754:	103ee83a 	callr	r2
   20758:	102d883a 	mov	r22,r2
   2075c:	da000117 	ldw	r8,4(sp)
   20760:	00bfe00e 	bge	zero,r2,206e4 <__sfvwrite_r+0x1e4>
   20764:	9da7c83a 	sub	r19,r19,r22
   20768:	98001f26 	beq	r19,zero,207e8 <__sfvwrite_r+0x2e8>
   2076c:	b8800217 	ldw	r2,8(r23)
   20770:	e5b9883a 	add	fp,fp,r22
   20774:	95a5c83a 	sub	r18,r18,r22
   20778:	15adc83a 	sub	r22,r2,r22
   2077c:	bd800215 	stw	r22,8(r23)
   20780:	b03f8c26 	beq	r22,zero,205b4 <__sfvwrite_r+0xb4>
   20784:	903fe11e 	bne	r18,zero,2070c <__sfvwrite_r+0x20c>
   20788:	8f000017 	ldw	fp,0(r17)
   2078c:	8c800117 	ldw	r18,4(r17)
   20790:	0011883a 	mov	r8,zero
   20794:	8c400204 	addi	r17,r17,8
   20798:	003fdb06 	br	20708 <__sfvwrite_r+0x208>
   2079c:	180d883a 	mov	r6,r3
   207a0:	e00b883a 	mov	r5,fp
   207a4:	da000115 	stw	r8,4(sp)
   207a8:	d8c00015 	stw	r3,0(sp)
   207ac:	00213880 	call	21388 <memmove>
   207b0:	d8c00017 	ldw	r3,0(sp)
   207b4:	80800017 	ldw	r2,0(r16)
   207b8:	a009883a 	mov	r4,r20
   207bc:	800b883a 	mov	r5,r16
   207c0:	10c5883a 	add	r2,r2,r3
   207c4:	80800015 	stw	r2,0(r16)
   207c8:	d8c00015 	stw	r3,0(sp)
   207cc:	0021dfc0 	call	21dfc <_fflush_r>
   207d0:	d8c00017 	ldw	r3,0(sp)
   207d4:	da000117 	ldw	r8,4(sp)
   207d8:	103fc21e 	bne	r2,zero,206e4 <__sfvwrite_r+0x1e4>
   207dc:	182d883a 	mov	r22,r3
   207e0:	9da7c83a 	sub	r19,r19,r22
   207e4:	983fe11e 	bne	r19,zero,2076c <__sfvwrite_r+0x26c>
   207e8:	a009883a 	mov	r4,r20
   207ec:	800b883a 	mov	r5,r16
   207f0:	0021dfc0 	call	21dfc <_fflush_r>
   207f4:	103fbb1e 	bne	r2,zero,206e4 <__sfvwrite_r+0x1e4>
   207f8:	0011883a 	mov	r8,zero
   207fc:	003fdb06 	br	2076c <__sfvwrite_r+0x26c>
   20800:	81000017 	ldw	r4,0(r16)
   20804:	80800417 	ldw	r2,16(r16)
   20808:	11000236 	bltu	r2,r4,20814 <__sfvwrite_r+0x314>
   2080c:	84c00517 	ldw	r19,20(r16)
   20810:	94ffa62e 	bgeu	r18,r19,206ac <__sfvwrite_r+0x1ac>
   20814:	9027883a 	mov	r19,r18
   20818:	b480012e 	bgeu	r22,r18,20820 <__sfvwrite_r+0x320>
   2081c:	b027883a 	mov	r19,r22
   20820:	e00b883a 	mov	r5,fp
   20824:	980d883a 	mov	r6,r19
   20828:	00213880 	call	21388 <memmove>
   2082c:	80800217 	ldw	r2,8(r16)
   20830:	80c00017 	ldw	r3,0(r16)
   20834:	14c5c83a 	sub	r2,r2,r19
   20838:	1cc7883a 	add	r3,r3,r19
   2083c:	80800215 	stw	r2,8(r16)
   20840:	80c00015 	stw	r3,0(r16)
   20844:	10004326 	beq	r2,zero,20954 <__sfvwrite_r+0x454>
   20848:	9805883a 	mov	r2,r19
   2084c:	003f8506 	br	20664 <__sfvwrite_r+0x164>
   20850:	a80d883a 	mov	r6,r21
   20854:	e00b883a 	mov	r5,fp
   20858:	da000115 	stw	r8,4(sp)
   2085c:	00213880 	call	21388 <memmove>
   20860:	80800217 	ldw	r2,8(r16)
   20864:	80c00017 	ldw	r3,0(r16)
   20868:	da000117 	ldw	r8,4(sp)
   2086c:	1545c83a 	sub	r2,r2,r21
   20870:	1d6b883a 	add	r21,r3,r21
   20874:	80800215 	stw	r2,8(r16)
   20878:	85400015 	stw	r21,0(r16)
   2087c:	003fb906 	br	20764 <__sfvwrite_r+0x264>
   20880:	81000017 	ldw	r4,0(r16)
   20884:	902d883a 	mov	r22,r18
   20888:	9027883a 	mov	r19,r18
   2088c:	003f6b06 	br	2063c <__sfvwrite_r+0x13c>
   20890:	e009883a 	mov	r4,fp
   20894:	01400284 	movi	r5,10
   20898:	900d883a 	mov	r6,r18
   2089c:	00211680 	call	21168 <memchr>
   208a0:	10003e26 	beq	r2,zero,2099c <__sfvwrite_r+0x49c>
   208a4:	10800044 	addi	r2,r2,1
   208a8:	1727c83a 	sub	r19,r2,fp
   208ac:	02000044 	movi	r8,1
   208b0:	003f9706 	br	20710 <__sfvwrite_r+0x210>
   208b4:	80800517 	ldw	r2,20(r16)
   208b8:	81400417 	ldw	r5,16(r16)
   208bc:	80c00017 	ldw	r3,0(r16)
   208c0:	10a7883a 	add	r19,r2,r2
   208c4:	9885883a 	add	r2,r19,r2
   208c8:	1026d7fa 	srli	r19,r2,31
   208cc:	196bc83a 	sub	r21,r3,r5
   208d0:	a9800044 	addi	r6,r21,1
   208d4:	9885883a 	add	r2,r19,r2
   208d8:	1027d07a 	srai	r19,r2,1
   208dc:	3485883a 	add	r2,r6,r18
   208e0:	980d883a 	mov	r6,r19
   208e4:	9880022e 	bgeu	r19,r2,208f0 <__sfvwrite_r+0x3f0>
   208e8:	1027883a 	mov	r19,r2
   208ec:	100d883a 	mov	r6,r2
   208f0:	2101000c 	andi	r4,r4,1024
   208f4:	20001c26 	beq	r4,zero,20968 <__sfvwrite_r+0x468>
   208f8:	a009883a 	mov	r4,r20
   208fc:	300b883a 	mov	r5,r6
   20900:	00209c00 	call	209c0 <_malloc_r>
   20904:	102d883a 	mov	r22,r2
   20908:	10002926 	beq	r2,zero,209b0 <__sfvwrite_r+0x4b0>
   2090c:	81400417 	ldw	r5,16(r16)
   20910:	1009883a 	mov	r4,r2
   20914:	a80d883a 	mov	r6,r21
   20918:	00212500 	call	21250 <memcpy>
   2091c:	8080030b 	ldhu	r2,12(r16)
   20920:	00fedfc4 	movi	r3,-1153
   20924:	10c4703a 	and	r2,r2,r3
   20928:	10802014 	ori	r2,r2,128
   2092c:	8080030d 	sth	r2,12(r16)
   20930:	b549883a 	add	r4,r22,r21
   20934:	9d4bc83a 	sub	r5,r19,r21
   20938:	85800415 	stw	r22,16(r16)
   2093c:	84c00515 	stw	r19,20(r16)
   20940:	81000015 	stw	r4,0(r16)
   20944:	902d883a 	mov	r22,r18
   20948:	81400215 	stw	r5,8(r16)
   2094c:	9027883a 	mov	r19,r18
   20950:	003f3a06 	br	2063c <__sfvwrite_r+0x13c>
   20954:	a009883a 	mov	r4,r20
   20958:	800b883a 	mov	r5,r16
   2095c:	0021dfc0 	call	21dfc <_fflush_r>
   20960:	103fb926 	beq	r2,zero,20848 <__sfvwrite_r+0x348>
   20964:	003f5f06 	br	206e4 <__sfvwrite_r+0x1e4>
   20968:	a009883a 	mov	r4,r20
   2096c:	00214e40 	call	214e4 <_realloc_r>
   20970:	102d883a 	mov	r22,r2
   20974:	103fee1e 	bne	r2,zero,20930 <__sfvwrite_r+0x430>
   20978:	81400417 	ldw	r5,16(r16)
   2097c:	a009883a 	mov	r4,r20
   20980:	002234c0 	call	2234c <_free_r>
   20984:	8080030b 	ldhu	r2,12(r16)
   20988:	00ffdfc4 	movi	r3,-129
   2098c:	1884703a 	and	r2,r3,r2
   20990:	00c00304 	movi	r3,12
   20994:	a0c00015 	stw	r3,0(r20)
   20998:	003f5306 	br	206e8 <__sfvwrite_r+0x1e8>
   2099c:	94c00044 	addi	r19,r18,1
   209a0:	02000044 	movi	r8,1
   209a4:	003f5a06 	br	20710 <__sfvwrite_r+0x210>
   209a8:	00bfffc4 	movi	r2,-1
   209ac:	003f0206 	br	205b8 <__sfvwrite_r+0xb8>
   209b0:	00800304 	movi	r2,12
   209b4:	a0800015 	stw	r2,0(r20)
   209b8:	8080030b 	ldhu	r2,12(r16)
   209bc:	003f4a06 	br	206e8 <__sfvwrite_r+0x1e8>

000209c0 <_malloc_r>:
   209c0:	defff504 	addi	sp,sp,-44
   209c4:	dc800315 	stw	r18,12(sp)
   209c8:	dfc00a15 	stw	ra,40(sp)
   209cc:	df000915 	stw	fp,36(sp)
   209d0:	ddc00815 	stw	r23,32(sp)
   209d4:	dd800715 	stw	r22,28(sp)
   209d8:	dd400615 	stw	r21,24(sp)
   209dc:	dd000515 	stw	r20,20(sp)
   209e0:	dcc00415 	stw	r19,16(sp)
   209e4:	dc400215 	stw	r17,8(sp)
   209e8:	dc000115 	stw	r16,4(sp)
   209ec:	288002c4 	addi	r2,r5,11
   209f0:	00c00584 	movi	r3,22
   209f4:	2025883a 	mov	r18,r4
   209f8:	18802a2e 	bgeu	r3,r2,20aa4 <_malloc_r+0xe4>
   209fc:	047ffe04 	movi	r17,-8
   20a00:	1462703a 	and	r17,r2,r17
   20a04:	88009e16 	blt	r17,zero,20c80 <_malloc_r+0x2c0>
   20a08:	89409d36 	bltu	r17,r5,20c80 <_malloc_r+0x2c0>
   20a0c:	00235e00 	call	235e0 <__malloc_lock>
   20a10:	00807dc4 	movi	r2,503
   20a14:	14402736 	bltu	r2,r17,20ab4 <_malloc_r+0xf4>
   20a18:	8806d0fa 	srli	r3,r17,3
   20a1c:	04c000b4 	movhi	r19,2
   20a20:	9cda0504 	addi	r19,r19,26644
   20a24:	18c5883a 	add	r2,r3,r3
   20a28:	1085883a 	add	r2,r2,r2
   20a2c:	1085883a 	add	r2,r2,r2
   20a30:	9885883a 	add	r2,r19,r2
   20a34:	14000317 	ldw	r16,12(r2)
   20a38:	80814a26 	beq	r16,r2,20f64 <_malloc_r+0x5a4>
   20a3c:	80c00117 	ldw	r3,4(r16)
   20a40:	81000317 	ldw	r4,12(r16)
   20a44:	00bfff04 	movi	r2,-4
   20a48:	1884703a 	and	r2,r3,r2
   20a4c:	81400217 	ldw	r5,8(r16)
   20a50:	8085883a 	add	r2,r16,r2
   20a54:	10c00117 	ldw	r3,4(r2)
   20a58:	29000315 	stw	r4,12(r5)
   20a5c:	21400215 	stw	r5,8(r4)
   20a60:	18c00054 	ori	r3,r3,1
   20a64:	10c00115 	stw	r3,4(r2)
   20a68:	9009883a 	mov	r4,r18
   20a6c:	00236000 	call	23600 <__malloc_unlock>
   20a70:	80800204 	addi	r2,r16,8
   20a74:	dfc00a17 	ldw	ra,40(sp)
   20a78:	df000917 	ldw	fp,36(sp)
   20a7c:	ddc00817 	ldw	r23,32(sp)
   20a80:	dd800717 	ldw	r22,28(sp)
   20a84:	dd400617 	ldw	r21,24(sp)
   20a88:	dd000517 	ldw	r20,20(sp)
   20a8c:	dcc00417 	ldw	r19,16(sp)
   20a90:	dc800317 	ldw	r18,12(sp)
   20a94:	dc400217 	ldw	r17,8(sp)
   20a98:	dc000117 	ldw	r16,4(sp)
   20a9c:	dec00b04 	addi	sp,sp,44
   20aa0:	f800283a 	ret
   20aa4:	04400404 	movi	r17,16
   20aa8:	89407536 	bltu	r17,r5,20c80 <_malloc_r+0x2c0>
   20aac:	00235e00 	call	235e0 <__malloc_lock>
   20ab0:	003fd906 	br	20a18 <_malloc_r+0x58>
   20ab4:	8806d27a 	srli	r3,r17,9
   20ab8:	18007526 	beq	r3,zero,20c90 <_malloc_r+0x2d0>
   20abc:	00800104 	movi	r2,4
   20ac0:	10c0ef36 	bltu	r2,r3,20e80 <_malloc_r+0x4c0>
   20ac4:	8806d1ba 	srli	r3,r17,6
   20ac8:	19c00e04 	addi	r7,r3,56
   20acc:	39cb883a 	add	r5,r7,r7
   20ad0:	04c000b4 	movhi	r19,2
   20ad4:	294b883a 	add	r5,r5,r5
   20ad8:	9cda0504 	addi	r19,r19,26644
   20adc:	294b883a 	add	r5,r5,r5
   20ae0:	994b883a 	add	r5,r19,r5
   20ae4:	2c000317 	ldw	r16,12(r5)
   20ae8:	2c000e26 	beq	r5,r16,20b24 <_malloc_r+0x164>
   20aec:	80800117 	ldw	r2,4(r16)
   20af0:	01bfff04 	movi	r6,-4
   20af4:	010003c4 	movi	r4,15
   20af8:	1184703a 	and	r2,r2,r6
   20afc:	1447c83a 	sub	r3,r2,r17
   20b00:	20c00716 	blt	r4,r3,20b20 <_malloc_r+0x160>
   20b04:	1800650e 	bge	r3,zero,20c9c <_malloc_r+0x2dc>
   20b08:	84000317 	ldw	r16,12(r16)
   20b0c:	2c000526 	beq	r5,r16,20b24 <_malloc_r+0x164>
   20b10:	80800117 	ldw	r2,4(r16)
   20b14:	1184703a 	and	r2,r2,r6
   20b18:	1447c83a 	sub	r3,r2,r17
   20b1c:	20fff90e 	bge	r4,r3,20b04 <_malloc_r+0x144>
   20b20:	39ffffc4 	addi	r7,r7,-1
   20b24:	38c00044 	addi	r3,r7,1
   20b28:	018000b4 	movhi	r6,2
   20b2c:	9c000417 	ldw	r16,16(r19)
   20b30:	319a0504 	addi	r6,r6,26644
   20b34:	32400204 	addi	r9,r6,8
   20b38:	82410326 	beq	r16,r9,20f48 <_malloc_r+0x588>
   20b3c:	81000117 	ldw	r4,4(r16)
   20b40:	00bfff04 	movi	r2,-4
   20b44:	208e703a 	and	r7,r4,r2
   20b48:	3c45c83a 	sub	r2,r7,r17
   20b4c:	010003c4 	movi	r4,15
   20b50:	2080ee16 	blt	r4,r2,20f0c <_malloc_r+0x54c>
   20b54:	32400515 	stw	r9,20(r6)
   20b58:	32400415 	stw	r9,16(r6)
   20b5c:	1000510e 	bge	r2,zero,20ca4 <_malloc_r+0x2e4>
   20b60:	00807fc4 	movi	r2,511
   20b64:	11c0ce36 	bltu	r2,r7,20ea0 <_malloc_r+0x4e0>
   20b68:	3808d0fa 	srli	r4,r7,3
   20b6c:	01c00044 	movi	r7,1
   20b70:	30800117 	ldw	r2,4(r6)
   20b74:	210b883a 	add	r5,r4,r4
   20b78:	294b883a 	add	r5,r5,r5
   20b7c:	2009d0ba 	srai	r4,r4,2
   20b80:	294b883a 	add	r5,r5,r5
   20b84:	298b883a 	add	r5,r5,r6
   20b88:	2a000217 	ldw	r8,8(r5)
   20b8c:	3908983a 	sll	r4,r7,r4
   20b90:	81400315 	stw	r5,12(r16)
   20b94:	82000215 	stw	r8,8(r16)
   20b98:	2088b03a 	or	r4,r4,r2
   20b9c:	2c000215 	stw	r16,8(r5)
   20ba0:	31000115 	stw	r4,4(r6)
   20ba4:	44000315 	stw	r16,12(r8)
   20ba8:	1805d0ba 	srai	r2,r3,2
   20bac:	01400044 	movi	r5,1
   20bb0:	288a983a 	sll	r5,r5,r2
   20bb4:	21404336 	bltu	r4,r5,20cc4 <_malloc_r+0x304>
   20bb8:	2144703a 	and	r2,r4,r5
   20bbc:	10000a1e 	bne	r2,zero,20be8 <_malloc_r+0x228>
   20bc0:	00bfff04 	movi	r2,-4
   20bc4:	294b883a 	add	r5,r5,r5
   20bc8:	1886703a 	and	r3,r3,r2
   20bcc:	2144703a 	and	r2,r4,r5
   20bd0:	18c00104 	addi	r3,r3,4
   20bd4:	1000041e 	bne	r2,zero,20be8 <_malloc_r+0x228>
   20bd8:	294b883a 	add	r5,r5,r5
   20bdc:	2144703a 	and	r2,r4,r5
   20be0:	18c00104 	addi	r3,r3,4
   20be4:	103ffc26 	beq	r2,zero,20bd8 <_malloc_r+0x218>
   20be8:	023fff04 	movi	r8,-4
   20bec:	01c003c4 	movi	r7,15
   20bf0:	18c5883a 	add	r2,r3,r3
   20bf4:	1085883a 	add	r2,r2,r2
   20bf8:	1085883a 	add	r2,r2,r2
   20bfc:	9895883a 	add	r10,r19,r2
   20c00:	52c00304 	addi	r11,r10,12
   20c04:	1819883a 	mov	r12,r3
   20c08:	5c000017 	ldw	r16,0(r11)
   20c0c:	59bffd04 	addi	r6,r11,-12
   20c10:	8180041e 	bne	r16,r6,20c24 <_malloc_r+0x264>
   20c14:	0000ce06 	br	20f50 <_malloc_r+0x590>
   20c18:	2000d70e 	bge	r4,zero,20f78 <_malloc_r+0x5b8>
   20c1c:	84000317 	ldw	r16,12(r16)
   20c20:	8180cb26 	beq	r16,r6,20f50 <_malloc_r+0x590>
   20c24:	80800117 	ldw	r2,4(r16)
   20c28:	1204703a 	and	r2,r2,r8
   20c2c:	1449c83a 	sub	r4,r2,r17
   20c30:	393ff90e 	bge	r7,r4,20c18 <_malloc_r+0x258>
   20c34:	80800317 	ldw	r2,12(r16)
   20c38:	80c00217 	ldw	r3,8(r16)
   20c3c:	89400054 	ori	r5,r17,1
   20c40:	81400115 	stw	r5,4(r16)
   20c44:	18800315 	stw	r2,12(r3)
   20c48:	10c00215 	stw	r3,8(r2)
   20c4c:	8463883a 	add	r17,r16,r17
   20c50:	9c400515 	stw	r17,20(r19)
   20c54:	9c400415 	stw	r17,16(r19)
   20c58:	20800054 	ori	r2,r4,1
   20c5c:	88800115 	stw	r2,4(r17)
   20c60:	8a400315 	stw	r9,12(r17)
   20c64:	8a400215 	stw	r9,8(r17)
   20c68:	8923883a 	add	r17,r17,r4
   20c6c:	89000015 	stw	r4,0(r17)
   20c70:	9009883a 	mov	r4,r18
   20c74:	00236000 	call	23600 <__malloc_unlock>
   20c78:	80800204 	addi	r2,r16,8
   20c7c:	003f7d06 	br	20a74 <_malloc_r+0xb4>
   20c80:	00800304 	movi	r2,12
   20c84:	90800015 	stw	r2,0(r18)
   20c88:	0005883a 	mov	r2,zero
   20c8c:	003f7906 	br	20a74 <_malloc_r+0xb4>
   20c90:	01401f84 	movi	r5,126
   20c94:	01c00fc4 	movi	r7,63
   20c98:	003f8d06 	br	20ad0 <_malloc_r+0x110>
   20c9c:	81000317 	ldw	r4,12(r16)
   20ca0:	003f6a06 	br	20a4c <_malloc_r+0x8c>
   20ca4:	81c5883a 	add	r2,r16,r7
   20ca8:	10c00117 	ldw	r3,4(r2)
   20cac:	9009883a 	mov	r4,r18
   20cb0:	18c00054 	ori	r3,r3,1
   20cb4:	10c00115 	stw	r3,4(r2)
   20cb8:	00236000 	call	23600 <__malloc_unlock>
   20cbc:	80800204 	addi	r2,r16,8
   20cc0:	003f6c06 	br	20a74 <_malloc_r+0xb4>
   20cc4:	9c000217 	ldw	r16,8(r19)
   20cc8:	00bfff04 	movi	r2,-4
   20ccc:	85800117 	ldw	r22,4(r16)
   20cd0:	b0ac703a 	and	r22,r22,r2
   20cd4:	b4400336 	bltu	r22,r17,20ce4 <_malloc_r+0x324>
   20cd8:	b445c83a 	sub	r2,r22,r17
   20cdc:	00c003c4 	movi	r3,15
   20ce0:	18805d16 	blt	r3,r2,20e58 <_malloc_r+0x498>
   20ce4:	05c000b4 	movhi	r23,2
   20ce8:	008000f4 	movhi	r2,3
   20cec:	bddfa304 	addi	r23,r23,32396
   20cf0:	10a66504 	addi	r2,r2,-26220
   20cf4:	15400017 	ldw	r21,0(r2)
   20cf8:	b9000017 	ldw	r4,0(r23)
   20cfc:	00ffffc4 	movi	r3,-1
   20d00:	858d883a 	add	r6,r16,r22
   20d04:	8d6b883a 	add	r21,r17,r21
   20d08:	20c0e426 	beq	r4,r3,2109c <_malloc_r+0x6dc>
   20d0c:	ad4403c4 	addi	r21,r21,4111
   20d10:	00fc0004 	movi	r3,-4096
   20d14:	a8ea703a 	and	r21,r21,r3
   20d18:	9009883a 	mov	r4,r18
   20d1c:	a80b883a 	mov	r5,r21
   20d20:	d9800015 	stw	r6,0(sp)
   20d24:	0021a4c0 	call	21a4c <_sbrk_r>
   20d28:	00ffffc4 	movi	r3,-1
   20d2c:	1029883a 	mov	r20,r2
   20d30:	d9800017 	ldw	r6,0(sp)
   20d34:	10c0a426 	beq	r2,r3,20fc8 <_malloc_r+0x608>
   20d38:	1180a236 	bltu	r2,r6,20fc4 <_malloc_r+0x604>
   20d3c:	070000f4 	movhi	fp,3
   20d40:	e7266e04 	addi	fp,fp,-26184
   20d44:	e0c00017 	ldw	r3,0(fp)
   20d48:	a8c7883a 	add	r3,r21,r3
   20d4c:	e0c00015 	stw	r3,0(fp)
   20d50:	3500da26 	beq	r6,r20,210bc <_malloc_r+0x6fc>
   20d54:	b9000017 	ldw	r4,0(r23)
   20d58:	00bfffc4 	movi	r2,-1
   20d5c:	2080e426 	beq	r4,r2,210f0 <_malloc_r+0x730>
   20d60:	a185c83a 	sub	r2,r20,r6
   20d64:	1885883a 	add	r2,r3,r2
   20d68:	e0800015 	stw	r2,0(fp)
   20d6c:	a0c001cc 	andi	r3,r20,7
   20d70:	1800b526 	beq	r3,zero,21048 <_malloc_r+0x688>
   20d74:	a0e9c83a 	sub	r20,r20,r3
   20d78:	00840204 	movi	r2,4104
   20d7c:	a5000204 	addi	r20,r20,8
   20d80:	10c7c83a 	sub	r3,r2,r3
   20d84:	a545883a 	add	r2,r20,r21
   20d88:	1083ffcc 	andi	r2,r2,4095
   20d8c:	18abc83a 	sub	r21,r3,r2
   20d90:	9009883a 	mov	r4,r18
   20d94:	a80b883a 	mov	r5,r21
   20d98:	0021a4c0 	call	21a4c <_sbrk_r>
   20d9c:	00ffffc4 	movi	r3,-1
   20da0:	10c0d026 	beq	r2,r3,210e4 <_malloc_r+0x724>
   20da4:	1507c83a 	sub	r3,r2,r20
   20da8:	a8c7883a 	add	r3,r21,r3
   20dac:	18c00054 	ori	r3,r3,1
   20db0:	e0800017 	ldw	r2,0(fp)
   20db4:	9d000215 	stw	r20,8(r19)
   20db8:	a0c00115 	stw	r3,4(r20)
   20dbc:	a887883a 	add	r3,r21,r2
   20dc0:	e0c00015 	stw	r3,0(fp)
   20dc4:	84c00e26 	beq	r16,r19,20e00 <_malloc_r+0x440>
   20dc8:	018003c4 	movi	r6,15
   20dcc:	3580a02e 	bgeu	r6,r22,21050 <_malloc_r+0x690>
   20dd0:	81400117 	ldw	r5,4(r16)
   20dd4:	013ffe04 	movi	r4,-8
   20dd8:	b0bffd04 	addi	r2,r22,-12
   20ddc:	1104703a 	and	r2,r2,r4
   20de0:	2900004c 	andi	r4,r5,1
   20de4:	1108b03a 	or	r4,r2,r4
   20de8:	81000115 	stw	r4,4(r16)
   20dec:	01400144 	movi	r5,5
   20df0:	8089883a 	add	r4,r16,r2
   20df4:	21400115 	stw	r5,4(r4)
   20df8:	21400215 	stw	r5,8(r4)
   20dfc:	3080c036 	bltu	r6,r2,21100 <_malloc_r+0x740>
   20e00:	008000f4 	movhi	r2,3
   20e04:	10a66404 	addi	r2,r2,-26224
   20e08:	11000017 	ldw	r4,0(r2)
   20e0c:	20c0012e 	bgeu	r4,r3,20e14 <_malloc_r+0x454>
   20e10:	10c00015 	stw	r3,0(r2)
   20e14:	008000f4 	movhi	r2,3
   20e18:	10a66304 	addi	r2,r2,-26228
   20e1c:	11000017 	ldw	r4,0(r2)
   20e20:	9c000217 	ldw	r16,8(r19)
   20e24:	20c0012e 	bgeu	r4,r3,20e2c <_malloc_r+0x46c>
   20e28:	10c00015 	stw	r3,0(r2)
   20e2c:	80c00117 	ldw	r3,4(r16)
   20e30:	00bfff04 	movi	r2,-4
   20e34:	1886703a 	and	r3,r3,r2
   20e38:	1c45c83a 	sub	r2,r3,r17
   20e3c:	1c400236 	bltu	r3,r17,20e48 <_malloc_r+0x488>
   20e40:	00c003c4 	movi	r3,15
   20e44:	18800416 	blt	r3,r2,20e58 <_malloc_r+0x498>
   20e48:	9009883a 	mov	r4,r18
   20e4c:	00236000 	call	23600 <__malloc_unlock>
   20e50:	0005883a 	mov	r2,zero
   20e54:	003f0706 	br	20a74 <_malloc_r+0xb4>
   20e58:	88c00054 	ori	r3,r17,1
   20e5c:	80c00115 	stw	r3,4(r16)
   20e60:	8463883a 	add	r17,r16,r17
   20e64:	10800054 	ori	r2,r2,1
   20e68:	9c400215 	stw	r17,8(r19)
   20e6c:	88800115 	stw	r2,4(r17)
   20e70:	9009883a 	mov	r4,r18
   20e74:	00236000 	call	23600 <__malloc_unlock>
   20e78:	80800204 	addi	r2,r16,8
   20e7c:	003efd06 	br	20a74 <_malloc_r+0xb4>
   20e80:	00800504 	movi	r2,20
   20e84:	10c0482e 	bgeu	r2,r3,20fa8 <_malloc_r+0x5e8>
   20e88:	00801504 	movi	r2,84
   20e8c:	10c06836 	bltu	r2,r3,21030 <_malloc_r+0x670>
   20e90:	8806d33a 	srli	r3,r17,12
   20e94:	19c01b84 	addi	r7,r3,110
   20e98:	39cb883a 	add	r5,r7,r7
   20e9c:	003f0c06 	br	20ad0 <_malloc_r+0x110>
   20ea0:	3804d27a 	srli	r2,r7,9
   20ea4:	01000104 	movi	r4,4
   20ea8:	2080422e 	bgeu	r4,r2,20fb4 <_malloc_r+0x5f4>
   20eac:	01000504 	movi	r4,20
   20eb0:	20807c36 	bltu	r4,r2,210a4 <_malloc_r+0x6e4>
   20eb4:	110016c4 	addi	r4,r2,91
   20eb8:	210b883a 	add	r5,r4,r4
   20ebc:	294b883a 	add	r5,r5,r5
   20ec0:	294b883a 	add	r5,r5,r5
   20ec4:	994b883a 	add	r5,r19,r5
   20ec8:	28800217 	ldw	r2,8(r5)
   20ecc:	020000b4 	movhi	r8,2
   20ed0:	421a0504 	addi	r8,r8,26644
   20ed4:	11406326 	beq	r2,r5,21064 <_malloc_r+0x6a4>
   20ed8:	01bfff04 	movi	r6,-4
   20edc:	11000117 	ldw	r4,4(r2)
   20ee0:	2188703a 	and	r4,r4,r6
   20ee4:	3900022e 	bgeu	r7,r4,20ef0 <_malloc_r+0x530>
   20ee8:	10800217 	ldw	r2,8(r2)
   20eec:	28bffb1e 	bne	r5,r2,20edc <_malloc_r+0x51c>
   20ef0:	11800317 	ldw	r6,12(r2)
   20ef4:	99000117 	ldw	r4,4(r19)
   20ef8:	81800315 	stw	r6,12(r16)
   20efc:	80800215 	stw	r2,8(r16)
   20f00:	34000215 	stw	r16,8(r6)
   20f04:	14000315 	stw	r16,12(r2)
   20f08:	003f2706 	br	20ba8 <_malloc_r+0x1e8>
   20f0c:	88c00054 	ori	r3,r17,1
   20f10:	80c00115 	stw	r3,4(r16)
   20f14:	8463883a 	add	r17,r16,r17
   20f18:	34400515 	stw	r17,20(r6)
   20f1c:	34400415 	stw	r17,16(r6)
   20f20:	10c00054 	ori	r3,r2,1
   20f24:	8a400315 	stw	r9,12(r17)
   20f28:	8a400215 	stw	r9,8(r17)
   20f2c:	88c00115 	stw	r3,4(r17)
   20f30:	88a3883a 	add	r17,r17,r2
   20f34:	88800015 	stw	r2,0(r17)
   20f38:	9009883a 	mov	r4,r18
   20f3c:	00236000 	call	23600 <__malloc_unlock>
   20f40:	80800204 	addi	r2,r16,8
   20f44:	003ecb06 	br	20a74 <_malloc_r+0xb4>
   20f48:	31000117 	ldw	r4,4(r6)
   20f4c:	003f1606 	br	20ba8 <_malloc_r+0x1e8>
   20f50:	63000044 	addi	r12,r12,1
   20f54:	608000cc 	andi	r2,r12,3
   20f58:	5ac00204 	addi	r11,r11,8
   20f5c:	103f2a1e 	bne	r2,zero,20c08 <_malloc_r+0x248>
   20f60:	00002106 	br	20fe8 <_malloc_r+0x628>
   20f64:	80800204 	addi	r2,r16,8
   20f68:	84000517 	ldw	r16,20(r16)
   20f6c:	143eb31e 	bne	r2,r16,20a3c <_malloc_r+0x7c>
   20f70:	18c00084 	addi	r3,r3,2
   20f74:	003eec06 	br	20b28 <_malloc_r+0x168>
   20f78:	8085883a 	add	r2,r16,r2
   20f7c:	10c00117 	ldw	r3,4(r2)
   20f80:	81000317 	ldw	r4,12(r16)
   20f84:	81400217 	ldw	r5,8(r16)
   20f88:	18c00054 	ori	r3,r3,1
   20f8c:	10c00115 	stw	r3,4(r2)
   20f90:	29000315 	stw	r4,12(r5)
   20f94:	21400215 	stw	r5,8(r4)
   20f98:	9009883a 	mov	r4,r18
   20f9c:	00236000 	call	23600 <__malloc_unlock>
   20fa0:	80800204 	addi	r2,r16,8
   20fa4:	003eb306 	br	20a74 <_malloc_r+0xb4>
   20fa8:	19c016c4 	addi	r7,r3,91
   20fac:	39cb883a 	add	r5,r7,r7
   20fb0:	003ec706 	br	20ad0 <_malloc_r+0x110>
   20fb4:	3804d1ba 	srli	r2,r7,6
   20fb8:	11000e04 	addi	r4,r2,56
   20fbc:	210b883a 	add	r5,r4,r4
   20fc0:	003fbe06 	br	20ebc <_malloc_r+0x4fc>
   20fc4:	84ff5d26 	beq	r16,r19,20d3c <_malloc_r+0x37c>
   20fc8:	9c000217 	ldw	r16,8(r19)
   20fcc:	00bfff04 	movi	r2,-4
   20fd0:	80c00117 	ldw	r3,4(r16)
   20fd4:	1886703a 	and	r3,r3,r2
   20fd8:	003f9706 	br	20e38 <_malloc_r+0x478>
   20fdc:	52800017 	ldw	r10,0(r10)
   20fe0:	18ffffc4 	addi	r3,r3,-1
   20fe4:	50805c1e 	bne	r10,r2,21158 <_malloc_r+0x798>
   20fe8:	190000cc 	andi	r4,r3,3
   20fec:	50bffe04 	addi	r2,r10,-8
   20ff0:	203ffa1e 	bne	r4,zero,20fdc <_malloc_r+0x61c>
   20ff4:	98800117 	ldw	r2,4(r19)
   20ff8:	0146303a 	nor	r3,zero,r5
   20ffc:	1884703a 	and	r2,r3,r2
   21000:	98800115 	stw	r2,4(r19)
   21004:	294b883a 	add	r5,r5,r5
   21008:	117f2e36 	bltu	r2,r5,20cc4 <_malloc_r+0x304>
   2100c:	283f2d26 	beq	r5,zero,20cc4 <_malloc_r+0x304>
   21010:	1146703a 	and	r3,r2,r5
   21014:	1800521e 	bne	r3,zero,21160 <_malloc_r+0x7a0>
   21018:	6007883a 	mov	r3,r12
   2101c:	294b883a 	add	r5,r5,r5
   21020:	1148703a 	and	r4,r2,r5
   21024:	18c00104 	addi	r3,r3,4
   21028:	203ffc26 	beq	r4,zero,2101c <_malloc_r+0x65c>
   2102c:	003ef006 	br	20bf0 <_malloc_r+0x230>
   21030:	00805504 	movi	r2,340
   21034:	10c01336 	bltu	r2,r3,21084 <_malloc_r+0x6c4>
   21038:	8806d3fa 	srli	r3,r17,15
   2103c:	19c01dc4 	addi	r7,r3,119
   21040:	39cb883a 	add	r5,r7,r7
   21044:	003ea206 	br	20ad0 <_malloc_r+0x110>
   21048:	00c40004 	movi	r3,4096
   2104c:	003f4d06 	br	20d84 <_malloc_r+0x3c4>
   21050:	00800044 	movi	r2,1
   21054:	a0800115 	stw	r2,4(r20)
   21058:	a021883a 	mov	r16,r20
   2105c:	0007883a 	mov	r3,zero
   21060:	003f7506 	br	20e38 <_malloc_r+0x478>
   21064:	200bd0ba 	srai	r5,r4,2
   21068:	01800044 	movi	r6,1
   2106c:	41000117 	ldw	r4,4(r8)
   21070:	314a983a 	sll	r5,r6,r5
   21074:	100d883a 	mov	r6,r2
   21078:	2908b03a 	or	r4,r5,r4
   2107c:	41000115 	stw	r4,4(r8)
   21080:	003f9d06 	br	20ef8 <_malloc_r+0x538>
   21084:	00815504 	movi	r2,1364
   21088:	10c01336 	bltu	r2,r3,210d8 <_malloc_r+0x718>
   2108c:	8806d4ba 	srli	r3,r17,18
   21090:	19c01f04 	addi	r7,r3,124
   21094:	39cb883a 	add	r5,r7,r7
   21098:	003e8d06 	br	20ad0 <_malloc_r+0x110>
   2109c:	ad400404 	addi	r21,r21,16
   210a0:	003f1d06 	br	20d18 <_malloc_r+0x358>
   210a4:	01001504 	movi	r4,84
   210a8:	20801c36 	bltu	r4,r2,2111c <_malloc_r+0x75c>
   210ac:	3804d33a 	srli	r2,r7,12
   210b0:	11001b84 	addi	r4,r2,110
   210b4:	210b883a 	add	r5,r4,r4
   210b8:	003f8006 	br	20ebc <_malloc_r+0x4fc>
   210bc:	3083ffcc 	andi	r2,r6,4095
   210c0:	103f241e 	bne	r2,zero,20d54 <_malloc_r+0x394>
   210c4:	99000217 	ldw	r4,8(r19)
   210c8:	ad85883a 	add	r2,r21,r22
   210cc:	10800054 	ori	r2,r2,1
   210d0:	20800115 	stw	r2,4(r4)
   210d4:	003f4a06 	br	20e00 <_malloc_r+0x440>
   210d8:	01403f04 	movi	r5,252
   210dc:	01c01f84 	movi	r7,126
   210e0:	003e7b06 	br	20ad0 <_malloc_r+0x110>
   210e4:	00c00044 	movi	r3,1
   210e8:	002b883a 	mov	r21,zero
   210ec:	003f3006 	br	20db0 <_malloc_r+0x3f0>
   210f0:	008000b4 	movhi	r2,2
   210f4:	109fa304 	addi	r2,r2,32396
   210f8:	15000015 	stw	r20,0(r2)
   210fc:	003f1b06 	br	20d6c <_malloc_r+0x3ac>
   21100:	9009883a 	mov	r4,r18
   21104:	81400204 	addi	r5,r16,8
   21108:	002234c0 	call	2234c <_free_r>
   2110c:	008000f4 	movhi	r2,3
   21110:	10a66e04 	addi	r2,r2,-26184
   21114:	10c00017 	ldw	r3,0(r2)
   21118:	003f3906 	br	20e00 <_malloc_r+0x440>
   2111c:	01005504 	movi	r4,340
   21120:	20800436 	bltu	r4,r2,21134 <_malloc_r+0x774>
   21124:	3804d3fa 	srli	r2,r7,15
   21128:	11001dc4 	addi	r4,r2,119
   2112c:	210b883a 	add	r5,r4,r4
   21130:	003f6206 	br	20ebc <_malloc_r+0x4fc>
   21134:	01015504 	movi	r4,1364
   21138:	20800436 	bltu	r4,r2,2114c <_malloc_r+0x78c>
   2113c:	3804d4ba 	srli	r2,r7,18
   21140:	11001f04 	addi	r4,r2,124
   21144:	210b883a 	add	r5,r4,r4
   21148:	003f5c06 	br	20ebc <_malloc_r+0x4fc>
   2114c:	01403f04 	movi	r5,252
   21150:	01001f84 	movi	r4,126
   21154:	003f5906 	br	20ebc <_malloc_r+0x4fc>
   21158:	98800117 	ldw	r2,4(r19)
   2115c:	003fa906 	br	21004 <_malloc_r+0x644>
   21160:	6007883a 	mov	r3,r12
   21164:	003ea206 	br	20bf0 <_malloc_r+0x230>

00021168 <memchr>:
   21168:	208000cc 	andi	r2,r4,3
   2116c:	280f883a 	mov	r7,r5
   21170:	10003526 	beq	r2,zero,21248 <memchr+0xe0>
   21174:	30bfffc4 	addi	r2,r6,-1
   21178:	30001b26 	beq	r6,zero,211e8 <memchr+0x80>
   2117c:	21800003 	ldbu	r6,0(r4)
   21180:	28c03fcc 	andi	r3,r5,255
   21184:	30c01a26 	beq	r6,r3,211f0 <memchr+0x88>
   21188:	180d883a 	mov	r6,r3
   2118c:	00000406 	br	211a0 <memchr+0x38>
   21190:	10001526 	beq	r2,zero,211e8 <memchr+0x80>
   21194:	20c00003 	ldbu	r3,0(r4)
   21198:	10bfffc4 	addi	r2,r2,-1
   2119c:	19801426 	beq	r3,r6,211f0 <memchr+0x88>
   211a0:	21000044 	addi	r4,r4,1
   211a4:	20c000cc 	andi	r3,r4,3
   211a8:	183ff91e 	bne	r3,zero,21190 <memchr+0x28>
   211ac:	024000c4 	movi	r9,3
   211b0:	48801136 	bltu	r9,r2,211f8 <memchr+0x90>
   211b4:	10000c26 	beq	r2,zero,211e8 <memchr+0x80>
   211b8:	20c00003 	ldbu	r3,0(r4)
   211bc:	29403fcc 	andi	r5,r5,255
   211c0:	19400b26 	beq	r3,r5,211f0 <memchr+0x88>
   211c4:	20c00044 	addi	r3,r4,1
   211c8:	2085883a 	add	r2,r4,r2
   211cc:	39803fcc 	andi	r6,r7,255
   211d0:	00000306 	br	211e0 <memchr+0x78>
   211d4:	18c00044 	addi	r3,r3,1
   211d8:	197fffc3 	ldbu	r5,-1(r3)
   211dc:	29800426 	beq	r5,r6,211f0 <memchr+0x88>
   211e0:	1809883a 	mov	r4,r3
   211e4:	18bffb1e 	bne	r3,r2,211d4 <memchr+0x6c>
   211e8:	0005883a 	mov	r2,zero
   211ec:	f800283a 	ret
   211f0:	2005883a 	mov	r2,r4
   211f4:	f800283a 	ret
   211f8:	28c03fcc 	andi	r3,r5,255
   211fc:	1810923a 	slli	r8,r3,8
   21200:	02ffbff4 	movhi	r11,65279
   21204:	02a02074 	movhi	r10,32897
   21208:	40c6b03a 	or	r3,r8,r3
   2120c:	1810943a 	slli	r8,r3,16
   21210:	5affbfc4 	addi	r11,r11,-257
   21214:	52a02004 	addi	r10,r10,-32640
   21218:	40d0b03a 	or	r8,r8,r3
   2121c:	20c00017 	ldw	r3,0(r4)
   21220:	40c6f03a 	xor	r3,r8,r3
   21224:	1acd883a 	add	r6,r3,r11
   21228:	00c6303a 	nor	r3,zero,r3
   2122c:	30c6703a 	and	r3,r6,r3
   21230:	1a86703a 	and	r3,r3,r10
   21234:	183fdf1e 	bne	r3,zero,211b4 <memchr+0x4c>
   21238:	10bfff04 	addi	r2,r2,-4
   2123c:	21000104 	addi	r4,r4,4
   21240:	48bff636 	bltu	r9,r2,2121c <memchr+0xb4>
   21244:	003fdb06 	br	211b4 <memchr+0x4c>
   21248:	3005883a 	mov	r2,r6
   2124c:	003fd706 	br	211ac <memchr+0x44>

00021250 <memcpy>:
   21250:	deffff04 	addi	sp,sp,-4
   21254:	dc000015 	stw	r16,0(sp)
   21258:	00c003c4 	movi	r3,15
   2125c:	2005883a 	mov	r2,r4
   21260:	1980432e 	bgeu	r3,r6,21370 <memcpy+0x120>
   21264:	2146b03a 	or	r3,r4,r5
   21268:	18c000cc 	andi	r3,r3,3
   2126c:	1800421e 	bne	r3,zero,21378 <memcpy+0x128>
   21270:	343ffc04 	addi	r16,r6,-16
   21274:	8020d13a 	srli	r16,r16,4
   21278:	28c00104 	addi	r3,r5,4
   2127c:	23400104 	addi	r13,r4,4
   21280:	801e913a 	slli	r15,r16,4
   21284:	2b000204 	addi	r12,r5,8
   21288:	22c00204 	addi	r11,r4,8
   2128c:	7bc00504 	addi	r15,r15,20
   21290:	2a800304 	addi	r10,r5,12
   21294:	22400304 	addi	r9,r4,12
   21298:	2bdf883a 	add	r15,r5,r15
   2129c:	2811883a 	mov	r8,r5
   212a0:	200f883a 	mov	r7,r4
   212a4:	41000017 	ldw	r4,0(r8)
   212a8:	39c00404 	addi	r7,r7,16
   212ac:	18c00404 	addi	r3,r3,16
   212b0:	393ffc15 	stw	r4,-16(r7)
   212b4:	1bbffc17 	ldw	r14,-16(r3)
   212b8:	6b400404 	addi	r13,r13,16
   212bc:	5ac00404 	addi	r11,r11,16
   212c0:	6bbffc15 	stw	r14,-16(r13)
   212c4:	63800017 	ldw	r14,0(r12)
   212c8:	4a400404 	addi	r9,r9,16
   212cc:	42000404 	addi	r8,r8,16
   212d0:	5bbffc15 	stw	r14,-16(r11)
   212d4:	53800017 	ldw	r14,0(r10)
   212d8:	63000404 	addi	r12,r12,16
   212dc:	52800404 	addi	r10,r10,16
   212e0:	4bbffc15 	stw	r14,-16(r9)
   212e4:	1bffef1e 	bne	r3,r15,212a4 <memcpy+0x54>
   212e8:	81c00044 	addi	r7,r16,1
   212ec:	380e913a 	slli	r7,r7,4
   212f0:	310003cc 	andi	r4,r6,15
   212f4:	02c000c4 	movi	r11,3
   212f8:	11c7883a 	add	r3,r2,r7
   212fc:	29cb883a 	add	r5,r5,r7
   21300:	59001f2e 	bgeu	r11,r4,21380 <memcpy+0x130>
   21304:	1813883a 	mov	r9,r3
   21308:	2811883a 	mov	r8,r5
   2130c:	200f883a 	mov	r7,r4
   21310:	42800017 	ldw	r10,0(r8)
   21314:	4a400104 	addi	r9,r9,4
   21318:	39ffff04 	addi	r7,r7,-4
   2131c:	4abfff15 	stw	r10,-4(r9)
   21320:	42000104 	addi	r8,r8,4
   21324:	59fffa36 	bltu	r11,r7,21310 <memcpy+0xc0>
   21328:	213fff04 	addi	r4,r4,-4
   2132c:	2008d0ba 	srli	r4,r4,2
   21330:	318000cc 	andi	r6,r6,3
   21334:	21000044 	addi	r4,r4,1
   21338:	2109883a 	add	r4,r4,r4
   2133c:	2109883a 	add	r4,r4,r4
   21340:	1907883a 	add	r3,r3,r4
   21344:	290b883a 	add	r5,r5,r4
   21348:	30000626 	beq	r6,zero,21364 <memcpy+0x114>
   2134c:	198d883a 	add	r6,r3,r6
   21350:	29c00003 	ldbu	r7,0(r5)
   21354:	18c00044 	addi	r3,r3,1
   21358:	29400044 	addi	r5,r5,1
   2135c:	19ffffc5 	stb	r7,-1(r3)
   21360:	19bffb1e 	bne	r3,r6,21350 <memcpy+0x100>
   21364:	dc000017 	ldw	r16,0(sp)
   21368:	dec00104 	addi	sp,sp,4
   2136c:	f800283a 	ret
   21370:	2007883a 	mov	r3,r4
   21374:	003ff406 	br	21348 <memcpy+0xf8>
   21378:	2007883a 	mov	r3,r4
   2137c:	003ff306 	br	2134c <memcpy+0xfc>
   21380:	200d883a 	mov	r6,r4
   21384:	003ff006 	br	21348 <memcpy+0xf8>

00021388 <memmove>:
   21388:	2005883a 	mov	r2,r4
   2138c:	29000b2e 	bgeu	r5,r4,213bc <memmove+0x34>
   21390:	298f883a 	add	r7,r5,r6
   21394:	21c0092e 	bgeu	r4,r7,213bc <memmove+0x34>
   21398:	2187883a 	add	r3,r4,r6
   2139c:	198bc83a 	sub	r5,r3,r6
   213a0:	30004b26 	beq	r6,zero,214d0 <memmove+0x148>
   213a4:	39ffffc4 	addi	r7,r7,-1
   213a8:	39000003 	ldbu	r4,0(r7)
   213ac:	18ffffc4 	addi	r3,r3,-1
   213b0:	19000005 	stb	r4,0(r3)
   213b4:	197ffb1e 	bne	r3,r5,213a4 <memmove+0x1c>
   213b8:	f800283a 	ret
   213bc:	00c003c4 	movi	r3,15
   213c0:	1980412e 	bgeu	r3,r6,214c8 <memmove+0x140>
   213c4:	1146b03a 	or	r3,r2,r5
   213c8:	18c000cc 	andi	r3,r3,3
   213cc:	1800411e 	bne	r3,zero,214d4 <memmove+0x14c>
   213d0:	33fffc04 	addi	r15,r6,-16
   213d4:	781ed13a 	srli	r15,r15,4
   213d8:	28c00104 	addi	r3,r5,4
   213dc:	13400104 	addi	r13,r2,4
   213e0:	781c913a 	slli	r14,r15,4
   213e4:	2b000204 	addi	r12,r5,8
   213e8:	12c00204 	addi	r11,r2,8
   213ec:	73800504 	addi	r14,r14,20
   213f0:	2a800304 	addi	r10,r5,12
   213f4:	12400304 	addi	r9,r2,12
   213f8:	2b9d883a 	add	r14,r5,r14
   213fc:	2811883a 	mov	r8,r5
   21400:	100f883a 	mov	r7,r2
   21404:	41000017 	ldw	r4,0(r8)
   21408:	39c00404 	addi	r7,r7,16
   2140c:	18c00404 	addi	r3,r3,16
   21410:	393ffc15 	stw	r4,-16(r7)
   21414:	193ffc17 	ldw	r4,-16(r3)
   21418:	6b400404 	addi	r13,r13,16
   2141c:	5ac00404 	addi	r11,r11,16
   21420:	693ffc15 	stw	r4,-16(r13)
   21424:	61000017 	ldw	r4,0(r12)
   21428:	4a400404 	addi	r9,r9,16
   2142c:	42000404 	addi	r8,r8,16
   21430:	593ffc15 	stw	r4,-16(r11)
   21434:	51000017 	ldw	r4,0(r10)
   21438:	63000404 	addi	r12,r12,16
   2143c:	52800404 	addi	r10,r10,16
   21440:	493ffc15 	stw	r4,-16(r9)
   21444:	1bbfef1e 	bne	r3,r14,21404 <memmove+0x7c>
   21448:	79000044 	addi	r4,r15,1
   2144c:	2008913a 	slli	r4,r4,4
   21450:	328003cc 	andi	r10,r6,15
   21454:	02c000c4 	movi	r11,3
   21458:	1107883a 	add	r3,r2,r4
   2145c:	290b883a 	add	r5,r5,r4
   21460:	5a801e2e 	bgeu	r11,r10,214dc <memmove+0x154>
   21464:	1813883a 	mov	r9,r3
   21468:	2811883a 	mov	r8,r5
   2146c:	500f883a 	mov	r7,r10
   21470:	41000017 	ldw	r4,0(r8)
   21474:	4a400104 	addi	r9,r9,4
   21478:	39ffff04 	addi	r7,r7,-4
   2147c:	493fff15 	stw	r4,-4(r9)
   21480:	42000104 	addi	r8,r8,4
   21484:	59fffa36 	bltu	r11,r7,21470 <memmove+0xe8>
   21488:	513fff04 	addi	r4,r10,-4
   2148c:	2008d0ba 	srli	r4,r4,2
   21490:	318000cc 	andi	r6,r6,3
   21494:	21000044 	addi	r4,r4,1
   21498:	2109883a 	add	r4,r4,r4
   2149c:	2109883a 	add	r4,r4,r4
   214a0:	1907883a 	add	r3,r3,r4
   214a4:	290b883a 	add	r5,r5,r4
   214a8:	30000926 	beq	r6,zero,214d0 <memmove+0x148>
   214ac:	198d883a 	add	r6,r3,r6
   214b0:	29c00003 	ldbu	r7,0(r5)
   214b4:	18c00044 	addi	r3,r3,1
   214b8:	29400044 	addi	r5,r5,1
   214bc:	19ffffc5 	stb	r7,-1(r3)
   214c0:	19bffb1e 	bne	r3,r6,214b0 <memmove+0x128>
   214c4:	f800283a 	ret
   214c8:	1007883a 	mov	r3,r2
   214cc:	003ff606 	br	214a8 <memmove+0x120>
   214d0:	f800283a 	ret
   214d4:	1007883a 	mov	r3,r2
   214d8:	003ff406 	br	214ac <memmove+0x124>
   214dc:	500d883a 	mov	r6,r10
   214e0:	003ff106 	br	214a8 <memmove+0x120>

000214e4 <_realloc_r>:
   214e4:	defff604 	addi	sp,sp,-40
   214e8:	dd000415 	stw	r20,16(sp)
   214ec:	dc400115 	stw	r17,4(sp)
   214f0:	dfc00915 	stw	ra,36(sp)
   214f4:	df000815 	stw	fp,32(sp)
   214f8:	ddc00715 	stw	r23,28(sp)
   214fc:	dd800615 	stw	r22,24(sp)
   21500:	dd400515 	stw	r21,20(sp)
   21504:	dcc00315 	stw	r19,12(sp)
   21508:	dc800215 	stw	r18,8(sp)
   2150c:	dc000015 	stw	r16,0(sp)
   21510:	2829883a 	mov	r20,r5
   21514:	3023883a 	mov	r17,r6
   21518:	2800ad26 	beq	r5,zero,217d0 <_realloc_r+0x2ec>
   2151c:	2025883a 	mov	r18,r4
   21520:	00235e00 	call	235e0 <__malloc_lock>
   21524:	a0ffff17 	ldw	r3,-4(r20)
   21528:	043fff04 	movi	r16,-4
   2152c:	890002c4 	addi	r4,r17,11
   21530:	01c00584 	movi	r7,22
   21534:	a57ffe04 	addi	r21,r20,-8
   21538:	1c20703a 	and	r16,r3,r16
   2153c:	39001d2e 	bgeu	r7,r4,215b4 <_realloc_r+0xd0>
   21540:	05bffe04 	movi	r22,-8
   21544:	25ac703a 	and	r22,r4,r22
   21548:	b00f883a 	mov	r7,r22
   2154c:	b0006516 	blt	r22,zero,216e4 <_realloc_r+0x200>
   21550:	b4406436 	bltu	r22,r17,216e4 <_realloc_r+0x200>
   21554:	81c01a0e 	bge	r16,r7,215c0 <_realloc_r+0xdc>
   21558:	070000b4 	movhi	fp,2
   2155c:	e71a0504 	addi	fp,fp,26644
   21560:	e1400217 	ldw	r5,8(fp)
   21564:	ac11883a 	add	r8,r21,r16
   21568:	2a006226 	beq	r5,r8,216f4 <_realloc_r+0x210>
   2156c:	41800117 	ldw	r6,4(r8)
   21570:	027fff84 	movi	r9,-2
   21574:	3252703a 	and	r9,r6,r9
   21578:	4253883a 	add	r9,r8,r9
   2157c:	49000117 	ldw	r4,4(r9)
   21580:	2100004c 	andi	r4,r4,1
   21584:	2000281e 	bne	r4,zero,21628 <_realloc_r+0x144>
   21588:	00bfff04 	movi	r2,-4
   2158c:	3084703a 	and	r2,r6,r2
   21590:	1409883a 	add	r4,r2,r16
   21594:	21c05e16 	blt	r4,r7,21710 <_realloc_r+0x22c>
   21598:	40800317 	ldw	r2,12(r8)
   2159c:	41400217 	ldw	r5,8(r8)
   215a0:	a023883a 	mov	r17,r20
   215a4:	2021883a 	mov	r16,r4
   215a8:	28800315 	stw	r2,12(r5)
   215ac:	11400215 	stw	r5,8(r2)
   215b0:	00000406 	br	215c4 <_realloc_r+0xe0>
   215b4:	01c00404 	movi	r7,16
   215b8:	382d883a 	mov	r22,r7
   215bc:	003fe406 	br	21550 <_realloc_r+0x6c>
   215c0:	a023883a 	mov	r17,r20
   215c4:	858fc83a 	sub	r7,r16,r22
   215c8:	008003c4 	movi	r2,15
   215cc:	18c0004c 	andi	r3,r3,1
   215d0:	11c07236 	bltu	r2,r7,2179c <_realloc_r+0x2b8>
   215d4:	1c06b03a 	or	r3,r3,r16
   215d8:	a8c00115 	stw	r3,4(r21)
   215dc:	ac21883a 	add	r16,r21,r16
   215e0:	80800117 	ldw	r2,4(r16)
   215e4:	10800054 	ori	r2,r2,1
   215e8:	80800115 	stw	r2,4(r16)
   215ec:	9009883a 	mov	r4,r18
   215f0:	00236000 	call	23600 <__malloc_unlock>
   215f4:	8805883a 	mov	r2,r17
   215f8:	dfc00917 	ldw	ra,36(sp)
   215fc:	df000817 	ldw	fp,32(sp)
   21600:	ddc00717 	ldw	r23,28(sp)
   21604:	dd800617 	ldw	r22,24(sp)
   21608:	dd400517 	ldw	r21,20(sp)
   2160c:	dd000417 	ldw	r20,16(sp)
   21610:	dcc00317 	ldw	r19,12(sp)
   21614:	dc800217 	ldw	r18,8(sp)
   21618:	dc400117 	ldw	r17,4(sp)
   2161c:	dc000017 	ldw	r16,0(sp)
   21620:	dec00a04 	addi	sp,sp,40
   21624:	f800283a 	ret
   21628:	18c0004c 	andi	r3,r3,1
   2162c:	1800081e 	bne	r3,zero,21650 <_realloc_r+0x16c>
   21630:	a4fffe17 	ldw	r19,-8(r20)
   21634:	00bfff04 	movi	r2,-4
   21638:	ace7c83a 	sub	r19,r21,r19
   2163c:	98c00117 	ldw	r3,4(r19)
   21640:	1886703a 	and	r3,r3,r2
   21644:	98000226 	beq	r19,zero,21650 <_realloc_r+0x16c>
   21648:	1c2f883a 	add	r23,r3,r16
   2164c:	b9c06d0e 	bge	r23,r7,21804 <_realloc_r+0x320>
   21650:	880b883a 	mov	r5,r17
   21654:	9009883a 	mov	r4,r18
   21658:	00209c00 	call	209c0 <_malloc_r>
   2165c:	1023883a 	mov	r17,r2
   21660:	1000ef26 	beq	r2,zero,21a20 <_realloc_r+0x53c>
   21664:	a0ffff17 	ldw	r3,-4(r20)
   21668:	113ffe04 	addi	r4,r2,-8
   2166c:	00bfff84 	movi	r2,-2
   21670:	1884703a 	and	r2,r3,r2
   21674:	a885883a 	add	r2,r21,r2
   21678:	2080bf26 	beq	r4,r2,21978 <_realloc_r+0x494>
   2167c:	81bfff04 	addi	r6,r16,-4
   21680:	00800904 	movi	r2,36
   21684:	11808936 	bltu	r2,r6,218ac <_realloc_r+0x3c8>
   21688:	00c004c4 	movi	r3,19
   2168c:	19806c2e 	bgeu	r3,r6,21840 <_realloc_r+0x35c>
   21690:	a0c00017 	ldw	r3,0(r20)
   21694:	88c00015 	stw	r3,0(r17)
   21698:	a0c00117 	ldw	r3,4(r20)
   2169c:	88c00115 	stw	r3,4(r17)
   216a0:	00c006c4 	movi	r3,27
   216a4:	1980ac36 	bltu	r3,r6,21958 <_realloc_r+0x474>
   216a8:	88800204 	addi	r2,r17,8
   216ac:	a0c00204 	addi	r3,r20,8
   216b0:	19000017 	ldw	r4,0(r3)
   216b4:	11000015 	stw	r4,0(r2)
   216b8:	19000117 	ldw	r4,4(r3)
   216bc:	11000115 	stw	r4,4(r2)
   216c0:	18c00217 	ldw	r3,8(r3)
   216c4:	10c00215 	stw	r3,8(r2)
   216c8:	a00b883a 	mov	r5,r20
   216cc:	9009883a 	mov	r4,r18
   216d0:	002234c0 	call	2234c <_free_r>
   216d4:	9009883a 	mov	r4,r18
   216d8:	00236000 	call	23600 <__malloc_unlock>
   216dc:	8805883a 	mov	r2,r17
   216e0:	003fc506 	br	215f8 <_realloc_r+0x114>
   216e4:	00800304 	movi	r2,12
   216e8:	90800015 	stw	r2,0(r18)
   216ec:	0005883a 	mov	r2,zero
   216f0:	003fc106 	br	215f8 <_realloc_r+0x114>
   216f4:	29800117 	ldw	r6,4(r5)
   216f8:	00bfff04 	movi	r2,-4
   216fc:	b1000404 	addi	r4,r22,16
   21700:	3084703a 	and	r2,r6,r2
   21704:	140d883a 	add	r6,r2,r16
   21708:	31005b0e 	bge	r6,r4,21878 <_realloc_r+0x394>
   2170c:	2811883a 	mov	r8,r5
   21710:	18c0004c 	andi	r3,r3,1
   21714:	183fce1e 	bne	r3,zero,21650 <_realloc_r+0x16c>
   21718:	a4fffe17 	ldw	r19,-8(r20)
   2171c:	00ffff04 	movi	r3,-4
   21720:	ace7c83a 	sub	r19,r21,r19
   21724:	99000117 	ldw	r4,4(r19)
   21728:	20c6703a 	and	r3,r4,r3
   2172c:	403fc526 	beq	r8,zero,21644 <_realloc_r+0x160>
   21730:	1c2f883a 	add	r23,r3,r16
   21734:	b8af883a 	add	r23,r23,r2
   21738:	41406026 	beq	r8,r5,218bc <_realloc_r+0x3d8>
   2173c:	b9ffc116 	blt	r23,r7,21644 <_realloc_r+0x160>
   21740:	40c00217 	ldw	r3,8(r8)
   21744:	40800317 	ldw	r2,12(r8)
   21748:	81bfff04 	addi	r6,r16,-4
   2174c:	01000904 	movi	r4,36
   21750:	18800315 	stw	r2,12(r3)
   21754:	10c00215 	stw	r3,8(r2)
   21758:	99400217 	ldw	r5,8(r19)
   2175c:	98c00317 	ldw	r3,12(r19)
   21760:	9c400204 	addi	r17,r19,8
   21764:	28c00315 	stw	r3,12(r5)
   21768:	19400215 	stw	r5,8(r3)
   2176c:	21802d36 	bltu	r4,r6,21824 <_realloc_r+0x340>
   21770:	008004c4 	movi	r2,19
   21774:	1180352e 	bgeu	r2,r6,2184c <_realloc_r+0x368>
   21778:	a0800017 	ldw	r2,0(r20)
   2177c:	98800215 	stw	r2,8(r19)
   21780:	a0800117 	ldw	r2,4(r20)
   21784:	98800315 	stw	r2,12(r19)
   21788:	008006c4 	movi	r2,27
   2178c:	11808036 	bltu	r2,r6,21990 <_realloc_r+0x4ac>
   21790:	98c00404 	addi	r3,r19,16
   21794:	a5000204 	addi	r20,r20,8
   21798:	00002d06 	br	21850 <_realloc_r+0x36c>
   2179c:	1d86b03a 	or	r3,r3,r22
   217a0:	ad8b883a 	add	r5,r21,r22
   217a4:	a8c00115 	stw	r3,4(r21)
   217a8:	38800054 	ori	r2,r7,1
   217ac:	28800115 	stw	r2,4(r5)
   217b0:	29cf883a 	add	r7,r5,r7
   217b4:	38800117 	ldw	r2,4(r7)
   217b8:	9009883a 	mov	r4,r18
   217bc:	29400204 	addi	r5,r5,8
   217c0:	10800054 	ori	r2,r2,1
   217c4:	38800115 	stw	r2,4(r7)
   217c8:	002234c0 	call	2234c <_free_r>
   217cc:	003f8706 	br	215ec <_realloc_r+0x108>
   217d0:	300b883a 	mov	r5,r6
   217d4:	dfc00917 	ldw	ra,36(sp)
   217d8:	df000817 	ldw	fp,32(sp)
   217dc:	ddc00717 	ldw	r23,28(sp)
   217e0:	dd800617 	ldw	r22,24(sp)
   217e4:	dd400517 	ldw	r21,20(sp)
   217e8:	dd000417 	ldw	r20,16(sp)
   217ec:	dcc00317 	ldw	r19,12(sp)
   217f0:	dc800217 	ldw	r18,8(sp)
   217f4:	dc400117 	ldw	r17,4(sp)
   217f8:	dc000017 	ldw	r16,0(sp)
   217fc:	dec00a04 	addi	sp,sp,40
   21800:	00209c01 	jmpi	209c0 <_malloc_r>
   21804:	98800317 	ldw	r2,12(r19)
   21808:	98c00217 	ldw	r3,8(r19)
   2180c:	81bfff04 	addi	r6,r16,-4
   21810:	01000904 	movi	r4,36
   21814:	18800315 	stw	r2,12(r3)
   21818:	10c00215 	stw	r3,8(r2)
   2181c:	9c400204 	addi	r17,r19,8
   21820:	21bfd32e 	bgeu	r4,r6,21770 <_realloc_r+0x28c>
   21824:	8809883a 	mov	r4,r17
   21828:	a00b883a 	mov	r5,r20
   2182c:	00213880 	call	21388 <memmove>
   21830:	98c00117 	ldw	r3,4(r19)
   21834:	b821883a 	mov	r16,r23
   21838:	982b883a 	mov	r21,r19
   2183c:	003f6106 	br	215c4 <_realloc_r+0xe0>
   21840:	8805883a 	mov	r2,r17
   21844:	a007883a 	mov	r3,r20
   21848:	003f9906 	br	216b0 <_realloc_r+0x1cc>
   2184c:	8807883a 	mov	r3,r17
   21850:	a0800017 	ldw	r2,0(r20)
   21854:	b821883a 	mov	r16,r23
   21858:	982b883a 	mov	r21,r19
   2185c:	18800015 	stw	r2,0(r3)
   21860:	a0800117 	ldw	r2,4(r20)
   21864:	18800115 	stw	r2,4(r3)
   21868:	a0800217 	ldw	r2,8(r20)
   2186c:	18800215 	stw	r2,8(r3)
   21870:	98c00117 	ldw	r3,4(r19)
   21874:	003f5306 	br	215c4 <_realloc_r+0xe0>
   21878:	adab883a 	add	r21,r21,r22
   2187c:	3585c83a 	sub	r2,r6,r22
   21880:	e5400215 	stw	r21,8(fp)
   21884:	10800054 	ori	r2,r2,1
   21888:	a8800115 	stw	r2,4(r21)
   2188c:	a0bfff17 	ldw	r2,-4(r20)
   21890:	9009883a 	mov	r4,r18
   21894:	1080004c 	andi	r2,r2,1
   21898:	b0acb03a 	or	r22,r22,r2
   2189c:	a5bfff15 	stw	r22,-4(r20)
   218a0:	00236000 	call	23600 <__malloc_unlock>
   218a4:	a005883a 	mov	r2,r20
   218a8:	003f5306 	br	215f8 <_realloc_r+0x114>
   218ac:	8809883a 	mov	r4,r17
   218b0:	a00b883a 	mov	r5,r20
   218b4:	00213880 	call	21388 <memmove>
   218b8:	003f8306 	br	216c8 <_realloc_r+0x1e4>
   218bc:	b0800404 	addi	r2,r22,16
   218c0:	b8bf6016 	blt	r23,r2,21644 <_realloc_r+0x160>
   218c4:	98800317 	ldw	r2,12(r19)
   218c8:	98c00217 	ldw	r3,8(r19)
   218cc:	81bfff04 	addi	r6,r16,-4
   218d0:	01000904 	movi	r4,36
   218d4:	18800315 	stw	r2,12(r3)
   218d8:	10c00215 	stw	r3,8(r2)
   218dc:	9c400204 	addi	r17,r19,8
   218e0:	21804336 	bltu	r4,r6,219f0 <_realloc_r+0x50c>
   218e4:	008004c4 	movi	r2,19
   218e8:	11803f2e 	bgeu	r2,r6,219e8 <_realloc_r+0x504>
   218ec:	a0800017 	ldw	r2,0(r20)
   218f0:	98800215 	stw	r2,8(r19)
   218f4:	a0800117 	ldw	r2,4(r20)
   218f8:	98800315 	stw	r2,12(r19)
   218fc:	008006c4 	movi	r2,27
   21900:	11803f36 	bltu	r2,r6,21a00 <_realloc_r+0x51c>
   21904:	98800404 	addi	r2,r19,16
   21908:	a5000204 	addi	r20,r20,8
   2190c:	a0c00017 	ldw	r3,0(r20)
   21910:	10c00015 	stw	r3,0(r2)
   21914:	a0c00117 	ldw	r3,4(r20)
   21918:	10c00115 	stw	r3,4(r2)
   2191c:	a0c00217 	ldw	r3,8(r20)
   21920:	10c00215 	stw	r3,8(r2)
   21924:	9d87883a 	add	r3,r19,r22
   21928:	bd85c83a 	sub	r2,r23,r22
   2192c:	e0c00215 	stw	r3,8(fp)
   21930:	10800054 	ori	r2,r2,1
   21934:	18800115 	stw	r2,4(r3)
   21938:	98800117 	ldw	r2,4(r19)
   2193c:	9009883a 	mov	r4,r18
   21940:	1080004c 	andi	r2,r2,1
   21944:	b0acb03a 	or	r22,r22,r2
   21948:	9d800115 	stw	r22,4(r19)
   2194c:	00236000 	call	23600 <__malloc_unlock>
   21950:	8805883a 	mov	r2,r17
   21954:	003f2806 	br	215f8 <_realloc_r+0x114>
   21958:	a0c00217 	ldw	r3,8(r20)
   2195c:	88c00215 	stw	r3,8(r17)
   21960:	a0c00317 	ldw	r3,12(r20)
   21964:	88c00315 	stw	r3,12(r17)
   21968:	30801126 	beq	r6,r2,219b0 <_realloc_r+0x4cc>
   2196c:	88800404 	addi	r2,r17,16
   21970:	a0c00404 	addi	r3,r20,16
   21974:	003f4e06 	br	216b0 <_realloc_r+0x1cc>
   21978:	893fff17 	ldw	r4,-4(r17)
   2197c:	00bfff04 	movi	r2,-4
   21980:	a023883a 	mov	r17,r20
   21984:	2084703a 	and	r2,r4,r2
   21988:	80a1883a 	add	r16,r16,r2
   2198c:	003f0d06 	br	215c4 <_realloc_r+0xe0>
   21990:	a0800217 	ldw	r2,8(r20)
   21994:	98800415 	stw	r2,16(r19)
   21998:	a0800317 	ldw	r2,12(r20)
   2199c:	98800515 	stw	r2,20(r19)
   219a0:	31000a26 	beq	r6,r4,219cc <_realloc_r+0x4e8>
   219a4:	98c00604 	addi	r3,r19,24
   219a8:	a5000404 	addi	r20,r20,16
   219ac:	003fa806 	br	21850 <_realloc_r+0x36c>
   219b0:	a1000417 	ldw	r4,16(r20)
   219b4:	88800604 	addi	r2,r17,24
   219b8:	a0c00604 	addi	r3,r20,24
   219bc:	89000415 	stw	r4,16(r17)
   219c0:	a1000517 	ldw	r4,20(r20)
   219c4:	89000515 	stw	r4,20(r17)
   219c8:	003f3906 	br	216b0 <_realloc_r+0x1cc>
   219cc:	a0800417 	ldw	r2,16(r20)
   219d0:	a5000604 	addi	r20,r20,24
   219d4:	98c00804 	addi	r3,r19,32
   219d8:	98800615 	stw	r2,24(r19)
   219dc:	a0bfff17 	ldw	r2,-4(r20)
   219e0:	98800715 	stw	r2,28(r19)
   219e4:	003f9a06 	br	21850 <_realloc_r+0x36c>
   219e8:	8805883a 	mov	r2,r17
   219ec:	003fc706 	br	2190c <_realloc_r+0x428>
   219f0:	8809883a 	mov	r4,r17
   219f4:	a00b883a 	mov	r5,r20
   219f8:	00213880 	call	21388 <memmove>
   219fc:	003fc906 	br	21924 <_realloc_r+0x440>
   21a00:	a0800217 	ldw	r2,8(r20)
   21a04:	98800415 	stw	r2,16(r19)
   21a08:	a0800317 	ldw	r2,12(r20)
   21a0c:	98800515 	stw	r2,20(r19)
   21a10:	31000726 	beq	r6,r4,21a30 <_realloc_r+0x54c>
   21a14:	98800604 	addi	r2,r19,24
   21a18:	a5000404 	addi	r20,r20,16
   21a1c:	003fbb06 	br	2190c <_realloc_r+0x428>
   21a20:	9009883a 	mov	r4,r18
   21a24:	00236000 	call	23600 <__malloc_unlock>
   21a28:	0005883a 	mov	r2,zero
   21a2c:	003ef206 	br	215f8 <_realloc_r+0x114>
   21a30:	a0c00417 	ldw	r3,16(r20)
   21a34:	a5000604 	addi	r20,r20,24
   21a38:	98800804 	addi	r2,r19,32
   21a3c:	98c00615 	stw	r3,24(r19)
   21a40:	a0ffff17 	ldw	r3,-4(r20)
   21a44:	98c00715 	stw	r3,28(r19)
   21a48:	003fb006 	br	2190c <_realloc_r+0x428>

00021a4c <_sbrk_r>:
   21a4c:	defffd04 	addi	sp,sp,-12
   21a50:	dc000015 	stw	r16,0(sp)
   21a54:	040000f4 	movhi	r16,3
   21a58:	dc400115 	stw	r17,4(sp)
   21a5c:	84266604 	addi	r16,r16,-26216
   21a60:	2023883a 	mov	r17,r4
   21a64:	2809883a 	mov	r4,r5
   21a68:	dfc00215 	stw	ra,8(sp)
   21a6c:	80000015 	stw	zero,0(r16)
   21a70:	0023a380 	call	23a38 <sbrk>
   21a74:	00ffffc4 	movi	r3,-1
   21a78:	10c00526 	beq	r2,r3,21a90 <_sbrk_r+0x44>
   21a7c:	dfc00217 	ldw	ra,8(sp)
   21a80:	dc400117 	ldw	r17,4(sp)
   21a84:	dc000017 	ldw	r16,0(sp)
   21a88:	dec00304 	addi	sp,sp,12
   21a8c:	f800283a 	ret
   21a90:	80c00017 	ldw	r3,0(r16)
   21a94:	183ff926 	beq	r3,zero,21a7c <_sbrk_r+0x30>
   21a98:	88c00015 	stw	r3,0(r17)
   21a9c:	003ff706 	br	21a7c <_sbrk_r+0x30>

00021aa0 <__swsetup_r>:
   21aa0:	008000b4 	movhi	r2,2
   21aa4:	defffd04 	addi	sp,sp,-12
   21aa8:	109fa204 	addi	r2,r2,32392
   21aac:	dc400115 	stw	r17,4(sp)
   21ab0:	2023883a 	mov	r17,r4
   21ab4:	11000017 	ldw	r4,0(r2)
   21ab8:	dc000015 	stw	r16,0(sp)
   21abc:	dfc00215 	stw	ra,8(sp)
   21ac0:	2821883a 	mov	r16,r5
   21ac4:	20000226 	beq	r4,zero,21ad0 <__swsetup_r+0x30>
   21ac8:	20c00e17 	ldw	r3,56(r4)
   21acc:	18003126 	beq	r3,zero,21b94 <__swsetup_r+0xf4>
   21ad0:	8080030b 	ldhu	r2,12(r16)
   21ad4:	10c0020c 	andi	r3,r2,8
   21ad8:	100d883a 	mov	r6,r2
   21adc:	18000f26 	beq	r3,zero,21b1c <__swsetup_r+0x7c>
   21ae0:	80c00417 	ldw	r3,16(r16)
   21ae4:	18001526 	beq	r3,zero,21b3c <__swsetup_r+0x9c>
   21ae8:	1100004c 	andi	r4,r2,1
   21aec:	20001c1e 	bne	r4,zero,21b60 <__swsetup_r+0xc0>
   21af0:	1080008c 	andi	r2,r2,2
   21af4:	1000291e 	bne	r2,zero,21b9c <__swsetup_r+0xfc>
   21af8:	80800517 	ldw	r2,20(r16)
   21afc:	80800215 	stw	r2,8(r16)
   21b00:	18001c26 	beq	r3,zero,21b74 <__swsetup_r+0xd4>
   21b04:	0005883a 	mov	r2,zero
   21b08:	dfc00217 	ldw	ra,8(sp)
   21b0c:	dc400117 	ldw	r17,4(sp)
   21b10:	dc000017 	ldw	r16,0(sp)
   21b14:	dec00304 	addi	sp,sp,12
   21b18:	f800283a 	ret
   21b1c:	3080040c 	andi	r2,r6,16
   21b20:	10002e26 	beq	r2,zero,21bdc <__swsetup_r+0x13c>
   21b24:	3080010c 	andi	r2,r6,4
   21b28:	10001e1e 	bne	r2,zero,21ba4 <__swsetup_r+0x104>
   21b2c:	80c00417 	ldw	r3,16(r16)
   21b30:	30800214 	ori	r2,r6,8
   21b34:	8080030d 	sth	r2,12(r16)
   21b38:	183feb1e 	bne	r3,zero,21ae8 <__swsetup_r+0x48>
   21b3c:	1140a00c 	andi	r5,r2,640
   21b40:	01008004 	movi	r4,512
   21b44:	293fe826 	beq	r5,r4,21ae8 <__swsetup_r+0x48>
   21b48:	8809883a 	mov	r4,r17
   21b4c:	800b883a 	mov	r5,r16
   21b50:	00227c40 	call	227c4 <__smakebuf_r>
   21b54:	8080030b 	ldhu	r2,12(r16)
   21b58:	80c00417 	ldw	r3,16(r16)
   21b5c:	003fe206 	br	21ae8 <__swsetup_r+0x48>
   21b60:	80800517 	ldw	r2,20(r16)
   21b64:	80000215 	stw	zero,8(r16)
   21b68:	0085c83a 	sub	r2,zero,r2
   21b6c:	80800615 	stw	r2,24(r16)
   21b70:	183fe41e 	bne	r3,zero,21b04 <__swsetup_r+0x64>
   21b74:	80c0030b 	ldhu	r3,12(r16)
   21b78:	0005883a 	mov	r2,zero
   21b7c:	1900200c 	andi	r4,r3,128
   21b80:	203fe126 	beq	r4,zero,21b08 <__swsetup_r+0x68>
   21b84:	18c01014 	ori	r3,r3,64
   21b88:	80c0030d 	sth	r3,12(r16)
   21b8c:	00bfffc4 	movi	r2,-1
   21b90:	003fdd06 	br	21b08 <__swsetup_r+0x68>
   21b94:	00221d80 	call	221d8 <__sinit>
   21b98:	003fcd06 	br	21ad0 <__swsetup_r+0x30>
   21b9c:	0005883a 	mov	r2,zero
   21ba0:	003fd606 	br	21afc <__swsetup_r+0x5c>
   21ba4:	81400c17 	ldw	r5,48(r16)
   21ba8:	28000626 	beq	r5,zero,21bc4 <__swsetup_r+0x124>
   21bac:	80801004 	addi	r2,r16,64
   21bb0:	28800326 	beq	r5,r2,21bc0 <__swsetup_r+0x120>
   21bb4:	8809883a 	mov	r4,r17
   21bb8:	002234c0 	call	2234c <_free_r>
   21bbc:	8180030b 	ldhu	r6,12(r16)
   21bc0:	80000c15 	stw	zero,48(r16)
   21bc4:	80c00417 	ldw	r3,16(r16)
   21bc8:	00bff6c4 	movi	r2,-37
   21bcc:	118c703a 	and	r6,r2,r6
   21bd0:	80000115 	stw	zero,4(r16)
   21bd4:	80c00015 	stw	r3,0(r16)
   21bd8:	003fd506 	br	21b30 <__swsetup_r+0x90>
   21bdc:	00800244 	movi	r2,9
   21be0:	88800015 	stw	r2,0(r17)
   21be4:	30801014 	ori	r2,r6,64
   21be8:	8080030d 	sth	r2,12(r16)
   21bec:	00bfffc4 	movi	r2,-1
   21bf0:	003fc506 	br	21b08 <__swsetup_r+0x68>

00021bf4 <__sflush_r>:
   21bf4:	2880030b 	ldhu	r2,12(r5)
   21bf8:	defffb04 	addi	sp,sp,-20
   21bfc:	dcc00315 	stw	r19,12(sp)
   21c00:	dc400115 	stw	r17,4(sp)
   21c04:	dfc00415 	stw	ra,16(sp)
   21c08:	dc800215 	stw	r18,8(sp)
   21c0c:	dc000015 	stw	r16,0(sp)
   21c10:	10c0020c 	andi	r3,r2,8
   21c14:	2823883a 	mov	r17,r5
   21c18:	2027883a 	mov	r19,r4
   21c1c:	1800311e 	bne	r3,zero,21ce4 <__sflush_r+0xf0>
   21c20:	28c00117 	ldw	r3,4(r5)
   21c24:	10820014 	ori	r2,r2,2048
   21c28:	2880030d 	sth	r2,12(r5)
   21c2c:	00c04b0e 	bge	zero,r3,21d5c <__sflush_r+0x168>
   21c30:	8a000a17 	ldw	r8,40(r17)
   21c34:	40002326 	beq	r8,zero,21cc4 <__sflush_r+0xd0>
   21c38:	9c000017 	ldw	r16,0(r19)
   21c3c:	10c4000c 	andi	r3,r2,4096
   21c40:	98000015 	stw	zero,0(r19)
   21c44:	18004826 	beq	r3,zero,21d68 <__sflush_r+0x174>
   21c48:	89801417 	ldw	r6,80(r17)
   21c4c:	10c0010c 	andi	r3,r2,4
   21c50:	18000626 	beq	r3,zero,21c6c <__sflush_r+0x78>
   21c54:	88c00117 	ldw	r3,4(r17)
   21c58:	88800c17 	ldw	r2,48(r17)
   21c5c:	30cdc83a 	sub	r6,r6,r3
   21c60:	10000226 	beq	r2,zero,21c6c <__sflush_r+0x78>
   21c64:	88800f17 	ldw	r2,60(r17)
   21c68:	308dc83a 	sub	r6,r6,r2
   21c6c:	89400717 	ldw	r5,28(r17)
   21c70:	9809883a 	mov	r4,r19
   21c74:	000f883a 	mov	r7,zero
   21c78:	403ee83a 	callr	r8
   21c7c:	00ffffc4 	movi	r3,-1
   21c80:	10c04426 	beq	r2,r3,21d94 <__sflush_r+0x1a0>
   21c84:	88c0030b 	ldhu	r3,12(r17)
   21c88:	89000417 	ldw	r4,16(r17)
   21c8c:	88000115 	stw	zero,4(r17)
   21c90:	197dffcc 	andi	r5,r3,63487
   21c94:	8940030d 	sth	r5,12(r17)
   21c98:	89000015 	stw	r4,0(r17)
   21c9c:	18c4000c 	andi	r3,r3,4096
   21ca0:	18002c1e 	bne	r3,zero,21d54 <__sflush_r+0x160>
   21ca4:	89400c17 	ldw	r5,48(r17)
   21ca8:	9c000015 	stw	r16,0(r19)
   21cac:	28000526 	beq	r5,zero,21cc4 <__sflush_r+0xd0>
   21cb0:	88801004 	addi	r2,r17,64
   21cb4:	28800226 	beq	r5,r2,21cc0 <__sflush_r+0xcc>
   21cb8:	9809883a 	mov	r4,r19
   21cbc:	002234c0 	call	2234c <_free_r>
   21cc0:	88000c15 	stw	zero,48(r17)
   21cc4:	0005883a 	mov	r2,zero
   21cc8:	dfc00417 	ldw	ra,16(sp)
   21ccc:	dcc00317 	ldw	r19,12(sp)
   21cd0:	dc800217 	ldw	r18,8(sp)
   21cd4:	dc400117 	ldw	r17,4(sp)
   21cd8:	dc000017 	ldw	r16,0(sp)
   21cdc:	dec00504 	addi	sp,sp,20
   21ce0:	f800283a 	ret
   21ce4:	2c800417 	ldw	r18,16(r5)
   21ce8:	903ff626 	beq	r18,zero,21cc4 <__sflush_r+0xd0>
   21cec:	2c000017 	ldw	r16,0(r5)
   21cf0:	108000cc 	andi	r2,r2,3
   21cf4:	2c800015 	stw	r18,0(r5)
   21cf8:	84a1c83a 	sub	r16,r16,r18
   21cfc:	1000131e 	bne	r2,zero,21d4c <__sflush_r+0x158>
   21d00:	28800517 	ldw	r2,20(r5)
   21d04:	88800215 	stw	r2,8(r17)
   21d08:	04000316 	blt	zero,r16,21d18 <__sflush_r+0x124>
   21d0c:	003fed06 	br	21cc4 <__sflush_r+0xd0>
   21d10:	90a5883a 	add	r18,r18,r2
   21d14:	043feb0e 	bge	zero,r16,21cc4 <__sflush_r+0xd0>
   21d18:	88800917 	ldw	r2,36(r17)
   21d1c:	89400717 	ldw	r5,28(r17)
   21d20:	800f883a 	mov	r7,r16
   21d24:	900d883a 	mov	r6,r18
   21d28:	9809883a 	mov	r4,r19
   21d2c:	103ee83a 	callr	r2
   21d30:	80a1c83a 	sub	r16,r16,r2
   21d34:	00bff616 	blt	zero,r2,21d10 <__sflush_r+0x11c>
   21d38:	88c0030b 	ldhu	r3,12(r17)
   21d3c:	00bfffc4 	movi	r2,-1
   21d40:	18c01014 	ori	r3,r3,64
   21d44:	88c0030d 	sth	r3,12(r17)
   21d48:	003fdf06 	br	21cc8 <__sflush_r+0xd4>
   21d4c:	0005883a 	mov	r2,zero
   21d50:	003fec06 	br	21d04 <__sflush_r+0x110>
   21d54:	88801415 	stw	r2,80(r17)
   21d58:	003fd206 	br	21ca4 <__sflush_r+0xb0>
   21d5c:	28c00f17 	ldw	r3,60(r5)
   21d60:	00ffb316 	blt	zero,r3,21c30 <__sflush_r+0x3c>
   21d64:	003fd706 	br	21cc4 <__sflush_r+0xd0>
   21d68:	89400717 	ldw	r5,28(r17)
   21d6c:	000d883a 	mov	r6,zero
   21d70:	9809883a 	mov	r4,r19
   21d74:	01c00044 	movi	r7,1
   21d78:	403ee83a 	callr	r8
   21d7c:	100d883a 	mov	r6,r2
   21d80:	00bfffc4 	movi	r2,-1
   21d84:	30801426 	beq	r6,r2,21dd8 <__sflush_r+0x1e4>
   21d88:	8880030b 	ldhu	r2,12(r17)
   21d8c:	8a000a17 	ldw	r8,40(r17)
   21d90:	003fae06 	br	21c4c <__sflush_r+0x58>
   21d94:	98c00017 	ldw	r3,0(r19)
   21d98:	183fba26 	beq	r3,zero,21c84 <__sflush_r+0x90>
   21d9c:	01000744 	movi	r4,29
   21da0:	19000626 	beq	r3,r4,21dbc <__sflush_r+0x1c8>
   21da4:	01000584 	movi	r4,22
   21da8:	19000426 	beq	r3,r4,21dbc <__sflush_r+0x1c8>
   21dac:	88c0030b 	ldhu	r3,12(r17)
   21db0:	18c01014 	ori	r3,r3,64
   21db4:	88c0030d 	sth	r3,12(r17)
   21db8:	003fc306 	br	21cc8 <__sflush_r+0xd4>
   21dbc:	8880030b 	ldhu	r2,12(r17)
   21dc0:	88c00417 	ldw	r3,16(r17)
   21dc4:	88000115 	stw	zero,4(r17)
   21dc8:	10bdffcc 	andi	r2,r2,63487
   21dcc:	8880030d 	sth	r2,12(r17)
   21dd0:	88c00015 	stw	r3,0(r17)
   21dd4:	003fb306 	br	21ca4 <__sflush_r+0xb0>
   21dd8:	98800017 	ldw	r2,0(r19)
   21ddc:	103fea26 	beq	r2,zero,21d88 <__sflush_r+0x194>
   21de0:	00c00744 	movi	r3,29
   21de4:	10c00226 	beq	r2,r3,21df0 <__sflush_r+0x1fc>
   21de8:	00c00584 	movi	r3,22
   21dec:	10ffd21e 	bne	r2,r3,21d38 <__sflush_r+0x144>
   21df0:	9c000015 	stw	r16,0(r19)
   21df4:	0005883a 	mov	r2,zero
   21df8:	003fb306 	br	21cc8 <__sflush_r+0xd4>

00021dfc <_fflush_r>:
   21dfc:	defffd04 	addi	sp,sp,-12
   21e00:	dc000115 	stw	r16,4(sp)
   21e04:	dfc00215 	stw	ra,8(sp)
   21e08:	2021883a 	mov	r16,r4
   21e0c:	20000226 	beq	r4,zero,21e18 <_fflush_r+0x1c>
   21e10:	20800e17 	ldw	r2,56(r4)
   21e14:	10000c26 	beq	r2,zero,21e48 <_fflush_r+0x4c>
   21e18:	2880030f 	ldh	r2,12(r5)
   21e1c:	1000051e 	bne	r2,zero,21e34 <_fflush_r+0x38>
   21e20:	0005883a 	mov	r2,zero
   21e24:	dfc00217 	ldw	ra,8(sp)
   21e28:	dc000117 	ldw	r16,4(sp)
   21e2c:	dec00304 	addi	sp,sp,12
   21e30:	f800283a 	ret
   21e34:	8009883a 	mov	r4,r16
   21e38:	dfc00217 	ldw	ra,8(sp)
   21e3c:	dc000117 	ldw	r16,4(sp)
   21e40:	dec00304 	addi	sp,sp,12
   21e44:	0021bf41 	jmpi	21bf4 <__sflush_r>
   21e48:	d9400015 	stw	r5,0(sp)
   21e4c:	00221d80 	call	221d8 <__sinit>
   21e50:	d9400017 	ldw	r5,0(sp)
   21e54:	003ff006 	br	21e18 <_fflush_r+0x1c>

00021e58 <fflush>:
   21e58:	20000526 	beq	r4,zero,21e70 <fflush+0x18>
   21e5c:	008000b4 	movhi	r2,2
   21e60:	109fa204 	addi	r2,r2,32392
   21e64:	200b883a 	mov	r5,r4
   21e68:	11000017 	ldw	r4,0(r2)
   21e6c:	0021dfc1 	jmpi	21dfc <_fflush_r>
   21e70:	008000b4 	movhi	r2,2
   21e74:	109fa104 	addi	r2,r2,32388
   21e78:	11000017 	ldw	r4,0(r2)
   21e7c:	014000b4 	movhi	r5,2
   21e80:	29477f04 	addi	r5,r5,7676
   21e84:	00227001 	jmpi	22700 <_fwalk_reent>

00021e88 <__fp_lock>:
   21e88:	0005883a 	mov	r2,zero
   21e8c:	f800283a 	ret

00021e90 <__fp_unlock>:
   21e90:	0005883a 	mov	r2,zero
   21e94:	f800283a 	ret

00021e98 <_cleanup_r>:
   21e98:	014000b4 	movhi	r5,2
   21e9c:	294b2304 	addi	r5,r5,11404
   21ea0:	00227001 	jmpi	22700 <_fwalk_reent>

00021ea4 <__sinit.part.1>:
   21ea4:	defff704 	addi	sp,sp,-36
   21ea8:	00c000b4 	movhi	r3,2
   21eac:	dfc00815 	stw	ra,32(sp)
   21eb0:	ddc00715 	stw	r23,28(sp)
   21eb4:	dd800615 	stw	r22,24(sp)
   21eb8:	dd400515 	stw	r21,20(sp)
   21ebc:	dd000415 	stw	r20,16(sp)
   21ec0:	dcc00315 	stw	r19,12(sp)
   21ec4:	dc800215 	stw	r18,8(sp)
   21ec8:	dc400115 	stw	r17,4(sp)
   21ecc:	dc000015 	stw	r16,0(sp)
   21ed0:	18c7a604 	addi	r3,r3,7832
   21ed4:	24000117 	ldw	r16,4(r4)
   21ed8:	20c00f15 	stw	r3,60(r4)
   21edc:	2080bb04 	addi	r2,r4,748
   21ee0:	00c000c4 	movi	r3,3
   21ee4:	20c0b915 	stw	r3,740(r4)
   21ee8:	2080ba15 	stw	r2,744(r4)
   21eec:	2000b815 	stw	zero,736(r4)
   21ef0:	05c00204 	movi	r23,8
   21ef4:	00800104 	movi	r2,4
   21ef8:	2025883a 	mov	r18,r4
   21efc:	b80d883a 	mov	r6,r23
   21f00:	81001704 	addi	r4,r16,92
   21f04:	000b883a 	mov	r5,zero
   21f08:	80000015 	stw	zero,0(r16)
   21f0c:	80000115 	stw	zero,4(r16)
   21f10:	80000215 	stw	zero,8(r16)
   21f14:	8080030d 	sth	r2,12(r16)
   21f18:	80001915 	stw	zero,100(r16)
   21f1c:	8000038d 	sth	zero,14(r16)
   21f20:	80000415 	stw	zero,16(r16)
   21f24:	80000515 	stw	zero,20(r16)
   21f28:	80000615 	stw	zero,24(r16)
   21f2c:	002297c0 	call	2297c <memset>
   21f30:	058000b4 	movhi	r22,2
   21f34:	94400217 	ldw	r17,8(r18)
   21f38:	054000b4 	movhi	r21,2
   21f3c:	050000b4 	movhi	r20,2
   21f40:	04c000b4 	movhi	r19,2
   21f44:	b58aa804 	addi	r22,r22,10912
   21f48:	ad4abf04 	addi	r21,r21,11004
   21f4c:	a50ade04 	addi	r20,r20,11128
   21f50:	9ccaf504 	addi	r19,r19,11220
   21f54:	85800815 	stw	r22,32(r16)
   21f58:	85400915 	stw	r21,36(r16)
   21f5c:	85000a15 	stw	r20,40(r16)
   21f60:	84c00b15 	stw	r19,44(r16)
   21f64:	84000715 	stw	r16,28(r16)
   21f68:	00800284 	movi	r2,10
   21f6c:	8880030d 	sth	r2,12(r17)
   21f70:	00800044 	movi	r2,1
   21f74:	89001704 	addi	r4,r17,92
   21f78:	b80d883a 	mov	r6,r23
   21f7c:	000b883a 	mov	r5,zero
   21f80:	88000015 	stw	zero,0(r17)
   21f84:	88000115 	stw	zero,4(r17)
   21f88:	88000215 	stw	zero,8(r17)
   21f8c:	88001915 	stw	zero,100(r17)
   21f90:	8880038d 	sth	r2,14(r17)
   21f94:	88000415 	stw	zero,16(r17)
   21f98:	88000515 	stw	zero,20(r17)
   21f9c:	88000615 	stw	zero,24(r17)
   21fa0:	002297c0 	call	2297c <memset>
   21fa4:	94000317 	ldw	r16,12(r18)
   21fa8:	00800484 	movi	r2,18
   21fac:	8c400715 	stw	r17,28(r17)
   21fb0:	8d800815 	stw	r22,32(r17)
   21fb4:	8d400915 	stw	r21,36(r17)
   21fb8:	8d000a15 	stw	r20,40(r17)
   21fbc:	8cc00b15 	stw	r19,44(r17)
   21fc0:	8080030d 	sth	r2,12(r16)
   21fc4:	00800084 	movi	r2,2
   21fc8:	80000015 	stw	zero,0(r16)
   21fcc:	80000115 	stw	zero,4(r16)
   21fd0:	80000215 	stw	zero,8(r16)
   21fd4:	80001915 	stw	zero,100(r16)
   21fd8:	8080038d 	sth	r2,14(r16)
   21fdc:	80000415 	stw	zero,16(r16)
   21fe0:	80000515 	stw	zero,20(r16)
   21fe4:	80000615 	stw	zero,24(r16)
   21fe8:	81001704 	addi	r4,r16,92
   21fec:	000b883a 	mov	r5,zero
   21ff0:	b80d883a 	mov	r6,r23
   21ff4:	002297c0 	call	2297c <memset>
   21ff8:	00800044 	movi	r2,1
   21ffc:	84000715 	stw	r16,28(r16)
   22000:	85800815 	stw	r22,32(r16)
   22004:	85400915 	stw	r21,36(r16)
   22008:	85000a15 	stw	r20,40(r16)
   2200c:	84c00b15 	stw	r19,44(r16)
   22010:	90800e15 	stw	r2,56(r18)
   22014:	dfc00817 	ldw	ra,32(sp)
   22018:	ddc00717 	ldw	r23,28(sp)
   2201c:	dd800617 	ldw	r22,24(sp)
   22020:	dd400517 	ldw	r21,20(sp)
   22024:	dd000417 	ldw	r20,16(sp)
   22028:	dcc00317 	ldw	r19,12(sp)
   2202c:	dc800217 	ldw	r18,8(sp)
   22030:	dc400117 	ldw	r17,4(sp)
   22034:	dc000017 	ldw	r16,0(sp)
   22038:	dec00904 	addi	sp,sp,36
   2203c:	f800283a 	ret

00022040 <__sfmoreglue>:
   22040:	defffc04 	addi	sp,sp,-16
   22044:	dc400115 	stw	r17,4(sp)
   22048:	2c7fffc4 	addi	r17,r5,-1
   2204c:	8c401a24 	muli	r17,r17,104
   22050:	dc800215 	stw	r18,8(sp)
   22054:	2825883a 	mov	r18,r5
   22058:	89401d04 	addi	r5,r17,116
   2205c:	dc000015 	stw	r16,0(sp)
   22060:	dfc00315 	stw	ra,12(sp)
   22064:	00209c00 	call	209c0 <_malloc_r>
   22068:	1021883a 	mov	r16,r2
   2206c:	10000726 	beq	r2,zero,2208c <__sfmoreglue+0x4c>
   22070:	11000304 	addi	r4,r2,12
   22074:	10000015 	stw	zero,0(r2)
   22078:	14800115 	stw	r18,4(r2)
   2207c:	11000215 	stw	r4,8(r2)
   22080:	000b883a 	mov	r5,zero
   22084:	89801a04 	addi	r6,r17,104
   22088:	002297c0 	call	2297c <memset>
   2208c:	8005883a 	mov	r2,r16
   22090:	dfc00317 	ldw	ra,12(sp)
   22094:	dc800217 	ldw	r18,8(sp)
   22098:	dc400117 	ldw	r17,4(sp)
   2209c:	dc000017 	ldw	r16,0(sp)
   220a0:	dec00404 	addi	sp,sp,16
   220a4:	f800283a 	ret

000220a8 <__sfp>:
   220a8:	008000b4 	movhi	r2,2
   220ac:	defffb04 	addi	sp,sp,-20
   220b0:	109fa104 	addi	r2,r2,32388
   220b4:	dc800215 	stw	r18,8(sp)
   220b8:	14800017 	ldw	r18,0(r2)
   220bc:	dcc00315 	stw	r19,12(sp)
   220c0:	dfc00415 	stw	ra,16(sp)
   220c4:	90800e17 	ldw	r2,56(r18)
   220c8:	dc400115 	stw	r17,4(sp)
   220cc:	dc000015 	stw	r16,0(sp)
   220d0:	2027883a 	mov	r19,r4
   220d4:	1000021e 	bne	r2,zero,220e0 <__sfp+0x38>
   220d8:	9009883a 	mov	r4,r18
   220dc:	0021ea40 	call	21ea4 <__sinit.part.1>
   220e0:	9480b804 	addi	r18,r18,736
   220e4:	047fffc4 	movi	r17,-1
   220e8:	91400117 	ldw	r5,4(r18)
   220ec:	94000217 	ldw	r16,8(r18)
   220f0:	297fffc4 	addi	r5,r5,-1
   220f4:	28000a16 	blt	r5,zero,22120 <__sfp+0x78>
   220f8:	8080030f 	ldh	r2,12(r16)
   220fc:	10000c26 	beq	r2,zero,22130 <__sfp+0x88>
   22100:	80c01d04 	addi	r3,r16,116
   22104:	00000206 	br	22110 <__sfp+0x68>
   22108:	18bfe60f 	ldh	r2,-104(r3)
   2210c:	10000826 	beq	r2,zero,22130 <__sfp+0x88>
   22110:	297fffc4 	addi	r5,r5,-1
   22114:	1c3ffd04 	addi	r16,r3,-12
   22118:	18c01a04 	addi	r3,r3,104
   2211c:	2c7ffa1e 	bne	r5,r17,22108 <__sfp+0x60>
   22120:	90800017 	ldw	r2,0(r18)
   22124:	10001d26 	beq	r2,zero,2219c <__sfp+0xf4>
   22128:	1025883a 	mov	r18,r2
   2212c:	003fee06 	br	220e8 <__sfp+0x40>
   22130:	00bfffc4 	movi	r2,-1
   22134:	8080038d 	sth	r2,14(r16)
   22138:	00800044 	movi	r2,1
   2213c:	8080030d 	sth	r2,12(r16)
   22140:	80001915 	stw	zero,100(r16)
   22144:	80000015 	stw	zero,0(r16)
   22148:	80000215 	stw	zero,8(r16)
   2214c:	80000115 	stw	zero,4(r16)
   22150:	80000415 	stw	zero,16(r16)
   22154:	80000515 	stw	zero,20(r16)
   22158:	80000615 	stw	zero,24(r16)
   2215c:	81001704 	addi	r4,r16,92
   22160:	000b883a 	mov	r5,zero
   22164:	01800204 	movi	r6,8
   22168:	002297c0 	call	2297c <memset>
   2216c:	8005883a 	mov	r2,r16
   22170:	80000c15 	stw	zero,48(r16)
   22174:	80000d15 	stw	zero,52(r16)
   22178:	80001115 	stw	zero,68(r16)
   2217c:	80001215 	stw	zero,72(r16)
   22180:	dfc00417 	ldw	ra,16(sp)
   22184:	dcc00317 	ldw	r19,12(sp)
   22188:	dc800217 	ldw	r18,8(sp)
   2218c:	dc400117 	ldw	r17,4(sp)
   22190:	dc000017 	ldw	r16,0(sp)
   22194:	dec00504 	addi	sp,sp,20
   22198:	f800283a 	ret
   2219c:	9809883a 	mov	r4,r19
   221a0:	01400104 	movi	r5,4
   221a4:	00220400 	call	22040 <__sfmoreglue>
   221a8:	90800015 	stw	r2,0(r18)
   221ac:	103fde1e 	bne	r2,zero,22128 <__sfp+0x80>
   221b0:	00800304 	movi	r2,12
   221b4:	98800015 	stw	r2,0(r19)
   221b8:	0005883a 	mov	r2,zero
   221bc:	003ff006 	br	22180 <__sfp+0xd8>

000221c0 <_cleanup>:
   221c0:	008000b4 	movhi	r2,2
   221c4:	109fa104 	addi	r2,r2,32388
   221c8:	11000017 	ldw	r4,0(r2)
   221cc:	014000b4 	movhi	r5,2
   221d0:	294b2304 	addi	r5,r5,11404
   221d4:	00227001 	jmpi	22700 <_fwalk_reent>

000221d8 <__sinit>:
   221d8:	20800e17 	ldw	r2,56(r4)
   221dc:	10000126 	beq	r2,zero,221e4 <__sinit+0xc>
   221e0:	f800283a 	ret
   221e4:	0021ea41 	jmpi	21ea4 <__sinit.part.1>

000221e8 <__sfp_lock_acquire>:
   221e8:	f800283a 	ret

000221ec <__sfp_lock_release>:
   221ec:	f800283a 	ret

000221f0 <__sinit_lock_acquire>:
   221f0:	f800283a 	ret

000221f4 <__sinit_lock_release>:
   221f4:	f800283a 	ret

000221f8 <__fp_lock_all>:
   221f8:	008000b4 	movhi	r2,2
   221fc:	109fa204 	addi	r2,r2,32392
   22200:	11000017 	ldw	r4,0(r2)
   22204:	014000b4 	movhi	r5,2
   22208:	2947a204 	addi	r5,r5,7816
   2220c:	002263c1 	jmpi	2263c <_fwalk>

00022210 <__fp_unlock_all>:
   22210:	008000b4 	movhi	r2,2
   22214:	109fa204 	addi	r2,r2,32392
   22218:	11000017 	ldw	r4,0(r2)
   2221c:	014000b4 	movhi	r5,2
   22220:	2947a404 	addi	r5,r5,7824
   22224:	002263c1 	jmpi	2263c <_fwalk>

00022228 <_malloc_trim_r>:
   22228:	defffb04 	addi	sp,sp,-20
   2222c:	dcc00315 	stw	r19,12(sp)
   22230:	04c000b4 	movhi	r19,2
   22234:	dc800215 	stw	r18,8(sp)
   22238:	dc400115 	stw	r17,4(sp)
   2223c:	dc000015 	stw	r16,0(sp)
   22240:	dfc00415 	stw	ra,16(sp)
   22244:	2821883a 	mov	r16,r5
   22248:	9cda0504 	addi	r19,r19,26644
   2224c:	2025883a 	mov	r18,r4
   22250:	00235e00 	call	235e0 <__malloc_lock>
   22254:	98800217 	ldw	r2,8(r19)
   22258:	14400117 	ldw	r17,4(r2)
   2225c:	00bfff04 	movi	r2,-4
   22260:	88a2703a 	and	r17,r17,r2
   22264:	8c21c83a 	sub	r16,r17,r16
   22268:	8403fbc4 	addi	r16,r16,4079
   2226c:	8020d33a 	srli	r16,r16,12
   22270:	0083ffc4 	movi	r2,4095
   22274:	843fffc4 	addi	r16,r16,-1
   22278:	8020933a 	slli	r16,r16,12
   2227c:	1400060e 	bge	r2,r16,22298 <_malloc_trim_r+0x70>
   22280:	9009883a 	mov	r4,r18
   22284:	000b883a 	mov	r5,zero
   22288:	0021a4c0 	call	21a4c <_sbrk_r>
   2228c:	98c00217 	ldw	r3,8(r19)
   22290:	1c47883a 	add	r3,r3,r17
   22294:	10c00a26 	beq	r2,r3,222c0 <_malloc_trim_r+0x98>
   22298:	9009883a 	mov	r4,r18
   2229c:	00236000 	call	23600 <__malloc_unlock>
   222a0:	0005883a 	mov	r2,zero
   222a4:	dfc00417 	ldw	ra,16(sp)
   222a8:	dcc00317 	ldw	r19,12(sp)
   222ac:	dc800217 	ldw	r18,8(sp)
   222b0:	dc400117 	ldw	r17,4(sp)
   222b4:	dc000017 	ldw	r16,0(sp)
   222b8:	dec00504 	addi	sp,sp,20
   222bc:	f800283a 	ret
   222c0:	9009883a 	mov	r4,r18
   222c4:	040bc83a 	sub	r5,zero,r16
   222c8:	0021a4c0 	call	21a4c <_sbrk_r>
   222cc:	00ffffc4 	movi	r3,-1
   222d0:	10c00d26 	beq	r2,r3,22308 <_malloc_trim_r+0xe0>
   222d4:	00c000f4 	movhi	r3,3
   222d8:	18e66e04 	addi	r3,r3,-26184
   222dc:	18800017 	ldw	r2,0(r3)
   222e0:	99000217 	ldw	r4,8(r19)
   222e4:	8c23c83a 	sub	r17,r17,r16
   222e8:	8c400054 	ori	r17,r17,1
   222ec:	1421c83a 	sub	r16,r2,r16
   222f0:	24400115 	stw	r17,4(r4)
   222f4:	9009883a 	mov	r4,r18
   222f8:	1c000015 	stw	r16,0(r3)
   222fc:	00236000 	call	23600 <__malloc_unlock>
   22300:	00800044 	movi	r2,1
   22304:	003fe706 	br	222a4 <_malloc_trim_r+0x7c>
   22308:	9009883a 	mov	r4,r18
   2230c:	000b883a 	mov	r5,zero
   22310:	0021a4c0 	call	21a4c <_sbrk_r>
   22314:	99000217 	ldw	r4,8(r19)
   22318:	014003c4 	movi	r5,15
   2231c:	1107c83a 	sub	r3,r2,r4
   22320:	28ffdd0e 	bge	r5,r3,22298 <_malloc_trim_r+0x70>
   22324:	014000b4 	movhi	r5,2
   22328:	295fa304 	addi	r5,r5,32396
   2232c:	29400017 	ldw	r5,0(r5)
   22330:	18c00054 	ori	r3,r3,1
   22334:	20c00115 	stw	r3,4(r4)
   22338:	00c000f4 	movhi	r3,3
   2233c:	1145c83a 	sub	r2,r2,r5
   22340:	18e66e04 	addi	r3,r3,-26184
   22344:	18800015 	stw	r2,0(r3)
   22348:	003fd306 	br	22298 <_malloc_trim_r+0x70>

0002234c <_free_r>:
   2234c:	28004c26 	beq	r5,zero,22480 <_free_r+0x134>
   22350:	defffd04 	addi	sp,sp,-12
   22354:	dc400115 	stw	r17,4(sp)
   22358:	dc000015 	stw	r16,0(sp)
   2235c:	2023883a 	mov	r17,r4
   22360:	2821883a 	mov	r16,r5
   22364:	dfc00215 	stw	ra,8(sp)
   22368:	00235e00 	call	235e0 <__malloc_lock>
   2236c:	813fff17 	ldw	r4,-4(r16)
   22370:	00bfff84 	movi	r2,-2
   22374:	024000b4 	movhi	r9,2
   22378:	81bffe04 	addi	r6,r16,-8
   2237c:	2084703a 	and	r2,r4,r2
   22380:	4a5a0504 	addi	r9,r9,26644
   22384:	308b883a 	add	r5,r6,r2
   22388:	2a000117 	ldw	r8,4(r5)
   2238c:	49c00217 	ldw	r7,8(r9)
   22390:	00ffff04 	movi	r3,-4
   22394:	40c6703a 	and	r3,r8,r3
   22398:	39405326 	beq	r7,r5,224e8 <_free_r+0x19c>
   2239c:	28c00115 	stw	r3,4(r5)
   223a0:	2100004c 	andi	r4,r4,1
   223a4:	2000091e 	bne	r4,zero,223cc <_free_r+0x80>
   223a8:	81fffe17 	ldw	r7,-8(r16)
   223ac:	4a000204 	addi	r8,r9,8
   223b0:	31cdc83a 	sub	r6,r6,r7
   223b4:	31000217 	ldw	r4,8(r6)
   223b8:	11c5883a 	add	r2,r2,r7
   223bc:	22006126 	beq	r4,r8,22544 <_free_r+0x1f8>
   223c0:	31c00317 	ldw	r7,12(r6)
   223c4:	21c00315 	stw	r7,12(r4)
   223c8:	39000215 	stw	r4,8(r7)
   223cc:	28c9883a 	add	r4,r5,r3
   223d0:	21c00117 	ldw	r7,4(r4)
   223d4:	39c0004c 	andi	r7,r7,1
   223d8:	38000d1e 	bne	r7,zero,22410 <_free_r+0xc4>
   223dc:	29000217 	ldw	r4,8(r5)
   223e0:	10c5883a 	add	r2,r2,r3
   223e4:	00c000b4 	movhi	r3,2
   223e8:	18da0704 	addi	r3,r3,26652
   223ec:	20c07526 	beq	r4,r3,225c4 <_free_r+0x278>
   223f0:	29c00317 	ldw	r7,12(r5)
   223f4:	11400054 	ori	r5,r2,1
   223f8:	3087883a 	add	r3,r6,r2
   223fc:	21c00315 	stw	r7,12(r4)
   22400:	39000215 	stw	r4,8(r7)
   22404:	31400115 	stw	r5,4(r6)
   22408:	18800015 	stw	r2,0(r3)
   2240c:	00000406 	br	22420 <_free_r+0xd4>
   22410:	10c00054 	ori	r3,r2,1
   22414:	30c00115 	stw	r3,4(r6)
   22418:	3087883a 	add	r3,r6,r2
   2241c:	18800015 	stw	r2,0(r3)
   22420:	00c07fc4 	movi	r3,511
   22424:	18801736 	bltu	r3,r2,22484 <_free_r+0x138>
   22428:	1004d0fa 	srli	r2,r2,3
   2242c:	01400044 	movi	r5,1
   22430:	49000117 	ldw	r4,4(r9)
   22434:	1087883a 	add	r3,r2,r2
   22438:	18c7883a 	add	r3,r3,r3
   2243c:	1005d0ba 	srai	r2,r2,2
   22440:	18c7883a 	add	r3,r3,r3
   22444:	1a47883a 	add	r3,r3,r9
   22448:	19c00217 	ldw	r7,8(r3)
   2244c:	2884983a 	sll	r2,r5,r2
   22450:	30c00315 	stw	r3,12(r6)
   22454:	31c00215 	stw	r7,8(r6)
   22458:	1104b03a 	or	r2,r2,r4
   2245c:	19800215 	stw	r6,8(r3)
   22460:	48800115 	stw	r2,4(r9)
   22464:	39800315 	stw	r6,12(r7)
   22468:	8809883a 	mov	r4,r17
   2246c:	dfc00217 	ldw	ra,8(sp)
   22470:	dc400117 	ldw	r17,4(sp)
   22474:	dc000017 	ldw	r16,0(sp)
   22478:	dec00304 	addi	sp,sp,12
   2247c:	00236001 	jmpi	23600 <__malloc_unlock>
   22480:	f800283a 	ret
   22484:	1006d27a 	srli	r3,r2,9
   22488:	01000104 	movi	r4,4
   2248c:	20c04036 	bltu	r4,r3,22590 <_free_r+0x244>
   22490:	1006d1ba 	srli	r3,r2,6
   22494:	19400e04 	addi	r5,r3,56
   22498:	2947883a 	add	r3,r5,r5
   2249c:	18c7883a 	add	r3,r3,r3
   224a0:	18c7883a 	add	r3,r3,r3
   224a4:	1a49883a 	add	r4,r3,r9
   224a8:	20c00217 	ldw	r3,8(r4)
   224ac:	01c000b4 	movhi	r7,2
   224b0:	39da0504 	addi	r7,r7,26644
   224b4:	19003b26 	beq	r3,r4,225a4 <_free_r+0x258>
   224b8:	01ffff04 	movi	r7,-4
   224bc:	19400117 	ldw	r5,4(r3)
   224c0:	29ca703a 	and	r5,r5,r7
   224c4:	1140022e 	bgeu	r2,r5,224d0 <_free_r+0x184>
   224c8:	18c00217 	ldw	r3,8(r3)
   224cc:	20fffb1e 	bne	r4,r3,224bc <_free_r+0x170>
   224d0:	18800317 	ldw	r2,12(r3)
   224d4:	30800315 	stw	r2,12(r6)
   224d8:	30c00215 	stw	r3,8(r6)
   224dc:	11800215 	stw	r6,8(r2)
   224e0:	19800315 	stw	r6,12(r3)
   224e4:	003fe006 	br	22468 <_free_r+0x11c>
   224e8:	2100004c 	andi	r4,r4,1
   224ec:	1885883a 	add	r2,r3,r2
   224f0:	2000071e 	bne	r4,zero,22510 <_free_r+0x1c4>
   224f4:	817ffe17 	ldw	r5,-8(r16)
   224f8:	314dc83a 	sub	r6,r6,r5
   224fc:	30c00317 	ldw	r3,12(r6)
   22500:	31000217 	ldw	r4,8(r6)
   22504:	1145883a 	add	r2,r2,r5
   22508:	20c00315 	stw	r3,12(r4)
   2250c:	19000215 	stw	r4,8(r3)
   22510:	10c00054 	ori	r3,r2,1
   22514:	30c00115 	stw	r3,4(r6)
   22518:	00c000b4 	movhi	r3,2
   2251c:	18dfa404 	addi	r3,r3,32400
   22520:	18c00017 	ldw	r3,0(r3)
   22524:	49800215 	stw	r6,8(r9)
   22528:	10ffcf36 	bltu	r2,r3,22468 <_free_r+0x11c>
   2252c:	008000f4 	movhi	r2,3
   22530:	10a66504 	addi	r2,r2,-26220
   22534:	11400017 	ldw	r5,0(r2)
   22538:	8809883a 	mov	r4,r17
   2253c:	00222280 	call	22228 <_malloc_trim_r>
   22540:	003fc906 	br	22468 <_free_r+0x11c>
   22544:	28c9883a 	add	r4,r5,r3
   22548:	21000117 	ldw	r4,4(r4)
   2254c:	2100004c 	andi	r4,r4,1
   22550:	20000a1e 	bne	r4,zero,2257c <_free_r+0x230>
   22554:	29000317 	ldw	r4,12(r5)
   22558:	29400217 	ldw	r5,8(r5)
   2255c:	10c5883a 	add	r2,r2,r3
   22560:	10c00054 	ori	r3,r2,1
   22564:	29000315 	stw	r4,12(r5)
   22568:	21400215 	stw	r5,8(r4)
   2256c:	30c00115 	stw	r3,4(r6)
   22570:	308d883a 	add	r6,r6,r2
   22574:	30800015 	stw	r2,0(r6)
   22578:	003fbb06 	br	22468 <_free_r+0x11c>
   2257c:	10c00054 	ori	r3,r2,1
   22580:	30c00115 	stw	r3,4(r6)
   22584:	308d883a 	add	r6,r6,r2
   22588:	30800015 	stw	r2,0(r6)
   2258c:	003fb606 	br	22468 <_free_r+0x11c>
   22590:	01000504 	movi	r4,20
   22594:	20c01436 	bltu	r4,r3,225e8 <_free_r+0x29c>
   22598:	194016c4 	addi	r5,r3,91
   2259c:	2947883a 	add	r3,r5,r5
   225a0:	003fbe06 	br	2249c <_free_r+0x150>
   225a4:	280bd0ba 	srai	r5,r5,2
   225a8:	00800044 	movi	r2,1
   225ac:	39000117 	ldw	r4,4(r7)
   225b0:	114a983a 	sll	r5,r2,r5
   225b4:	1805883a 	mov	r2,r3
   225b8:	2908b03a 	or	r4,r5,r4
   225bc:	39000115 	stw	r4,4(r7)
   225c0:	003fc406 	br	224d4 <_free_r+0x188>
   225c4:	49800515 	stw	r6,20(r9)
   225c8:	49800415 	stw	r6,16(r9)
   225cc:	10c00054 	ori	r3,r2,1
   225d0:	31000315 	stw	r4,12(r6)
   225d4:	31000215 	stw	r4,8(r6)
   225d8:	30c00115 	stw	r3,4(r6)
   225dc:	308d883a 	add	r6,r6,r2
   225e0:	30800015 	stw	r2,0(r6)
   225e4:	003fa006 	br	22468 <_free_r+0x11c>
   225e8:	01001504 	movi	r4,84
   225ec:	20c00436 	bltu	r4,r3,22600 <_free_r+0x2b4>
   225f0:	1006d33a 	srli	r3,r2,12
   225f4:	19401b84 	addi	r5,r3,110
   225f8:	2947883a 	add	r3,r5,r5
   225fc:	003fa706 	br	2249c <_free_r+0x150>
   22600:	01005504 	movi	r4,340
   22604:	20c00436 	bltu	r4,r3,22618 <_free_r+0x2cc>
   22608:	1006d3fa 	srli	r3,r2,15
   2260c:	19401dc4 	addi	r5,r3,119
   22610:	2947883a 	add	r3,r5,r5
   22614:	003fa106 	br	2249c <_free_r+0x150>
   22618:	01015504 	movi	r4,1364
   2261c:	20c00436 	bltu	r4,r3,22630 <_free_r+0x2e4>
   22620:	1006d4ba 	srli	r3,r2,18
   22624:	19401f04 	addi	r5,r3,124
   22628:	2947883a 	add	r3,r5,r5
   2262c:	003f9b06 	br	2249c <_free_r+0x150>
   22630:	00c03f04 	movi	r3,252
   22634:	01401f84 	movi	r5,126
   22638:	003f9806 	br	2249c <_free_r+0x150>

0002263c <_fwalk>:
   2263c:	defff704 	addi	sp,sp,-36
   22640:	dd000415 	stw	r20,16(sp)
   22644:	dfc00815 	stw	ra,32(sp)
   22648:	ddc00715 	stw	r23,28(sp)
   2264c:	dd800615 	stw	r22,24(sp)
   22650:	dd400515 	stw	r21,20(sp)
   22654:	dcc00315 	stw	r19,12(sp)
   22658:	dc800215 	stw	r18,8(sp)
   2265c:	dc400115 	stw	r17,4(sp)
   22660:	dc000015 	stw	r16,0(sp)
   22664:	2500b804 	addi	r20,r4,736
   22668:	a0002326 	beq	r20,zero,226f8 <_fwalk+0xbc>
   2266c:	282b883a 	mov	r21,r5
   22670:	002f883a 	mov	r23,zero
   22674:	05800044 	movi	r22,1
   22678:	04ffffc4 	movi	r19,-1
   2267c:	a4400117 	ldw	r17,4(r20)
   22680:	a4800217 	ldw	r18,8(r20)
   22684:	8c7fffc4 	addi	r17,r17,-1
   22688:	88000d16 	blt	r17,zero,226c0 <_fwalk+0x84>
   2268c:	94000304 	addi	r16,r18,12
   22690:	94800384 	addi	r18,r18,14
   22694:	80c0000b 	ldhu	r3,0(r16)
   22698:	8c7fffc4 	addi	r17,r17,-1
   2269c:	813ffd04 	addi	r4,r16,-12
   226a0:	b0c0042e 	bgeu	r22,r3,226b4 <_fwalk+0x78>
   226a4:	90c0000f 	ldh	r3,0(r18)
   226a8:	1cc00226 	beq	r3,r19,226b4 <_fwalk+0x78>
   226ac:	a83ee83a 	callr	r21
   226b0:	b8aeb03a 	or	r23,r23,r2
   226b4:	84001a04 	addi	r16,r16,104
   226b8:	94801a04 	addi	r18,r18,104
   226bc:	8cfff51e 	bne	r17,r19,22694 <_fwalk+0x58>
   226c0:	a5000017 	ldw	r20,0(r20)
   226c4:	a03fed1e 	bne	r20,zero,2267c <_fwalk+0x40>
   226c8:	b805883a 	mov	r2,r23
   226cc:	dfc00817 	ldw	ra,32(sp)
   226d0:	ddc00717 	ldw	r23,28(sp)
   226d4:	dd800617 	ldw	r22,24(sp)
   226d8:	dd400517 	ldw	r21,20(sp)
   226dc:	dd000417 	ldw	r20,16(sp)
   226e0:	dcc00317 	ldw	r19,12(sp)
   226e4:	dc800217 	ldw	r18,8(sp)
   226e8:	dc400117 	ldw	r17,4(sp)
   226ec:	dc000017 	ldw	r16,0(sp)
   226f0:	dec00904 	addi	sp,sp,36
   226f4:	f800283a 	ret
   226f8:	002f883a 	mov	r23,zero
   226fc:	003ff206 	br	226c8 <_fwalk+0x8c>

00022700 <_fwalk_reent>:
   22700:	defff704 	addi	sp,sp,-36
   22704:	dd400515 	stw	r21,20(sp)
   22708:	dfc00815 	stw	ra,32(sp)
   2270c:	ddc00715 	stw	r23,28(sp)
   22710:	dd800615 	stw	r22,24(sp)
   22714:	dd000415 	stw	r20,16(sp)
   22718:	dcc00315 	stw	r19,12(sp)
   2271c:	dc800215 	stw	r18,8(sp)
   22720:	dc400115 	stw	r17,4(sp)
   22724:	dc000015 	stw	r16,0(sp)
   22728:	2540b804 	addi	r21,r4,736
   2272c:	a8002326 	beq	r21,zero,227bc <_fwalk_reent+0xbc>
   22730:	2829883a 	mov	r20,r5
   22734:	202d883a 	mov	r22,r4
   22738:	002f883a 	mov	r23,zero
   2273c:	04c00044 	movi	r19,1
   22740:	04bfffc4 	movi	r18,-1
   22744:	ac400117 	ldw	r17,4(r21)
   22748:	ac000217 	ldw	r16,8(r21)
   2274c:	8c7fffc4 	addi	r17,r17,-1
   22750:	88000c16 	blt	r17,zero,22784 <_fwalk_reent+0x84>
   22754:	84000304 	addi	r16,r16,12
   22758:	80c0000b 	ldhu	r3,0(r16)
   2275c:	8c7fffc4 	addi	r17,r17,-1
   22760:	817ffd04 	addi	r5,r16,-12
   22764:	98c0052e 	bgeu	r19,r3,2277c <_fwalk_reent+0x7c>
   22768:	80c0008f 	ldh	r3,2(r16)
   2276c:	b009883a 	mov	r4,r22
   22770:	1c800226 	beq	r3,r18,2277c <_fwalk_reent+0x7c>
   22774:	a03ee83a 	callr	r20
   22778:	b8aeb03a 	or	r23,r23,r2
   2277c:	84001a04 	addi	r16,r16,104
   22780:	8cbff51e 	bne	r17,r18,22758 <_fwalk_reent+0x58>
   22784:	ad400017 	ldw	r21,0(r21)
   22788:	a83fee1e 	bne	r21,zero,22744 <_fwalk_reent+0x44>
   2278c:	b805883a 	mov	r2,r23
   22790:	dfc00817 	ldw	ra,32(sp)
   22794:	ddc00717 	ldw	r23,28(sp)
   22798:	dd800617 	ldw	r22,24(sp)
   2279c:	dd400517 	ldw	r21,20(sp)
   227a0:	dd000417 	ldw	r20,16(sp)
   227a4:	dcc00317 	ldw	r19,12(sp)
   227a8:	dc800217 	ldw	r18,8(sp)
   227ac:	dc400117 	ldw	r17,4(sp)
   227b0:	dc000017 	ldw	r16,0(sp)
   227b4:	dec00904 	addi	sp,sp,36
   227b8:	f800283a 	ret
   227bc:	002f883a 	mov	r23,zero
   227c0:	003ff206 	br	2278c <_fwalk_reent+0x8c>

000227c4 <__smakebuf_r>:
   227c4:	2880030b 	ldhu	r2,12(r5)
   227c8:	10c0008c 	andi	r3,r2,2
   227cc:	1800401e 	bne	r3,zero,228d0 <__smakebuf_r+0x10c>
   227d0:	deffec04 	addi	sp,sp,-80
   227d4:	dc000f15 	stw	r16,60(sp)
   227d8:	2821883a 	mov	r16,r5
   227dc:	2940038f 	ldh	r5,14(r5)
   227e0:	dc401015 	stw	r17,64(sp)
   227e4:	dfc01315 	stw	ra,76(sp)
   227e8:	dcc01215 	stw	r19,72(sp)
   227ec:	dc801115 	stw	r18,68(sp)
   227f0:	2023883a 	mov	r17,r4
   227f4:	28001b16 	blt	r5,zero,22864 <__smakebuf_r+0xa0>
   227f8:	d80d883a 	mov	r6,sp
   227fc:	0022d900 	call	22d90 <_fstat_r>
   22800:	10001716 	blt	r2,zero,22860 <__smakebuf_r+0x9c>
   22804:	d8800117 	ldw	r2,4(sp)
   22808:	00e00014 	movui	r3,32768
   2280c:	10bc000c 	andi	r2,r2,61440
   22810:	10c03726 	beq	r2,r3,228f0 <__smakebuf_r+0x12c>
   22814:	80c0030b 	ldhu	r3,12(r16)
   22818:	18c20014 	ori	r3,r3,2048
   2281c:	80c0030d 	sth	r3,12(r16)
   22820:	00c80004 	movi	r3,8192
   22824:	10c03c1e 	bne	r2,r3,22918 <__smakebuf_r+0x154>
   22828:	8140038f 	ldh	r5,14(r16)
   2282c:	8809883a 	mov	r4,r17
   22830:	0022de80 	call	22de8 <_isatty_r>
   22834:	10004e26 	beq	r2,zero,22970 <__smakebuf_r+0x1ac>
   22838:	8080030b 	ldhu	r2,12(r16)
   2283c:	04c00044 	movi	r19,1
   22840:	80c010c4 	addi	r3,r16,67
   22844:	14c4b03a 	or	r2,r2,r19
   22848:	8080030d 	sth	r2,12(r16)
   2284c:	80c00015 	stw	r3,0(r16)
   22850:	80c00415 	stw	r3,16(r16)
   22854:	84c00515 	stw	r19,20(r16)
   22858:	04810004 	movi	r18,1024
   2285c:	00000706 	br	2287c <__smakebuf_r+0xb8>
   22860:	8080030b 	ldhu	r2,12(r16)
   22864:	10c0200c 	andi	r3,r2,128
   22868:	18001f1e 	bne	r3,zero,228e8 <__smakebuf_r+0x124>
   2286c:	04810004 	movi	r18,1024
   22870:	10820014 	ori	r2,r2,2048
   22874:	8080030d 	sth	r2,12(r16)
   22878:	0027883a 	mov	r19,zero
   2287c:	8809883a 	mov	r4,r17
   22880:	900b883a 	mov	r5,r18
   22884:	00209c00 	call	209c0 <_malloc_r>
   22888:	10002e26 	beq	r2,zero,22944 <__smakebuf_r+0x180>
   2288c:	80c0030b 	ldhu	r3,12(r16)
   22890:	010000b4 	movhi	r4,2
   22894:	2107a604 	addi	r4,r4,7832
   22898:	89000f15 	stw	r4,60(r17)
   2289c:	18c02014 	ori	r3,r3,128
   228a0:	80c0030d 	sth	r3,12(r16)
   228a4:	80800015 	stw	r2,0(r16)
   228a8:	80800415 	stw	r2,16(r16)
   228ac:	84800515 	stw	r18,20(r16)
   228b0:	98001c1e 	bne	r19,zero,22924 <__smakebuf_r+0x160>
   228b4:	dfc01317 	ldw	ra,76(sp)
   228b8:	dcc01217 	ldw	r19,72(sp)
   228bc:	dc801117 	ldw	r18,68(sp)
   228c0:	dc401017 	ldw	r17,64(sp)
   228c4:	dc000f17 	ldw	r16,60(sp)
   228c8:	dec01404 	addi	sp,sp,80
   228cc:	f800283a 	ret
   228d0:	288010c4 	addi	r2,r5,67
   228d4:	28800015 	stw	r2,0(r5)
   228d8:	28800415 	stw	r2,16(r5)
   228dc:	00800044 	movi	r2,1
   228e0:	28800515 	stw	r2,20(r5)
   228e4:	f800283a 	ret
   228e8:	04801004 	movi	r18,64
   228ec:	003fe006 	br	22870 <__smakebuf_r+0xac>
   228f0:	81000a17 	ldw	r4,40(r16)
   228f4:	00c000b4 	movhi	r3,2
   228f8:	18cade04 	addi	r3,r3,11128
   228fc:	20ffc51e 	bne	r4,r3,22814 <__smakebuf_r+0x50>
   22900:	80c0030b 	ldhu	r3,12(r16)
   22904:	01010004 	movi	r4,1024
   22908:	81001315 	stw	r4,76(r16)
   2290c:	1906b03a 	or	r3,r3,r4
   22910:	80c0030d 	sth	r3,12(r16)
   22914:	003fc206 	br	22820 <__smakebuf_r+0x5c>
   22918:	0027883a 	mov	r19,zero
   2291c:	04810004 	movi	r18,1024
   22920:	003fd606 	br	2287c <__smakebuf_r+0xb8>
   22924:	8140038f 	ldh	r5,14(r16)
   22928:	8809883a 	mov	r4,r17
   2292c:	0022de80 	call	22de8 <_isatty_r>
   22930:	103fe026 	beq	r2,zero,228b4 <__smakebuf_r+0xf0>
   22934:	8080030b 	ldhu	r2,12(r16)
   22938:	10800054 	ori	r2,r2,1
   2293c:	8080030d 	sth	r2,12(r16)
   22940:	003fdc06 	br	228b4 <__smakebuf_r+0xf0>
   22944:	8080030b 	ldhu	r2,12(r16)
   22948:	10c0800c 	andi	r3,r2,512
   2294c:	183fd91e 	bne	r3,zero,228b4 <__smakebuf_r+0xf0>
   22950:	10800094 	ori	r2,r2,2
   22954:	80c010c4 	addi	r3,r16,67
   22958:	8080030d 	sth	r2,12(r16)
   2295c:	00800044 	movi	r2,1
   22960:	80c00015 	stw	r3,0(r16)
   22964:	80c00415 	stw	r3,16(r16)
   22968:	80800515 	stw	r2,20(r16)
   2296c:	003fd106 	br	228b4 <__smakebuf_r+0xf0>
   22970:	04c00044 	movi	r19,1
   22974:	04810004 	movi	r18,1024
   22978:	003fc006 	br	2287c <__smakebuf_r+0xb8>

0002297c <memset>:
   2297c:	20c000cc 	andi	r3,r4,3
   22980:	2005883a 	mov	r2,r4
   22984:	18004326 	beq	r3,zero,22a94 <memset+0x118>
   22988:	31ffffc4 	addi	r7,r6,-1
   2298c:	30004026 	beq	r6,zero,22a90 <memset+0x114>
   22990:	2813883a 	mov	r9,r5
   22994:	200d883a 	mov	r6,r4
   22998:	2007883a 	mov	r3,r4
   2299c:	00000406 	br	229b0 <memset+0x34>
   229a0:	3a3fffc4 	addi	r8,r7,-1
   229a4:	31800044 	addi	r6,r6,1
   229a8:	38003926 	beq	r7,zero,22a90 <memset+0x114>
   229ac:	400f883a 	mov	r7,r8
   229b0:	18c00044 	addi	r3,r3,1
   229b4:	32400005 	stb	r9,0(r6)
   229b8:	1a0000cc 	andi	r8,r3,3
   229bc:	403ff81e 	bne	r8,zero,229a0 <memset+0x24>
   229c0:	010000c4 	movi	r4,3
   229c4:	21c02d2e 	bgeu	r4,r7,22a7c <memset+0x100>
   229c8:	29803fcc 	andi	r6,r5,255
   229cc:	3008923a 	slli	r4,r6,8
   229d0:	218cb03a 	or	r6,r4,r6
   229d4:	3008943a 	slli	r4,r6,16
   229d8:	218cb03a 	or	r6,r4,r6
   229dc:	010003c4 	movi	r4,15
   229e0:	21c0182e 	bgeu	r4,r7,22a44 <memset+0xc8>
   229e4:	3b3ffc04 	addi	r12,r7,-16
   229e8:	6018d13a 	srli	r12,r12,4
   229ec:	1a000104 	addi	r8,r3,4
   229f0:	1ac00204 	addi	r11,r3,8
   229f4:	6008913a 	slli	r4,r12,4
   229f8:	1a800304 	addi	r10,r3,12
   229fc:	1813883a 	mov	r9,r3
   22a00:	21000504 	addi	r4,r4,20
   22a04:	1909883a 	add	r4,r3,r4
   22a08:	49800015 	stw	r6,0(r9)
   22a0c:	41800015 	stw	r6,0(r8)
   22a10:	59800015 	stw	r6,0(r11)
   22a14:	51800015 	stw	r6,0(r10)
   22a18:	42000404 	addi	r8,r8,16
   22a1c:	4a400404 	addi	r9,r9,16
   22a20:	5ac00404 	addi	r11,r11,16
   22a24:	52800404 	addi	r10,r10,16
   22a28:	413ff71e 	bne	r8,r4,22a08 <memset+0x8c>
   22a2c:	63000044 	addi	r12,r12,1
   22a30:	6018913a 	slli	r12,r12,4
   22a34:	39c003cc 	andi	r7,r7,15
   22a38:	010000c4 	movi	r4,3
   22a3c:	1b07883a 	add	r3,r3,r12
   22a40:	21c00e2e 	bgeu	r4,r7,22a7c <memset+0x100>
   22a44:	1813883a 	mov	r9,r3
   22a48:	3811883a 	mov	r8,r7
   22a4c:	010000c4 	movi	r4,3
   22a50:	49800015 	stw	r6,0(r9)
   22a54:	423fff04 	addi	r8,r8,-4
   22a58:	4a400104 	addi	r9,r9,4
   22a5c:	223ffc36 	bltu	r4,r8,22a50 <memset+0xd4>
   22a60:	393fff04 	addi	r4,r7,-4
   22a64:	2008d0ba 	srli	r4,r4,2
   22a68:	39c000cc 	andi	r7,r7,3
   22a6c:	21000044 	addi	r4,r4,1
   22a70:	2109883a 	add	r4,r4,r4
   22a74:	2109883a 	add	r4,r4,r4
   22a78:	1907883a 	add	r3,r3,r4
   22a7c:	38000426 	beq	r7,zero,22a90 <memset+0x114>
   22a80:	19cf883a 	add	r7,r3,r7
   22a84:	19400005 	stb	r5,0(r3)
   22a88:	18c00044 	addi	r3,r3,1
   22a8c:	19fffd1e 	bne	r3,r7,22a84 <memset+0x108>
   22a90:	f800283a 	ret
   22a94:	2007883a 	mov	r3,r4
   22a98:	300f883a 	mov	r7,r6
   22a9c:	003fc806 	br	229c0 <memset+0x44>

00022aa0 <__sread>:
   22aa0:	defffe04 	addi	sp,sp,-8
   22aa4:	dc000015 	stw	r16,0(sp)
   22aa8:	2821883a 	mov	r16,r5
   22aac:	2940038f 	ldh	r5,14(r5)
   22ab0:	dfc00115 	stw	ra,4(sp)
   22ab4:	0022e980 	call	22e98 <_read_r>
   22ab8:	10000716 	blt	r2,zero,22ad8 <__sread+0x38>
   22abc:	80c01417 	ldw	r3,80(r16)
   22ac0:	1887883a 	add	r3,r3,r2
   22ac4:	80c01415 	stw	r3,80(r16)
   22ac8:	dfc00117 	ldw	ra,4(sp)
   22acc:	dc000017 	ldw	r16,0(sp)
   22ad0:	dec00204 	addi	sp,sp,8
   22ad4:	f800283a 	ret
   22ad8:	80c0030b 	ldhu	r3,12(r16)
   22adc:	18fbffcc 	andi	r3,r3,61439
   22ae0:	80c0030d 	sth	r3,12(r16)
   22ae4:	dfc00117 	ldw	ra,4(sp)
   22ae8:	dc000017 	ldw	r16,0(sp)
   22aec:	dec00204 	addi	sp,sp,8
   22af0:	f800283a 	ret

00022af4 <__seofread>:
   22af4:	0005883a 	mov	r2,zero
   22af8:	f800283a 	ret

00022afc <__swrite>:
   22afc:	2880030b 	ldhu	r2,12(r5)
   22b00:	defffb04 	addi	sp,sp,-20
   22b04:	dcc00315 	stw	r19,12(sp)
   22b08:	dc800215 	stw	r18,8(sp)
   22b0c:	dc400115 	stw	r17,4(sp)
   22b10:	dc000015 	stw	r16,0(sp)
   22b14:	dfc00415 	stw	ra,16(sp)
   22b18:	10c0400c 	andi	r3,r2,256
   22b1c:	2821883a 	mov	r16,r5
   22b20:	2027883a 	mov	r19,r4
   22b24:	3025883a 	mov	r18,r6
   22b28:	3823883a 	mov	r17,r7
   22b2c:	18000526 	beq	r3,zero,22b44 <__swrite+0x48>
   22b30:	2940038f 	ldh	r5,14(r5)
   22b34:	000d883a 	mov	r6,zero
   22b38:	01c00084 	movi	r7,2
   22b3c:	0022e3c0 	call	22e3c <_lseek_r>
   22b40:	8080030b 	ldhu	r2,12(r16)
   22b44:	8140038f 	ldh	r5,14(r16)
   22b48:	10bbffcc 	andi	r2,r2,61439
   22b4c:	9809883a 	mov	r4,r19
   22b50:	900d883a 	mov	r6,r18
   22b54:	880f883a 	mov	r7,r17
   22b58:	8080030d 	sth	r2,12(r16)
   22b5c:	dfc00417 	ldw	ra,16(sp)
   22b60:	dcc00317 	ldw	r19,12(sp)
   22b64:	dc800217 	ldw	r18,8(sp)
   22b68:	dc400117 	ldw	r17,4(sp)
   22b6c:	dc000017 	ldw	r16,0(sp)
   22b70:	dec00504 	addi	sp,sp,20
   22b74:	0022bdc1 	jmpi	22bdc <_write_r>

00022b78 <__sseek>:
   22b78:	defffe04 	addi	sp,sp,-8
   22b7c:	dc000015 	stw	r16,0(sp)
   22b80:	2821883a 	mov	r16,r5
   22b84:	2940038f 	ldh	r5,14(r5)
   22b88:	dfc00115 	stw	ra,4(sp)
   22b8c:	0022e3c0 	call	22e3c <_lseek_r>
   22b90:	00ffffc4 	movi	r3,-1
   22b94:	10c00826 	beq	r2,r3,22bb8 <__sseek+0x40>
   22b98:	80c0030b 	ldhu	r3,12(r16)
   22b9c:	80801415 	stw	r2,80(r16)
   22ba0:	18c40014 	ori	r3,r3,4096
   22ba4:	80c0030d 	sth	r3,12(r16)
   22ba8:	dfc00117 	ldw	ra,4(sp)
   22bac:	dc000017 	ldw	r16,0(sp)
   22bb0:	dec00204 	addi	sp,sp,8
   22bb4:	f800283a 	ret
   22bb8:	80c0030b 	ldhu	r3,12(r16)
   22bbc:	18fbffcc 	andi	r3,r3,61439
   22bc0:	80c0030d 	sth	r3,12(r16)
   22bc4:	dfc00117 	ldw	ra,4(sp)
   22bc8:	dc000017 	ldw	r16,0(sp)
   22bcc:	dec00204 	addi	sp,sp,8
   22bd0:	f800283a 	ret

00022bd4 <__sclose>:
   22bd4:	2940038f 	ldh	r5,14(r5)
   22bd8:	0022c381 	jmpi	22c38 <_close_r>

00022bdc <_write_r>:
   22bdc:	defffd04 	addi	sp,sp,-12
   22be0:	dc000015 	stw	r16,0(sp)
   22be4:	040000f4 	movhi	r16,3
   22be8:	dc400115 	stw	r17,4(sp)
   22bec:	84266604 	addi	r16,r16,-26216
   22bf0:	2023883a 	mov	r17,r4
   22bf4:	2809883a 	mov	r4,r5
   22bf8:	300b883a 	mov	r5,r6
   22bfc:	380d883a 	mov	r6,r7
   22c00:	dfc00215 	stw	ra,8(sp)
   22c04:	80000015 	stw	zero,0(r16)
   22c08:	0023b380 	call	23b38 <write>
   22c0c:	00ffffc4 	movi	r3,-1
   22c10:	10c00526 	beq	r2,r3,22c28 <_write_r+0x4c>
   22c14:	dfc00217 	ldw	ra,8(sp)
   22c18:	dc400117 	ldw	r17,4(sp)
   22c1c:	dc000017 	ldw	r16,0(sp)
   22c20:	dec00304 	addi	sp,sp,12
   22c24:	f800283a 	ret
   22c28:	80c00017 	ldw	r3,0(r16)
   22c2c:	183ff926 	beq	r3,zero,22c14 <_write_r+0x38>
   22c30:	88c00015 	stw	r3,0(r17)
   22c34:	003ff706 	br	22c14 <_write_r+0x38>

00022c38 <_close_r>:
   22c38:	defffd04 	addi	sp,sp,-12
   22c3c:	dc000015 	stw	r16,0(sp)
   22c40:	040000f4 	movhi	r16,3
   22c44:	dc400115 	stw	r17,4(sp)
   22c48:	84266604 	addi	r16,r16,-26216
   22c4c:	2023883a 	mov	r17,r4
   22c50:	2809883a 	mov	r4,r5
   22c54:	dfc00215 	stw	ra,8(sp)
   22c58:	80000015 	stw	zero,0(r16)
   22c5c:	00230700 	call	23070 <close>
   22c60:	00ffffc4 	movi	r3,-1
   22c64:	10c00526 	beq	r2,r3,22c7c <_close_r+0x44>
   22c68:	dfc00217 	ldw	ra,8(sp)
   22c6c:	dc400117 	ldw	r17,4(sp)
   22c70:	dc000017 	ldw	r16,0(sp)
   22c74:	dec00304 	addi	sp,sp,12
   22c78:	f800283a 	ret
   22c7c:	80c00017 	ldw	r3,0(r16)
   22c80:	183ff926 	beq	r3,zero,22c68 <_close_r+0x30>
   22c84:	88c00015 	stw	r3,0(r17)
   22c88:	003ff706 	br	22c68 <_close_r+0x30>

00022c8c <_fclose_r>:
   22c8c:	28003926 	beq	r5,zero,22d74 <_fclose_r+0xe8>
   22c90:	defffc04 	addi	sp,sp,-16
   22c94:	dc400115 	stw	r17,4(sp)
   22c98:	dc000015 	stw	r16,0(sp)
   22c9c:	dfc00315 	stw	ra,12(sp)
   22ca0:	dc800215 	stw	r18,8(sp)
   22ca4:	2023883a 	mov	r17,r4
   22ca8:	2821883a 	mov	r16,r5
   22cac:	20000226 	beq	r4,zero,22cb8 <_fclose_r+0x2c>
   22cb0:	20800e17 	ldw	r2,56(r4)
   22cb4:	10002726 	beq	r2,zero,22d54 <_fclose_r+0xc8>
   22cb8:	8080030f 	ldh	r2,12(r16)
   22cbc:	1000071e 	bne	r2,zero,22cdc <_fclose_r+0x50>
   22cc0:	0005883a 	mov	r2,zero
   22cc4:	dfc00317 	ldw	ra,12(sp)
   22cc8:	dc800217 	ldw	r18,8(sp)
   22ccc:	dc400117 	ldw	r17,4(sp)
   22cd0:	dc000017 	ldw	r16,0(sp)
   22cd4:	dec00404 	addi	sp,sp,16
   22cd8:	f800283a 	ret
   22cdc:	8809883a 	mov	r4,r17
   22ce0:	800b883a 	mov	r5,r16
   22ce4:	0021bf40 	call	21bf4 <__sflush_r>
   22ce8:	1025883a 	mov	r18,r2
   22cec:	80800b17 	ldw	r2,44(r16)
   22cf0:	10000426 	beq	r2,zero,22d04 <_fclose_r+0x78>
   22cf4:	81400717 	ldw	r5,28(r16)
   22cf8:	8809883a 	mov	r4,r17
   22cfc:	103ee83a 	callr	r2
   22d00:	10001616 	blt	r2,zero,22d5c <_fclose_r+0xd0>
   22d04:	8080030b 	ldhu	r2,12(r16)
   22d08:	1080200c 	andi	r2,r2,128
   22d0c:	1000151e 	bne	r2,zero,22d64 <_fclose_r+0xd8>
   22d10:	81400c17 	ldw	r5,48(r16)
   22d14:	28000526 	beq	r5,zero,22d2c <_fclose_r+0xa0>
   22d18:	80801004 	addi	r2,r16,64
   22d1c:	28800226 	beq	r5,r2,22d28 <_fclose_r+0x9c>
   22d20:	8809883a 	mov	r4,r17
   22d24:	002234c0 	call	2234c <_free_r>
   22d28:	80000c15 	stw	zero,48(r16)
   22d2c:	81401117 	ldw	r5,68(r16)
   22d30:	28000326 	beq	r5,zero,22d40 <_fclose_r+0xb4>
   22d34:	8809883a 	mov	r4,r17
   22d38:	002234c0 	call	2234c <_free_r>
   22d3c:	80001115 	stw	zero,68(r16)
   22d40:	00221e80 	call	221e8 <__sfp_lock_acquire>
   22d44:	8000030d 	sth	zero,12(r16)
   22d48:	00221ec0 	call	221ec <__sfp_lock_release>
   22d4c:	9005883a 	mov	r2,r18
   22d50:	003fdc06 	br	22cc4 <_fclose_r+0x38>
   22d54:	00221d80 	call	221d8 <__sinit>
   22d58:	003fd706 	br	22cb8 <_fclose_r+0x2c>
   22d5c:	04bfffc4 	movi	r18,-1
   22d60:	003fe806 	br	22d04 <_fclose_r+0x78>
   22d64:	81400417 	ldw	r5,16(r16)
   22d68:	8809883a 	mov	r4,r17
   22d6c:	002234c0 	call	2234c <_free_r>
   22d70:	003fe706 	br	22d10 <_fclose_r+0x84>
   22d74:	0005883a 	mov	r2,zero
   22d78:	f800283a 	ret

00022d7c <fclose>:
   22d7c:	008000b4 	movhi	r2,2
   22d80:	109fa204 	addi	r2,r2,32392
   22d84:	200b883a 	mov	r5,r4
   22d88:	11000017 	ldw	r4,0(r2)
   22d8c:	0022c8c1 	jmpi	22c8c <_fclose_r>

00022d90 <_fstat_r>:
   22d90:	defffd04 	addi	sp,sp,-12
   22d94:	dc000015 	stw	r16,0(sp)
   22d98:	040000f4 	movhi	r16,3
   22d9c:	dc400115 	stw	r17,4(sp)
   22da0:	84266604 	addi	r16,r16,-26216
   22da4:	2023883a 	mov	r17,r4
   22da8:	2809883a 	mov	r4,r5
   22dac:	300b883a 	mov	r5,r6
   22db0:	dfc00215 	stw	ra,8(sp)
   22db4:	80000015 	stw	zero,0(r16)
   22db8:	00231bc0 	call	231bc <fstat>
   22dbc:	00ffffc4 	movi	r3,-1
   22dc0:	10c00526 	beq	r2,r3,22dd8 <_fstat_r+0x48>
   22dc4:	dfc00217 	ldw	ra,8(sp)
   22dc8:	dc400117 	ldw	r17,4(sp)
   22dcc:	dc000017 	ldw	r16,0(sp)
   22dd0:	dec00304 	addi	sp,sp,12
   22dd4:	f800283a 	ret
   22dd8:	80c00017 	ldw	r3,0(r16)
   22ddc:	183ff926 	beq	r3,zero,22dc4 <_fstat_r+0x34>
   22de0:	88c00015 	stw	r3,0(r17)
   22de4:	003ff706 	br	22dc4 <_fstat_r+0x34>

00022de8 <_isatty_r>:
   22de8:	defffd04 	addi	sp,sp,-12
   22dec:	dc000015 	stw	r16,0(sp)
   22df0:	040000f4 	movhi	r16,3
   22df4:	dc400115 	stw	r17,4(sp)
   22df8:	84266604 	addi	r16,r16,-26216
   22dfc:	2023883a 	mov	r17,r4
   22e00:	2809883a 	mov	r4,r5
   22e04:	dfc00215 	stw	ra,8(sp)
   22e08:	80000015 	stw	zero,0(r16)
   22e0c:	00232bc0 	call	232bc <isatty>
   22e10:	00ffffc4 	movi	r3,-1
   22e14:	10c00526 	beq	r2,r3,22e2c <_isatty_r+0x44>
   22e18:	dfc00217 	ldw	ra,8(sp)
   22e1c:	dc400117 	ldw	r17,4(sp)
   22e20:	dc000017 	ldw	r16,0(sp)
   22e24:	dec00304 	addi	sp,sp,12
   22e28:	f800283a 	ret
   22e2c:	80c00017 	ldw	r3,0(r16)
   22e30:	183ff926 	beq	r3,zero,22e18 <_isatty_r+0x30>
   22e34:	88c00015 	stw	r3,0(r17)
   22e38:	003ff706 	br	22e18 <_isatty_r+0x30>

00022e3c <_lseek_r>:
   22e3c:	defffd04 	addi	sp,sp,-12
   22e40:	dc000015 	stw	r16,0(sp)
   22e44:	040000f4 	movhi	r16,3
   22e48:	dc400115 	stw	r17,4(sp)
   22e4c:	84266604 	addi	r16,r16,-26216
   22e50:	2023883a 	mov	r17,r4
   22e54:	2809883a 	mov	r4,r5
   22e58:	300b883a 	mov	r5,r6
   22e5c:	380d883a 	mov	r6,r7
   22e60:	dfc00215 	stw	ra,8(sp)
   22e64:	80000015 	stw	zero,0(r16)
   22e68:	00234940 	call	23494 <lseek>
   22e6c:	00ffffc4 	movi	r3,-1
   22e70:	10c00526 	beq	r2,r3,22e88 <_lseek_r+0x4c>
   22e74:	dfc00217 	ldw	ra,8(sp)
   22e78:	dc400117 	ldw	r17,4(sp)
   22e7c:	dc000017 	ldw	r16,0(sp)
   22e80:	dec00304 	addi	sp,sp,12
   22e84:	f800283a 	ret
   22e88:	80c00017 	ldw	r3,0(r16)
   22e8c:	183ff926 	beq	r3,zero,22e74 <_lseek_r+0x38>
   22e90:	88c00015 	stw	r3,0(r17)
   22e94:	003ff706 	br	22e74 <_lseek_r+0x38>

00022e98 <_read_r>:
   22e98:	defffd04 	addi	sp,sp,-12
   22e9c:	dc000015 	stw	r16,0(sp)
   22ea0:	040000f4 	movhi	r16,3
   22ea4:	dc400115 	stw	r17,4(sp)
   22ea8:	84266604 	addi	r16,r16,-26216
   22eac:	2023883a 	mov	r17,r4
   22eb0:	2809883a 	mov	r4,r5
   22eb4:	300b883a 	mov	r5,r6
   22eb8:	380d883a 	mov	r6,r7
   22ebc:	dfc00215 	stw	ra,8(sp)
   22ec0:	80000015 	stw	zero,0(r16)
   22ec4:	00238dc0 	call	238dc <read>
   22ec8:	00ffffc4 	movi	r3,-1
   22ecc:	10c00526 	beq	r2,r3,22ee4 <_read_r+0x4c>
   22ed0:	dfc00217 	ldw	ra,8(sp)
   22ed4:	dc400117 	ldw	r17,4(sp)
   22ed8:	dc000017 	ldw	r16,0(sp)
   22edc:	dec00304 	addi	sp,sp,12
   22ee0:	f800283a 	ret
   22ee4:	80c00017 	ldw	r3,0(r16)
   22ee8:	183ff926 	beq	r3,zero,22ed0 <_read_r+0x38>
   22eec:	88c00015 	stw	r3,0(r17)
   22ef0:	003ff706 	br	22ed0 <_read_r+0x38>

00022ef4 <udivmodsi4>:
   22ef4:	2900182e 	bgeu	r5,r4,22f58 <udivmodsi4+0x64>
   22ef8:	28001716 	blt	r5,zero,22f58 <udivmodsi4+0x64>
   22efc:	00800804 	movi	r2,32
   22f00:	00c00044 	movi	r3,1
   22f04:	00000206 	br	22f10 <udivmodsi4+0x1c>
   22f08:	10001126 	beq	r2,zero,22f50 <udivmodsi4+0x5c>
   22f0c:	28000516 	blt	r5,zero,22f24 <udivmodsi4+0x30>
   22f10:	294b883a 	add	r5,r5,r5
   22f14:	10bfffc4 	addi	r2,r2,-1
   22f18:	18c7883a 	add	r3,r3,r3
   22f1c:	293ffa36 	bltu	r5,r4,22f08 <udivmodsi4+0x14>
   22f20:	18000b26 	beq	r3,zero,22f50 <udivmodsi4+0x5c>
   22f24:	0005883a 	mov	r2,zero
   22f28:	21400236 	bltu	r4,r5,22f34 <udivmodsi4+0x40>
   22f2c:	2149c83a 	sub	r4,r4,r5
   22f30:	10c4b03a 	or	r2,r2,r3
   22f34:	1806d07a 	srli	r3,r3,1
   22f38:	280ad07a 	srli	r5,r5,1
   22f3c:	183ffa1e 	bne	r3,zero,22f28 <udivmodsi4+0x34>
   22f40:	3000011e 	bne	r6,zero,22f48 <udivmodsi4+0x54>
   22f44:	f800283a 	ret
   22f48:	2005883a 	mov	r2,r4
   22f4c:	f800283a 	ret
   22f50:	0005883a 	mov	r2,zero
   22f54:	003ffa06 	br	22f40 <udivmodsi4+0x4c>
   22f58:	00c00044 	movi	r3,1
   22f5c:	003ff106 	br	22f24 <udivmodsi4+0x30>

00022f60 <__divsi3>:
   22f60:	defffe04 	addi	sp,sp,-8
   22f64:	dfc00115 	stw	ra,4(sp)
   22f68:	dc000015 	stw	r16,0(sp)
   22f6c:	20000b16 	blt	r4,zero,22f9c <__divsi3+0x3c>
   22f70:	0021883a 	mov	r16,zero
   22f74:	28000c16 	blt	r5,zero,22fa8 <__divsi3+0x48>
   22f78:	000d883a 	mov	r6,zero
   22f7c:	0022ef40 	call	22ef4 <udivmodsi4>
   22f80:	0407c83a 	sub	r3,zero,r16
   22f84:	1884f03a 	xor	r2,r3,r2
   22f88:	1405883a 	add	r2,r2,r16
   22f8c:	dfc00117 	ldw	ra,4(sp)
   22f90:	dc000017 	ldw	r16,0(sp)
   22f94:	dec00204 	addi	sp,sp,8
   22f98:	f800283a 	ret
   22f9c:	0109c83a 	sub	r4,zero,r4
   22fa0:	04000044 	movi	r16,1
   22fa4:	283ff40e 	bge	r5,zero,22f78 <__divsi3+0x18>
   22fa8:	014bc83a 	sub	r5,zero,r5
   22fac:	8400005c 	xori	r16,r16,1
   22fb0:	003ff106 	br	22f78 <__divsi3+0x18>

00022fb4 <__modsi3>:
   22fb4:	defffd04 	addi	sp,sp,-12
   22fb8:	dfc00215 	stw	ra,8(sp)
   22fbc:	dc400115 	stw	r17,4(sp)
   22fc0:	dc000015 	stw	r16,0(sp)
   22fc4:	20000c16 	blt	r4,zero,22ff8 <__modsi3+0x44>
   22fc8:	0023883a 	mov	r17,zero
   22fcc:	0021883a 	mov	r16,zero
   22fd0:	28000d16 	blt	r5,zero,23008 <__modsi3+0x54>
   22fd4:	01800044 	movi	r6,1
   22fd8:	0022ef40 	call	22ef4 <udivmodsi4>
   22fdc:	1404f03a 	xor	r2,r2,r16
   22fe0:	8885883a 	add	r2,r17,r2
   22fe4:	dfc00217 	ldw	ra,8(sp)
   22fe8:	dc400117 	ldw	r17,4(sp)
   22fec:	dc000017 	ldw	r16,0(sp)
   22ff0:	dec00304 	addi	sp,sp,12
   22ff4:	f800283a 	ret
   22ff8:	0109c83a 	sub	r4,zero,r4
   22ffc:	04400044 	movi	r17,1
   23000:	043fffc4 	movi	r16,-1
   23004:	283ff30e 	bge	r5,zero,22fd4 <__modsi3+0x20>
   23008:	014bc83a 	sub	r5,zero,r5
   2300c:	003ff106 	br	22fd4 <__modsi3+0x20>

00023010 <__udivsi3>:
   23010:	000d883a 	mov	r6,zero
   23014:	0022ef41 	jmpi	22ef4 <udivmodsi4>

00023018 <__umodsi3>:
   23018:	01800044 	movi	r6,1
   2301c:	0022ef41 	jmpi	22ef4 <udivmodsi4>

00023020 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23020:	defffe04 	addi	sp,sp,-8
   23024:	dfc00115 	stw	ra,4(sp)
   23028:	df000015 	stw	fp,0(sp)
   2302c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23030:	008000b4 	movhi	r2,2
   23034:	109faa04 	addi	r2,r2,32424
   23038:	10800017 	ldw	r2,0(r2)
   2303c:	10000526 	beq	r2,zero,23054 <alt_get_errno+0x34>
   23040:	008000b4 	movhi	r2,2
   23044:	109faa04 	addi	r2,r2,32424
   23048:	10800017 	ldw	r2,0(r2)
   2304c:	103ee83a 	callr	r2
   23050:	00000206 	br	2305c <alt_get_errno+0x3c>
   23054:	008000f4 	movhi	r2,3
   23058:	10a66604 	addi	r2,r2,-26216
}
   2305c:	e037883a 	mov	sp,fp
   23060:	dfc00117 	ldw	ra,4(sp)
   23064:	df000017 	ldw	fp,0(sp)
   23068:	dec00204 	addi	sp,sp,8
   2306c:	f800283a 	ret

00023070 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   23070:	defffb04 	addi	sp,sp,-20
   23074:	dfc00415 	stw	ra,16(sp)
   23078:	df000315 	stw	fp,12(sp)
   2307c:	df000304 	addi	fp,sp,12
   23080:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   23084:	e0bfff17 	ldw	r2,-4(fp)
   23088:	10000616 	blt	r2,zero,230a4 <close+0x34>
   2308c:	e0bfff17 	ldw	r2,-4(fp)
   23090:	10c00324 	muli	r3,r2,12
   23094:	008000b4 	movhi	r2,2
   23098:	109b1104 	addi	r2,r2,27716
   2309c:	1885883a 	add	r2,r3,r2
   230a0:	00000106 	br	230a8 <close+0x38>
   230a4:	0005883a 	mov	r2,zero
   230a8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   230ac:	e0bffd17 	ldw	r2,-12(fp)
   230b0:	10001926 	beq	r2,zero,23118 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   230b4:	e0bffd17 	ldw	r2,-12(fp)
   230b8:	10800017 	ldw	r2,0(r2)
   230bc:	10800417 	ldw	r2,16(r2)
   230c0:	10000626 	beq	r2,zero,230dc <close+0x6c>
   230c4:	e0bffd17 	ldw	r2,-12(fp)
   230c8:	10800017 	ldw	r2,0(r2)
   230cc:	10800417 	ldw	r2,16(r2)
   230d0:	e13ffd17 	ldw	r4,-12(fp)
   230d4:	103ee83a 	callr	r2
   230d8:	00000106 	br	230e0 <close+0x70>
   230dc:	0005883a 	mov	r2,zero
   230e0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   230e4:	e13fff17 	ldw	r4,-4(fp)
   230e8:	00239d80 	call	239d8 <alt_release_fd>
    if (rval < 0)
   230ec:	e0bffe17 	ldw	r2,-8(fp)
   230f0:	1000070e 	bge	r2,zero,23110 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   230f4:	00230200 	call	23020 <alt_get_errno>
   230f8:	1007883a 	mov	r3,r2
   230fc:	e0bffe17 	ldw	r2,-8(fp)
   23100:	0085c83a 	sub	r2,zero,r2
   23104:	18800015 	stw	r2,0(r3)
      return -1;
   23108:	00bfffc4 	movi	r2,-1
   2310c:	00000706 	br	2312c <close+0xbc>
    }
    return 0;
   23110:	0005883a 	mov	r2,zero
   23114:	00000506 	br	2312c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23118:	00230200 	call	23020 <alt_get_errno>
   2311c:	1007883a 	mov	r3,r2
   23120:	00801444 	movi	r2,81
   23124:	18800015 	stw	r2,0(r3)
    return -1;
   23128:	00bfffc4 	movi	r2,-1
  }
}
   2312c:	e037883a 	mov	sp,fp
   23130:	dfc00117 	ldw	ra,4(sp)
   23134:	df000017 	ldw	fp,0(sp)
   23138:	dec00204 	addi	sp,sp,8
   2313c:	f800283a 	ret

00023140 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   23140:	defffc04 	addi	sp,sp,-16
   23144:	df000315 	stw	fp,12(sp)
   23148:	df000304 	addi	fp,sp,12
   2314c:	e13ffd15 	stw	r4,-12(fp)
   23150:	e17ffe15 	stw	r5,-8(fp)
   23154:	e1bfff15 	stw	r6,-4(fp)
  return len;
   23158:	e0bfff17 	ldw	r2,-4(fp)
}
   2315c:	e037883a 	mov	sp,fp
   23160:	df000017 	ldw	fp,0(sp)
   23164:	dec00104 	addi	sp,sp,4
   23168:	f800283a 	ret

0002316c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2316c:	defffe04 	addi	sp,sp,-8
   23170:	dfc00115 	stw	ra,4(sp)
   23174:	df000015 	stw	fp,0(sp)
   23178:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2317c:	008000b4 	movhi	r2,2
   23180:	109faa04 	addi	r2,r2,32424
   23184:	10800017 	ldw	r2,0(r2)
   23188:	10000526 	beq	r2,zero,231a0 <alt_get_errno+0x34>
   2318c:	008000b4 	movhi	r2,2
   23190:	109faa04 	addi	r2,r2,32424
   23194:	10800017 	ldw	r2,0(r2)
   23198:	103ee83a 	callr	r2
   2319c:	00000206 	br	231a8 <alt_get_errno+0x3c>
   231a0:	008000f4 	movhi	r2,3
   231a4:	10a66604 	addi	r2,r2,-26216
}
   231a8:	e037883a 	mov	sp,fp
   231ac:	dfc00117 	ldw	ra,4(sp)
   231b0:	df000017 	ldw	fp,0(sp)
   231b4:	dec00204 	addi	sp,sp,8
   231b8:	f800283a 	ret

000231bc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   231bc:	defffb04 	addi	sp,sp,-20
   231c0:	dfc00415 	stw	ra,16(sp)
   231c4:	df000315 	stw	fp,12(sp)
   231c8:	df000304 	addi	fp,sp,12
   231cc:	e13ffe15 	stw	r4,-8(fp)
   231d0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   231d4:	e0bffe17 	ldw	r2,-8(fp)
   231d8:	10000616 	blt	r2,zero,231f4 <fstat+0x38>
   231dc:	e0bffe17 	ldw	r2,-8(fp)
   231e0:	10c00324 	muli	r3,r2,12
   231e4:	008000b4 	movhi	r2,2
   231e8:	109b1104 	addi	r2,r2,27716
   231ec:	1885883a 	add	r2,r3,r2
   231f0:	00000106 	br	231f8 <fstat+0x3c>
   231f4:	0005883a 	mov	r2,zero
   231f8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   231fc:	e0bffd17 	ldw	r2,-12(fp)
   23200:	10001026 	beq	r2,zero,23244 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   23204:	e0bffd17 	ldw	r2,-12(fp)
   23208:	10800017 	ldw	r2,0(r2)
   2320c:	10800817 	ldw	r2,32(r2)
   23210:	10000726 	beq	r2,zero,23230 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   23214:	e0bffd17 	ldw	r2,-12(fp)
   23218:	10800017 	ldw	r2,0(r2)
   2321c:	10800817 	ldw	r2,32(r2)
   23220:	e13ffd17 	ldw	r4,-12(fp)
   23224:	e17fff17 	ldw	r5,-4(fp)
   23228:	103ee83a 	callr	r2
   2322c:	00000a06 	br	23258 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   23230:	e0bfff17 	ldw	r2,-4(fp)
   23234:	00c80004 	movi	r3,8192
   23238:	10c00115 	stw	r3,4(r2)
      return 0;
   2323c:	0005883a 	mov	r2,zero
   23240:	00000506 	br	23258 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23244:	002316c0 	call	2316c <alt_get_errno>
   23248:	1007883a 	mov	r3,r2
   2324c:	00801444 	movi	r2,81
   23250:	18800015 	stw	r2,0(r3)
    return -1;
   23254:	00bfffc4 	movi	r2,-1
  }
}
   23258:	e037883a 	mov	sp,fp
   2325c:	dfc00117 	ldw	ra,4(sp)
   23260:	df000017 	ldw	fp,0(sp)
   23264:	dec00204 	addi	sp,sp,8
   23268:	f800283a 	ret

0002326c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2326c:	defffe04 	addi	sp,sp,-8
   23270:	dfc00115 	stw	ra,4(sp)
   23274:	df000015 	stw	fp,0(sp)
   23278:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2327c:	008000b4 	movhi	r2,2
   23280:	109faa04 	addi	r2,r2,32424
   23284:	10800017 	ldw	r2,0(r2)
   23288:	10000526 	beq	r2,zero,232a0 <alt_get_errno+0x34>
   2328c:	008000b4 	movhi	r2,2
   23290:	109faa04 	addi	r2,r2,32424
   23294:	10800017 	ldw	r2,0(r2)
   23298:	103ee83a 	callr	r2
   2329c:	00000206 	br	232a8 <alt_get_errno+0x3c>
   232a0:	008000f4 	movhi	r2,3
   232a4:	10a66604 	addi	r2,r2,-26216
}
   232a8:	e037883a 	mov	sp,fp
   232ac:	dfc00117 	ldw	ra,4(sp)
   232b0:	df000017 	ldw	fp,0(sp)
   232b4:	dec00204 	addi	sp,sp,8
   232b8:	f800283a 	ret

000232bc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   232bc:	deffed04 	addi	sp,sp,-76
   232c0:	dfc01215 	stw	ra,72(sp)
   232c4:	df001115 	stw	fp,68(sp)
   232c8:	df001104 	addi	fp,sp,68
   232cc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   232d0:	e0bfff17 	ldw	r2,-4(fp)
   232d4:	10000616 	blt	r2,zero,232f0 <isatty+0x34>
   232d8:	e0bfff17 	ldw	r2,-4(fp)
   232dc:	10c00324 	muli	r3,r2,12
   232e0:	008000b4 	movhi	r2,2
   232e4:	109b1104 	addi	r2,r2,27716
   232e8:	1885883a 	add	r2,r3,r2
   232ec:	00000106 	br	232f4 <isatty+0x38>
   232f0:	0005883a 	mov	r2,zero
   232f4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   232f8:	e0bfef17 	ldw	r2,-68(fp)
   232fc:	10000e26 	beq	r2,zero,23338 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   23300:	e0bfef17 	ldw	r2,-68(fp)
   23304:	10800017 	ldw	r2,0(r2)
   23308:	10800817 	ldw	r2,32(r2)
   2330c:	1000021e 	bne	r2,zero,23318 <isatty+0x5c>
    {
      return 1;
   23310:	00800044 	movi	r2,1
   23314:	00000d06 	br	2334c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   23318:	e0bff004 	addi	r2,fp,-64
   2331c:	e13fff17 	ldw	r4,-4(fp)
   23320:	100b883a 	mov	r5,r2
   23324:	00231bc0 	call	231bc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   23328:	e0bff117 	ldw	r2,-60(fp)
   2332c:	10880020 	cmpeqi	r2,r2,8192
   23330:	10803fcc 	andi	r2,r2,255
   23334:	00000506 	br	2334c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   23338:	002326c0 	call	2326c <alt_get_errno>
   2333c:	1007883a 	mov	r3,r2
   23340:	00801444 	movi	r2,81
   23344:	18800015 	stw	r2,0(r3)
    return 0;
   23348:	0005883a 	mov	r2,zero
  }
}
   2334c:	e037883a 	mov	sp,fp
   23350:	dfc00117 	ldw	ra,4(sp)
   23354:	df000017 	ldw	fp,0(sp)
   23358:	dec00204 	addi	sp,sp,8
   2335c:	f800283a 	ret

00023360 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   23360:	defffc04 	addi	sp,sp,-16
   23364:	df000315 	stw	fp,12(sp)
   23368:	df000304 	addi	fp,sp,12
   2336c:	e13ffd15 	stw	r4,-12(fp)
   23370:	e17ffe15 	stw	r5,-8(fp)
   23374:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   23378:	e0fffe17 	ldw	r3,-8(fp)
   2337c:	e0bffd17 	ldw	r2,-12(fp)
   23380:	18800c26 	beq	r3,r2,233b4 <alt_load_section+0x54>
  {
    while( to != end )
   23384:	00000806 	br	233a8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   23388:	e0bffe17 	ldw	r2,-8(fp)
   2338c:	10c00104 	addi	r3,r2,4
   23390:	e0fffe15 	stw	r3,-8(fp)
   23394:	e0fffd17 	ldw	r3,-12(fp)
   23398:	19000104 	addi	r4,r3,4
   2339c:	e13ffd15 	stw	r4,-12(fp)
   233a0:	18c00017 	ldw	r3,0(r3)
   233a4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   233a8:	e0fffe17 	ldw	r3,-8(fp)
   233ac:	e0bfff17 	ldw	r2,-4(fp)
   233b0:	18bff51e 	bne	r3,r2,23388 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
   233b4:	e037883a 	mov	sp,fp
   233b8:	df000017 	ldw	fp,0(sp)
   233bc:	dec00104 	addi	sp,sp,4
   233c0:	f800283a 	ret

000233c4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   233c4:	defffe04 	addi	sp,sp,-8
   233c8:	dfc00115 	stw	ra,4(sp)
   233cc:	df000015 	stw	fp,0(sp)
   233d0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   233d4:	010000b4 	movhi	r4,2
   233d8:	211faf04 	addi	r4,r4,32444
   233dc:	014000b4 	movhi	r5,2
   233e0:	2958fc04 	addi	r5,r5,25584
   233e4:	018000b4 	movhi	r6,2
   233e8:	319faf04 	addi	r6,r6,32444
   233ec:	00233600 	call	23360 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   233f0:	010000b4 	movhi	r4,2
   233f4:	21000804 	addi	r4,r4,32
   233f8:	014000b4 	movhi	r5,2
   233fc:	29400804 	addi	r5,r5,32
   23400:	018000b4 	movhi	r6,2
   23404:	31809104 	addi	r6,r6,580
   23408:	00233600 	call	23360 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2340c:	010000b4 	movhi	r4,2
   23410:	2118cc04 	addi	r4,r4,25392
   23414:	014000b4 	movhi	r5,2
   23418:	2958cc04 	addi	r5,r5,25392
   2341c:	018000b4 	movhi	r6,2
   23420:	3198fc04 	addi	r6,r6,25584
   23424:	00233600 	call	23360 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   23428:	00250140 	call	25014 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2342c:	00252940 	call	25294 <alt_icache_flush_all>
}
   23430:	e037883a 	mov	sp,fp
   23434:	dfc00117 	ldw	ra,4(sp)
   23438:	df000017 	ldw	fp,0(sp)
   2343c:	dec00204 	addi	sp,sp,8
   23440:	f800283a 	ret

00023444 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23444:	defffe04 	addi	sp,sp,-8
   23448:	dfc00115 	stw	ra,4(sp)
   2344c:	df000015 	stw	fp,0(sp)
   23450:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23454:	008000b4 	movhi	r2,2
   23458:	109faa04 	addi	r2,r2,32424
   2345c:	10800017 	ldw	r2,0(r2)
   23460:	10000526 	beq	r2,zero,23478 <alt_get_errno+0x34>
   23464:	008000b4 	movhi	r2,2
   23468:	109faa04 	addi	r2,r2,32424
   2346c:	10800017 	ldw	r2,0(r2)
   23470:	103ee83a 	callr	r2
   23474:	00000206 	br	23480 <alt_get_errno+0x3c>
   23478:	008000f4 	movhi	r2,3
   2347c:	10a66604 	addi	r2,r2,-26216
}
   23480:	e037883a 	mov	sp,fp
   23484:	dfc00117 	ldw	ra,4(sp)
   23488:	df000017 	ldw	fp,0(sp)
   2348c:	dec00204 	addi	sp,sp,8
   23490:	f800283a 	ret

00023494 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   23494:	defff904 	addi	sp,sp,-28
   23498:	dfc00615 	stw	ra,24(sp)
   2349c:	df000515 	stw	fp,20(sp)
   234a0:	df000504 	addi	fp,sp,20
   234a4:	e13ffd15 	stw	r4,-12(fp)
   234a8:	e17ffe15 	stw	r5,-8(fp)
   234ac:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   234b0:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   234b4:	e0bffd17 	ldw	r2,-12(fp)
   234b8:	10000616 	blt	r2,zero,234d4 <lseek+0x40>
   234bc:	e0bffd17 	ldw	r2,-12(fp)
   234c0:	10c00324 	muli	r3,r2,12
   234c4:	008000b4 	movhi	r2,2
   234c8:	109b1104 	addi	r2,r2,27716
   234cc:	1885883a 	add	r2,r3,r2
   234d0:	00000106 	br	234d8 <lseek+0x44>
   234d4:	0005883a 	mov	r2,zero
   234d8:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   234dc:	e0bffc17 	ldw	r2,-16(fp)
   234e0:	10001026 	beq	r2,zero,23524 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   234e4:	e0bffc17 	ldw	r2,-16(fp)
   234e8:	10800017 	ldw	r2,0(r2)
   234ec:	10800717 	ldw	r2,28(r2)
   234f0:	10000926 	beq	r2,zero,23518 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   234f4:	e0bffc17 	ldw	r2,-16(fp)
   234f8:	10800017 	ldw	r2,0(r2)
   234fc:	10800717 	ldw	r2,28(r2)
   23500:	e13ffc17 	ldw	r4,-16(fp)
   23504:	e17ffe17 	ldw	r5,-8(fp)
   23508:	e1bfff17 	ldw	r6,-4(fp)
   2350c:	103ee83a 	callr	r2
   23510:	e0bffb15 	stw	r2,-20(fp)
   23514:	00000506 	br	2352c <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   23518:	00bfde84 	movi	r2,-134
   2351c:	e0bffb15 	stw	r2,-20(fp)
   23520:	00000206 	br	2352c <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   23524:	00bfebc4 	movi	r2,-81
   23528:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2352c:	e0bffb17 	ldw	r2,-20(fp)
   23530:	1000070e 	bge	r2,zero,23550 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   23534:	00234440 	call	23444 <alt_get_errno>
   23538:	1007883a 	mov	r3,r2
   2353c:	e0bffb17 	ldw	r2,-20(fp)
   23540:	0085c83a 	sub	r2,zero,r2
   23544:	18800015 	stw	r2,0(r3)
    rc = -1;
   23548:	00bfffc4 	movi	r2,-1
   2354c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   23550:	e0bffb17 	ldw	r2,-20(fp)
}
   23554:	e037883a 	mov	sp,fp
   23558:	dfc00117 	ldw	ra,4(sp)
   2355c:	df000017 	ldw	fp,0(sp)
   23560:	dec00204 	addi	sp,sp,8
   23564:	f800283a 	ret

00023568 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   23568:	defffd04 	addi	sp,sp,-12
   2356c:	dfc00215 	stw	ra,8(sp)
   23570:	df000115 	stw	fp,4(sp)
   23574:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   23578:	0009883a 	mov	r4,zero
   2357c:	0023c680 	call	23c68 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   23580:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   23584:	0023c9c0 	call	23c9c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   23588:	010000b4 	movhi	r4,2
   2358c:	2118ea04 	addi	r4,r4,25512
   23590:	014000b4 	movhi	r5,2
   23594:	2958ea04 	addi	r5,r5,25512
   23598:	018000b4 	movhi	r6,2
   2359c:	3198ea04 	addi	r6,r6,25512
   235a0:	00253840 	call	25384 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   235a4:	002514c0 	call	2514c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   235a8:	010000b4 	movhi	r4,2
   235ac:	21146a04 	addi	r4,r4,20904
   235b0:	0025ccc0 	call	25ccc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   235b4:	d126c617 	ldw	r4,-25832(gp)
   235b8:	d0e6c717 	ldw	r3,-25828(gp)
   235bc:	d0a6c817 	ldw	r2,-25824(gp)
   235c0:	180b883a 	mov	r5,r3
   235c4:	100d883a 	mov	r6,r2
   235c8:	00202900 	call	20290 <main>
   235cc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   235d0:	01000044 	movi	r4,1
   235d4:	00230700 	call	23070 <close>
  exit (result);
   235d8:	e13fff17 	ldw	r4,-4(fp)
   235dc:	0025ce00 	call	25ce0 <exit>

000235e0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   235e0:	defffe04 	addi	sp,sp,-8
   235e4:	df000115 	stw	fp,4(sp)
   235e8:	df000104 	addi	fp,sp,4
   235ec:	e13fff15 	stw	r4,-4(fp)
}
   235f0:	e037883a 	mov	sp,fp
   235f4:	df000017 	ldw	fp,0(sp)
   235f8:	dec00104 	addi	sp,sp,4
   235fc:	f800283a 	ret

00023600 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   23600:	defffe04 	addi	sp,sp,-8
   23604:	df000115 	stw	fp,4(sp)
   23608:	df000104 	addi	fp,sp,4
   2360c:	e13fff15 	stw	r4,-4(fp)
}
   23610:	e037883a 	mov	sp,fp
   23614:	df000017 	ldw	fp,0(sp)
   23618:	dec00104 	addi	sp,sp,4
   2361c:	f800283a 	ret

00023620 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   23620:	defff204 	addi	sp,sp,-56
   23624:	dfc00a15 	stw	ra,40(sp)
   23628:	df000915 	stw	fp,36(sp)
   2362c:	df000904 	addi	fp,sp,36
   23630:	e1400215 	stw	r5,8(fp)
   23634:	e1800315 	stw	r6,12(fp)
   23638:	e1c00415 	stw	r7,16(fp)
   2363c:	e13fff15 	stw	r4,-4(fp)
	va_list args;
	va_start(args, fmt);
   23640:	e0800204 	addi	r2,fp,8
   23644:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   23648:	e0bfff17 	ldw	r2,-4(fp)
   2364c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   23650:	00007106 	br	23818 <alt_printf+0x1f8>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   23654:	e0bff807 	ldb	r2,-32(fp)
   23658:	10800960 	cmpeqi	r2,r2,37
   2365c:	1000041e 	bne	r2,zero,23670 <alt_printf+0x50>
        {
            alt_putchar(c);
   23660:	e0bff807 	ldb	r2,-32(fp)
   23664:	1009883a 	mov	r4,r2
   23668:	00238480 	call	23848 <alt_putchar>
   2366c:	00006a06 	br	23818 <alt_printf+0x1f8>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   23670:	e0bff717 	ldw	r2,-36(fp)
   23674:	10c00044 	addi	r3,r2,1
   23678:	e0fff715 	stw	r3,-36(fp)
   2367c:	10800003 	ldbu	r2,0(r2)
   23680:	e0bff805 	stb	r2,-32(fp)
   23684:	e0bff807 	ldb	r2,-32(fp)
   23688:	10006226 	beq	r2,zero,23814 <alt_printf+0x1f4>
            {
                if (c == '%')
   2368c:	e0bff807 	ldb	r2,-32(fp)
   23690:	10800958 	cmpnei	r2,r2,37
   23694:	1000041e 	bne	r2,zero,236a8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   23698:	e0bff807 	ldb	r2,-32(fp)
   2369c:	1009883a 	mov	r4,r2
   236a0:	00238480 	call	23848 <alt_putchar>
   236a4:	00005c06 	br	23818 <alt_printf+0x1f8>
                } 
                else if (c == 'c')
   236a8:	e0bff807 	ldb	r2,-32(fp)
   236ac:	108018d8 	cmpnei	r2,r2,99
   236b0:	1000081e 	bne	r2,zero,236d4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   236b4:	e0bffe17 	ldw	r2,-8(fp)
   236b8:	10c00104 	addi	r3,r2,4
   236bc:	e0fffe15 	stw	r3,-8(fp)
   236c0:	10800017 	ldw	r2,0(r2)
   236c4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   236c8:	e13ffd17 	ldw	r4,-12(fp)
   236cc:	00238480 	call	23848 <alt_putchar>
   236d0:	00005106 	br	23818 <alt_printf+0x1f8>
                }
                else if (c == 'x')
   236d4:	e0bff807 	ldb	r2,-32(fp)
   236d8:	10801e18 	cmpnei	r2,r2,120
   236dc:	1000341e 	bne	r2,zero,237b0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   236e0:	e0bffe17 	ldw	r2,-8(fp)
   236e4:	10c00104 	addi	r3,r2,4
   236e8:	e0fffe15 	stw	r3,-8(fp)
   236ec:	10800017 	ldw	r2,0(r2)
   236f0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   236f4:	e0bffb17 	ldw	r2,-20(fp)
   236f8:	1000031e 	bne	r2,zero,23708 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   236fc:	01000c04 	movi	r4,48
   23700:	00238480 	call	23848 <alt_putchar>
                        continue;
   23704:	00004406 	br	23818 <alt_printf+0x1f8>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   23708:	00800704 	movi	r2,28
   2370c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   23710:	00000306 	br	23720 <alt_printf+0x100>
                        digit_shift -= 4;
   23714:	e0bff917 	ldw	r2,-28(fp)
   23718:	10bfff04 	addi	r2,r2,-4
   2371c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   23720:	00c003c4 	movi	r3,15
   23724:	e0bff917 	ldw	r2,-28(fp)
   23728:	1884983a 	sll	r2,r3,r2
   2372c:	1007883a 	mov	r3,r2
   23730:	e0bffb17 	ldw	r2,-20(fp)
   23734:	1884703a 	and	r2,r3,r2
   23738:	103ff626 	beq	r2,zero,23714 <alt_printf+0xf4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   2373c:	00001906 	br	237a4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   23740:	00c003c4 	movi	r3,15
   23744:	e0bff917 	ldw	r2,-28(fp)
   23748:	1884983a 	sll	r2,r3,r2
   2374c:	1007883a 	mov	r3,r2
   23750:	e0bffb17 	ldw	r2,-20(fp)
   23754:	1886703a 	and	r3,r3,r2
   23758:	e0bff917 	ldw	r2,-28(fp)
   2375c:	1884d83a 	srl	r2,r3,r2
   23760:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   23764:	e0bffc17 	ldw	r2,-16(fp)
   23768:	108002a8 	cmpgeui	r2,r2,10
   2376c:	1000041e 	bne	r2,zero,23780 <alt_printf+0x160>
                            c = '0' + digit;
   23770:	e0bffc17 	ldw	r2,-16(fp)
   23774:	10800c04 	addi	r2,r2,48
   23778:	e0bff805 	stb	r2,-32(fp)
   2377c:	00000306 	br	2378c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   23780:	e0bffc17 	ldw	r2,-16(fp)
   23784:	108015c4 	addi	r2,r2,87
   23788:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   2378c:	e0bff807 	ldb	r2,-32(fp)
   23790:	1009883a 	mov	r4,r2
   23794:	00238480 	call	23848 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   23798:	e0bff917 	ldw	r2,-28(fp)
   2379c:	10bfff04 	addi	r2,r2,-4
   237a0:	e0bff915 	stw	r2,-28(fp)
   237a4:	e0bff917 	ldw	r2,-28(fp)
   237a8:	103fe50e 	bge	r2,zero,23740 <alt_printf+0x120>
   237ac:	00001a06 	br	23818 <alt_printf+0x1f8>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   237b0:	e0bff807 	ldb	r2,-32(fp)
   237b4:	10801cd8 	cmpnei	r2,r2,115
   237b8:	1000151e 	bne	r2,zero,23810 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   237bc:	e0bffe17 	ldw	r2,-8(fp)
   237c0:	10c00104 	addi	r3,r2,4
   237c4:	e0fffe15 	stw	r3,-8(fp)
   237c8:	10800017 	ldw	r2,0(r2)
   237cc:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   237d0:	00000906 	br	237f8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   237d4:	e0bffa17 	ldw	r2,-24(fp)
   237d8:	10c00044 	addi	r3,r2,1
   237dc:	e0fffa15 	stw	r3,-24(fp)
   237e0:	10800003 	ldbu	r2,0(r2)
   237e4:	10803fcc 	andi	r2,r2,255
   237e8:	1080201c 	xori	r2,r2,128
   237ec:	10bfe004 	addi	r2,r2,-128
   237f0:	1009883a 	mov	r4,r2
   237f4:	00238480 	call	23848 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   237f8:	e0bffa17 	ldw	r2,-24(fp)
   237fc:	10800003 	ldbu	r2,0(r2)
   23800:	10803fcc 	andi	r2,r2,255
   23804:	1080201c 	xori	r2,r2,128
   23808:	10bfe004 	addi	r2,r2,-128
   2380c:	103ff11e 	bne	r2,zero,237d4 <alt_printf+0x1b4>
   23810:	00000106 	br	23818 <alt_printf+0x1f8>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   23814:	00000706 	br	23834 <alt_printf+0x214>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   23818:	e0bff717 	ldw	r2,-36(fp)
   2381c:	10c00044 	addi	r3,r2,1
   23820:	e0fff715 	stw	r3,-36(fp)
   23824:	10800003 	ldbu	r2,0(r2)
   23828:	e0bff805 	stb	r2,-32(fp)
   2382c:	e0bff807 	ldb	r2,-32(fp)
   23830:	103f881e 	bne	r2,zero,23654 <alt_printf+0x34>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   23834:	e037883a 	mov	sp,fp
   23838:	dfc00117 	ldw	ra,4(sp)
   2383c:	df000017 	ldw	fp,0(sp)
   23840:	dec00504 	addi	sp,sp,20
   23844:	f800283a 	ret

00023848 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   23848:	defffd04 	addi	sp,sp,-12
   2384c:	dfc00215 	stw	ra,8(sp)
   23850:	df000115 	stw	fp,4(sp)
   23854:	df000104 	addi	fp,sp,4
   23858:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   2385c:	008000b4 	movhi	r2,2
   23860:	109fa204 	addi	r2,r2,32392
   23864:	10800017 	ldw	r2,0(r2)
   23868:	10800217 	ldw	r2,8(r2)
   2386c:	e13fff17 	ldw	r4,-4(fp)
   23870:	100b883a 	mov	r5,r2
   23874:	0025e340 	call	25e34 <putc>
#endif
#endif
}
   23878:	e037883a 	mov	sp,fp
   2387c:	dfc00117 	ldw	ra,4(sp)
   23880:	df000017 	ldw	fp,0(sp)
   23884:	dec00204 	addi	sp,sp,8
   23888:	f800283a 	ret

0002388c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2388c:	defffe04 	addi	sp,sp,-8
   23890:	dfc00115 	stw	ra,4(sp)
   23894:	df000015 	stw	fp,0(sp)
   23898:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2389c:	008000b4 	movhi	r2,2
   238a0:	109faa04 	addi	r2,r2,32424
   238a4:	10800017 	ldw	r2,0(r2)
   238a8:	10000526 	beq	r2,zero,238c0 <alt_get_errno+0x34>
   238ac:	008000b4 	movhi	r2,2
   238b0:	109faa04 	addi	r2,r2,32424
   238b4:	10800017 	ldw	r2,0(r2)
   238b8:	103ee83a 	callr	r2
   238bc:	00000206 	br	238c8 <alt_get_errno+0x3c>
   238c0:	008000f4 	movhi	r2,3
   238c4:	10a66604 	addi	r2,r2,-26216
}
   238c8:	e037883a 	mov	sp,fp
   238cc:	dfc00117 	ldw	ra,4(sp)
   238d0:	df000017 	ldw	fp,0(sp)
   238d4:	dec00204 	addi	sp,sp,8
   238d8:	f800283a 	ret

000238dc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   238dc:	defff904 	addi	sp,sp,-28
   238e0:	dfc00615 	stw	ra,24(sp)
   238e4:	df000515 	stw	fp,20(sp)
   238e8:	df000504 	addi	fp,sp,20
   238ec:	e13ffd15 	stw	r4,-12(fp)
   238f0:	e17ffe15 	stw	r5,-8(fp)
   238f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   238f8:	e0bffd17 	ldw	r2,-12(fp)
   238fc:	10000616 	blt	r2,zero,23918 <read+0x3c>
   23900:	e0bffd17 	ldw	r2,-12(fp)
   23904:	10c00324 	muli	r3,r2,12
   23908:	008000b4 	movhi	r2,2
   2390c:	109b1104 	addi	r2,r2,27716
   23910:	1885883a 	add	r2,r3,r2
   23914:	00000106 	br	2391c <read+0x40>
   23918:	0005883a 	mov	r2,zero
   2391c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23920:	e0bffb17 	ldw	r2,-20(fp)
   23924:	10002226 	beq	r2,zero,239b0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23928:	e0bffb17 	ldw	r2,-20(fp)
   2392c:	10800217 	ldw	r2,8(r2)
   23930:	108000cc 	andi	r2,r2,3
   23934:	10800060 	cmpeqi	r2,r2,1
   23938:	1000181e 	bne	r2,zero,2399c <read+0xc0>
        (fd->dev->read))
   2393c:	e0bffb17 	ldw	r2,-20(fp)
   23940:	10800017 	ldw	r2,0(r2)
   23944:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   23948:	10001426 	beq	r2,zero,2399c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2394c:	e0bffb17 	ldw	r2,-20(fp)
   23950:	10800017 	ldw	r2,0(r2)
   23954:	10800517 	ldw	r2,20(r2)
   23958:	e0ffff17 	ldw	r3,-4(fp)
   2395c:	e13ffb17 	ldw	r4,-20(fp)
   23960:	e17ffe17 	ldw	r5,-8(fp)
   23964:	180d883a 	mov	r6,r3
   23968:	103ee83a 	callr	r2
   2396c:	e0bffc15 	stw	r2,-16(fp)
   23970:	e0bffc17 	ldw	r2,-16(fp)
   23974:	1000070e 	bge	r2,zero,23994 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   23978:	002388c0 	call	2388c <alt_get_errno>
   2397c:	1007883a 	mov	r3,r2
   23980:	e0bffc17 	ldw	r2,-16(fp)
   23984:	0085c83a 	sub	r2,zero,r2
   23988:	18800015 	stw	r2,0(r3)
          return -1;
   2398c:	00bfffc4 	movi	r2,-1
   23990:	00000c06 	br	239c4 <read+0xe8>
        }
        return rval;
   23994:	e0bffc17 	ldw	r2,-16(fp)
   23998:	00000a06 	br	239c4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2399c:	002388c0 	call	2388c <alt_get_errno>
   239a0:	1007883a 	mov	r3,r2
   239a4:	00800344 	movi	r2,13
   239a8:	18800015 	stw	r2,0(r3)
   239ac:	00000406 	br	239c0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   239b0:	002388c0 	call	2388c <alt_get_errno>
   239b4:	1007883a 	mov	r3,r2
   239b8:	00801444 	movi	r2,81
   239bc:	18800015 	stw	r2,0(r3)
  }
  return -1;
   239c0:	00bfffc4 	movi	r2,-1
}
   239c4:	e037883a 	mov	sp,fp
   239c8:	dfc00117 	ldw	ra,4(sp)
   239cc:	df000017 	ldw	fp,0(sp)
   239d0:	dec00204 	addi	sp,sp,8
   239d4:	f800283a 	ret

000239d8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   239d8:	defffe04 	addi	sp,sp,-8
   239dc:	df000115 	stw	fp,4(sp)
   239e0:	df000104 	addi	fp,sp,4
   239e4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   239e8:	e0bfff17 	ldw	r2,-4(fp)
   239ec:	108000d0 	cmplti	r2,r2,3
   239f0:	10000d1e 	bne	r2,zero,23a28 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   239f4:	008000b4 	movhi	r2,2
   239f8:	109b1104 	addi	r2,r2,27716
   239fc:	e0ffff17 	ldw	r3,-4(fp)
   23a00:	18c00324 	muli	r3,r3,12
   23a04:	18c00204 	addi	r3,r3,8
   23a08:	10c5883a 	add	r2,r2,r3
   23a0c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   23a10:	008000b4 	movhi	r2,2
   23a14:	109b1104 	addi	r2,r2,27716
   23a18:	e0ffff17 	ldw	r3,-4(fp)
   23a1c:	18c00324 	muli	r3,r3,12
   23a20:	10c5883a 	add	r2,r2,r3
   23a24:	10000015 	stw	zero,0(r2)
  }
}
   23a28:	e037883a 	mov	sp,fp
   23a2c:	df000017 	ldw	fp,0(sp)
   23a30:	dec00104 	addi	sp,sp,4
   23a34:	f800283a 	ret

00023a38 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   23a38:	defff904 	addi	sp,sp,-28
   23a3c:	df000615 	stw	fp,24(sp)
   23a40:	df000604 	addi	fp,sp,24
   23a44:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   23a48:	0005303a 	rdctl	r2,status
   23a4c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   23a50:	e0fffc17 	ldw	r3,-16(fp)
   23a54:	00bfff84 	movi	r2,-2
   23a58:	1884703a 	and	r2,r3,r2
   23a5c:	1001703a 	wrctl	status,r2
  
  return context;
   23a60:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   23a64:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   23a68:	d0a00a17 	ldw	r2,-32728(gp)
   23a6c:	10c000c4 	addi	r3,r2,3
   23a70:	00bfff04 	movi	r2,-4
   23a74:	1884703a 	and	r2,r3,r2
   23a78:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   23a7c:	d0e00a17 	ldw	r3,-32728(gp)
   23a80:	e0bfff17 	ldw	r2,-4(fp)
   23a84:	1887883a 	add	r3,r3,r2
   23a88:	00800134 	movhi	r2,4
   23a8c:	10a40004 	addi	r2,r2,-28672
   23a90:	10c0062e 	bgeu	r2,r3,23aac <sbrk+0x74>
   23a94:	e0bffa17 	ldw	r2,-24(fp)
   23a98:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   23a9c:	e0bffd17 	ldw	r2,-12(fp)
   23aa0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   23aa4:	00bfffc4 	movi	r2,-1
   23aa8:	00000b06 	br	23ad8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   23aac:	d0a00a17 	ldw	r2,-32728(gp)
   23ab0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
   23ab4:	d0e00a17 	ldw	r3,-32728(gp)
   23ab8:	e0bfff17 	ldw	r2,-4(fp)
   23abc:	1885883a 	add	r2,r3,r2
   23ac0:	d0a00a15 	stw	r2,-32728(gp)
   23ac4:	e0bffa17 	ldw	r2,-24(fp)
   23ac8:	e0bffe15 	stw	r2,-8(fp)
   23acc:	e0bffe17 	ldw	r2,-8(fp)
   23ad0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   23ad4:	e0bffb17 	ldw	r2,-20(fp)
} 
   23ad8:	e037883a 	mov	sp,fp
   23adc:	df000017 	ldw	fp,0(sp)
   23ae0:	dec00104 	addi	sp,sp,4
   23ae4:	f800283a 	ret

00023ae8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   23ae8:	defffe04 	addi	sp,sp,-8
   23aec:	dfc00115 	stw	ra,4(sp)
   23af0:	df000015 	stw	fp,0(sp)
   23af4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   23af8:	008000b4 	movhi	r2,2
   23afc:	109faa04 	addi	r2,r2,32424
   23b00:	10800017 	ldw	r2,0(r2)
   23b04:	10000526 	beq	r2,zero,23b1c <alt_get_errno+0x34>
   23b08:	008000b4 	movhi	r2,2
   23b0c:	109faa04 	addi	r2,r2,32424
   23b10:	10800017 	ldw	r2,0(r2)
   23b14:	103ee83a 	callr	r2
   23b18:	00000206 	br	23b24 <alt_get_errno+0x3c>
   23b1c:	008000f4 	movhi	r2,3
   23b20:	10a66604 	addi	r2,r2,-26216
}
   23b24:	e037883a 	mov	sp,fp
   23b28:	dfc00117 	ldw	ra,4(sp)
   23b2c:	df000017 	ldw	fp,0(sp)
   23b30:	dec00204 	addi	sp,sp,8
   23b34:	f800283a 	ret

00023b38 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   23b38:	defff904 	addi	sp,sp,-28
   23b3c:	dfc00615 	stw	ra,24(sp)
   23b40:	df000515 	stw	fp,20(sp)
   23b44:	df000504 	addi	fp,sp,20
   23b48:	e13ffd15 	stw	r4,-12(fp)
   23b4c:	e17ffe15 	stw	r5,-8(fp)
   23b50:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   23b54:	e0bffd17 	ldw	r2,-12(fp)
   23b58:	10000616 	blt	r2,zero,23b74 <write+0x3c>
   23b5c:	e0bffd17 	ldw	r2,-12(fp)
   23b60:	10c00324 	muli	r3,r2,12
   23b64:	008000b4 	movhi	r2,2
   23b68:	109b1104 	addi	r2,r2,27716
   23b6c:	1885883a 	add	r2,r3,r2
   23b70:	00000106 	br	23b78 <write+0x40>
   23b74:	0005883a 	mov	r2,zero
   23b78:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   23b7c:	e0bffb17 	ldw	r2,-20(fp)
   23b80:	10002126 	beq	r2,zero,23c08 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   23b84:	e0bffb17 	ldw	r2,-20(fp)
   23b88:	10800217 	ldw	r2,8(r2)
   23b8c:	108000cc 	andi	r2,r2,3
   23b90:	10001826 	beq	r2,zero,23bf4 <write+0xbc>
   23b94:	e0bffb17 	ldw	r2,-20(fp)
   23b98:	10800017 	ldw	r2,0(r2)
   23b9c:	10800617 	ldw	r2,24(r2)
   23ba0:	10001426 	beq	r2,zero,23bf4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   23ba4:	e0bffb17 	ldw	r2,-20(fp)
   23ba8:	10800017 	ldw	r2,0(r2)
   23bac:	10800617 	ldw	r2,24(r2)
   23bb0:	e0ffff17 	ldw	r3,-4(fp)
   23bb4:	e13ffb17 	ldw	r4,-20(fp)
   23bb8:	e17ffe17 	ldw	r5,-8(fp)
   23bbc:	180d883a 	mov	r6,r3
   23bc0:	103ee83a 	callr	r2
   23bc4:	e0bffc15 	stw	r2,-16(fp)
   23bc8:	e0bffc17 	ldw	r2,-16(fp)
   23bcc:	1000070e 	bge	r2,zero,23bec <write+0xb4>
      {
        ALT_ERRNO = -rval;
   23bd0:	0023ae80 	call	23ae8 <alt_get_errno>
   23bd4:	1007883a 	mov	r3,r2
   23bd8:	e0bffc17 	ldw	r2,-16(fp)
   23bdc:	0085c83a 	sub	r2,zero,r2
   23be0:	18800015 	stw	r2,0(r3)
        return -1;
   23be4:	00bfffc4 	movi	r2,-1
   23be8:	00000c06 	br	23c1c <write+0xe4>
      }
      return rval;
   23bec:	e0bffc17 	ldw	r2,-16(fp)
   23bf0:	00000a06 	br	23c1c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   23bf4:	0023ae80 	call	23ae8 <alt_get_errno>
   23bf8:	1007883a 	mov	r3,r2
   23bfc:	00800344 	movi	r2,13
   23c00:	18800015 	stw	r2,0(r3)
   23c04:	00000406 	br	23c18 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   23c08:	0023ae80 	call	23ae8 <alt_get_errno>
   23c0c:	1007883a 	mov	r3,r2
   23c10:	00801444 	movi	r2,81
   23c14:	18800015 	stw	r2,0(r3)
  }
  return -1;
   23c18:	00bfffc4 	movi	r2,-1
}
   23c1c:	e037883a 	mov	sp,fp
   23c20:	dfc00117 	ldw	ra,4(sp)
   23c24:	df000017 	ldw	fp,0(sp)
   23c28:	dec00204 	addi	sp,sp,8
   23c2c:	f800283a 	ret

00023c30 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   23c30:	defffd04 	addi	sp,sp,-12
   23c34:	dfc00215 	stw	ra,8(sp)
   23c38:	df000115 	stw	fp,4(sp)
   23c3c:	df000104 	addi	fp,sp,4
   23c40:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   23c44:	e13fff17 	ldw	r4,-4(fp)
   23c48:	014000b4 	movhi	r5,2
   23c4c:	295fa704 	addi	r5,r5,32412
   23c50:	00250a80 	call	250a8 <alt_dev_llist_insert>
}
   23c54:	e037883a 	mov	sp,fp
   23c58:	dfc00117 	ldw	ra,4(sp)
   23c5c:	df000017 	ldw	fp,0(sp)
   23c60:	dec00204 	addi	sp,sp,8
   23c64:	f800283a 	ret

00023c68 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   23c68:	defffd04 	addi	sp,sp,-12
   23c6c:	dfc00215 	stw	ra,8(sp)
   23c70:	df000115 	stw	fp,4(sp)
   23c74:	df000104 	addi	fp,sp,4
   23c78:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_CPU, nios2_cpu);
   23c7c:	00259bc0 	call	259bc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   23c80:	00800044 	movi	r2,1
   23c84:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   23c88:	e037883a 	mov	sp,fp
   23c8c:	dfc00117 	ldw	ra,4(sp)
   23c90:	df000017 	ldw	fp,0(sp)
   23c94:	dec00204 	addi	sp,sp,8
   23c98:	f800283a 	ret

00023c9c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   23c9c:	defffe04 	addi	sp,sp,-8
   23ca0:	dfc00115 	stw	ra,4(sp)
   23ca4:	df000015 	stw	fp,0(sp)
   23ca8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
   23cac:	010000b4 	movhi	r4,2
   23cb0:	211b7b04 	addi	r4,r4,28140
   23cb4:	000b883a 	mov	r5,zero
   23cb8:	000d883a 	mov	r6,zero
   23cbc:	0023e600 	call	23e60 <altera_avalon_jtag_uart_init>
   23cc0:	010000b4 	movhi	r4,2
   23cc4:	211b7104 	addi	r4,r4,28100
   23cc8:	0023c300 	call	23c30 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
   23ccc:	0001883a 	nop
    ALTERA_UP_AVALON_AUDIO_AND_VIDEO_CONFIG_INIT ( AUDIO_AND_VIDEO_CONFIG, audio_and_video_config);
   23cd0:	010000b4 	movhi	r4,2
   23cd4:	211f8904 	addi	r4,r4,32292
   23cd8:	0023c300 	call	23c30 <alt_dev_reg>
    ALTERA_UP_AVALON_AUDIO_INIT ( AUDIO, audio);
   23cdc:	010000b4 	movhi	r4,2
   23ce0:	211f9504 	addi	r4,r4,32340
   23ce4:	0023c300 	call	23c30 <alt_dev_reg>
}
   23ce8:	e037883a 	mov	sp,fp
   23cec:	dfc00117 	ldw	ra,4(sp)
   23cf0:	df000017 	ldw	fp,0(sp)
   23cf4:	dec00204 	addi	sp,sp,8
   23cf8:	f800283a 	ret

00023cfc <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   23cfc:	defffa04 	addi	sp,sp,-24
   23d00:	dfc00515 	stw	ra,20(sp)
   23d04:	df000415 	stw	fp,16(sp)
   23d08:	df000404 	addi	fp,sp,16
   23d0c:	e13ffd15 	stw	r4,-12(fp)
   23d10:	e17ffe15 	stw	r5,-8(fp)
   23d14:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23d18:	e0bffd17 	ldw	r2,-12(fp)
   23d1c:	10800017 	ldw	r2,0(r2)
   23d20:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   23d24:	e0bffc17 	ldw	r2,-16(fp)
   23d28:	10c00a04 	addi	r3,r2,40
   23d2c:	e0bffd17 	ldw	r2,-12(fp)
   23d30:	10800217 	ldw	r2,8(r2)
   23d34:	1809883a 	mov	r4,r3
   23d38:	e17ffe17 	ldw	r5,-8(fp)
   23d3c:	e1bfff17 	ldw	r6,-4(fp)
   23d40:	100f883a 	mov	r7,r2
   23d44:	002431c0 	call	2431c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   23d48:	e037883a 	mov	sp,fp
   23d4c:	dfc00117 	ldw	ra,4(sp)
   23d50:	df000017 	ldw	fp,0(sp)
   23d54:	dec00204 	addi	sp,sp,8
   23d58:	f800283a 	ret

00023d5c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   23d5c:	defffa04 	addi	sp,sp,-24
   23d60:	dfc00515 	stw	ra,20(sp)
   23d64:	df000415 	stw	fp,16(sp)
   23d68:	df000404 	addi	fp,sp,16
   23d6c:	e13ffd15 	stw	r4,-12(fp)
   23d70:	e17ffe15 	stw	r5,-8(fp)
   23d74:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23d78:	e0bffd17 	ldw	r2,-12(fp)
   23d7c:	10800017 	ldw	r2,0(r2)
   23d80:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   23d84:	e0bffc17 	ldw	r2,-16(fp)
   23d88:	10c00a04 	addi	r3,r2,40
   23d8c:	e0bffd17 	ldw	r2,-12(fp)
   23d90:	10800217 	ldw	r2,8(r2)
   23d94:	1809883a 	mov	r4,r3
   23d98:	e17ffe17 	ldw	r5,-8(fp)
   23d9c:	e1bfff17 	ldw	r6,-4(fp)
   23da0:	100f883a 	mov	r7,r2
   23da4:	00245280 	call	24528 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   23da8:	e037883a 	mov	sp,fp
   23dac:	dfc00117 	ldw	ra,4(sp)
   23db0:	df000017 	ldw	fp,0(sp)
   23db4:	dec00204 	addi	sp,sp,8
   23db8:	f800283a 	ret

00023dbc <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   23dbc:	defffc04 	addi	sp,sp,-16
   23dc0:	dfc00315 	stw	ra,12(sp)
   23dc4:	df000215 	stw	fp,8(sp)
   23dc8:	df000204 	addi	fp,sp,8
   23dcc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   23dd0:	e0bfff17 	ldw	r2,-4(fp)
   23dd4:	10800017 	ldw	r2,0(r2)
   23dd8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   23ddc:	e0bffe17 	ldw	r2,-8(fp)
   23de0:	10c00a04 	addi	r3,r2,40
   23de4:	e0bfff17 	ldw	r2,-4(fp)
   23de8:	10800217 	ldw	r2,8(r2)
   23dec:	1809883a 	mov	r4,r3
   23df0:	100b883a 	mov	r5,r2
   23df4:	00241c80 	call	241c8 <altera_avalon_jtag_uart_close>
}
   23df8:	e037883a 	mov	sp,fp
   23dfc:	dfc00117 	ldw	ra,4(sp)
   23e00:	df000017 	ldw	fp,0(sp)
   23e04:	dec00204 	addi	sp,sp,8
   23e08:	f800283a 	ret

00023e0c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   23e0c:	defffa04 	addi	sp,sp,-24
   23e10:	dfc00515 	stw	ra,20(sp)
   23e14:	df000415 	stw	fp,16(sp)
   23e18:	df000404 	addi	fp,sp,16
   23e1c:	e13ffd15 	stw	r4,-12(fp)
   23e20:	e17ffe15 	stw	r5,-8(fp)
   23e24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   23e28:	e0bffd17 	ldw	r2,-12(fp)
   23e2c:	10800017 	ldw	r2,0(r2)
   23e30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   23e34:	e0bffc17 	ldw	r2,-16(fp)
   23e38:	10800a04 	addi	r2,r2,40
   23e3c:	1009883a 	mov	r4,r2
   23e40:	e17ffe17 	ldw	r5,-8(fp)
   23e44:	e1bfff17 	ldw	r6,-4(fp)
   23e48:	00242300 	call	24230 <altera_avalon_jtag_uart_ioctl>
}
   23e4c:	e037883a 	mov	sp,fp
   23e50:	dfc00117 	ldw	ra,4(sp)
   23e54:	df000017 	ldw	fp,0(sp)
   23e58:	dec00204 	addi	sp,sp,8
   23e5c:	f800283a 	ret

00023e60 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   23e60:	defffb04 	addi	sp,sp,-20
   23e64:	dfc00415 	stw	ra,16(sp)
   23e68:	df000315 	stw	fp,12(sp)
   23e6c:	df000304 	addi	fp,sp,12
   23e70:	e13ffd15 	stw	r4,-12(fp)
   23e74:	e17ffe15 	stw	r5,-8(fp)
   23e78:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   23e7c:	e0bffd17 	ldw	r2,-12(fp)
   23e80:	00c00044 	movi	r3,1
   23e84:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   23e88:	e0bffd17 	ldw	r2,-12(fp)
   23e8c:	10800017 	ldw	r2,0(r2)
   23e90:	10800104 	addi	r2,r2,4
   23e94:	1007883a 	mov	r3,r2
   23e98:	e0bffd17 	ldw	r2,-12(fp)
   23e9c:	10800817 	ldw	r2,32(r2)
   23ea0:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
   23ea4:	e0bfff17 	ldw	r2,-4(fp)
   23ea8:	1009883a 	mov	r4,r2
   23eac:	e17ffd17 	ldw	r5,-12(fp)
   23eb0:	018000b4 	movhi	r6,2
   23eb4:	318fc604 	addi	r6,r6,16152
   23eb8:	00253fc0 	call	253fc <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   23ebc:	e0bffd17 	ldw	r2,-12(fp)
   23ec0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   23ec4:	e0bffd17 	ldw	r2,-12(fp)
   23ec8:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   23ecc:	008000f4 	movhi	r2,3
   23ed0:	10a66b04 	addi	r2,r2,-26196
   23ed4:	10800017 	ldw	r2,0(r2)
   23ed8:	1809883a 	mov	r4,r3
   23edc:	100b883a 	mov	r5,r2
   23ee0:	018000b4 	movhi	r6,2
   23ee4:	31904804 	addi	r6,r6,16672
   23ee8:	e1fffd17 	ldw	r7,-12(fp)
   23eec:	0024ed40 	call	24ed4 <alt_alarm_start>
   23ef0:	1000040e 	bge	r2,zero,23f04 <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   23ef4:	e0fffd17 	ldw	r3,-12(fp)
   23ef8:	00a00034 	movhi	r2,32768
   23efc:	10bfffc4 	addi	r2,r2,-1
   23f00:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   23f04:	e037883a 	mov	sp,fp
   23f08:	dfc00117 	ldw	ra,4(sp)
   23f0c:	df000017 	ldw	fp,0(sp)
   23f10:	dec00204 	addi	sp,sp,8
   23f14:	f800283a 	ret

00023f18 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   23f18:	defff704 	addi	sp,sp,-36
   23f1c:	df000815 	stw	fp,32(sp)
   23f20:	df000804 	addi	fp,sp,32
   23f24:	e13ffe15 	stw	r4,-8(fp)
   23f28:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   23f2c:	e0bffe17 	ldw	r2,-8(fp)
   23f30:	e0bffa15 	stw	r2,-24(fp)
  unsigned int base = sp->base;
   23f34:	e0bffa17 	ldw	r2,-24(fp)
   23f38:	10800017 	ldw	r2,0(r2)
   23f3c:	e0bffb15 	stw	r2,-20(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   23f40:	e0bffb17 	ldw	r2,-20(fp)
   23f44:	10800104 	addi	r2,r2,4
   23f48:	10800037 	ldwio	r2,0(r2)
   23f4c:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   23f50:	e0bffc17 	ldw	r2,-16(fp)
   23f54:	1080c00c 	andi	r2,r2,768
   23f58:	1000011e 	bne	r2,zero,23f60 <altera_avalon_jtag_uart_irq+0x48>
      break;
   23f5c:	00006c06 	br	24110 <altera_avalon_jtag_uart_irq+0x1f8>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   23f60:	e0bffc17 	ldw	r2,-16(fp)
   23f64:	1080400c 	andi	r2,r2,256
   23f68:	10003426 	beq	r2,zero,2403c <altera_avalon_jtag_uart_irq+0x124>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   23f6c:	00800074 	movhi	r2,1
   23f70:	e0bff815 	stw	r2,-32(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23f74:	e0bffa17 	ldw	r2,-24(fp)
   23f78:	10800a17 	ldw	r2,40(r2)
   23f7c:	10800044 	addi	r2,r2,1
   23f80:	1081ffcc 	andi	r2,r2,2047
   23f84:	e0bffd15 	stw	r2,-12(fp)
        if (next == sp->rx_out)
   23f88:	e0bffa17 	ldw	r2,-24(fp)
   23f8c:	10c00b17 	ldw	r3,44(r2)
   23f90:	e0bffd17 	ldw	r2,-12(fp)
   23f94:	1880011e 	bne	r3,r2,23f9c <altera_avalon_jtag_uart_irq+0x84>
          break;
   23f98:	00001606 	br	23ff4 <altera_avalon_jtag_uart_irq+0xdc>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   23f9c:	e0bffb17 	ldw	r2,-20(fp)
   23fa0:	10800037 	ldwio	r2,0(r2)
   23fa4:	e0bff815 	stw	r2,-32(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   23fa8:	e0bff817 	ldw	r2,-32(fp)
   23fac:	10a0000c 	andi	r2,r2,32768
   23fb0:	1000011e 	bne	r2,zero,23fb8 <altera_avalon_jtag_uart_irq+0xa0>
          break;
   23fb4:	00000f06 	br	23ff4 <altera_avalon_jtag_uart_irq+0xdc>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   23fb8:	e0bffa17 	ldw	r2,-24(fp)
   23fbc:	10800a17 	ldw	r2,40(r2)
   23fc0:	e0fff817 	ldw	r3,-32(fp)
   23fc4:	1809883a 	mov	r4,r3
   23fc8:	e0fffa17 	ldw	r3,-24(fp)
   23fcc:	1885883a 	add	r2,r3,r2
   23fd0:	10800e04 	addi	r2,r2,56
   23fd4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   23fd8:	e0bffa17 	ldw	r2,-24(fp)
   23fdc:	10800a17 	ldw	r2,40(r2)
   23fe0:	10800044 	addi	r2,r2,1
   23fe4:	10c1ffcc 	andi	r3,r2,2047
   23fe8:	e0bffa17 	ldw	r2,-24(fp)
   23fec:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   23ff0:	003fe006 	br	23f74 <altera_avalon_jtag_uart_irq+0x5c>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   23ff4:	e0bff817 	ldw	r2,-32(fp)
   23ff8:	10bfffec 	andhi	r2,r2,65535
   23ffc:	10000f26 	beq	r2,zero,2403c <altera_avalon_jtag_uart_irq+0x124>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   24000:	e0bffa17 	ldw	r2,-24(fp)
   24004:	10c00817 	ldw	r3,32(r2)
   24008:	00bfff84 	movi	r2,-2
   2400c:	1886703a 	and	r3,r3,r2
   24010:	e0bffa17 	ldw	r2,-24(fp)
   24014:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   24018:	e0bffb17 	ldw	r2,-20(fp)
   2401c:	10800104 	addi	r2,r2,4
   24020:	1007883a 	mov	r3,r2
   24024:	e0bffa17 	ldw	r2,-24(fp)
   24028:	10800817 	ldw	r2,32(r2)
   2402c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24030:	e0bffb17 	ldw	r2,-20(fp)
   24034:	10800104 	addi	r2,r2,4
   24038:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2403c:	e0bffc17 	ldw	r2,-16(fp)
   24040:	1080800c 	andi	r2,r2,512
   24044:	10003126 	beq	r2,zero,2410c <altera_avalon_jtag_uart_irq+0x1f4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   24048:	e0bffc17 	ldw	r2,-16(fp)
   2404c:	1004d43a 	srli	r2,r2,16
   24050:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   24054:	00001406 	br	240a8 <altera_avalon_jtag_uart_irq+0x190>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   24058:	e0bffb17 	ldw	r2,-20(fp)
   2405c:	e0fffa17 	ldw	r3,-24(fp)
   24060:	18c00d17 	ldw	r3,52(r3)
   24064:	e13ffa17 	ldw	r4,-24(fp)
   24068:	20c7883a 	add	r3,r4,r3
   2406c:	18c20e04 	addi	r3,r3,2104
   24070:	18c00003 	ldbu	r3,0(r3)
   24074:	18c03fcc 	andi	r3,r3,255
   24078:	18c0201c 	xori	r3,r3,128
   2407c:	18ffe004 	addi	r3,r3,-128
   24080:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24084:	e0bffa17 	ldw	r2,-24(fp)
   24088:	10800d17 	ldw	r2,52(r2)
   2408c:	10800044 	addi	r2,r2,1
   24090:	10c1ffcc 	andi	r3,r2,2047
   24094:	e0bffa17 	ldw	r2,-24(fp)
   24098:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2409c:	e0bff917 	ldw	r2,-28(fp)
   240a0:	10bfffc4 	addi	r2,r2,-1
   240a4:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   240a8:	e0bff917 	ldw	r2,-28(fp)
   240ac:	10000526 	beq	r2,zero,240c4 <altera_avalon_jtag_uart_irq+0x1ac>
   240b0:	e0bffa17 	ldw	r2,-24(fp)
   240b4:	10c00d17 	ldw	r3,52(r2)
   240b8:	e0bffa17 	ldw	r2,-24(fp)
   240bc:	10800c17 	ldw	r2,48(r2)
   240c0:	18bfe51e 	bne	r3,r2,24058 <altera_avalon_jtag_uart_irq+0x140>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   240c4:	e0bff917 	ldw	r2,-28(fp)
   240c8:	10001026 	beq	r2,zero,2410c <altera_avalon_jtag_uart_irq+0x1f4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   240cc:	e0bffa17 	ldw	r2,-24(fp)
   240d0:	10c00817 	ldw	r3,32(r2)
   240d4:	00bfff44 	movi	r2,-3
   240d8:	1886703a 	and	r3,r3,r2
   240dc:	e0bffa17 	ldw	r2,-24(fp)
   240e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   240e4:	e0bffa17 	ldw	r2,-24(fp)
   240e8:	10800017 	ldw	r2,0(r2)
   240ec:	10800104 	addi	r2,r2,4
   240f0:	1007883a 	mov	r3,r2
   240f4:	e0bffa17 	ldw	r2,-24(fp)
   240f8:	10800817 	ldw	r2,32(r2)
   240fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   24100:	e0bffb17 	ldw	r2,-20(fp)
   24104:	10800104 	addi	r2,r2,4
   24108:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2410c:	003f8c06 	br	23f40 <altera_avalon_jtag_uart_irq+0x28>
}
   24110:	e037883a 	mov	sp,fp
   24114:	df000017 	ldw	fp,0(sp)
   24118:	dec00104 	addi	sp,sp,4
   2411c:	f800283a 	ret

00024120 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   24120:	defff804 	addi	sp,sp,-32
   24124:	df000715 	stw	fp,28(sp)
   24128:	df000704 	addi	fp,sp,28
   2412c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   24130:	e0bffb17 	ldw	r2,-20(fp)
   24134:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   24138:	e0bff917 	ldw	r2,-28(fp)
   2413c:	10800017 	ldw	r2,0(r2)
   24140:	10800104 	addi	r2,r2,4
   24144:	10800037 	ldwio	r2,0(r2)
   24148:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2414c:	e0bffa17 	ldw	r2,-24(fp)
   24150:	1081000c 	andi	r2,r2,1024
   24154:	10000b26 	beq	r2,zero,24184 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   24158:	e0bff917 	ldw	r2,-28(fp)
   2415c:	10800017 	ldw	r2,0(r2)
   24160:	10800104 	addi	r2,r2,4
   24164:	1007883a 	mov	r3,r2
   24168:	e0bff917 	ldw	r2,-28(fp)
   2416c:	10800817 	ldw	r2,32(r2)
   24170:	10810014 	ori	r2,r2,1024
   24174:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   24178:	e0bff917 	ldw	r2,-28(fp)
   2417c:	10000915 	stw	zero,36(r2)
   24180:	00000a06 	br	241ac <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   24184:	e0bff917 	ldw	r2,-28(fp)
   24188:	10c00917 	ldw	r3,36(r2)
   2418c:	00a00034 	movhi	r2,32768
   24190:	10bfff04 	addi	r2,r2,-4
   24194:	10c00536 	bltu	r2,r3,241ac <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   24198:	e0bff917 	ldw	r2,-28(fp)
   2419c:	10800917 	ldw	r2,36(r2)
   241a0:	10c00044 	addi	r3,r2,1
   241a4:	e0bff917 	ldw	r2,-28(fp)
   241a8:	10c00915 	stw	r3,36(r2)
   241ac:	008000f4 	movhi	r2,3
   241b0:	10a66b04 	addi	r2,r2,-26196
   241b4:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   241b8:	e037883a 	mov	sp,fp
   241bc:	df000017 	ldw	fp,0(sp)
   241c0:	dec00104 	addi	sp,sp,4
   241c4:	f800283a 	ret

000241c8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   241c8:	defffd04 	addi	sp,sp,-12
   241cc:	df000215 	stw	fp,8(sp)
   241d0:	df000204 	addi	fp,sp,8
   241d4:	e13ffe15 	stw	r4,-8(fp)
   241d8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   241dc:	00000506 	br	241f4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   241e0:	e0bfff17 	ldw	r2,-4(fp)
   241e4:	1090000c 	andi	r2,r2,16384
   241e8:	10000226 	beq	r2,zero,241f4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   241ec:	00bffd44 	movi	r2,-11
   241f0:	00000b06 	br	24220 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   241f4:	e0bffe17 	ldw	r2,-8(fp)
   241f8:	10c00d17 	ldw	r3,52(r2)
   241fc:	e0bffe17 	ldw	r2,-8(fp)
   24200:	10800c17 	ldw	r2,48(r2)
   24204:	18800526 	beq	r3,r2,2421c <altera_avalon_jtag_uart_close+0x54>
   24208:	e0bffe17 	ldw	r2,-8(fp)
   2420c:	10c00917 	ldw	r3,36(r2)
   24210:	e0bffe17 	ldw	r2,-8(fp)
   24214:	10800117 	ldw	r2,4(r2)
   24218:	18bff136 	bltu	r3,r2,241e0 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2421c:	0005883a 	mov	r2,zero
}
   24220:	e037883a 	mov	sp,fp
   24224:	df000017 	ldw	fp,0(sp)
   24228:	dec00104 	addi	sp,sp,4
   2422c:	f800283a 	ret

00024230 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   24230:	defffa04 	addi	sp,sp,-24
   24234:	df000515 	stw	fp,20(sp)
   24238:	df000504 	addi	fp,sp,20
   2423c:	e13ffd15 	stw	r4,-12(fp)
   24240:	e17ffe15 	stw	r5,-8(fp)
   24244:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   24248:	00bff9c4 	movi	r2,-25
   2424c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   24250:	e0bffe17 	ldw	r2,-8(fp)
   24254:	10da8060 	cmpeqi	r3,r2,27137
   24258:	1800031e 	bne	r3,zero,24268 <altera_avalon_jtag_uart_ioctl+0x38>
   2425c:	109a80a0 	cmpeqi	r2,r2,27138
   24260:	1000191e 	bne	r2,zero,242c8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
   24264:	00002806 	br	24308 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   24268:	e0bffd17 	ldw	r2,-12(fp)
   2426c:	10c00117 	ldw	r3,4(r2)
   24270:	00a00034 	movhi	r2,32768
   24274:	10bfffc4 	addi	r2,r2,-1
   24278:	18801226 	beq	r3,r2,242c4 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
   2427c:	e0bfff17 	ldw	r2,-4(fp)
   24280:	10800017 	ldw	r2,0(r2)
   24284:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   24288:	e0bffc17 	ldw	r2,-16(fp)
   2428c:	10800090 	cmplti	r2,r2,2
   24290:	1000061e 	bne	r2,zero,242ac <altera_avalon_jtag_uart_ioctl+0x7c>
   24294:	e0fffc17 	ldw	r3,-16(fp)
   24298:	00a00034 	movhi	r2,32768
   2429c:	10bfffc4 	addi	r2,r2,-1
   242a0:	18800226 	beq	r3,r2,242ac <altera_avalon_jtag_uart_ioctl+0x7c>
   242a4:	e0bffc17 	ldw	r2,-16(fp)
   242a8:	00000206 	br	242b4 <altera_avalon_jtag_uart_ioctl+0x84>
   242ac:	00a00034 	movhi	r2,32768
   242b0:	10bfff84 	addi	r2,r2,-2
   242b4:	e0fffd17 	ldw	r3,-12(fp)
   242b8:	18800115 	stw	r2,4(r3)
      rc = 0;
   242bc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   242c0:	00001106 	br	24308 <altera_avalon_jtag_uart_ioctl+0xd8>
   242c4:	00001006 	br	24308 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   242c8:	e0bffd17 	ldw	r2,-12(fp)
   242cc:	10c00117 	ldw	r3,4(r2)
   242d0:	00a00034 	movhi	r2,32768
   242d4:	10bfffc4 	addi	r2,r2,-1
   242d8:	18800a26 	beq	r3,r2,24304 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   242dc:	e0bffd17 	ldw	r2,-12(fp)
   242e0:	10c00917 	ldw	r3,36(r2)
   242e4:	e0bffd17 	ldw	r2,-12(fp)
   242e8:	10800117 	ldw	r2,4(r2)
   242ec:	1885803a 	cmpltu	r2,r3,r2
   242f0:	10c03fcc 	andi	r3,r2,255
   242f4:	e0bfff17 	ldw	r2,-4(fp)
   242f8:	10c00015 	stw	r3,0(r2)
      rc = 0;
   242fc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   24300:	00000006 	br	24304 <altera_avalon_jtag_uart_ioctl+0xd4>
   24304:	0001883a 	nop

  default:
    break;
  }

  return rc;
   24308:	e0bffb17 	ldw	r2,-20(fp)
}
   2430c:	e037883a 	mov	sp,fp
   24310:	df000017 	ldw	fp,0(sp)
   24314:	dec00104 	addi	sp,sp,4
   24318:	f800283a 	ret

0002431c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2431c:	defff304 	addi	sp,sp,-52
   24320:	dfc00c15 	stw	ra,48(sp)
   24324:	df000b15 	stw	fp,44(sp)
   24328:	df000b04 	addi	fp,sp,44
   2432c:	e13ffc15 	stw	r4,-16(fp)
   24330:	e17ffd15 	stw	r5,-12(fp)
   24334:	e1bffe15 	stw	r6,-8(fp)
   24338:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2433c:	e0bffd17 	ldw	r2,-12(fp)
   24340:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   24344:	00004906 	br	2446c <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   24348:	e0bffc17 	ldw	r2,-16(fp)
   2434c:	10800a17 	ldw	r2,40(r2)
   24350:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   24354:	e0bffc17 	ldw	r2,-16(fp)
   24358:	10800b17 	ldw	r2,44(r2)
   2435c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   24360:	e0fff717 	ldw	r3,-36(fp)
   24364:	e0bff817 	ldw	r2,-32(fp)
   24368:	18800536 	bltu	r3,r2,24380 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2436c:	e0fff717 	ldw	r3,-36(fp)
   24370:	e0bff817 	ldw	r2,-32(fp)
   24374:	1885c83a 	sub	r2,r3,r2
   24378:	e0bff615 	stw	r2,-40(fp)
   2437c:	00000406 	br	24390 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   24380:	00c20004 	movi	r3,2048
   24384:	e0bff817 	ldw	r2,-32(fp)
   24388:	1885c83a 	sub	r2,r3,r2
   2438c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   24390:	e0bff617 	ldw	r2,-40(fp)
   24394:	1000011e 	bne	r2,zero,2439c <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
   24398:	00001d06 	br	24410 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
   2439c:	e0fffe17 	ldw	r3,-8(fp)
   243a0:	e0bff617 	ldw	r2,-40(fp)
   243a4:	1880022e 	bgeu	r3,r2,243b0 <altera_avalon_jtag_uart_read+0x94>
        n = space;
   243a8:	e0bffe17 	ldw	r2,-8(fp)
   243ac:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   243b0:	e0bff817 	ldw	r2,-32(fp)
   243b4:	10800e04 	addi	r2,r2,56
   243b8:	e0fffc17 	ldw	r3,-16(fp)
   243bc:	1885883a 	add	r2,r3,r2
   243c0:	e13ff517 	ldw	r4,-44(fp)
   243c4:	100b883a 	mov	r5,r2
   243c8:	e1bff617 	ldw	r6,-40(fp)
   243cc:	00212500 	call	21250 <memcpy>
      ptr   += n;
   243d0:	e0fff517 	ldw	r3,-44(fp)
   243d4:	e0bff617 	ldw	r2,-40(fp)
   243d8:	1885883a 	add	r2,r3,r2
   243dc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   243e0:	e0fffe17 	ldw	r3,-8(fp)
   243e4:	e0bff617 	ldw	r2,-40(fp)
   243e8:	1885c83a 	sub	r2,r3,r2
   243ec:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   243f0:	e0fff817 	ldw	r3,-32(fp)
   243f4:	e0bff617 	ldw	r2,-40(fp)
   243f8:	1885883a 	add	r2,r3,r2
   243fc:	10c1ffcc 	andi	r3,r2,2047
   24400:	e0bffc17 	ldw	r2,-16(fp)
   24404:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   24408:	e0bffe17 	ldw	r2,-8(fp)
   2440c:	00bfce16 	blt	zero,r2,24348 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
   24410:	e0fff517 	ldw	r3,-44(fp)
   24414:	e0bffd17 	ldw	r2,-12(fp)
   24418:	18800126 	beq	r3,r2,24420 <altera_avalon_jtag_uart_read+0x104>
      break;
   2441c:	00001506 	br	24474 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   24420:	e0bfff17 	ldw	r2,-4(fp)
   24424:	1090000c 	andi	r2,r2,16384
   24428:	10000126 	beq	r2,zero,24430 <altera_avalon_jtag_uart_read+0x114>
      break;
   2442c:	00001106 	br	24474 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   24430:	0001883a 	nop
   24434:	e0bffc17 	ldw	r2,-16(fp)
   24438:	10c00a17 	ldw	r3,40(r2)
   2443c:	e0bff717 	ldw	r2,-36(fp)
   24440:	1880051e 	bne	r3,r2,24458 <altera_avalon_jtag_uart_read+0x13c>
   24444:	e0bffc17 	ldw	r2,-16(fp)
   24448:	10c00917 	ldw	r3,36(r2)
   2444c:	e0bffc17 	ldw	r2,-16(fp)
   24450:	10800117 	ldw	r2,4(r2)
   24454:	18bff736 	bltu	r3,r2,24434 <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   24458:	e0bffc17 	ldw	r2,-16(fp)
   2445c:	10c00a17 	ldw	r3,40(r2)
   24460:	e0bff717 	ldw	r2,-36(fp)
   24464:	1880011e 	bne	r3,r2,2446c <altera_avalon_jtag_uart_read+0x150>
      break;
   24468:	00000206 	br	24474 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2446c:	e0bffe17 	ldw	r2,-8(fp)
   24470:	00bfb516 	blt	zero,r2,24348 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   24474:	e0fff517 	ldw	r3,-44(fp)
   24478:	e0bffd17 	ldw	r2,-12(fp)
   2447c:	18801826 	beq	r3,r2,244e0 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24480:	0005303a 	rdctl	r2,status
   24484:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24488:	e0fffa17 	ldw	r3,-24(fp)
   2448c:	00bfff84 	movi	r2,-2
   24490:	1884703a 	and	r2,r3,r2
   24494:	1001703a 	wrctl	status,r2
  
  return context;
   24498:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2449c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   244a0:	e0bffc17 	ldw	r2,-16(fp)
   244a4:	10800817 	ldw	r2,32(r2)
   244a8:	10c00054 	ori	r3,r2,1
   244ac:	e0bffc17 	ldw	r2,-16(fp)
   244b0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   244b4:	e0bffc17 	ldw	r2,-16(fp)
   244b8:	10800017 	ldw	r2,0(r2)
   244bc:	10800104 	addi	r2,r2,4
   244c0:	1007883a 	mov	r3,r2
   244c4:	e0bffc17 	ldw	r2,-16(fp)
   244c8:	10800817 	ldw	r2,32(r2)
   244cc:	18800035 	stwio	r2,0(r3)
   244d0:	e0bff917 	ldw	r2,-28(fp)
   244d4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   244d8:	e0bffb17 	ldw	r2,-20(fp)
   244dc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   244e0:	e0fff517 	ldw	r3,-44(fp)
   244e4:	e0bffd17 	ldw	r2,-12(fp)
   244e8:	18800426 	beq	r3,r2,244fc <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
   244ec:	e0fff517 	ldw	r3,-44(fp)
   244f0:	e0bffd17 	ldw	r2,-12(fp)
   244f4:	1885c83a 	sub	r2,r3,r2
   244f8:	00000606 	br	24514 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
   244fc:	e0bfff17 	ldw	r2,-4(fp)
   24500:	1090000c 	andi	r2,r2,16384
   24504:	10000226 	beq	r2,zero,24510 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
   24508:	00bffd44 	movi	r2,-11
   2450c:	00000106 	br	24514 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
   24510:	00bffec4 	movi	r2,-5
}
   24514:	e037883a 	mov	sp,fp
   24518:	dfc00117 	ldw	ra,4(sp)
   2451c:	df000017 	ldw	fp,0(sp)
   24520:	dec00204 	addi	sp,sp,8
   24524:	f800283a 	ret

00024528 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   24528:	defff304 	addi	sp,sp,-52
   2452c:	dfc00c15 	stw	ra,48(sp)
   24530:	df000b15 	stw	fp,44(sp)
   24534:	df000b04 	addi	fp,sp,44
   24538:	e13ffc15 	stw	r4,-16(fp)
   2453c:	e17ffd15 	stw	r5,-12(fp)
   24540:	e1bffe15 	stw	r6,-8(fp)
   24544:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   24548:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2454c:	e0bffd17 	ldw	r2,-12(fp)
   24550:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24554:	00003806 	br	24638 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   24558:	e0bffc17 	ldw	r2,-16(fp)
   2455c:	10800c17 	ldw	r2,48(r2)
   24560:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
   24564:	e0bffc17 	ldw	r2,-16(fp)
   24568:	10800d17 	ldw	r2,52(r2)
   2456c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   24570:	e0fff817 	ldw	r3,-32(fp)
   24574:	e0bff517 	ldw	r2,-44(fp)
   24578:	1880062e 	bgeu	r3,r2,24594 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2457c:	e0fff517 	ldw	r3,-44(fp)
   24580:	e0bff817 	ldw	r2,-32(fp)
   24584:	1885c83a 	sub	r2,r3,r2
   24588:	10bfffc4 	addi	r2,r2,-1
   2458c:	e0bff615 	stw	r2,-40(fp)
   24590:	00000b06 	br	245c0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   24594:	e0bff517 	ldw	r2,-44(fp)
   24598:	10000526 	beq	r2,zero,245b0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2459c:	00c20004 	movi	r3,2048
   245a0:	e0bff817 	ldw	r2,-32(fp)
   245a4:	1885c83a 	sub	r2,r3,r2
   245a8:	e0bff615 	stw	r2,-40(fp)
   245ac:	00000406 	br	245c0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   245b0:	00c1ffc4 	movi	r3,2047
   245b4:	e0bff817 	ldw	r2,-32(fp)
   245b8:	1885c83a 	sub	r2,r3,r2
   245bc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   245c0:	e0bff617 	ldw	r2,-40(fp)
   245c4:	1000011e 	bne	r2,zero,245cc <altera_avalon_jtag_uart_write+0xa4>
        break;
   245c8:	00001d06 	br	24640 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
   245cc:	e0fffe17 	ldw	r3,-8(fp)
   245d0:	e0bff617 	ldw	r2,-40(fp)
   245d4:	1880022e 	bgeu	r3,r2,245e0 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
   245d8:	e0bffe17 	ldw	r2,-8(fp)
   245dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   245e0:	e0bff817 	ldw	r2,-32(fp)
   245e4:	10820e04 	addi	r2,r2,2104
   245e8:	e0fffc17 	ldw	r3,-16(fp)
   245ec:	1885883a 	add	r2,r3,r2
   245f0:	1009883a 	mov	r4,r2
   245f4:	e17ffd17 	ldw	r5,-12(fp)
   245f8:	e1bff617 	ldw	r6,-40(fp)
   245fc:	00212500 	call	21250 <memcpy>
      ptr   += n;
   24600:	e0fffd17 	ldw	r3,-12(fp)
   24604:	e0bff617 	ldw	r2,-40(fp)
   24608:	1885883a 	add	r2,r3,r2
   2460c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   24610:	e0fffe17 	ldw	r3,-8(fp)
   24614:	e0bff617 	ldw	r2,-40(fp)
   24618:	1885c83a 	sub	r2,r3,r2
   2461c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   24620:	e0fff817 	ldw	r3,-32(fp)
   24624:	e0bff617 	ldw	r2,-40(fp)
   24628:	1885883a 	add	r2,r3,r2
   2462c:	10c1ffcc 	andi	r3,r2,2047
   24630:	e0bffc17 	ldw	r2,-16(fp)
   24634:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   24638:	e0bffe17 	ldw	r2,-8(fp)
   2463c:	00bfc616 	blt	zero,r2,24558 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24640:	0005303a 	rdctl	r2,status
   24644:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24648:	e0fffa17 	ldw	r3,-24(fp)
   2464c:	00bfff84 	movi	r2,-2
   24650:	1884703a 	and	r2,r3,r2
   24654:	1001703a 	wrctl	status,r2
  
  return context;
   24658:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2465c:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   24660:	e0bffc17 	ldw	r2,-16(fp)
   24664:	10800817 	ldw	r2,32(r2)
   24668:	10c00094 	ori	r3,r2,2
   2466c:	e0bffc17 	ldw	r2,-16(fp)
   24670:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   24674:	e0bffc17 	ldw	r2,-16(fp)
   24678:	10800017 	ldw	r2,0(r2)
   2467c:	10800104 	addi	r2,r2,4
   24680:	1007883a 	mov	r3,r2
   24684:	e0bffc17 	ldw	r2,-16(fp)
   24688:	10800817 	ldw	r2,32(r2)
   2468c:	18800035 	stwio	r2,0(r3)
   24690:	e0bff917 	ldw	r2,-28(fp)
   24694:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24698:	e0bffb17 	ldw	r2,-20(fp)
   2469c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   246a0:	e0bffe17 	ldw	r2,-8(fp)
   246a4:	0080120e 	bge	zero,r2,246f0 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
   246a8:	e0bfff17 	ldw	r2,-4(fp)
   246ac:	1090000c 	andi	r2,r2,16384
   246b0:	10000126 	beq	r2,zero,246b8 <altera_avalon_jtag_uart_write+0x190>
        break;
   246b4:	00001006 	br	246f8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   246b8:	0001883a 	nop
   246bc:	e0bffc17 	ldw	r2,-16(fp)
   246c0:	10c00d17 	ldw	r3,52(r2)
   246c4:	e0bff517 	ldw	r2,-44(fp)
   246c8:	1880051e 	bne	r3,r2,246e0 <altera_avalon_jtag_uart_write+0x1b8>
   246cc:	e0bffc17 	ldw	r2,-16(fp)
   246d0:	10c00917 	ldw	r3,36(r2)
   246d4:	e0bffc17 	ldw	r2,-16(fp)
   246d8:	10800117 	ldw	r2,4(r2)
   246dc:	18bff736 	bltu	r3,r2,246bc <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   246e0:	e0bffc17 	ldw	r2,-16(fp)
   246e4:	10800917 	ldw	r2,36(r2)
   246e8:	10000126 	beq	r2,zero,246f0 <altera_avalon_jtag_uart_write+0x1c8>
         break;
   246ec:	00000206 	br	246f8 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
   246f0:	e0bffe17 	ldw	r2,-8(fp)
   246f4:	00bf9716 	blt	zero,r2,24554 <altera_avalon_jtag_uart_write+0x2c>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   246f8:	e0fffd17 	ldw	r3,-12(fp)
   246fc:	e0bff717 	ldw	r2,-36(fp)
   24700:	18800426 	beq	r3,r2,24714 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
   24704:	e0fffd17 	ldw	r3,-12(fp)
   24708:	e0bff717 	ldw	r2,-36(fp)
   2470c:	1885c83a 	sub	r2,r3,r2
   24710:	00000606 	br	2472c <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
   24714:	e0bfff17 	ldw	r2,-4(fp)
   24718:	1090000c 	andi	r2,r2,16384
   2471c:	10000226 	beq	r2,zero,24728 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
   24720:	00bffd44 	movi	r2,-11
   24724:	00000106 	br	2472c <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   24728:	00bffec4 	movi	r2,-5
}
   2472c:	e037883a 	mov	sp,fp
   24730:	dfc00117 	ldw	ra,4(sp)
   24734:	df000017 	ldw	fp,0(sp)
   24738:	dec00204 	addi	sp,sp,8
   2473c:	f800283a 	ret

00024740 <alt_up_audio_open_dev>:
#include "altera_up_avalon_audio_regs.h"

///////////////////////////////////////////////////////////////////////////
// Direct functions
alt_up_audio_dev* alt_up_audio_open_dev(const char* name)
{
   24740:	defffc04 	addi	sp,sp,-16
   24744:	dfc00315 	stw	ra,12(sp)
   24748:	df000215 	stw	fp,8(sp)
   2474c:	df000204 	addi	fp,sp,8
   24750:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_audio_dev *dev = (alt_up_audio_dev*)alt_find_dev(name, &alt_dev_list);
   24754:	e13fff17 	ldw	r4,-4(fp)
   24758:	014000b4 	movhi	r5,2
   2475c:	295fa704 	addi	r5,r5,32412
   24760:	00252040 	call	25204 <alt_find_dev>
   24764:	e0bffe15 	stw	r2,-8(fp)
  return dev;
   24768:	e0bffe17 	ldw	r2,-8(fp)
}
   2476c:	e037883a 	mov	sp,fp
   24770:	dfc00117 	ldw	ra,4(sp)
   24774:	df000017 	ldw	fp,0(sp)
   24778:	dec00204 	addi	sp,sp,8
   2477c:	f800283a 	ret

00024780 <alt_up_audio_enable_read_interrupt>:

void alt_up_audio_enable_read_interrupt(alt_up_audio_dev *audio)
{
   24780:	defffd04 	addi	sp,sp,-12
   24784:	df000215 	stw	fp,8(sp)
   24788:	df000204 	addi	fp,sp,8
   2478c:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   24790:	e0bfff17 	ldw	r2,-4(fp)
   24794:	10800a17 	ldw	r2,40(r2)
   24798:	10800037 	ldwio	r2,0(r2)
   2479c:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_RE_MSK;
   247a0:	e0bffe17 	ldw	r2,-8(fp)
   247a4:	10800054 	ori	r2,r2,1
   247a8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   247ac:	e0bfff17 	ldw	r2,-4(fp)
   247b0:	10800a17 	ldw	r2,40(r2)
   247b4:	1007883a 	mov	r3,r2
   247b8:	e0bffe17 	ldw	r2,-8(fp)
   247bc:	18800035 	stwio	r2,0(r3)
}
   247c0:	e037883a 	mov	sp,fp
   247c4:	df000017 	ldw	fp,0(sp)
   247c8:	dec00104 	addi	sp,sp,4
   247cc:	f800283a 	ret

000247d0 <alt_up_audio_disable_read_interrupt>:

void alt_up_audio_disable_read_interrupt(alt_up_audio_dev *audio)
{
   247d0:	defffd04 	addi	sp,sp,-12
   247d4:	df000215 	stw	fp,8(sp)
   247d8:	df000204 	addi	fp,sp,8
   247dc:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   247e0:	e0bfff17 	ldw	r2,-4(fp)
   247e4:	10800a17 	ldw	r2,40(r2)
   247e8:	10800037 	ldwio	r2,0(r2)
   247ec:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_RE_MSK;
   247f0:	e0fffe17 	ldw	r3,-8(fp)
   247f4:	00bfff84 	movi	r2,-2
   247f8:	1884703a 	and	r2,r3,r2
   247fc:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   24800:	e0bfff17 	ldw	r2,-4(fp)
   24804:	10800a17 	ldw	r2,40(r2)
   24808:	1007883a 	mov	r3,r2
   2480c:	e0bffe17 	ldw	r2,-8(fp)
   24810:	18800035 	stwio	r2,0(r3)
}
   24814:	e037883a 	mov	sp,fp
   24818:	df000017 	ldw	fp,0(sp)
   2481c:	dec00104 	addi	sp,sp,4
   24820:	f800283a 	ret

00024824 <alt_up_audio_enable_write_interrupt>:

void alt_up_audio_enable_write_interrupt(alt_up_audio_dev *audio)
{
   24824:	defffd04 	addi	sp,sp,-12
   24828:	df000215 	stw	fp,8(sp)
   2482c:	df000204 	addi	fp,sp,8
   24830:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   24834:	e0bfff17 	ldw	r2,-4(fp)
   24838:	10800a17 	ldw	r2,40(r2)
   2483c:	10800037 	ldwio	r2,0(r2)
   24840:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_WE_MSK;
   24844:	e0bffe17 	ldw	r2,-8(fp)
   24848:	10800094 	ori	r2,r2,2
   2484c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   24850:	e0bfff17 	ldw	r2,-4(fp)
   24854:	10800a17 	ldw	r2,40(r2)
   24858:	1007883a 	mov	r3,r2
   2485c:	e0bffe17 	ldw	r2,-8(fp)
   24860:	18800035 	stwio	r2,0(r3)
}
   24864:	e037883a 	mov	sp,fp
   24868:	df000017 	ldw	fp,0(sp)
   2486c:	dec00104 	addi	sp,sp,4
   24870:	f800283a 	ret

00024874 <alt_up_audio_disable_write_interrupt>:

void alt_up_audio_disable_write_interrupt(alt_up_audio_dev *audio)
{
   24874:	defffd04 	addi	sp,sp,-12
   24878:	df000215 	stw	fp,8(sp)
   2487c:	df000204 	addi	fp,sp,8
   24880:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   24884:	e0bfff17 	ldw	r2,-4(fp)
   24888:	10800a17 	ldw	r2,40(r2)
   2488c:	10800037 	ldwio	r2,0(r2)
   24890:	e0bffe15 	stw	r2,-8(fp)
	// set WE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_WE_MSK;
   24894:	e0fffe17 	ldw	r3,-8(fp)
   24898:	00bfff44 	movi	r2,-3
   2489c:	1884703a 	and	r2,r3,r2
   248a0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   248a4:	e0bfff17 	ldw	r2,-4(fp)
   248a8:	10800a17 	ldw	r2,40(r2)
   248ac:	1007883a 	mov	r3,r2
   248b0:	e0bffe17 	ldw	r2,-8(fp)
   248b4:	18800035 	stwio	r2,0(r3)
}
   248b8:	e037883a 	mov	sp,fp
   248bc:	df000017 	ldw	fp,0(sp)
   248c0:	dec00104 	addi	sp,sp,4
   248c4:	f800283a 	ret

000248c8 <alt_up_audio_read_interrupt_pending>:

int alt_up_audio_read_interrupt_pending(alt_up_audio_dev *audio)
{
   248c8:	defffd04 	addi	sp,sp,-12
   248cc:	df000215 	stw	fp,8(sp)
   248d0:	df000204 	addi	fp,sp,8
   248d4:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   248d8:	e0bfff17 	ldw	r2,-4(fp)
   248dc:	10800a17 	ldw	r2,40(r2)
   248e0:	10800037 	ldwio	r2,0(r2)
   248e4:	e0bffe15 	stw	r2,-8(fp)
	// return 1 if RI is set to 1
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_RI_MSK) ? 1 : 0 );
   248e8:	e0bffe17 	ldw	r2,-8(fp)
   248ec:	1080400c 	andi	r2,r2,256
   248f0:	1004c03a 	cmpne	r2,r2,zero
   248f4:	10803fcc 	andi	r2,r2,255
}
   248f8:	e037883a 	mov	sp,fp
   248fc:	df000017 	ldw	fp,0(sp)
   24900:	dec00104 	addi	sp,sp,4
   24904:	f800283a 	ret

00024908 <alt_up_audio_write_interrupt_pending>:

int alt_up_audio_write_interrupt_pending(alt_up_audio_dev *audio)
{
   24908:	defffd04 	addi	sp,sp,-12
   2490c:	df000215 	stw	fp,8(sp)
   24910:	df000204 	addi	fp,sp,8
   24914:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   24918:	e0bfff17 	ldw	r2,-4(fp)
   2491c:	10800a17 	ldw	r2,40(r2)
   24920:	10800037 	ldwio	r2,0(r2)
   24924:	e0bffe15 	stw	r2,-8(fp)
	// return the WI value
	return ( (ctrl_reg & ALT_UP_AUDIO_CONTROL_WI_MSK) ? 1 : 0 );
   24928:	e0bffe17 	ldw	r2,-8(fp)
   2492c:	1080800c 	andi	r2,r2,512
   24930:	1004c03a 	cmpne	r2,r2,zero
   24934:	10803fcc 	andi	r2,r2,255
}
   24938:	e037883a 	mov	sp,fp
   2493c:	df000017 	ldw	fp,0(sp)
   24940:	dec00104 	addi	sp,sp,4
   24944:	f800283a 	ret

00024948 <alt_up_audio_reset_audio_core>:

void alt_up_audio_reset_audio_core(alt_up_audio_dev *audio)
{
   24948:	defffd04 	addi	sp,sp,-12
   2494c:	df000215 	stw	fp,8(sp)
   24950:	df000204 	addi	fp,sp,8
   24954:	e13fff15 	stw	r4,-4(fp)
	unsigned int ctrl_reg;
	ctrl_reg = IORD_ALT_UP_AUDIO_CONTROL(audio->base); 
   24958:	e0bfff17 	ldw	r2,-4(fp)
   2495c:	10800a17 	ldw	r2,40(r2)
   24960:	10800037 	ldwio	r2,0(r2)
   24964:	e0bffe15 	stw	r2,-8(fp)
	// set CR and CW to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CR_MSK;
   24968:	e0bffe17 	ldw	r2,-8(fp)
   2496c:	10800114 	ori	r2,r2,4
   24970:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg |= ALT_UP_AUDIO_CONTROL_CW_MSK;
   24974:	e0bffe17 	ldw	r2,-8(fp)
   24978:	10800214 	ori	r2,r2,8
   2497c:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   24980:	e0bfff17 	ldw	r2,-4(fp)
   24984:	10800a17 	ldw	r2,40(r2)
   24988:	1007883a 	mov	r3,r2
   2498c:	e0bffe17 	ldw	r2,-8(fp)
   24990:	18800035 	stwio	r2,0(r3)
	// set CR and CW to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CR_MSK;
   24994:	e0fffe17 	ldw	r3,-8(fp)
   24998:	00bffec4 	movi	r2,-5
   2499c:	1884703a 	and	r2,r3,r2
   249a0:	e0bffe15 	stw	r2,-8(fp)
	ctrl_reg &= ~ALT_UP_AUDIO_CONTROL_CW_MSK;
   249a4:	e0fffe17 	ldw	r3,-8(fp)
   249a8:	00bffdc4 	movi	r2,-9
   249ac:	1884703a 	and	r2,r3,r2
   249b0:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_AUDIO_CONTROL(audio->base, ctrl_reg);
   249b4:	e0bfff17 	ldw	r2,-4(fp)
   249b8:	10800a17 	ldw	r2,40(r2)
   249bc:	1007883a 	mov	r3,r2
   249c0:	e0bffe17 	ldw	r2,-8(fp)
   249c4:	18800035 	stwio	r2,0(r3)
}
   249c8:	e037883a 	mov	sp,fp
   249cc:	df000017 	ldw	fp,0(sp)
   249d0:	dec00104 	addi	sp,sp,4
   249d4:	f800283a 	ret

000249d8 <alt_up_audio_read_fifo_avail>:

/* Provides number of words of data available in the incoming FIFO: RALC or RARC */
unsigned int alt_up_audio_read_fifo_avail(alt_up_audio_dev *audio, int channel)
{
   249d8:	defffc04 	addi	sp,sp,-16
   249dc:	df000315 	stw	fp,12(sp)
   249e0:	df000304 	addi	fp,sp,12
   249e4:	e13ffe15 	stw	r4,-8(fp)
   249e8:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   249ec:	e0bffe17 	ldw	r2,-8(fp)
   249f0:	10800a17 	ldw	r2,40(r2)
   249f4:	10800104 	addi	r2,r2,4
   249f8:	10800037 	ldwio	r2,0(r2)
   249fc:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
   24a00:	e0bfff17 	ldw	r2,-4(fp)
   24a04:	1000041e 	bne	r2,zero,24a18 <alt_up_audio_read_fifo_avail+0x40>
   24a08:	e0bffd17 	ldw	r2,-12(fp)
   24a0c:	10bfc00c 	andi	r2,r2,65280
   24a10:	1004d23a 	srli	r2,r2,8
   24a14:	00000206 	br	24a20 <alt_up_audio_read_fifo_avail+0x48>
   24a18:	e0bffd17 	ldw	r2,-12(fp)
   24a1c:	10803fcc 	andi	r2,r2,255
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   24a20:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
	return (fifospace);
   24a24:	e0bffd17 	ldw	r2,-12(fp)
}
   24a28:	e037883a 	mov	sp,fp
   24a2c:	df000017 	ldw	fp,0(sp)
   24a30:	dec00104 	addi	sp,sp,4
   24a34:	f800283a 	ret

00024a38 <alt_up_audio_record_r>:
/* Checks if the read FIFO for the right channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   24a38:	defffa04 	addi	sp,sp,-24
   24a3c:	dfc00515 	stw	ra,20(sp)
   24a40:	df000415 	stw	fp,16(sp)
   24a44:	df000404 	addi	fp,sp,16
   24a48:	e13ffd15 	stw	r4,-12(fp)
   24a4c:	e17ffe15 	stw	r5,-8(fp)
   24a50:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_RIGHT);
   24a54:	e13ffd17 	ldw	r4,-12(fp)
   24a58:	01400044 	movi	r5,1
   24a5c:	00249d80 	call	249d8 <alt_up_audio_read_fifo_avail>
   24a60:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
   24a64:	e0bffc17 	ldw	r2,-16(fp)
   24a68:	10801868 	cmpgeui	r2,r2,97
   24a6c:	1000021e 	bne	r2,zero,24a78 <alt_up_audio_record_r+0x40>
		return 0;
   24a70:	0005883a 	mov	r2,zero
   24a74:	00000506 	br	24a8c <alt_up_audio_record_r+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   24a78:	e13ffd17 	ldw	r4,-12(fp)
   24a7c:	e17ffe17 	ldw	r5,-8(fp)
   24a80:	e1bfff17 	ldw	r6,-4(fp)
   24a84:	01c00044 	movi	r7,1
   24a88:	0024c380 	call	24c38 <alt_up_audio_read_fifo>
}
   24a8c:	e037883a 	mov	sp,fp
   24a90:	dfc00117 	ldw	ra,4(sp)
   24a94:	df000017 	ldw	fp,0(sp)
   24a98:	dec00204 	addi	sp,sp,8
   24a9c:	f800283a 	ret

00024aa0 <alt_up_audio_record_l>:
/* Checks if the read FIFO for the left channel has at least BUF_THRESHOLD data words 
 * available. If it doesn't, then just returns 0. If it does, then data is read from the
 * FIFO up to a maximum of len words, and stored into buf.
 */
unsigned int alt_up_audio_record_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   24aa0:	defffa04 	addi	sp,sp,-24
   24aa4:	dfc00515 	stw	ra,20(sp)
   24aa8:	df000415 	stw	fp,16(sp)
   24aac:	df000404 	addi	fp,sp,16
   24ab0:	e13ffd15 	stw	r4,-12(fp)
   24ab4:	e17ffe15 	stw	r5,-8(fp)
   24ab8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int data_words = alt_up_audio_read_fifo_avail (audio, ALT_UP_AUDIO_LEFT);
   24abc:	e13ffd17 	ldw	r4,-12(fp)
   24ac0:	000b883a 	mov	r5,zero
   24ac4:	00249d80 	call	249d8 <alt_up_audio_read_fifo_avail>
   24ac8:	e0bffc15 	stw	r2,-16(fp)
	if (data_words <= BUF_THRESHOLD)
   24acc:	e0bffc17 	ldw	r2,-16(fp)
   24ad0:	10801868 	cmpgeui	r2,r2,97
   24ad4:	1000021e 	bne	r2,zero,24ae0 <alt_up_audio_record_l+0x40>
		return 0;
   24ad8:	0005883a 	mov	r2,zero
   24adc:	00000506 	br	24af4 <alt_up_audio_record_l+0x54>
	else
		return (alt_up_audio_read_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   24ae0:	e13ffd17 	ldw	r4,-12(fp)
   24ae4:	e17ffe17 	ldw	r5,-8(fp)
   24ae8:	e1bfff17 	ldw	r6,-4(fp)
   24aec:	000f883a 	mov	r7,zero
   24af0:	0024c380 	call	24c38 <alt_up_audio_read_fifo>
}
   24af4:	e037883a 	mov	sp,fp
   24af8:	dfc00117 	ldw	ra,4(sp)
   24afc:	df000017 	ldw	fp,0(sp)
   24b00:	dec00204 	addi	sp,sp,8
   24b04:	f800283a 	ret

00024b08 <alt_up_audio_write_fifo_space>:

/* Provides the amount of empty space available in the outgoing FIFO: WSLC or WSRC */
unsigned int alt_up_audio_write_fifo_space(alt_up_audio_dev *audio, int channel)
{
   24b08:	defffc04 	addi	sp,sp,-16
   24b0c:	df000315 	stw	fp,12(sp)
   24b10:	df000304 	addi	fp,sp,12
   24b14:	e13ffe15 	stw	r4,-8(fp)
   24b18:	e17fff15 	stw	r5,-4(fp)
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   24b1c:	e0bffe17 	ldw	r2,-8(fp)
   24b20:	10800a17 	ldw	r2,40(r2)
   24b24:	10800104 	addi	r2,r2,4
   24b28:	10800037 	ldwio	r2,0(r2)
   24b2c:	e0bffd15 	stw	r2,-12(fp)
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   24b30:	e0bfff17 	ldw	r2,-4(fp)
   24b34:	1000031e 	bne	r2,zero,24b44 <alt_up_audio_write_fifo_space+0x3c>
   24b38:	e0bffd17 	ldw	r2,-12(fp)
   24b3c:	1004d63a 	srli	r2,r2,24
   24b40:	00000306 	br	24b50 <alt_up_audio_write_fifo_space+0x48>
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   24b44:	e0bffd17 	ldw	r2,-12(fp)
   24b48:	10803fec 	andhi	r2,r2,255
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   24b4c:	1004d43a 	srli	r2,r2,16
{
	unsigned int fifospace;
	// read the whole fifospace register
	fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
	// extract the part for proper Channel Read Space
	fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   24b50:	e0bffd15 	stw	r2,-12(fp)
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
		(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
	return (fifospace);
   24b54:	e0bffd17 	ldw	r2,-12(fp)
}
   24b58:	e037883a 	mov	sp,fp
   24b5c:	df000017 	ldw	fp,0(sp)
   24b60:	dec00104 	addi	sp,sp,4
   24b64:	f800283a 	ret

00024b68 <alt_up_audio_play_r>:
/* Checks if the write FIFO for the right channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_r(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   24b68:	defffa04 	addi	sp,sp,-24
   24b6c:	dfc00515 	stw	ra,20(sp)
   24b70:	df000415 	stw	fp,16(sp)
   24b74:	df000404 	addi	fp,sp,16
   24b78:	e13ffd15 	stw	r4,-12(fp)
   24b7c:	e17ffe15 	stw	r5,-8(fp)
   24b80:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_RIGHT);
   24b84:	e13ffd17 	ldw	r4,-12(fp)
   24b88:	01400044 	movi	r5,1
   24b8c:	0024b080 	call	24b08 <alt_up_audio_write_fifo_space>
   24b90:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
   24b94:	e0bffc17 	ldw	r2,-16(fp)
   24b98:	10801868 	cmpgeui	r2,r2,97
   24b9c:	1000021e 	bne	r2,zero,24ba8 <alt_up_audio_play_r+0x40>
		return 0;
   24ba0:	0005883a 	mov	r2,zero
   24ba4:	00000506 	br	24bbc <alt_up_audio_play_r+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_RIGHT));
   24ba8:	e13ffd17 	ldw	r4,-12(fp)
   24bac:	e17ffe17 	ldw	r5,-8(fp)
   24bb0:	e1bfff17 	ldw	r6,-4(fp)
   24bb4:	01c00044 	movi	r7,1
   24bb8:	0024d180 	call	24d18 <alt_up_audio_write_fifo>
}
   24bbc:	e037883a 	mov	sp,fp
   24bc0:	dfc00117 	ldw	ra,4(sp)
   24bc4:	df000017 	ldw	fp,0(sp)
   24bc8:	dec00204 	addi	sp,sp,8
   24bcc:	f800283a 	ret

00024bd0 <alt_up_audio_play_l>:
/* Checks if the write FIFO for the left channel has at least BUF_THRESHOLD space available.
 * If it doesn't, then just returns 0. If it does, then data from buf is written into the 
 * FIFO, up to a maximum of len words.
 */
unsigned int alt_up_audio_play_l(alt_up_audio_dev *audio, unsigned int *buf, int len)
{
   24bd0:	defffa04 	addi	sp,sp,-24
   24bd4:	dfc00515 	stw	ra,20(sp)
   24bd8:	df000415 	stw	fp,16(sp)
   24bdc:	df000404 	addi	fp,sp,16
   24be0:	e13ffd15 	stw	r4,-12(fp)
   24be4:	e17ffe15 	stw	r5,-8(fp)
   24be8:	e1bfff15 	stw	r6,-4(fp)
	unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
   24bec:	e13ffd17 	ldw	r4,-12(fp)
   24bf0:	000b883a 	mov	r5,zero
   24bf4:	0024b080 	call	24b08 <alt_up_audio_write_fifo_space>
   24bf8:	e0bffc15 	stw	r2,-16(fp)
	if (space <= BUF_THRESHOLD)
   24bfc:	e0bffc17 	ldw	r2,-16(fp)
   24c00:	10801868 	cmpgeui	r2,r2,97
   24c04:	1000021e 	bne	r2,zero,24c10 <alt_up_audio_play_l+0x40>
		return 0;
   24c08:	0005883a 	mov	r2,zero
   24c0c:	00000506 	br	24c24 <alt_up_audio_play_l+0x54>
	else
		return (alt_up_audio_write_fifo(audio, buf, len, ALT_UP_AUDIO_LEFT));
   24c10:	e13ffd17 	ldw	r4,-12(fp)
   24c14:	e17ffe17 	ldw	r5,-8(fp)
   24c18:	e1bfff17 	ldw	r6,-4(fp)
   24c1c:	000f883a 	mov	r7,zero
   24c20:	0024d180 	call	24d18 <alt_up_audio_write_fifo>
}
   24c24:	e037883a 	mov	sp,fp
   24c28:	dfc00117 	ldw	ra,4(sp)
   24c2c:	df000017 	ldw	fp,0(sp)
   24c30:	dec00204 	addi	sp,sp,8
   24c34:	f800283a 	ret

00024c38 <alt_up_audio_read_fifo>:

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   24c38:	defff904 	addi	sp,sp,-28
   24c3c:	df000615 	stw	fp,24(sp)
   24c40:	df000604 	addi	fp,sp,24
   24c44:	e13ffc15 	stw	r4,-16(fp)
   24c48:	e17ffd15 	stw	r5,-12(fp)
   24c4c:	e1bffe15 	stw	r6,-8(fp)
   24c50:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
   24c54:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
   24c58:	00002706 	br	24cf8 <alt_up_audio_read_fifo+0xc0>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   24c5c:	e0bffc17 	ldw	r2,-16(fp)
   24c60:	10800a17 	ldw	r2,40(r2)
   24c64:	10800104 	addi	r2,r2,4
   24c68:	10800037 	ldwio	r2,0(r2)
   24c6c:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
   24c70:	e0bfff17 	ldw	r2,-4(fp)
   24c74:	1000041e 	bne	r2,zero,24c88 <alt_up_audio_read_fifo+0x50>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
   24c78:	e0bffb17 	ldw	r2,-20(fp)
   24c7c:	10bfc00c 	andi	r2,r2,65280
			:
   24c80:	1004d23a 	srli	r2,r2,8
   24c84:	00000206 	br	24c90 <alt_up_audio_read_fifo+0x58>
   24c88:	e0bffb17 	ldw	r2,-20(fp)
   24c8c:	10803fcc 	andi	r2,r2,255
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for proper Channel Read Space
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   24c90:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
   24c94:	e0bffb17 	ldw	r2,-20(fp)
   24c98:	10001626 	beq	r2,zero,24cf4 <alt_up_audio_read_fifo+0xbc>
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
   24c9c:	e0bffa17 	ldw	r2,-24(fp)
   24ca0:	1085883a 	add	r2,r2,r2
   24ca4:	1085883a 	add	r2,r2,r2
   24ca8:	1007883a 	mov	r3,r2
   24cac:	e0bffd17 	ldw	r2,-12(fp)
   24cb0:	10c5883a 	add	r2,r2,r3
   24cb4:	e0ffff17 	ldw	r3,-4(fp)
   24cb8:	1800051e 	bne	r3,zero,24cd0 <alt_up_audio_read_fifo+0x98>
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   24cbc:	e0fffc17 	ldw	r3,-16(fp)
   24cc0:	18c00a17 	ldw	r3,40(r3)
   24cc4:	18c00204 	addi	r3,r3,8
   24cc8:	18c00037 	ldwio	r3,0(r3)
   24ccc:	00000406 	br	24ce0 <alt_up_audio_read_fifo+0xa8>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
   24cd0:	e0fffc17 	ldw	r3,-16(fp)
   24cd4:	18c00a17 	ldw	r3,40(r3)
   24cd8:	18c00304 	addi	r3,r3,12
   24cdc:	18c00037 	ldwio	r3,0(r3)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RALC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RALC_OFST 
			:
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_RARC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_RARC_OFST;
		if (fifospace > 0) 
		{
			buf[count] = (channel == ALT_UP_AUDIO_LEFT) ? 
   24ce0:	10c00015 	stw	r3,0(r2)
				IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base);
			count ++;
   24ce4:	e0bffa17 	ldw	r2,-24(fp)
   24ce8:	10800044 	addi	r2,r2,1
   24cec:	e0bffa15 	stw	r2,-24(fp)
   24cf0:	00000106 	br	24cf8 <alt_up_audio_read_fifo+0xc0>
		}
		else
		{
			// no more data to read
			break;
   24cf4:	00000306 	br	24d04 <alt_up_audio_read_fifo+0xcc>

int alt_up_audio_read_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
   24cf8:	e0fffa17 	ldw	r3,-24(fp)
   24cfc:	e0bffe17 	ldw	r2,-8(fp)
   24d00:	18bfd616 	blt	r3,r2,24c5c <alt_up_audio_read_fifo+0x24>
		{
			// no more data to read
			break;
		}
	}
	return count;
   24d04:	e0bffa17 	ldw	r2,-24(fp)
}
   24d08:	e037883a 	mov	sp,fp
   24d0c:	df000017 	ldw	fp,0(sp)
   24d10:	dec00104 	addi	sp,sp,4
   24d14:	f800283a 	ret

00024d18 <alt_up_audio_write_fifo>:

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
   24d18:	defff904 	addi	sp,sp,-28
   24d1c:	df000615 	stw	fp,24(sp)
   24d20:	df000604 	addi	fp,sp,24
   24d24:	e13ffc15 	stw	r4,-16(fp)
   24d28:	e17ffd15 	stw	r5,-12(fp)
   24d2c:	e1bffe15 	stw	r6,-8(fp)
   24d30:	e1ffff15 	stw	r7,-4(fp)
	unsigned int fifospace;
	int count = 0;
   24d34:	e03ffa15 	stw	zero,-24(fp)
	while ( count < len ) 
   24d38:	00003106 	br	24e00 <alt_up_audio_write_fifo+0xe8>
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
   24d3c:	e0bffc17 	ldw	r2,-16(fp)
   24d40:	10800a17 	ldw	r2,40(r2)
   24d44:	10800104 	addi	r2,r2,4
   24d48:	10800037 	ldwio	r2,0(r2)
   24d4c:	e0bffb15 	stw	r2,-20(fp)
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   24d50:	e0bfff17 	ldw	r2,-4(fp)
   24d54:	1000031e 	bne	r2,zero,24d64 <alt_up_audio_write_fifo+0x4c>
   24d58:	e0bffb17 	ldw	r2,-20(fp)
   24d5c:	1004d63a 	srli	r2,r2,24
   24d60:	00000306 	br	24d70 <alt_up_audio_write_fifo+0x58>
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
   24d64:	e0bffb17 	ldw	r2,-20(fp)
   24d68:	10803fec 	andhi	r2,r2,255
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
   24d6c:	1004d43a 	srli	r2,r2,16
	while ( count < len ) 
	{
		// read the whole fifospace register
		fifospace = IORD_ALT_UP_AUDIO_FIFOSPACE(audio->base);
		// extract the part for Left Channel Write Space 
		fifospace = (channel == ALT_UP_AUDIO_LEFT) ? 
   24d70:	e0bffb15 	stw	r2,-20(fp)
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSLC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSLC_OFST :
			(fifospace & ALT_UP_AUDIO_FIFOSPACE_WSRC_MSK) >> ALT_UP_AUDIO_FIFOSPACE_WSRC_OFST;
		if (fifospace > 0) 
   24d74:	e0bffb17 	ldw	r2,-20(fp)
   24d78:	10002026 	beq	r2,zero,24dfc <alt_up_audio_write_fifo+0xe4>
		{
			if (channel == ALT_UP_AUDIO_LEFT) 
   24d7c:	e0bfff17 	ldw	r2,-4(fp)
   24d80:	10000f1e 	bne	r2,zero,24dc0 <alt_up_audio_write_fifo+0xa8>
				IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, buf[count++]);
   24d84:	e0bffc17 	ldw	r2,-16(fp)
   24d88:	10800a17 	ldw	r2,40(r2)
   24d8c:	10800204 	addi	r2,r2,8
   24d90:	1009883a 	mov	r4,r2
   24d94:	e0bffa17 	ldw	r2,-24(fp)
   24d98:	10c00044 	addi	r3,r2,1
   24d9c:	e0fffa15 	stw	r3,-24(fp)
   24da0:	1085883a 	add	r2,r2,r2
   24da4:	1085883a 	add	r2,r2,r2
   24da8:	1007883a 	mov	r3,r2
   24dac:	e0bffd17 	ldw	r2,-12(fp)
   24db0:	10c5883a 	add	r2,r2,r3
   24db4:	10800017 	ldw	r2,0(r2)
   24db8:	20800035 	stwio	r2,0(r4)
   24dbc:	00001006 	br	24e00 <alt_up_audio_write_fifo+0xe8>
			else
				IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, buf[count++]);
   24dc0:	e0bffc17 	ldw	r2,-16(fp)
   24dc4:	10800a17 	ldw	r2,40(r2)
   24dc8:	10800304 	addi	r2,r2,12
   24dcc:	1009883a 	mov	r4,r2
   24dd0:	e0bffa17 	ldw	r2,-24(fp)
   24dd4:	10c00044 	addi	r3,r2,1
   24dd8:	e0fffa15 	stw	r3,-24(fp)
   24ddc:	1085883a 	add	r2,r2,r2
   24de0:	1085883a 	add	r2,r2,r2
   24de4:	1007883a 	mov	r3,r2
   24de8:	e0bffd17 	ldw	r2,-12(fp)
   24dec:	10c5883a 	add	r2,r2,r3
   24df0:	10800017 	ldw	r2,0(r2)
   24df4:	20800035 	stwio	r2,0(r4)
   24df8:	00000106 	br	24e00 <alt_up_audio_write_fifo+0xe8>
		}
		else
		{
			// no more space to write
			break;
   24dfc:	00000306 	br	24e0c <alt_up_audio_write_fifo+0xf4>

int alt_up_audio_write_fifo(alt_up_audio_dev *audio, unsigned int *buf, int len, int channel)
{
	unsigned int fifospace;
	int count = 0;
	while ( count < len ) 
   24e00:	e0fffa17 	ldw	r3,-24(fp)
   24e04:	e0bffe17 	ldw	r2,-8(fp)
   24e08:	18bfcc16 	blt	r3,r2,24d3c <alt_up_audio_write_fifo+0x24>
		{
			// no more space to write
			break;
		}
	}
	return count;
   24e0c:	e0bffa17 	ldw	r2,-24(fp)
}
   24e10:	e037883a 	mov	sp,fp
   24e14:	df000017 	ldw	fp,0(sp)
   24e18:	dec00104 	addi	sp,sp,4
   24e1c:	f800283a 	ret

00024e20 <alt_up_audio_read_fifo_head>:

unsigned int alt_up_audio_read_fifo_head(alt_up_audio_dev *audio, int channel)
{
   24e20:	defffd04 	addi	sp,sp,-12
   24e24:	df000215 	stw	fp,8(sp)
   24e28:	df000204 	addi	fp,sp,8
   24e2c:	e13ffe15 	stw	r4,-8(fp)
   24e30:	e17fff15 	stw	r5,-4(fp)
	return ( (channel == ALT_UP_AUDIO_LEFT) ?  IORD_ALT_UP_AUDIO_LEFTDATA(audio->base) :
   24e34:	e0bfff17 	ldw	r2,-4(fp)
   24e38:	1000051e 	bne	r2,zero,24e50 <alt_up_audio_read_fifo_head+0x30>
   24e3c:	e0bffe17 	ldw	r2,-8(fp)
   24e40:	10800a17 	ldw	r2,40(r2)
   24e44:	10800204 	addi	r2,r2,8
   24e48:	10800037 	ldwio	r2,0(r2)
   24e4c:	00000406 	br	24e60 <alt_up_audio_read_fifo_head+0x40>
				IORD_ALT_UP_AUDIO_RIGHTDATA(audio->base) );
   24e50:	e0bffe17 	ldw	r2,-8(fp)
   24e54:	10800a17 	ldw	r2,40(r2)
   24e58:	10800304 	addi	r2,r2,12
   24e5c:	10800037 	ldwio	r2,0(r2)
}
   24e60:	e037883a 	mov	sp,fp
   24e64:	df000017 	ldw	fp,0(sp)
   24e68:	dec00104 	addi	sp,sp,4
   24e6c:	f800283a 	ret

00024e70 <alt_up_audio_write_fifo_head>:

void alt_up_audio_write_fifo_head(alt_up_audio_dev *audio, unsigned int data, int channel)
{
   24e70:	defffc04 	addi	sp,sp,-16
   24e74:	df000315 	stw	fp,12(sp)
   24e78:	df000304 	addi	fp,sp,12
   24e7c:	e13ffd15 	stw	r4,-12(fp)
   24e80:	e17ffe15 	stw	r5,-8(fp)
   24e84:	e1bfff15 	stw	r6,-4(fp)
	if (channel == ALT_UP_AUDIO_LEFT) 
   24e88:	e0bfff17 	ldw	r2,-4(fp)
   24e8c:	1000071e 	bne	r2,zero,24eac <alt_up_audio_write_fifo_head+0x3c>
		IOWR_ALT_UP_AUDIO_LEFTDATA(audio->base, data);
   24e90:	e0bffd17 	ldw	r2,-12(fp)
   24e94:	10800a17 	ldw	r2,40(r2)
   24e98:	10800204 	addi	r2,r2,8
   24e9c:	1007883a 	mov	r3,r2
   24ea0:	e0bffe17 	ldw	r2,-8(fp)
   24ea4:	18800035 	stwio	r2,0(r3)
   24ea8:	00000606 	br	24ec4 <alt_up_audio_write_fifo_head+0x54>
	else
		IOWR_ALT_UP_AUDIO_RIGHTDATA(audio->base, data);
   24eac:	e0bffd17 	ldw	r2,-12(fp)
   24eb0:	10800a17 	ldw	r2,40(r2)
   24eb4:	10800304 	addi	r2,r2,12
   24eb8:	1007883a 	mov	r3,r2
   24ebc:	e0bffe17 	ldw	r2,-8(fp)
   24ec0:	18800035 	stwio	r2,0(r3)
}
   24ec4:	e037883a 	mov	sp,fp
   24ec8:	df000017 	ldw	fp,0(sp)
   24ecc:	dec00104 	addi	sp,sp,4
   24ed0:	f800283a 	ret

00024ed4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   24ed4:	defff504 	addi	sp,sp,-44
   24ed8:	df000a15 	stw	fp,40(sp)
   24edc:	df000a04 	addi	fp,sp,40
   24ee0:	e13ffc15 	stw	r4,-16(fp)
   24ee4:	e17ffd15 	stw	r5,-12(fp)
   24ee8:	e1bffe15 	stw	r6,-8(fp)
   24eec:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   24ef0:	e03ff615 	stw	zero,-40(fp)
   24ef4:	008000f4 	movhi	r2,3
   24ef8:	10a66b04 	addi	r2,r2,-26196
   24efc:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
   24f00:	10003f26 	beq	r2,zero,25000 <alt_alarm_start+0x12c>
  {
    if (alarm)
   24f04:	e0bffc17 	ldw	r2,-16(fp)
   24f08:	10003b26 	beq	r2,zero,24ff8 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
   24f0c:	e0bffc17 	ldw	r2,-16(fp)
   24f10:	e0fffe17 	ldw	r3,-8(fp)
   24f14:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   24f18:	e0bffc17 	ldw	r2,-16(fp)
   24f1c:	e0ffff17 	ldw	r3,-4(fp)
   24f20:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24f24:	0005303a 	rdctl	r2,status
   24f28:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24f2c:	e0fff817 	ldw	r3,-32(fp)
   24f30:	00bfff84 	movi	r2,-2
   24f34:	1884703a 	and	r2,r3,r2
   24f38:	1001703a 	wrctl	status,r2
  
  return context;
   24f3c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
   24f40:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   24f44:	008000f4 	movhi	r2,3
   24f48:	10a66c04 	addi	r2,r2,-26192
   24f4c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
   24f50:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   24f54:	e0fffd17 	ldw	r3,-12(fp)
   24f58:	e0bff617 	ldw	r2,-40(fp)
   24f5c:	1885883a 	add	r2,r3,r2
   24f60:	10c00044 	addi	r3,r2,1
   24f64:	e0bffc17 	ldw	r2,-16(fp)
   24f68:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   24f6c:	e0bffc17 	ldw	r2,-16(fp)
   24f70:	10c00217 	ldw	r3,8(r2)
   24f74:	e0bff617 	ldw	r2,-40(fp)
   24f78:	1880042e 	bgeu	r3,r2,24f8c <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
   24f7c:	e0bffc17 	ldw	r2,-16(fp)
   24f80:	00c00044 	movi	r3,1
   24f84:	10c00405 	stb	r3,16(r2)
   24f88:	00000206 	br	24f94 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
   24f8c:	e0bffc17 	ldw	r2,-16(fp)
   24f90:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   24f94:	e0fffc17 	ldw	r3,-16(fp)
   24f98:	008000b4 	movhi	r2,2
   24f9c:	109fad04 	addi	r2,r2,32436
   24fa0:	e0bff915 	stw	r2,-28(fp)
   24fa4:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   24fa8:	e0bffa17 	ldw	r2,-24(fp)
   24fac:	e0fff917 	ldw	r3,-28(fp)
   24fb0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   24fb4:	e0bff917 	ldw	r2,-28(fp)
   24fb8:	10c00017 	ldw	r3,0(r2)
   24fbc:	e0bffa17 	ldw	r2,-24(fp)
   24fc0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   24fc4:	e0bff917 	ldw	r2,-28(fp)
   24fc8:	10800017 	ldw	r2,0(r2)
   24fcc:	e0fffa17 	ldw	r3,-24(fp)
   24fd0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   24fd4:	e0bff917 	ldw	r2,-28(fp)
   24fd8:	e0fffa17 	ldw	r3,-24(fp)
   24fdc:	10c00015 	stw	r3,0(r2)
   24fe0:	e0bff717 	ldw	r2,-36(fp)
   24fe4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24fe8:	e0bffb17 	ldw	r2,-20(fp)
   24fec:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   24ff0:	0005883a 	mov	r2,zero
   24ff4:	00000306 	br	25004 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
   24ff8:	00bffa84 	movi	r2,-22
   24ffc:	00000106 	br	25004 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
   25000:	00bfde84 	movi	r2,-134
  }
}
   25004:	e037883a 	mov	sp,fp
   25008:	df000017 	ldw	fp,0(sp)
   2500c:	dec00104 	addi	sp,sp,4
   25010:	f800283a 	ret

00025014 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   25014:	defffe04 	addi	sp,sp,-8
   25018:	df000115 	stw	fp,4(sp)
   2501c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   25020:	e03fff15 	stw	zero,-4(fp)
   25024:	00000506 	br	2503c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   25028:	e0bfff17 	ldw	r2,-4(fp)
   2502c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   25030:	e0bfff17 	ldw	r2,-4(fp)
   25034:	10800804 	addi	r2,r2,32
   25038:	e0bfff15 	stw	r2,-4(fp)
   2503c:	e0bfff17 	ldw	r2,-4(fp)
   25040:	10820030 	cmpltui	r2,r2,2048
   25044:	103ff81e 	bne	r2,zero,25028 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   25048:	e037883a 	mov	sp,fp
   2504c:	df000017 	ldw	fp,0(sp)
   25050:	dec00104 	addi	sp,sp,4
   25054:	f800283a 	ret

00025058 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   25058:	defffe04 	addi	sp,sp,-8
   2505c:	dfc00115 	stw	ra,4(sp)
   25060:	df000015 	stw	fp,0(sp)
   25064:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   25068:	008000b4 	movhi	r2,2
   2506c:	109faa04 	addi	r2,r2,32424
   25070:	10800017 	ldw	r2,0(r2)
   25074:	10000526 	beq	r2,zero,2508c <alt_get_errno+0x34>
   25078:	008000b4 	movhi	r2,2
   2507c:	109faa04 	addi	r2,r2,32424
   25080:	10800017 	ldw	r2,0(r2)
   25084:	103ee83a 	callr	r2
   25088:	00000206 	br	25094 <alt_get_errno+0x3c>
   2508c:	008000f4 	movhi	r2,3
   25090:	10a66604 	addi	r2,r2,-26216
}
   25094:	e037883a 	mov	sp,fp
   25098:	dfc00117 	ldw	ra,4(sp)
   2509c:	df000017 	ldw	fp,0(sp)
   250a0:	dec00204 	addi	sp,sp,8
   250a4:	f800283a 	ret

000250a8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   250a8:	defffa04 	addi	sp,sp,-24
   250ac:	dfc00515 	stw	ra,20(sp)
   250b0:	df000415 	stw	fp,16(sp)
   250b4:	df000404 	addi	fp,sp,16
   250b8:	e13ffe15 	stw	r4,-8(fp)
   250bc:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   250c0:	e0bffe17 	ldw	r2,-8(fp)
   250c4:	10000326 	beq	r2,zero,250d4 <alt_dev_llist_insert+0x2c>
   250c8:	e0bffe17 	ldw	r2,-8(fp)
   250cc:	10800217 	ldw	r2,8(r2)
   250d0:	1000061e 	bne	r2,zero,250ec <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   250d4:	00250580 	call	25058 <alt_get_errno>
   250d8:	1007883a 	mov	r3,r2
   250dc:	00800584 	movi	r2,22
   250e0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   250e4:	00bffa84 	movi	r2,-22
   250e8:	00001306 	br	25138 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   250ec:	e0bffe17 	ldw	r2,-8(fp)
   250f0:	e0ffff17 	ldw	r3,-4(fp)
   250f4:	e0fffc15 	stw	r3,-16(fp)
   250f8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   250fc:	e0bffd17 	ldw	r2,-12(fp)
   25100:	e0fffc17 	ldw	r3,-16(fp)
   25104:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   25108:	e0bffc17 	ldw	r2,-16(fp)
   2510c:	10c00017 	ldw	r3,0(r2)
   25110:	e0bffd17 	ldw	r2,-12(fp)
   25114:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   25118:	e0bffc17 	ldw	r2,-16(fp)
   2511c:	10800017 	ldw	r2,0(r2)
   25120:	e0fffd17 	ldw	r3,-12(fp)
   25124:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   25128:	e0bffc17 	ldw	r2,-16(fp)
   2512c:	e0fffd17 	ldw	r3,-12(fp)
   25130:	10c00015 	stw	r3,0(r2)

  return 0;  
   25134:	0005883a 	mov	r2,zero
}
   25138:	e037883a 	mov	sp,fp
   2513c:	dfc00117 	ldw	ra,4(sp)
   25140:	df000017 	ldw	fp,0(sp)
   25144:	dec00204 	addi	sp,sp,8
   25148:	f800283a 	ret

0002514c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2514c:	defffd04 	addi	sp,sp,-12
   25150:	dfc00215 	stw	ra,8(sp)
   25154:	df000115 	stw	fp,4(sp)
   25158:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2515c:	008000b4 	movhi	r2,2
   25160:	1098cb04 	addi	r2,r2,25388
   25164:	e0bfff15 	stw	r2,-4(fp)
   25168:	00000606 	br	25184 <_do_ctors+0x38>
        (*ctor) (); 
   2516c:	e0bfff17 	ldw	r2,-4(fp)
   25170:	10800017 	ldw	r2,0(r2)
   25174:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   25178:	e0bfff17 	ldw	r2,-4(fp)
   2517c:	10bfff04 	addi	r2,r2,-4
   25180:	e0bfff15 	stw	r2,-4(fp)
   25184:	e0ffff17 	ldw	r3,-4(fp)
   25188:	008000b4 	movhi	r2,2
   2518c:	1098cc04 	addi	r2,r2,25392
   25190:	18bff62e 	bgeu	r3,r2,2516c <_do_ctors+0x20>
        (*ctor) (); 
}
   25194:	e037883a 	mov	sp,fp
   25198:	dfc00117 	ldw	ra,4(sp)
   2519c:	df000017 	ldw	fp,0(sp)
   251a0:	dec00204 	addi	sp,sp,8
   251a4:	f800283a 	ret

000251a8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   251a8:	defffd04 	addi	sp,sp,-12
   251ac:	dfc00215 	stw	ra,8(sp)
   251b0:	df000115 	stw	fp,4(sp)
   251b4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   251b8:	008000b4 	movhi	r2,2
   251bc:	1098cb04 	addi	r2,r2,25388
   251c0:	e0bfff15 	stw	r2,-4(fp)
   251c4:	00000606 	br	251e0 <_do_dtors+0x38>
        (*dtor) (); 
   251c8:	e0bfff17 	ldw	r2,-4(fp)
   251cc:	10800017 	ldw	r2,0(r2)
   251d0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   251d4:	e0bfff17 	ldw	r2,-4(fp)
   251d8:	10bfff04 	addi	r2,r2,-4
   251dc:	e0bfff15 	stw	r2,-4(fp)
   251e0:	e0ffff17 	ldw	r3,-4(fp)
   251e4:	008000b4 	movhi	r2,2
   251e8:	1098cc04 	addi	r2,r2,25392
   251ec:	18bff62e 	bgeu	r3,r2,251c8 <_do_dtors+0x20>
        (*dtor) (); 
}
   251f0:	e037883a 	mov	sp,fp
   251f4:	dfc00117 	ldw	ra,4(sp)
   251f8:	df000017 	ldw	fp,0(sp)
   251fc:	dec00204 	addi	sp,sp,8
   25200:	f800283a 	ret

00025204 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   25204:	defffa04 	addi	sp,sp,-24
   25208:	dfc00515 	stw	ra,20(sp)
   2520c:	df000415 	stw	fp,16(sp)
   25210:	df000404 	addi	fp,sp,16
   25214:	e13ffe15 	stw	r4,-8(fp)
   25218:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2521c:	e0bfff17 	ldw	r2,-4(fp)
   25220:	10800017 	ldw	r2,0(r2)
   25224:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   25228:	e13ffe17 	ldw	r4,-8(fp)
   2522c:	00204680 	call	20468 <strlen>
   25230:	10800044 	addi	r2,r2,1
   25234:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25238:	00000d06 	br	25270 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2523c:	e0bffc17 	ldw	r2,-16(fp)
   25240:	10c00217 	ldw	r3,8(r2)
   25244:	e0bffd17 	ldw	r2,-12(fp)
   25248:	1809883a 	mov	r4,r3
   2524c:	e17ffe17 	ldw	r5,-8(fp)
   25250:	100d883a 	mov	r6,r2
   25254:	0025d180 	call	25d18 <memcmp>
   25258:	1000021e 	bne	r2,zero,25264 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2525c:	e0bffc17 	ldw	r2,-16(fp)
   25260:	00000706 	br	25280 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   25264:	e0bffc17 	ldw	r2,-16(fp)
   25268:	10800017 	ldw	r2,0(r2)
   2526c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   25270:	e0fffc17 	ldw	r3,-16(fp)
   25274:	e0bfff17 	ldw	r2,-4(fp)
   25278:	18bff01e 	bne	r3,r2,2523c <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2527c:	0005883a 	mov	r2,zero
}
   25280:	e037883a 	mov	sp,fp
   25284:	dfc00117 	ldw	ra,4(sp)
   25288:	df000017 	ldw	fp,0(sp)
   2528c:	dec00204 	addi	sp,sp,8
   25290:	f800283a 	ret

00025294 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   25294:	defffe04 	addi	sp,sp,-8
   25298:	dfc00115 	stw	ra,4(sp)
   2529c:	df000015 	stw	fp,0(sp)
   252a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   252a4:	0009883a 	mov	r4,zero
   252a8:	01440004 	movi	r5,4096
   252ac:	0025ba40 	call	25ba4 <alt_icache_flush>
#endif
}
   252b0:	e037883a 	mov	sp,fp
   252b4:	dfc00117 	ldw	ra,4(sp)
   252b8:	df000017 	ldw	fp,0(sp)
   252bc:	dec00204 	addi	sp,sp,8
   252c0:	f800283a 	ret

000252c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   252c4:	defff904 	addi	sp,sp,-28
   252c8:	dfc00615 	stw	ra,24(sp)
   252cc:	df000515 	stw	fp,20(sp)
   252d0:	df000504 	addi	fp,sp,20
   252d4:	e13ffc15 	stw	r4,-16(fp)
   252d8:	e17ffd15 	stw	r5,-12(fp)
   252dc:	e1bffe15 	stw	r6,-8(fp)
   252e0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   252e4:	e13ffd17 	ldw	r4,-12(fp)
   252e8:	e17ffe17 	ldw	r5,-8(fp)
   252ec:	e1bfff17 	ldw	r6,-4(fp)
   252f0:	00256c80 	call	256c8 <open>
   252f4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   252f8:	e0bffb17 	ldw	r2,-20(fp)
   252fc:	10001c16 	blt	r2,zero,25370 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   25300:	008000b4 	movhi	r2,2
   25304:	109b1104 	addi	r2,r2,27716
   25308:	e0fffb17 	ldw	r3,-20(fp)
   2530c:	18c00324 	muli	r3,r3,12
   25310:	10c5883a 	add	r2,r2,r3
   25314:	10c00017 	ldw	r3,0(r2)
   25318:	e0bffc17 	ldw	r2,-16(fp)
   2531c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   25320:	008000b4 	movhi	r2,2
   25324:	109b1104 	addi	r2,r2,27716
   25328:	e0fffb17 	ldw	r3,-20(fp)
   2532c:	18c00324 	muli	r3,r3,12
   25330:	18c00104 	addi	r3,r3,4
   25334:	10c5883a 	add	r2,r2,r3
   25338:	10c00017 	ldw	r3,0(r2)
   2533c:	e0bffc17 	ldw	r2,-16(fp)
   25340:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   25344:	008000b4 	movhi	r2,2
   25348:	109b1104 	addi	r2,r2,27716
   2534c:	e0fffb17 	ldw	r3,-20(fp)
   25350:	18c00324 	muli	r3,r3,12
   25354:	18c00204 	addi	r3,r3,8
   25358:	10c5883a 	add	r2,r2,r3
   2535c:	10c00017 	ldw	r3,0(r2)
   25360:	e0bffc17 	ldw	r2,-16(fp)
   25364:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   25368:	e13ffb17 	ldw	r4,-20(fp)
   2536c:	00239d80 	call	239d8 <alt_release_fd>
  }
} 
   25370:	e037883a 	mov	sp,fp
   25374:	dfc00117 	ldw	ra,4(sp)
   25378:	df000017 	ldw	fp,0(sp)
   2537c:	dec00204 	addi	sp,sp,8
   25380:	f800283a 	ret

00025384 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   25384:	defffb04 	addi	sp,sp,-20
   25388:	dfc00415 	stw	ra,16(sp)
   2538c:	df000315 	stw	fp,12(sp)
   25390:	df000304 	addi	fp,sp,12
   25394:	e13ffd15 	stw	r4,-12(fp)
   25398:	e17ffe15 	stw	r5,-8(fp)
   2539c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   253a0:	010000b4 	movhi	r4,2
   253a4:	211b1404 	addi	r4,r4,27728
   253a8:	e17ffd17 	ldw	r5,-12(fp)
   253ac:	01800044 	movi	r6,1
   253b0:	01c07fc4 	movi	r7,511
   253b4:	00252c40 	call	252c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   253b8:	010000b4 	movhi	r4,2
   253bc:	211b1104 	addi	r4,r4,27716
   253c0:	e17ffe17 	ldw	r5,-8(fp)
   253c4:	000d883a 	mov	r6,zero
   253c8:	01c07fc4 	movi	r7,511
   253cc:	00252c40 	call	252c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   253d0:	010000b4 	movhi	r4,2
   253d4:	211b1704 	addi	r4,r4,27740
   253d8:	e17fff17 	ldw	r5,-4(fp)
   253dc:	01800044 	movi	r6,1
   253e0:	01c07fc4 	movi	r7,511
   253e4:	00252c40 	call	252c4 <alt_open_fd>
}  
   253e8:	e037883a 	mov	sp,fp
   253ec:	dfc00117 	ldw	ra,4(sp)
   253f0:	df000017 	ldw	fp,0(sp)
   253f4:	dec00204 	addi	sp,sp,8
   253f8:	f800283a 	ret

000253fc <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
   253fc:	defff004 	addi	sp,sp,-64
   25400:	df000f15 	stw	fp,60(sp)
   25404:	df000f04 	addi	fp,sp,60
   25408:	e13ffd15 	stw	r4,-12(fp)
   2540c:	e17ffe15 	stw	r5,-8(fp)
   25410:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
   25414:	00bffa84 	movi	r2,-22
   25418:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2541c:	e0bffd17 	ldw	r2,-12(fp)
   25420:	10800828 	cmpgeui	r2,r2,32
   25424:	10005c1e 	bne	r2,zero,25598 <alt_irq_register+0x19c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25428:	0005303a 	rdctl	r2,status
   2542c:	e0bff315 	stw	r2,-52(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25430:	e0fff317 	ldw	r3,-52(fp)
   25434:	00bfff84 	movi	r2,-2
   25438:	1884703a 	and	r2,r3,r2
   2543c:	1001703a 	wrctl	status,r2
  
  return context;
   25440:	e0bff317 	ldw	r2,-52(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
   25444:	e0bff215 	stw	r2,-56(fp)

    alt_irq[id].handler = handler;
   25448:	008000f4 	movhi	r2,3
   2544c:	10955804 	addi	r2,r2,21856
   25450:	e0fffd17 	ldw	r3,-12(fp)
   25454:	180690fa 	slli	r3,r3,3
   25458:	10c5883a 	add	r2,r2,r3
   2545c:	e0ffff17 	ldw	r3,-4(fp)
   25460:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
   25464:	008000f4 	movhi	r2,3
   25468:	10955804 	addi	r2,r2,21856
   2546c:	e0fffd17 	ldw	r3,-12(fp)
   25470:	180690fa 	slli	r3,r3,3
   25474:	18c00104 	addi	r3,r3,4
   25478:	10c5883a 	add	r2,r2,r3
   2547c:	e0fffe17 	ldw	r3,-8(fp)
   25480:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
   25484:	e0bfff17 	ldw	r2,-4(fp)
   25488:	10001f26 	beq	r2,zero,25508 <alt_irq_register+0x10c>
   2548c:	e0bffd17 	ldw	r2,-12(fp)
   25490:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25494:	0005303a 	rdctl	r2,status
   25498:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2549c:	e0fff517 	ldw	r3,-44(fp)
   254a0:	00bfff84 	movi	r2,-2
   254a4:	1884703a 	and	r2,r3,r2
   254a8:	1001703a 	wrctl	status,r2
  
  return context;
   254ac:	e0bff517 	ldw	r2,-44(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   254b0:	e0bff615 	stw	r2,-40(fp)

  alt_irq_active |= (1 << id);
   254b4:	e0bff417 	ldw	r2,-48(fp)
   254b8:	00c00044 	movi	r3,1
   254bc:	1884983a 	sll	r2,r3,r2
   254c0:	1007883a 	mov	r3,r2
   254c4:	008000f4 	movhi	r2,3
   254c8:	10a66a04 	addi	r2,r2,-26200
   254cc:	10800017 	ldw	r2,0(r2)
   254d0:	1886b03a 	or	r3,r3,r2
   254d4:	008000f4 	movhi	r2,3
   254d8:	10a66a04 	addi	r2,r2,-26200
   254dc:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   254e0:	008000f4 	movhi	r2,3
   254e4:	10a66a04 	addi	r2,r2,-26200
   254e8:	10800017 	ldw	r2,0(r2)
   254ec:	100170fa 	wrctl	ienable,r2
   254f0:	e0bff617 	ldw	r2,-40(fp)
   254f4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   254f8:	e0bff717 	ldw	r2,-36(fp)
   254fc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25500:	0005883a 	mov	r2,zero
   25504:	00001f06 	br	25584 <alt_irq_register+0x188>
   25508:	e0bffd17 	ldw	r2,-12(fp)
   2550c:	e0bff815 	stw	r2,-32(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25510:	0005303a 	rdctl	r2,status
   25514:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25518:	e0fff917 	ldw	r3,-28(fp)
   2551c:	00bfff84 	movi	r2,-2
   25520:	1884703a 	and	r2,r3,r2
   25524:	1001703a 	wrctl	status,r2
  
  return context;
   25528:	e0bff917 	ldw	r2,-28(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2552c:	e0bffa15 	stw	r2,-24(fp)

  alt_irq_active &= ~(1 << id);
   25530:	e0bff817 	ldw	r2,-32(fp)
   25534:	00c00044 	movi	r3,1
   25538:	1884983a 	sll	r2,r3,r2
   2553c:	0084303a 	nor	r2,zero,r2
   25540:	1007883a 	mov	r3,r2
   25544:	008000f4 	movhi	r2,3
   25548:	10a66a04 	addi	r2,r2,-26200
   2554c:	10800017 	ldw	r2,0(r2)
   25550:	1886703a 	and	r3,r3,r2
   25554:	008000f4 	movhi	r2,3
   25558:	10a66a04 	addi	r2,r2,-26200
   2555c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   25560:	008000f4 	movhi	r2,3
   25564:	10a66a04 	addi	r2,r2,-26200
   25568:	10800017 	ldw	r2,0(r2)
   2556c:	100170fa 	wrctl	ienable,r2
   25570:	e0bffa17 	ldw	r2,-24(fp)
   25574:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   25578:	e0bffb17 	ldw	r2,-20(fp)
   2557c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   25580:	0005883a 	mov	r2,zero
   25584:	e0bff115 	stw	r2,-60(fp)
   25588:	e0bff217 	ldw	r2,-56(fp)
   2558c:	e0bffc15 	stw	r2,-16(fp)
   25590:	e0bffc17 	ldw	r2,-16(fp)
   25594:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
   25598:	e0bff117 	ldw	r2,-60(fp)
}
   2559c:	e037883a 	mov	sp,fp
   255a0:	df000017 	ldw	fp,0(sp)
   255a4:	dec00104 	addi	sp,sp,4
   255a8:	f800283a 	ret

000255ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   255ac:	defffe04 	addi	sp,sp,-8
   255b0:	dfc00115 	stw	ra,4(sp)
   255b4:	df000015 	stw	fp,0(sp)
   255b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   255bc:	008000b4 	movhi	r2,2
   255c0:	109faa04 	addi	r2,r2,32424
   255c4:	10800017 	ldw	r2,0(r2)
   255c8:	10000526 	beq	r2,zero,255e0 <alt_get_errno+0x34>
   255cc:	008000b4 	movhi	r2,2
   255d0:	109faa04 	addi	r2,r2,32424
   255d4:	10800017 	ldw	r2,0(r2)
   255d8:	103ee83a 	callr	r2
   255dc:	00000206 	br	255e8 <alt_get_errno+0x3c>
   255e0:	008000f4 	movhi	r2,3
   255e4:	10a66604 	addi	r2,r2,-26216
}
   255e8:	e037883a 	mov	sp,fp
   255ec:	dfc00117 	ldw	ra,4(sp)
   255f0:	df000017 	ldw	fp,0(sp)
   255f4:	dec00204 	addi	sp,sp,8
   255f8:	f800283a 	ret

000255fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   255fc:	defffd04 	addi	sp,sp,-12
   25600:	df000215 	stw	fp,8(sp)
   25604:	df000204 	addi	fp,sp,8
   25608:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2560c:	e0bfff17 	ldw	r2,-4(fp)
   25610:	10800217 	ldw	r2,8(r2)
   25614:	10d00034 	orhi	r3,r2,16384
   25618:	e0bfff17 	ldw	r2,-4(fp)
   2561c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   25620:	e03ffe15 	stw	zero,-8(fp)
   25624:	00001d06 	br	2569c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   25628:	008000b4 	movhi	r2,2
   2562c:	109b1104 	addi	r2,r2,27716
   25630:	e0fffe17 	ldw	r3,-8(fp)
   25634:	18c00324 	muli	r3,r3,12
   25638:	10c5883a 	add	r2,r2,r3
   2563c:	10c00017 	ldw	r3,0(r2)
   25640:	e0bfff17 	ldw	r2,-4(fp)
   25644:	10800017 	ldw	r2,0(r2)
   25648:	1880111e 	bne	r3,r2,25690 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2564c:	008000b4 	movhi	r2,2
   25650:	109b1104 	addi	r2,r2,27716
   25654:	e0fffe17 	ldw	r3,-8(fp)
   25658:	18c00324 	muli	r3,r3,12
   2565c:	18c00204 	addi	r3,r3,8
   25660:	10c5883a 	add	r2,r2,r3
   25664:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   25668:	1000090e 	bge	r2,zero,25690 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2566c:	e0bffe17 	ldw	r2,-8(fp)
   25670:	10c00324 	muli	r3,r2,12
   25674:	008000b4 	movhi	r2,2
   25678:	109b1104 	addi	r2,r2,27716
   2567c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   25680:	e0bfff17 	ldw	r2,-4(fp)
   25684:	18800226 	beq	r3,r2,25690 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   25688:	00bffcc4 	movi	r2,-13
   2568c:	00000a06 	br	256b8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   25690:	e0bffe17 	ldw	r2,-8(fp)
   25694:	10800044 	addi	r2,r2,1
   25698:	e0bffe15 	stw	r2,-8(fp)
   2569c:	008000b4 	movhi	r2,2
   256a0:	109fa904 	addi	r2,r2,32420
   256a4:	10800017 	ldw	r2,0(r2)
   256a8:	1007883a 	mov	r3,r2
   256ac:	e0bffe17 	ldw	r2,-8(fp)
   256b0:	18bfdd2e 	bgeu	r3,r2,25628 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   256b4:	0005883a 	mov	r2,zero
}
   256b8:	e037883a 	mov	sp,fp
   256bc:	df000017 	ldw	fp,0(sp)
   256c0:	dec00104 	addi	sp,sp,4
   256c4:	f800283a 	ret

000256c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   256c8:	defff604 	addi	sp,sp,-40
   256cc:	dfc00915 	stw	ra,36(sp)
   256d0:	df000815 	stw	fp,32(sp)
   256d4:	df000804 	addi	fp,sp,32
   256d8:	e13ffd15 	stw	r4,-12(fp)
   256dc:	e17ffe15 	stw	r5,-8(fp)
   256e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   256e4:	00bfffc4 	movi	r2,-1
   256e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   256ec:	00bffb44 	movi	r2,-19
   256f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   256f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   256f8:	e13ffd17 	ldw	r4,-12(fp)
   256fc:	014000b4 	movhi	r5,2
   25700:	295fa704 	addi	r5,r5,32412
   25704:	00252040 	call	25204 <alt_find_dev>
   25708:	e0bff815 	stw	r2,-32(fp)
   2570c:	e0bff817 	ldw	r2,-32(fp)
   25710:	1000051e 	bne	r2,zero,25728 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   25714:	e13ffd17 	ldw	r4,-12(fp)
   25718:	00259dc0 	call	259dc <alt_find_file>
   2571c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   25720:	00800044 	movi	r2,1
   25724:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   25728:	e0bff817 	ldw	r2,-32(fp)
   2572c:	10002926 	beq	r2,zero,257d4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
   25730:	e13ff817 	ldw	r4,-32(fp)
   25734:	0025af00 	call	25af0 <alt_get_fd>
   25738:	e0bff915 	stw	r2,-28(fp)
   2573c:	e0bff917 	ldw	r2,-28(fp)
   25740:	1000030e 	bge	r2,zero,25750 <open+0x88>
    {
      status = index;
   25744:	e0bff917 	ldw	r2,-28(fp)
   25748:	e0bffa15 	stw	r2,-24(fp)
   2574c:	00002306 	br	257dc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
   25750:	e0bff917 	ldw	r2,-28(fp)
   25754:	10c00324 	muli	r3,r2,12
   25758:	008000b4 	movhi	r2,2
   2575c:	109b1104 	addi	r2,r2,27716
   25760:	1885883a 	add	r2,r3,r2
   25764:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   25768:	e0fffe17 	ldw	r3,-8(fp)
   2576c:	00900034 	movhi	r2,16384
   25770:	10bfffc4 	addi	r2,r2,-1
   25774:	1886703a 	and	r3,r3,r2
   25778:	e0bffc17 	ldw	r2,-16(fp)
   2577c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   25780:	e0bffb17 	ldw	r2,-20(fp)
   25784:	1000051e 	bne	r2,zero,2579c <open+0xd4>
   25788:	e13ffc17 	ldw	r4,-16(fp)
   2578c:	00255fc0 	call	255fc <alt_file_locked>
   25790:	e0bffa15 	stw	r2,-24(fp)
   25794:	e0bffa17 	ldw	r2,-24(fp)
   25798:	10001016 	blt	r2,zero,257dc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2579c:	e0bff817 	ldw	r2,-32(fp)
   257a0:	10800317 	ldw	r2,12(r2)
   257a4:	10000826 	beq	r2,zero,257c8 <open+0x100>
   257a8:	e0bff817 	ldw	r2,-32(fp)
   257ac:	10800317 	ldw	r2,12(r2)
   257b0:	e13ffc17 	ldw	r4,-16(fp)
   257b4:	e17ffd17 	ldw	r5,-12(fp)
   257b8:	e1bffe17 	ldw	r6,-8(fp)
   257bc:	e1ffff17 	ldw	r7,-4(fp)
   257c0:	103ee83a 	callr	r2
   257c4:	00000106 	br	257cc <open+0x104>
   257c8:	0005883a 	mov	r2,zero
   257cc:	e0bffa15 	stw	r2,-24(fp)
   257d0:	00000206 	br	257dc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
   257d4:	00bffb44 	movi	r2,-19
   257d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   257dc:	e0bffa17 	ldw	r2,-24(fp)
   257e0:	1000090e 	bge	r2,zero,25808 <open+0x140>
  {
    alt_release_fd (index);  
   257e4:	e13ff917 	ldw	r4,-28(fp)
   257e8:	00239d80 	call	239d8 <alt_release_fd>
    ALT_ERRNO = -status;
   257ec:	00255ac0 	call	255ac <alt_get_errno>
   257f0:	1007883a 	mov	r3,r2
   257f4:	e0bffa17 	ldw	r2,-24(fp)
   257f8:	0085c83a 	sub	r2,zero,r2
   257fc:	18800015 	stw	r2,0(r3)
    return -1;
   25800:	00bfffc4 	movi	r2,-1
   25804:	00000106 	br	2580c <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
   25808:	e0bff917 	ldw	r2,-28(fp)
}
   2580c:	e037883a 	mov	sp,fp
   25810:	dfc00117 	ldw	ra,4(sp)
   25814:	df000017 	ldw	fp,0(sp)
   25818:	dec00204 	addi	sp,sp,8
   2581c:	f800283a 	ret

00025820 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   25820:	defffa04 	addi	sp,sp,-24
   25824:	df000515 	stw	fp,20(sp)
   25828:	df000504 	addi	fp,sp,20
   2582c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   25830:	0005303a 	rdctl	r2,status
   25834:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   25838:	e0fffc17 	ldw	r3,-16(fp)
   2583c:	00bfff84 	movi	r2,-2
   25840:	1884703a 	and	r2,r3,r2
   25844:	1001703a 	wrctl	status,r2
  
  return context;
   25848:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2584c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   25850:	e0bfff17 	ldw	r2,-4(fp)
   25854:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   25858:	e0bffd17 	ldw	r2,-12(fp)
   2585c:	10800017 	ldw	r2,0(r2)
   25860:	e0fffd17 	ldw	r3,-12(fp)
   25864:	18c00117 	ldw	r3,4(r3)
   25868:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2586c:	e0bffd17 	ldw	r2,-12(fp)
   25870:	10800117 	ldw	r2,4(r2)
   25874:	e0fffd17 	ldw	r3,-12(fp)
   25878:	18c00017 	ldw	r3,0(r3)
   2587c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   25880:	e0bffd17 	ldw	r2,-12(fp)
   25884:	e0fffd17 	ldw	r3,-12(fp)
   25888:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2588c:	e0bffd17 	ldw	r2,-12(fp)
   25890:	e0fffd17 	ldw	r3,-12(fp)
   25894:	10c00015 	stw	r3,0(r2)
   25898:	e0bffb17 	ldw	r2,-20(fp)
   2589c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   258a0:	e0bffe17 	ldw	r2,-8(fp)
   258a4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   258a8:	e037883a 	mov	sp,fp
   258ac:	df000017 	ldw	fp,0(sp)
   258b0:	dec00104 	addi	sp,sp,4
   258b4:	f800283a 	ret

000258b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   258b8:	defffb04 	addi	sp,sp,-20
   258bc:	dfc00415 	stw	ra,16(sp)
   258c0:	df000315 	stw	fp,12(sp)
   258c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   258c8:	d0a00c17 	ldw	r2,-32720(gp)
   258cc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   258d0:	d0a6cb17 	ldw	r2,-25812(gp)
   258d4:	10800044 	addi	r2,r2,1
   258d8:	d0a6cb15 	stw	r2,-25812(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   258dc:	00002e06 	br	25998 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   258e0:	e0bffd17 	ldw	r2,-12(fp)
   258e4:	10800017 	ldw	r2,0(r2)
   258e8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   258ec:	e0bffd17 	ldw	r2,-12(fp)
   258f0:	10800403 	ldbu	r2,16(r2)
   258f4:	10803fcc 	andi	r2,r2,255
   258f8:	10000426 	beq	r2,zero,2590c <alt_tick+0x54>
   258fc:	d0a6cb17 	ldw	r2,-25812(gp)
   25900:	1000021e 	bne	r2,zero,2590c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   25904:	e0bffd17 	ldw	r2,-12(fp)
   25908:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2590c:	e0bffd17 	ldw	r2,-12(fp)
   25910:	10800217 	ldw	r2,8(r2)
   25914:	d0e6cb17 	ldw	r3,-25812(gp)
   25918:	18801d36 	bltu	r3,r2,25990 <alt_tick+0xd8>
   2591c:	e0bffd17 	ldw	r2,-12(fp)
   25920:	10800403 	ldbu	r2,16(r2)
   25924:	10803fcc 	andi	r2,r2,255
   25928:	1000191e 	bne	r2,zero,25990 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2592c:	e0bffd17 	ldw	r2,-12(fp)
   25930:	10800317 	ldw	r2,12(r2)
   25934:	e0fffd17 	ldw	r3,-12(fp)
   25938:	18c00517 	ldw	r3,20(r3)
   2593c:	1809883a 	mov	r4,r3
   25940:	103ee83a 	callr	r2
   25944:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   25948:	e0bfff17 	ldw	r2,-4(fp)
   2594c:	1000031e 	bne	r2,zero,2595c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   25950:	e13ffd17 	ldw	r4,-12(fp)
   25954:	00258200 	call	25820 <alt_alarm_stop>
   25958:	00000d06 	br	25990 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2595c:	e0bffd17 	ldw	r2,-12(fp)
   25960:	10c00217 	ldw	r3,8(r2)
   25964:	e0bfff17 	ldw	r2,-4(fp)
   25968:	1887883a 	add	r3,r3,r2
   2596c:	e0bffd17 	ldw	r2,-12(fp)
   25970:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   25974:	e0bffd17 	ldw	r2,-12(fp)
   25978:	10c00217 	ldw	r3,8(r2)
   2597c:	d0a6cb17 	ldw	r2,-25812(gp)
   25980:	1880032e 	bgeu	r3,r2,25990 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   25984:	e0bffd17 	ldw	r2,-12(fp)
   25988:	00c00044 	movi	r3,1
   2598c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   25990:	e0bffe17 	ldw	r2,-8(fp)
   25994:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   25998:	e0fffd17 	ldw	r3,-12(fp)
   2599c:	d0a00c04 	addi	r2,gp,-32720
   259a0:	18bfcf1e 	bne	r3,r2,258e0 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   259a4:	0001883a 	nop
}
   259a8:	e037883a 	mov	sp,fp
   259ac:	dfc00117 	ldw	ra,4(sp)
   259b0:	df000017 	ldw	fp,0(sp)
   259b4:	dec00204 	addi	sp,sp,8
   259b8:	f800283a 	ret

000259bc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   259bc:	deffff04 	addi	sp,sp,-4
   259c0:	df000015 	stw	fp,0(sp)
   259c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   259c8:	000170fa 	wrctl	ienable,zero
}
   259cc:	e037883a 	mov	sp,fp
   259d0:	df000017 	ldw	fp,0(sp)
   259d4:	dec00104 	addi	sp,sp,4
   259d8:	f800283a 	ret

000259dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   259dc:	defffb04 	addi	sp,sp,-20
   259e0:	dfc00415 	stw	ra,16(sp)
   259e4:	df000315 	stw	fp,12(sp)
   259e8:	df000304 	addi	fp,sp,12
   259ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   259f0:	008000b4 	movhi	r2,2
   259f4:	109fa504 	addi	r2,r2,32404
   259f8:	10800017 	ldw	r2,0(r2)
   259fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25a00:	00003106 	br	25ac8 <alt_find_file+0xec>
  {
    len = strlen(next->name);
   25a04:	e0bffd17 	ldw	r2,-12(fp)
   25a08:	10800217 	ldw	r2,8(r2)
   25a0c:	1009883a 	mov	r4,r2
   25a10:	00204680 	call	20468 <strlen>
   25a14:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   25a18:	e0bffd17 	ldw	r2,-12(fp)
   25a1c:	10c00217 	ldw	r3,8(r2)
   25a20:	e0bffe17 	ldw	r2,-8(fp)
   25a24:	10bfffc4 	addi	r2,r2,-1
   25a28:	1885883a 	add	r2,r3,r2
   25a2c:	10800003 	ldbu	r2,0(r2)
   25a30:	10803fcc 	andi	r2,r2,255
   25a34:	1080201c 	xori	r2,r2,128
   25a38:	10bfe004 	addi	r2,r2,-128
   25a3c:	10800bd8 	cmpnei	r2,r2,47
   25a40:	1000031e 	bne	r2,zero,25a50 <alt_find_file+0x74>
    {
      len -= 1;
   25a44:	e0bffe17 	ldw	r2,-8(fp)
   25a48:	10bfffc4 	addi	r2,r2,-1
   25a4c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25a50:	e0bffe17 	ldw	r2,-8(fp)
   25a54:	e0ffff17 	ldw	r3,-4(fp)
   25a58:	1885883a 	add	r2,r3,r2
   25a5c:	10800003 	ldbu	r2,0(r2)
   25a60:	10803fcc 	andi	r2,r2,255
   25a64:	1080201c 	xori	r2,r2,128
   25a68:	10bfe004 	addi	r2,r2,-128
   25a6c:	10800be0 	cmpeqi	r2,r2,47
   25a70:	1000081e 	bne	r2,zero,25a94 <alt_find_file+0xb8>
   25a74:	e0bffe17 	ldw	r2,-8(fp)
   25a78:	e0ffff17 	ldw	r3,-4(fp)
   25a7c:	1885883a 	add	r2,r3,r2
   25a80:	10800003 	ldbu	r2,0(r2)
   25a84:	10803fcc 	andi	r2,r2,255
   25a88:	1080201c 	xori	r2,r2,128
   25a8c:	10bfe004 	addi	r2,r2,-128
   25a90:	10000a1e 	bne	r2,zero,25abc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
   25a94:	e0bffd17 	ldw	r2,-12(fp)
   25a98:	10c00217 	ldw	r3,8(r2)
   25a9c:	e0bffe17 	ldw	r2,-8(fp)
   25aa0:	1809883a 	mov	r4,r3
   25aa4:	e17fff17 	ldw	r5,-4(fp)
   25aa8:	100d883a 	mov	r6,r2
   25aac:	0025d180 	call	25d18 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   25ab0:	1000021e 	bne	r2,zero,25abc <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   25ab4:	e0bffd17 	ldw	r2,-12(fp)
   25ab8:	00000806 	br	25adc <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
   25abc:	e0bffd17 	ldw	r2,-12(fp)
   25ac0:	10800017 	ldw	r2,0(r2)
   25ac4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   25ac8:	e0fffd17 	ldw	r3,-12(fp)
   25acc:	008000b4 	movhi	r2,2
   25ad0:	109fa504 	addi	r2,r2,32404
   25ad4:	18bfcb1e 	bne	r3,r2,25a04 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   25ad8:	0005883a 	mov	r2,zero
}
   25adc:	e037883a 	mov	sp,fp
   25ae0:	dfc00117 	ldw	ra,4(sp)
   25ae4:	df000017 	ldw	fp,0(sp)
   25ae8:	dec00204 	addi	sp,sp,8
   25aec:	f800283a 	ret

00025af0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   25af0:	defffc04 	addi	sp,sp,-16
   25af4:	df000315 	stw	fp,12(sp)
   25af8:	df000304 	addi	fp,sp,12
   25afc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   25b00:	00bffa04 	movi	r2,-24
   25b04:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25b08:	e03ffd15 	stw	zero,-12(fp)
   25b0c:	00001d06 	br	25b84 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
   25b10:	008000b4 	movhi	r2,2
   25b14:	109b1104 	addi	r2,r2,27716
   25b18:	e0fffd17 	ldw	r3,-12(fp)
   25b1c:	18c00324 	muli	r3,r3,12
   25b20:	10c5883a 	add	r2,r2,r3
   25b24:	10800017 	ldw	r2,0(r2)
   25b28:	1000131e 	bne	r2,zero,25b78 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
   25b2c:	008000b4 	movhi	r2,2
   25b30:	109b1104 	addi	r2,r2,27716
   25b34:	e0fffd17 	ldw	r3,-12(fp)
   25b38:	18c00324 	muli	r3,r3,12
   25b3c:	10c5883a 	add	r2,r2,r3
   25b40:	e0ffff17 	ldw	r3,-4(fp)
   25b44:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   25b48:	008000b4 	movhi	r2,2
   25b4c:	109fa904 	addi	r2,r2,32420
   25b50:	10c00017 	ldw	r3,0(r2)
   25b54:	e0bffd17 	ldw	r2,-12(fp)
   25b58:	1880040e 	bge	r3,r2,25b6c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
   25b5c:	008000b4 	movhi	r2,2
   25b60:	109fa904 	addi	r2,r2,32420
   25b64:	e0fffd17 	ldw	r3,-12(fp)
   25b68:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
   25b6c:	e0bffd17 	ldw	r2,-12(fp)
   25b70:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   25b74:	00000606 	br	25b90 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   25b78:	e0bffd17 	ldw	r2,-12(fp)
   25b7c:	10800044 	addi	r2,r2,1
   25b80:	e0bffd15 	stw	r2,-12(fp)
   25b84:	e0bffd17 	ldw	r2,-12(fp)
   25b88:	10800810 	cmplti	r2,r2,32
   25b8c:	103fe01e 	bne	r2,zero,25b10 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   25b90:	e0bffe17 	ldw	r2,-8(fp)
}
   25b94:	e037883a 	mov	sp,fp
   25b98:	df000017 	ldw	fp,0(sp)
   25b9c:	dec00104 	addi	sp,sp,4
   25ba0:	f800283a 	ret

00025ba4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   25ba4:	defffb04 	addi	sp,sp,-20
   25ba8:	df000415 	stw	fp,16(sp)
   25bac:	df000404 	addi	fp,sp,16
   25bb0:	e13ffe15 	stw	r4,-8(fp)
   25bb4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   25bb8:	e0bfff17 	ldw	r2,-4(fp)
   25bbc:	10840070 	cmpltui	r2,r2,4097
   25bc0:	1000021e 	bne	r2,zero,25bcc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   25bc4:	00840004 	movi	r2,4096
   25bc8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   25bcc:	e0fffe17 	ldw	r3,-8(fp)
   25bd0:	e0bfff17 	ldw	r2,-4(fp)
   25bd4:	1885883a 	add	r2,r3,r2
   25bd8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   25bdc:	e0bffe17 	ldw	r2,-8(fp)
   25be0:	e0bffc15 	stw	r2,-16(fp)
   25be4:	00000506 	br	25bfc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   25be8:	e0bffc17 	ldw	r2,-16(fp)
   25bec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   25bf0:	e0bffc17 	ldw	r2,-16(fp)
   25bf4:	10800804 	addi	r2,r2,32
   25bf8:	e0bffc15 	stw	r2,-16(fp)
   25bfc:	e0fffc17 	ldw	r3,-16(fp)
   25c00:	e0bffd17 	ldw	r2,-12(fp)
   25c04:	18bff836 	bltu	r3,r2,25be8 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   25c08:	e0bffe17 	ldw	r2,-8(fp)
   25c0c:	108007cc 	andi	r2,r2,31
   25c10:	10000226 	beq	r2,zero,25c1c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   25c14:	e0bffc17 	ldw	r2,-16(fp)
   25c18:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   25c1c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   25c20:	e037883a 	mov	sp,fp
   25c24:	df000017 	ldw	fp,0(sp)
   25c28:	dec00104 	addi	sp,sp,4
   25c2c:	f800283a 	ret

00025c30 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   25c30:	defffe04 	addi	sp,sp,-8
   25c34:	df000115 	stw	fp,4(sp)
   25c38:	df000104 	addi	fp,sp,4
   25c3c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   25c40:	e0bfff17 	ldw	r2,-4(fp)
   25c44:	10bffe84 	addi	r2,r2,-6
   25c48:	10c00428 	cmpgeui	r3,r2,16
   25c4c:	18001a1e 	bne	r3,zero,25cb8 <alt_exception_cause_generated_bad_addr+0x88>
   25c50:	100690ba 	slli	r3,r2,2
   25c54:	008000b4 	movhi	r2,2
   25c58:	10971a04 	addi	r2,r2,23656
   25c5c:	1885883a 	add	r2,r3,r2
   25c60:	10800017 	ldw	r2,0(r2)
   25c64:	1000683a 	jmp	r2
   25c68:	00025ca8 	cmpgeui	zero,zero,2418
   25c6c:	00025ca8 	cmpgeui	zero,zero,2418
   25c70:	00025cb8 	rdprs	zero,zero,2418
   25c74:	00025cb8 	rdprs	zero,zero,2418
   25c78:	00025cb8 	rdprs	zero,zero,2418
   25c7c:	00025ca8 	cmpgeui	zero,zero,2418
   25c80:	00025cb0 	cmpltui	zero,zero,2418
   25c84:	00025cb8 	rdprs	zero,zero,2418
   25c88:	00025ca8 	cmpgeui	zero,zero,2418
   25c8c:	00025ca8 	cmpgeui	zero,zero,2418
   25c90:	00025cb8 	rdprs	zero,zero,2418
   25c94:	00025ca8 	cmpgeui	zero,zero,2418
   25c98:	00025cb0 	cmpltui	zero,zero,2418
   25c9c:	00025cb8 	rdprs	zero,zero,2418
   25ca0:	00025cb8 	rdprs	zero,zero,2418
   25ca4:	00025ca8 	cmpgeui	zero,zero,2418
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   25ca8:	00800044 	movi	r2,1
   25cac:	00000306 	br	25cbc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   25cb0:	0005883a 	mov	r2,zero
   25cb4:	00000106 	br	25cbc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   25cb8:	0005883a 	mov	r2,zero
  }
}
   25cbc:	e037883a 	mov	sp,fp
   25cc0:	df000017 	ldw	fp,0(sp)
   25cc4:	dec00104 	addi	sp,sp,4
   25cc8:	f800283a 	ret

00025ccc <atexit>:
   25ccc:	200b883a 	mov	r5,r4
   25cd0:	000d883a 	mov	r6,zero
   25cd4:	0009883a 	mov	r4,zero
   25cd8:	000f883a 	mov	r7,zero
   25cdc:	00260541 	jmpi	26054 <__register_exitproc>

00025ce0 <exit>:
   25ce0:	defffe04 	addi	sp,sp,-8
   25ce4:	000b883a 	mov	r5,zero
   25ce8:	dc000015 	stw	r16,0(sp)
   25cec:	dfc00115 	stw	ra,4(sp)
   25cf0:	2021883a 	mov	r16,r4
   25cf4:	00261680 	call	26168 <__call_exitprocs>
   25cf8:	008000b4 	movhi	r2,2
   25cfc:	109fa104 	addi	r2,r2,32388
   25d00:	11000017 	ldw	r4,0(r2)
   25d04:	20800f17 	ldw	r2,60(r4)
   25d08:	10000126 	beq	r2,zero,25d10 <exit+0x30>
   25d0c:	103ee83a 	callr	r2
   25d10:	8009883a 	mov	r4,r16
   25d14:	00262fc0 	call	262fc <_exit>

00025d18 <memcmp>:
   25d18:	01c000c4 	movi	r7,3
   25d1c:	3980192e 	bgeu	r7,r6,25d84 <memcmp+0x6c>
   25d20:	2144b03a 	or	r2,r4,r5
   25d24:	11c4703a 	and	r2,r2,r7
   25d28:	10000f26 	beq	r2,zero,25d68 <memcmp+0x50>
   25d2c:	20800003 	ldbu	r2,0(r4)
   25d30:	28c00003 	ldbu	r3,0(r5)
   25d34:	10c0151e 	bne	r2,r3,25d8c <memcmp+0x74>
   25d38:	31bfff84 	addi	r6,r6,-2
   25d3c:	01ffffc4 	movi	r7,-1
   25d40:	00000406 	br	25d54 <memcmp+0x3c>
   25d44:	20800003 	ldbu	r2,0(r4)
   25d48:	28c00003 	ldbu	r3,0(r5)
   25d4c:	31bfffc4 	addi	r6,r6,-1
   25d50:	10c00e1e 	bne	r2,r3,25d8c <memcmp+0x74>
   25d54:	21000044 	addi	r4,r4,1
   25d58:	29400044 	addi	r5,r5,1
   25d5c:	31fff91e 	bne	r6,r7,25d44 <memcmp+0x2c>
   25d60:	0005883a 	mov	r2,zero
   25d64:	f800283a 	ret
   25d68:	20c00017 	ldw	r3,0(r4)
   25d6c:	28800017 	ldw	r2,0(r5)
   25d70:	1880041e 	bne	r3,r2,25d84 <memcmp+0x6c>
   25d74:	31bfff04 	addi	r6,r6,-4
   25d78:	21000104 	addi	r4,r4,4
   25d7c:	29400104 	addi	r5,r5,4
   25d80:	39bff936 	bltu	r7,r6,25d68 <memcmp+0x50>
   25d84:	303fe91e 	bne	r6,zero,25d2c <memcmp+0x14>
   25d88:	003ff506 	br	25d60 <memcmp+0x48>
   25d8c:	10c5c83a 	sub	r2,r2,r3
   25d90:	f800283a 	ret

00025d94 <_putc_r>:
   25d94:	defffc04 	addi	sp,sp,-16
   25d98:	dc000215 	stw	r16,8(sp)
   25d9c:	dfc00315 	stw	ra,12(sp)
   25da0:	2021883a 	mov	r16,r4
   25da4:	20000226 	beq	r4,zero,25db0 <_putc_r+0x1c>
   25da8:	20800e17 	ldw	r2,56(r4)
   25dac:	10001b26 	beq	r2,zero,25e1c <_putc_r+0x88>
   25db0:	30800217 	ldw	r2,8(r6)
   25db4:	10bfffc4 	addi	r2,r2,-1
   25db8:	30800215 	stw	r2,8(r6)
   25dbc:	10000a16 	blt	r2,zero,25de8 <_putc_r+0x54>
   25dc0:	30800017 	ldw	r2,0(r6)
   25dc4:	11400005 	stb	r5,0(r2)
   25dc8:	30800017 	ldw	r2,0(r6)
   25dcc:	10c00044 	addi	r3,r2,1
   25dd0:	30c00015 	stw	r3,0(r6)
   25dd4:	10800003 	ldbu	r2,0(r2)
   25dd8:	dfc00317 	ldw	ra,12(sp)
   25ddc:	dc000217 	ldw	r16,8(sp)
   25de0:	dec00404 	addi	sp,sp,16
   25de4:	f800283a 	ret
   25de8:	30c00617 	ldw	r3,24(r6)
   25dec:	10c00616 	blt	r2,r3,25e08 <_putc_r+0x74>
   25df0:	30800017 	ldw	r2,0(r6)
   25df4:	00c00284 	movi	r3,10
   25df8:	11400005 	stb	r5,0(r2)
   25dfc:	30800017 	ldw	r2,0(r6)
   25e00:	11400003 	ldbu	r5,0(r2)
   25e04:	28fff11e 	bne	r5,r3,25dcc <_putc_r+0x38>
   25e08:	8009883a 	mov	r4,r16
   25e0c:	dfc00317 	ldw	ra,12(sp)
   25e10:	dc000217 	ldw	r16,8(sp)
   25e14:	dec00404 	addi	sp,sp,16
   25e18:	0025f001 	jmpi	25f00 <__swbuf_r>
   25e1c:	d9400015 	stw	r5,0(sp)
   25e20:	d9800115 	stw	r6,4(sp)
   25e24:	00221d80 	call	221d8 <__sinit>
   25e28:	d9800117 	ldw	r6,4(sp)
   25e2c:	d9400017 	ldw	r5,0(sp)
   25e30:	003fdf06 	br	25db0 <_putc_r+0x1c>

00025e34 <putc>:
   25e34:	008000b4 	movhi	r2,2
   25e38:	defffc04 	addi	sp,sp,-16
   25e3c:	109fa204 	addi	r2,r2,32392
   25e40:	dc400115 	stw	r17,4(sp)
   25e44:	14400017 	ldw	r17,0(r2)
   25e48:	dc800215 	stw	r18,8(sp)
   25e4c:	dc000015 	stw	r16,0(sp)
   25e50:	dfc00315 	stw	ra,12(sp)
   25e54:	2025883a 	mov	r18,r4
   25e58:	2821883a 	mov	r16,r5
   25e5c:	88000226 	beq	r17,zero,25e68 <putc+0x34>
   25e60:	88800e17 	ldw	r2,56(r17)
   25e64:	10001a26 	beq	r2,zero,25ed0 <putc+0x9c>
   25e68:	80800217 	ldw	r2,8(r16)
   25e6c:	10bfffc4 	addi	r2,r2,-1
   25e70:	80800215 	stw	r2,8(r16)
   25e74:	10000c16 	blt	r2,zero,25ea8 <putc+0x74>
   25e78:	80800017 	ldw	r2,0(r16)
   25e7c:	14800005 	stb	r18,0(r2)
   25e80:	80800017 	ldw	r2,0(r16)
   25e84:	10c00044 	addi	r3,r2,1
   25e88:	80c00015 	stw	r3,0(r16)
   25e8c:	10800003 	ldbu	r2,0(r2)
   25e90:	dfc00317 	ldw	ra,12(sp)
   25e94:	dc800217 	ldw	r18,8(sp)
   25e98:	dc400117 	ldw	r17,4(sp)
   25e9c:	dc000017 	ldw	r16,0(sp)
   25ea0:	dec00404 	addi	sp,sp,16
   25ea4:	f800283a 	ret
   25ea8:	80c00617 	ldw	r3,24(r16)
   25eac:	10c00b16 	blt	r2,r3,25edc <putc+0xa8>
   25eb0:	80800017 	ldw	r2,0(r16)
   25eb4:	00c00284 	movi	r3,10
   25eb8:	14800005 	stb	r18,0(r2)
   25ebc:	80800017 	ldw	r2,0(r16)
   25ec0:	11400003 	ldbu	r5,0(r2)
   25ec4:	28ffef1e 	bne	r5,r3,25e84 <putc+0x50>
   25ec8:	8809883a 	mov	r4,r17
   25ecc:	00000506 	br	25ee4 <putc+0xb0>
   25ed0:	8809883a 	mov	r4,r17
   25ed4:	00221d80 	call	221d8 <__sinit>
   25ed8:	003fe306 	br	25e68 <putc+0x34>
   25edc:	8809883a 	mov	r4,r17
   25ee0:	900b883a 	mov	r5,r18
   25ee4:	800d883a 	mov	r6,r16
   25ee8:	dfc00317 	ldw	ra,12(sp)
   25eec:	dc800217 	ldw	r18,8(sp)
   25ef0:	dc400117 	ldw	r17,4(sp)
   25ef4:	dc000017 	ldw	r16,0(sp)
   25ef8:	dec00404 	addi	sp,sp,16
   25efc:	0025f001 	jmpi	25f00 <__swbuf_r>

00025f00 <__swbuf_r>:
   25f00:	defffc04 	addi	sp,sp,-16
   25f04:	dc800215 	stw	r18,8(sp)
   25f08:	dc400115 	stw	r17,4(sp)
   25f0c:	dc000015 	stw	r16,0(sp)
   25f10:	dfc00315 	stw	ra,12(sp)
   25f14:	2025883a 	mov	r18,r4
   25f18:	2823883a 	mov	r17,r5
   25f1c:	3021883a 	mov	r16,r6
   25f20:	20000226 	beq	r4,zero,25f2c <__swbuf_r+0x2c>
   25f24:	20800e17 	ldw	r2,56(r4)
   25f28:	10004126 	beq	r2,zero,26030 <__swbuf_r+0x130>
   25f2c:	80c00617 	ldw	r3,24(r16)
   25f30:	8180030b 	ldhu	r6,12(r16)
   25f34:	80c00215 	stw	r3,8(r16)
   25f38:	30c0020c 	andi	r3,r6,8
   25f3c:	18003526 	beq	r3,zero,26014 <__swbuf_r+0x114>
   25f40:	80c00417 	ldw	r3,16(r16)
   25f44:	18003326 	beq	r3,zero,26014 <__swbuf_r+0x114>
   25f48:	3088000c 	andi	r2,r6,8192
   25f4c:	8c403fcc 	andi	r17,r17,255
   25f50:	10001726 	beq	r2,zero,25fb0 <__swbuf_r+0xb0>
   25f54:	80800017 	ldw	r2,0(r16)
   25f58:	81000517 	ldw	r4,20(r16)
   25f5c:	10c7c83a 	sub	r3,r2,r3
   25f60:	19001d0e 	bge	r3,r4,25fd8 <__swbuf_r+0xd8>
   25f64:	18c00044 	addi	r3,r3,1
   25f68:	81400217 	ldw	r5,8(r16)
   25f6c:	11000044 	addi	r4,r2,1
   25f70:	81000015 	stw	r4,0(r16)
   25f74:	297fffc4 	addi	r5,r5,-1
   25f78:	81400215 	stw	r5,8(r16)
   25f7c:	14400005 	stb	r17,0(r2)
   25f80:	80800517 	ldw	r2,20(r16)
   25f84:	10c01d26 	beq	r2,r3,25ffc <__swbuf_r+0xfc>
   25f88:	8080030b 	ldhu	r2,12(r16)
   25f8c:	1080004c 	andi	r2,r2,1
   25f90:	1000181e 	bne	r2,zero,25ff4 <__swbuf_r+0xf4>
   25f94:	8805883a 	mov	r2,r17
   25f98:	dfc00317 	ldw	ra,12(sp)
   25f9c:	dc800217 	ldw	r18,8(sp)
   25fa0:	dc400117 	ldw	r17,4(sp)
   25fa4:	dc000017 	ldw	r16,0(sp)
   25fa8:	dec00404 	addi	sp,sp,16
   25fac:	f800283a 	ret
   25fb0:	81001917 	ldw	r4,100(r16)
   25fb4:	00b7ffc4 	movi	r2,-8193
   25fb8:	31880014 	ori	r6,r6,8192
   25fbc:	2084703a 	and	r2,r4,r2
   25fc0:	80801915 	stw	r2,100(r16)
   25fc4:	80800017 	ldw	r2,0(r16)
   25fc8:	81000517 	ldw	r4,20(r16)
   25fcc:	8180030d 	sth	r6,12(r16)
   25fd0:	10c7c83a 	sub	r3,r2,r3
   25fd4:	193fe316 	blt	r3,r4,25f64 <__swbuf_r+0x64>
   25fd8:	9009883a 	mov	r4,r18
   25fdc:	800b883a 	mov	r5,r16
   25fe0:	0021dfc0 	call	21dfc <_fflush_r>
   25fe4:	1000091e 	bne	r2,zero,2600c <__swbuf_r+0x10c>
   25fe8:	80800017 	ldw	r2,0(r16)
   25fec:	00c00044 	movi	r3,1
   25ff0:	003fdd06 	br	25f68 <__swbuf_r+0x68>
   25ff4:	00800284 	movi	r2,10
   25ff8:	88bfe61e 	bne	r17,r2,25f94 <__swbuf_r+0x94>
   25ffc:	9009883a 	mov	r4,r18
   26000:	800b883a 	mov	r5,r16
   26004:	0021dfc0 	call	21dfc <_fflush_r>
   26008:	103fe226 	beq	r2,zero,25f94 <__swbuf_r+0x94>
   2600c:	00bfffc4 	movi	r2,-1
   26010:	003fe106 	br	25f98 <__swbuf_r+0x98>
   26014:	9009883a 	mov	r4,r18
   26018:	800b883a 	mov	r5,r16
   2601c:	0021aa00 	call	21aa0 <__swsetup_r>
   26020:	103ffa1e 	bne	r2,zero,2600c <__swbuf_r+0x10c>
   26024:	8180030b 	ldhu	r6,12(r16)
   26028:	80c00417 	ldw	r3,16(r16)
   2602c:	003fc606 	br	25f48 <__swbuf_r+0x48>
   26030:	00221d80 	call	221d8 <__sinit>
   26034:	003fbd06 	br	25f2c <__swbuf_r+0x2c>

00026038 <__swbuf>:
   26038:	00c000b4 	movhi	r3,2
   2603c:	18dfa204 	addi	r3,r3,32392
   26040:	2005883a 	mov	r2,r4
   26044:	19000017 	ldw	r4,0(r3)
   26048:	280d883a 	mov	r6,r5
   2604c:	100b883a 	mov	r5,r2
   26050:	0025f001 	jmpi	25f00 <__swbuf_r>

00026054 <__register_exitproc>:
   26054:	008000b4 	movhi	r2,2
   26058:	defffa04 	addi	sp,sp,-24
   2605c:	109fa104 	addi	r2,r2,32388
   26060:	dc000315 	stw	r16,12(sp)
   26064:	14000017 	ldw	r16,0(r2)
   26068:	dc400415 	stw	r17,16(sp)
   2606c:	dfc00515 	stw	ra,20(sp)
   26070:	80805217 	ldw	r2,328(r16)
   26074:	2023883a 	mov	r17,r4
   26078:	10003626 	beq	r2,zero,26154 <__register_exitproc+0x100>
   2607c:	10c00117 	ldw	r3,4(r2)
   26080:	010007c4 	movi	r4,31
   26084:	20c00e16 	blt	r4,r3,260c0 <__register_exitproc+0x6c>
   26088:	1a400044 	addi	r9,r3,1
   2608c:	8800211e 	bne	r17,zero,26114 <__register_exitproc+0xc0>
   26090:	18c00084 	addi	r3,r3,2
   26094:	18c7883a 	add	r3,r3,r3
   26098:	18c7883a 	add	r3,r3,r3
   2609c:	12400115 	stw	r9,4(r2)
   260a0:	10c7883a 	add	r3,r2,r3
   260a4:	19400015 	stw	r5,0(r3)
   260a8:	0005883a 	mov	r2,zero
   260ac:	dfc00517 	ldw	ra,20(sp)
   260b0:	dc400417 	ldw	r17,16(sp)
   260b4:	dc000317 	ldw	r16,12(sp)
   260b8:	dec00604 	addi	sp,sp,24
   260bc:	f800283a 	ret
   260c0:	00800034 	movhi	r2,0
   260c4:	10800004 	addi	r2,r2,0
   260c8:	10002526 	beq	r2,zero,26160 <__register_exitproc+0x10c>
   260cc:	01006404 	movi	r4,400
   260d0:	d9400015 	stw	r5,0(sp)
   260d4:	d9800115 	stw	r6,4(sp)
   260d8:	d9c00215 	stw	r7,8(sp)
   260dc:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   260e0:	d9400017 	ldw	r5,0(sp)
   260e4:	d9800117 	ldw	r6,4(sp)
   260e8:	d9c00217 	ldw	r7,8(sp)
   260ec:	10001c26 	beq	r2,zero,26160 <__register_exitproc+0x10c>
   260f0:	80c05217 	ldw	r3,328(r16)
   260f4:	10000115 	stw	zero,4(r2)
   260f8:	02400044 	movi	r9,1
   260fc:	10c00015 	stw	r3,0(r2)
   26100:	80805215 	stw	r2,328(r16)
   26104:	10006215 	stw	zero,392(r2)
   26108:	10006315 	stw	zero,396(r2)
   2610c:	0007883a 	mov	r3,zero
   26110:	883fdf26 	beq	r17,zero,26090 <__register_exitproc+0x3c>
   26114:	18d1883a 	add	r8,r3,r3
   26118:	4211883a 	add	r8,r8,r8
   2611c:	1211883a 	add	r8,r2,r8
   26120:	41802215 	stw	r6,136(r8)
   26124:	01000044 	movi	r4,1
   26128:	11806217 	ldw	r6,392(r2)
   2612c:	20c8983a 	sll	r4,r4,r3
   26130:	310cb03a 	or	r6,r6,r4
   26134:	11806215 	stw	r6,392(r2)
   26138:	41c04215 	stw	r7,264(r8)
   2613c:	01800084 	movi	r6,2
   26140:	89bfd31e 	bne	r17,r6,26090 <__register_exitproc+0x3c>
   26144:	11806317 	ldw	r6,396(r2)
   26148:	3108b03a 	or	r4,r6,r4
   2614c:	11006315 	stw	r4,396(r2)
   26150:	003fcf06 	br	26090 <__register_exitproc+0x3c>
   26154:	80805304 	addi	r2,r16,332
   26158:	80805215 	stw	r2,328(r16)
   2615c:	003fc706 	br	2607c <__register_exitproc+0x28>
   26160:	00bfffc4 	movi	r2,-1
   26164:	003fd106 	br	260ac <__register_exitproc+0x58>

00026168 <__call_exitprocs>:
   26168:	008000b4 	movhi	r2,2
   2616c:	109fa104 	addi	r2,r2,32388
   26170:	10800017 	ldw	r2,0(r2)
   26174:	defff404 	addi	sp,sp,-48
   26178:	dd800815 	stw	r22,32(sp)
   2617c:	d8800015 	stw	r2,0(sp)
   26180:	10805204 	addi	r2,r2,328
   26184:	dd000615 	stw	r20,24(sp)
   26188:	dc800415 	stw	r18,16(sp)
   2618c:	dfc00b15 	stw	ra,44(sp)
   26190:	df000a15 	stw	fp,40(sp)
   26194:	ddc00915 	stw	r23,36(sp)
   26198:	dd400715 	stw	r21,28(sp)
   2619c:	dcc00515 	stw	r19,20(sp)
   261a0:	dc400315 	stw	r17,12(sp)
   261a4:	dc000215 	stw	r16,8(sp)
   261a8:	2025883a 	mov	r18,r4
   261ac:	2829883a 	mov	r20,r5
   261b0:	d8800115 	stw	r2,4(sp)
   261b4:	05bfffc4 	movi	r22,-1
   261b8:	d8800017 	ldw	r2,0(sp)
   261bc:	14c05217 	ldw	r19,328(r2)
   261c0:	98001d26 	beq	r19,zero,26238 <__call_exitprocs+0xd0>
   261c4:	dd400117 	ldw	r21,4(sp)
   261c8:	98800117 	ldw	r2,4(r19)
   261cc:	173fffc4 	addi	fp,r2,-1
   261d0:	e0000d16 	blt	fp,zero,26208 <__call_exitprocs+0xa0>
   261d4:	14000044 	addi	r16,r2,1
   261d8:	8421883a 	add	r16,r16,r16
   261dc:	8421883a 	add	r16,r16,r16
   261e0:	84402004 	addi	r17,r16,128
   261e4:	9c63883a 	add	r17,r19,r17
   261e8:	9c21883a 	add	r16,r19,r16
   261ec:	a0001e26 	beq	r20,zero,26268 <__call_exitprocs+0x100>
   261f0:	80804017 	ldw	r2,256(r16)
   261f4:	15001c26 	beq	r2,r20,26268 <__call_exitprocs+0x100>
   261f8:	e73fffc4 	addi	fp,fp,-1
   261fc:	843fff04 	addi	r16,r16,-4
   26200:	8c7fff04 	addi	r17,r17,-4
   26204:	e5bff91e 	bne	fp,r22,261ec <__call_exitprocs+0x84>
   26208:	00800034 	movhi	r2,0
   2620c:	10800004 	addi	r2,r2,0
   26210:	10000926 	beq	r2,zero,26238 <__call_exitprocs+0xd0>
   26214:	98800117 	ldw	r2,4(r19)
   26218:	1000311e 	bne	r2,zero,262e0 <__call_exitprocs+0x178>
   2621c:	98800017 	ldw	r2,0(r19)
   26220:	10003426 	beq	r2,zero,262f4 <__call_exitprocs+0x18c>
   26224:	9809883a 	mov	r4,r19
   26228:	a8800015 	stw	r2,0(r21)
   2622c:	00000000 	call	0 <__alt_mem_onchip_memory2-0x20000>
   26230:	acc00017 	ldw	r19,0(r21)
   26234:	983fe41e 	bne	r19,zero,261c8 <__call_exitprocs+0x60>
   26238:	dfc00b17 	ldw	ra,44(sp)
   2623c:	df000a17 	ldw	fp,40(sp)
   26240:	ddc00917 	ldw	r23,36(sp)
   26244:	dd800817 	ldw	r22,32(sp)
   26248:	dd400717 	ldw	r21,28(sp)
   2624c:	dd000617 	ldw	r20,24(sp)
   26250:	dcc00517 	ldw	r19,20(sp)
   26254:	dc800417 	ldw	r18,16(sp)
   26258:	dc400317 	ldw	r17,12(sp)
   2625c:	dc000217 	ldw	r16,8(sp)
   26260:	dec00c04 	addi	sp,sp,48
   26264:	f800283a 	ret
   26268:	98800117 	ldw	r2,4(r19)
   2626c:	80c00017 	ldw	r3,0(r16)
   26270:	10bfffc4 	addi	r2,r2,-1
   26274:	17001526 	beq	r2,fp,262cc <__call_exitprocs+0x164>
   26278:	80000015 	stw	zero,0(r16)
   2627c:	183fde26 	beq	r3,zero,261f8 <__call_exitprocs+0x90>
   26280:	00800044 	movi	r2,1
   26284:	1708983a 	sll	r4,r2,fp
   26288:	98806217 	ldw	r2,392(r19)
   2628c:	9dc00117 	ldw	r23,4(r19)
   26290:	2084703a 	and	r2,r4,r2
   26294:	1000061e 	bne	r2,zero,262b0 <__call_exitprocs+0x148>
   26298:	183ee83a 	callr	r3
   2629c:	98800117 	ldw	r2,4(r19)
   262a0:	15ffc51e 	bne	r2,r23,261b8 <__call_exitprocs+0x50>
   262a4:	a8800017 	ldw	r2,0(r21)
   262a8:	14ffd326 	beq	r2,r19,261f8 <__call_exitprocs+0x90>
   262ac:	003fc206 	br	261b8 <__call_exitprocs+0x50>
   262b0:	98806317 	ldw	r2,396(r19)
   262b4:	2084703a 	and	r2,r4,r2
   262b8:	1000061e 	bne	r2,zero,262d4 <__call_exitprocs+0x16c>
   262bc:	89400017 	ldw	r5,0(r17)
   262c0:	9009883a 	mov	r4,r18
   262c4:	183ee83a 	callr	r3
   262c8:	003ff406 	br	2629c <__call_exitprocs+0x134>
   262cc:	9f000115 	stw	fp,4(r19)
   262d0:	003fea06 	br	2627c <__call_exitprocs+0x114>
   262d4:	89000017 	ldw	r4,0(r17)
   262d8:	183ee83a 	callr	r3
   262dc:	003fef06 	br	2629c <__call_exitprocs+0x134>
   262e0:	98800017 	ldw	r2,0(r19)
   262e4:	982b883a 	mov	r21,r19
   262e8:	1027883a 	mov	r19,r2
   262ec:	983fb61e 	bne	r19,zero,261c8 <__call_exitprocs+0x60>
   262f0:	003fd106 	br	26238 <__call_exitprocs+0xd0>
   262f4:	0005883a 	mov	r2,zero
   262f8:	003ffa06 	br	262e4 <__call_exitprocs+0x17c>

000262fc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   262fc:	defffd04 	addi	sp,sp,-12
   26300:	df000215 	stw	fp,8(sp)
   26304:	df000204 	addi	fp,sp,8
   26308:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2630c:	0001883a 	nop
   26310:	e0bfff17 	ldw	r2,-4(fp)
   26314:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   26318:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2631c:	10000226 	beq	r2,zero,26328 <_exit+0x2c>
    ALT_SIM_FAIL();
   26320:	002af070 	cmpltui	zero,zero,43969
   26324:	00000106 	br	2632c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   26328:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2632c:	003fff06 	br	2632c <_exit+0x30>
