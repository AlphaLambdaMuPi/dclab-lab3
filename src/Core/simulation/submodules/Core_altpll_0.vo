//IP Functional Simulation Model
//VERSION_BEGIN 15.1 cbx_mgl 2015:10:21:19:02:34:SJ cbx_simgen 2015:10:14:18:59:15:SJ  VERSION_END
// synthesis VERILOG_INPUT_VERSION VERILOG_2001
// altera message_off 10463



// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// You may only use these simulation model output files for simulation
// purposes and expressly not for synthesis or any other purposes (in which
// event Altera disclaims all warranties of any kind).


//synopsys translate_off

//synthesis_resources = cycloneive_pll 1 lut 6 
`timescale 1 ps / 1 ps
module  Core_altpll_0
	( 
	address,
	areset,
	c0,
	clk,
	locked,
	phasedone,
	read,
	readdata,
	reset,
	write,
	writedata) /* synthesis synthesis_clearbox=1 */;
	input   [1:0]  address;
	input   areset;
	output   c0;
	input   clk;
	output   locked;
	output   phasedone;
	input   read;
	output   [31:0]  readdata;
	input   reset;
	input   write;
	input   [31:0]  writedata;

	wire  [4:0]   wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146_clk;
	wire  wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146_fbout;
	wire  wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146_locked;
	reg	core_altpll_0_core_altpll_0_altpll_g542_sd1_pll_lock_sync_123q;
	reg	core_altpll_0_pfdena_reg_7q;
	reg	core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe4a_0_115q;
	reg	core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe5a_0_118q;
	reg	core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe6a_0_116q;
	reg	core_altpll_0_prev_reset_5q;
	wire  s_wire_core_altpll_0_comb_4_dataout;
	wire  s_wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_locked_126_dataout;
	wire  s_wire_core_altpll_0_w_select_control_18_dataout;
	wire  s_wire_core_altpll_0_w_select_status_21_dataout;
	wire  s_wire_core_altpll_0_wire_pfdena_reg_ena_16_dataout;
	wire  s_wire_vcc;

	cycloneive_pll   core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146
	( 
	.activeclock(),
	.areset(s_wire_core_altpll_0_comb_4_dataout),
	.clk(wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146_clk),
	.clkbad(),
	.fbin(wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146_fbout),
	.fbout(wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146_fbout),
	.inclk({1'b0, clk}),
	.locked(wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146_locked),
	.phasedone(),
	.scandataout(),
	.scandone(),
	.vcooverrange(),
	.vcounderrange(),
	.clkswitch(),
	.configupdate(),
	.pfdena(),
	.phasecounterselect(),
	.phasestep(),
	.phaseupdown(),
	.scanclk(),
	.scanclkena(),
	.scandata()
	);
	defparam
		core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146.bandwidth_type = "auto",
		core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146.clk0_divide_by = 25,
		core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146.clk0_duty_cycle = 50,
		core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146.clk0_multiply_by = 6,
		core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146.clk0_phase_shift = "0",
		core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146.compensate_clock = "clk0",
		core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146.inclk0_input_frequency = 20000,
		core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146.lpm_type = "cycloneive_pll",
		core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146.operation_mode = "normal",
		core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146.pll_type = "auto";
	initial
	begin
		core_altpll_0_core_altpll_0_altpll_g542_sd1_pll_lock_sync_123q = 0;
	end
	always @ ( posedge wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146_locked or  posedge s_wire_core_altpll_0_comb_4_dataout)
	begin
		if (s_wire_core_altpll_0_comb_4_dataout == 1'b1) 
		begin
			core_altpll_0_core_altpll_0_altpll_g542_sd1_pll_lock_sync_123q <= 0;
		end
		else 
		begin
			core_altpll_0_core_altpll_0_altpll_g542_sd1_pll_lock_sync_123q <= s_wire_vcc;
		end
	end
	initial
	begin
		core_altpll_0_pfdena_reg_7q = 0;
	end
	always @ ( posedge clk or  posedge reset)
	begin
		if (reset == 1'b1) 
		begin
			core_altpll_0_pfdena_reg_7q <= 1;
		end
		else if  (s_wire_core_altpll_0_wire_pfdena_reg_ena_16_dataout == 1'b1) 
		begin
			core_altpll_0_pfdena_reg_7q <= writedata[1];
		end
	end
	event core_altpll_0_pfdena_reg_7q_event;
	initial
		#1 ->core_altpll_0_pfdena_reg_7q_event;
	always @(core_altpll_0_pfdena_reg_7q_event)
		core_altpll_0_pfdena_reg_7q <= 1;
	initial
	begin
		core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe4a_0_115q = 0;
		core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe5a_0_118q = 0;
		core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe6a_0_116q = 0;
		core_altpll_0_prev_reset_5q = 0;
	end
	always @ ( posedge clk or  posedge reset)
	begin
		if (reset == 1'b1) 
		begin
			core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe4a_0_115q <= 0;
			core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe5a_0_118q <= 0;
			core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe6a_0_116q <= 0;
			core_altpll_0_prev_reset_5q <= 0;
		end
		else 
		begin
			core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe4a_0_115q <= s_wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_locked_126_dataout;
			core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe5a_0_118q <= core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe4a_0_115q;
			core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe6a_0_116q <= core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe5a_0_118q;
			core_altpll_0_prev_reset_5q <= (s_wire_core_altpll_0_wire_pfdena_reg_ena_16_dataout & writedata[0]);
		end
	end
	assign
		c0 = wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146_clk[0],
		locked = s_wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_locked_126_dataout,
		phasedone = 1'b0,
		readdata = {{30{1'b0}}, (((core_altpll_0_pfdena_reg_7q & s_wire_core_altpll_0_w_select_control_18_dataout) | s_wire_core_altpll_0_w_select_status_21_dataout) & read), (((core_altpll_0_prev_reset_5q & s_wire_core_altpll_0_w_select_control_18_dataout) | (s_wire_core_altpll_0_w_select_status_21_dataout & core_altpll_0_core_altpll_0_stdsync_sv6_stdsync2_core_altpll_0_dffpipe_l2c_dffpipe3_dffe6a_0_116q)) & read)},
		s_wire_core_altpll_0_comb_4_dataout = (core_altpll_0_prev_reset_5q | areset),
		s_wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_locked_126_dataout = (core_altpll_0_core_altpll_0_altpll_g542_sd1_pll_lock_sync_123q & wire_core_altpll_0_core_altpll_0_altpll_g542_sd1_cycloneive_pll_pll7_146_locked),
		s_wire_core_altpll_0_w_select_control_18_dataout = (address[0] & (~ address[1])),
		s_wire_core_altpll_0_w_select_status_21_dataout = ((~ address[0]) & (~ address[1])),
		s_wire_core_altpll_0_wire_pfdena_reg_ena_16_dataout = (s_wire_core_altpll_0_w_select_control_18_dataout & write),
		s_wire_vcc = 1'b1;
endmodule //Core_altpll_0
//synopsys translate_on
//VALID FILE
